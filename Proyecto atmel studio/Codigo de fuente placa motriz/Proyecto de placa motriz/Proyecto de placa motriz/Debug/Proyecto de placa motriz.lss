
Proyecto de placa motriz.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  000038b6  0000394a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000038b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000037  00800128  00800128  00003972  2**0
                  ALLOC
  3 .stab         00001728  00000000  00000000  00003974  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000762  00000000  00000000  0000509c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000260  00000000  00000000  000057fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000085b  00000000  00000000  00005a5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000021e1  00000000  00000000  000062b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000008b7  00000000  00000000  0000849a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002780  00000000  00000000  00008d51  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000003e0  00000000  00000000  0000b4d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000bd0  00000000  00000000  0000b8b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007c5  00000000  00000000  0000c484  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000029a  00000000  00000000  0000cc49  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000001f0  00000000  00000000  0000cee3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e6 eb       	ldi	r30, 0xB6	; 182
      7c:	f8 e3       	ldi	r31, 0x38	; 56
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a8 32       	cpi	r26, 0x28	; 40
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a8 e2       	ldi	r26, 0x28	; 40
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	af 35       	cpi	r26, 0x5F	; 95
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 02 13 	call	0x2604	; 0x2604 <main>
      9e:	0c 94 59 1c 	jmp	0x38b2	; 0x38b2 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <crc_init>:
 * Calculate the initial crc value.
 *
 * \return     The initial crc value.
 */
static inline crc_t crc_init(void)
{
      a6:	df 93       	push	r29
      a8:	cf 93       	push	r28
      aa:	cd b7       	in	r28, 0x3d	; 61
      ac:	de b7       	in	r29, 0x3e	; 62
    return 0x00;
      ae:	80 e0       	ldi	r24, 0x00	; 0
}
      b0:	cf 91       	pop	r28
      b2:	df 91       	pop	r29
      b4:	08 95       	ret

000000b6 <crc_finalize>:
 *
 * \param[in] crc  The current crc value.
 * \return     The final crc value.
 */
static inline crc_t crc_finalize(crc_t crc)
{
      b6:	df 93       	push	r29
      b8:	cf 93       	push	r28
      ba:	0f 92       	push	r0
      bc:	cd b7       	in	r28, 0x3d	; 61
      be:	de b7       	in	r29, 0x3e	; 62
      c0:	89 83       	std	Y+1, r24	; 0x01
    return crc;
      c2:	89 81       	ldd	r24, Y+1	; 0x01
}
      c4:	0f 90       	pop	r0
      c6:	cf 91       	pop	r28
      c8:	df 91       	pop	r29
      ca:	08 95       	ret

000000cc <initliazeMemory>:
	{ .handlerFunction = &GET_DEVICE_VALUE_H},
	{ .handlerFunction = &MESSAGE_STATUS_H}
};
#define commandListLength (uint8_t)(sizeof commandList/sizeof commandList[0])

bool initliazeMemory(){
      cc:	0f 93       	push	r16
      ce:	1f 93       	push	r17
      d0:	df 93       	push	r29
      d2:	cf 93       	push	r28
      d4:	00 d0       	rcall	.+0      	; 0xd6 <initliazeMemory+0xa>
      d6:	cd b7       	in	r28, 0x3d	; 61
      d8:	de b7       	in	r29, 0x3e	; 62
	if(memoryInitialized) return false;
      da:	80 91 57 01 	lds	r24, 0x0157
      de:	88 23       	and	r24, r24
      e0:	11 f0       	breq	.+4      	; 0xe6 <initliazeMemory+0x1a>
      e2:	80 e0       	ldi	r24, 0x00	; 0
      e4:	6a c0       	rjmp	.+212    	; 0x1ba <initliazeMemory+0xee>
	parameter[0].startingPointer = (void*)calloc(23,1);
      e6:	87 e1       	ldi	r24, 0x17	; 23
      e8:	90 e0       	ldi	r25, 0x00	; 0
      ea:	61 e0       	ldi	r22, 0x01	; 1
      ec:	70 e0       	ldi	r23, 0x00	; 0
      ee:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <calloc>
      f2:	90 93 2e 01 	sts	0x012E, r25
      f6:	80 93 2d 01 	sts	0x012D, r24
	parameter[1].startingPointer = (void*)calloc(2,1);
      fa:	82 e0       	ldi	r24, 0x02	; 2
      fc:	90 e0       	ldi	r25, 0x00	; 0
      fe:	61 e0       	ldi	r22, 0x01	; 1
     100:	70 e0       	ldi	r23, 0x00	; 0
     102:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <calloc>
     106:	90 93 31 01 	sts	0x0131, r25
     10a:	80 93 30 01 	sts	0x0130, r24
	parameter[2].startingPointer = (void*)calloc(2,1);
     10e:	82 e0       	ldi	r24, 0x02	; 2
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	61 e0       	ldi	r22, 0x01	; 1
     114:	70 e0       	ldi	r23, 0x00	; 0
     116:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <calloc>
     11a:	90 93 34 01 	sts	0x0134, r25
     11e:	80 93 33 01 	sts	0x0133, r24
	for (uint8_t x = 3; x<12; x++) parameter[x].startingPointer = (void*)calloc(1,1);
     122:	83 e0       	ldi	r24, 0x03	; 3
     124:	89 83       	std	Y+1, r24	; 0x01
     126:	17 c0       	rjmp	.+46     	; 0x156 <initliazeMemory+0x8a>
     128:	89 81       	ldd	r24, Y+1	; 0x01
     12a:	08 2f       	mov	r16, r24
     12c:	10 e0       	ldi	r17, 0x00	; 0
     12e:	81 e0       	ldi	r24, 0x01	; 1
     130:	90 e0       	ldi	r25, 0x00	; 0
     132:	61 e0       	ldi	r22, 0x01	; 1
     134:	70 e0       	ldi	r23, 0x00	; 0
     136:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <calloc>
     13a:	9c 01       	movw	r18, r24
     13c:	c8 01       	movw	r24, r16
     13e:	88 0f       	add	r24, r24
     140:	99 1f       	adc	r25, r25
     142:	80 0f       	add	r24, r16
     144:	91 1f       	adc	r25, r17
     146:	83 5d       	subi	r24, 0xD3	; 211
     148:	9e 4f       	sbci	r25, 0xFE	; 254
     14a:	fc 01       	movw	r30, r24
     14c:	31 83       	std	Z+1, r19	; 0x01
     14e:	20 83       	st	Z, r18
     150:	89 81       	ldd	r24, Y+1	; 0x01
     152:	8f 5f       	subi	r24, 0xFF	; 255
     154:	89 83       	std	Y+1, r24	; 0x01
     156:	89 81       	ldd	r24, Y+1	; 0x01
     158:	8c 30       	cpi	r24, 0x0C	; 12
     15a:	30 f3       	brcs	.-52     	; 0x128 <initliazeMemory+0x5c>
	command_buffer = (uint8_t*)calloc(32,1);
     15c:	80 e2       	ldi	r24, 0x20	; 32
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	61 e0       	ldi	r22, 0x01	; 1
     162:	70 e0       	ldi	r23, 0x00	; 0
     164:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <calloc>
     168:	90 93 56 01 	sts	0x0156, r25
     16c:	80 93 55 01 	sts	0x0155, r24
	if(command_buffer==NULL) return false;
     170:	80 91 55 01 	lds	r24, 0x0155
     174:	90 91 56 01 	lds	r25, 0x0156
     178:	00 97       	sbiw	r24, 0x00	; 0
     17a:	11 f4       	brne	.+4      	; 0x180 <initliazeMemory+0xb4>
     17c:	80 e0       	ldi	r24, 0x00	; 0
     17e:	1d c0       	rjmp	.+58     	; 0x1ba <initliazeMemory+0xee>
	for (uint8_t x = 0; x<12; x++) { if(parameter[x].startingPointer==NULL) return false; }
     180:	1a 82       	std	Y+2, r1	; 0x02
     182:	14 c0       	rjmp	.+40     	; 0x1ac <initliazeMemory+0xe0>
     184:	8a 81       	ldd	r24, Y+2	; 0x02
     186:	28 2f       	mov	r18, r24
     188:	30 e0       	ldi	r19, 0x00	; 0
     18a:	c9 01       	movw	r24, r18
     18c:	88 0f       	add	r24, r24
     18e:	99 1f       	adc	r25, r25
     190:	82 0f       	add	r24, r18
     192:	93 1f       	adc	r25, r19
     194:	83 5d       	subi	r24, 0xD3	; 211
     196:	9e 4f       	sbci	r25, 0xFE	; 254
     198:	fc 01       	movw	r30, r24
     19a:	80 81       	ld	r24, Z
     19c:	91 81       	ldd	r25, Z+1	; 0x01
     19e:	00 97       	sbiw	r24, 0x00	; 0
     1a0:	11 f4       	brne	.+4      	; 0x1a6 <initliazeMemory+0xda>
     1a2:	80 e0       	ldi	r24, 0x00	; 0
     1a4:	0a c0       	rjmp	.+20     	; 0x1ba <initliazeMemory+0xee>
     1a6:	8a 81       	ldd	r24, Y+2	; 0x02
     1a8:	8f 5f       	subi	r24, 0xFF	; 255
     1aa:	8a 83       	std	Y+2, r24	; 0x02
     1ac:	8a 81       	ldd	r24, Y+2	; 0x02
     1ae:	8c 30       	cpi	r24, 0x0C	; 12
     1b0:	48 f3       	brcs	.-46     	; 0x184 <initliazeMemory+0xb8>
	memoryInitialized = true;
     1b2:	81 e0       	ldi	r24, 0x01	; 1
     1b4:	80 93 57 01 	sts	0x0157, r24
	return true;
     1b8:	81 e0       	ldi	r24, 0x01	; 1
}
     1ba:	0f 90       	pop	r0
     1bc:	0f 90       	pop	r0
     1be:	cf 91       	pop	r28
     1c0:	df 91       	pop	r29
     1c2:	1f 91       	pop	r17
     1c4:	0f 91       	pop	r16
     1c6:	08 95       	ret

000001c8 <DecomposeMessageFromBuffer>:

CommandStatus DecomposeMessageFromBuffer(){
     1c8:	df 93       	push	r29
     1ca:	cf 93       	push	r28
     1cc:	cd b7       	in	r28, 0x3d	; 61
     1ce:	de b7       	in	r29, 0x3e	; 62
     1d0:	29 97       	sbiw	r28, 0x09	; 9
     1d2:	0f b6       	in	r0, 0x3f	; 63
     1d4:	f8 94       	cli
     1d6:	de bf       	out	0x3e, r29	; 62
     1d8:	0f be       	out	0x3f, r0	; 63
     1da:	cd bf       	out	0x3d, r28	; 61
	// Search for header
	uint8_t* headerStart = command_buffer;
     1dc:	80 91 55 01 	lds	r24, 0x0155
     1e0:	90 91 56 01 	lds	r25, 0x0156
     1e4:	9a 83       	std	Y+2, r25	; 0x02
     1e6:	89 83       	std	Y+1, r24	; 0x01
	uint8_t* footerEnd = command_buffer+31;
     1e8:	80 91 55 01 	lds	r24, 0x0155
     1ec:	90 91 56 01 	lds	r25, 0x0156
     1f0:	4f 96       	adiw	r24, 0x1f	; 31
     1f2:	9c 83       	std	Y+4, r25	; 0x04
     1f4:	8b 83       	std	Y+3, r24	; 0x03

	for(;headerStart!=(command_buffer+22);headerStart++){
     1f6:	07 c1       	rjmp	.+526    	; 0x406 <DecomposeMessageFromBuffer+0x23e>
		if (*headerStart==SOH&&(*(headerStart+4)==STX)){
     1f8:	89 81       	ldd	r24, Y+1	; 0x01
     1fa:	9a 81       	ldd	r25, Y+2	; 0x02
     1fc:	fc 01       	movw	r30, r24
     1fe:	80 81       	ld	r24, Z
     200:	81 30       	cpi	r24, 0x01	; 1
     202:	09 f0       	breq	.+2      	; 0x206 <DecomposeMessageFromBuffer+0x3e>
     204:	fb c0       	rjmp	.+502    	; 0x3fc <DecomposeMessageFromBuffer+0x234>
     206:	89 81       	ldd	r24, Y+1	; 0x01
     208:	9a 81       	ldd	r25, Y+2	; 0x02
     20a:	04 96       	adiw	r24, 0x04	; 4
     20c:	fc 01       	movw	r30, r24
     20e:	80 81       	ld	r24, Z
     210:	82 30       	cpi	r24, 0x02	; 2
     212:	09 f0       	breq	.+2      	; 0x216 <DecomposeMessageFromBuffer+0x4e>
     214:	f3 c0       	rjmp	.+486    	; 0x3fc <DecomposeMessageFromBuffer+0x234>
			for(;footerEnd!=(command_buffer+6);footerEnd--){
     216:	e5 c0       	rjmp	.+458    	; 0x3e2 <DecomposeMessageFromBuffer+0x21a>
				if (*footerEnd==ETB&&(*(footerEnd-2)==ETX)){
     218:	8b 81       	ldd	r24, Y+3	; 0x03
     21a:	9c 81       	ldd	r25, Y+4	; 0x04
     21c:	fc 01       	movw	r30, r24
     21e:	80 81       	ld	r24, Z
     220:	87 31       	cpi	r24, 0x17	; 23
     222:	09 f0       	breq	.+2      	; 0x226 <DecomposeMessageFromBuffer+0x5e>
     224:	d9 c0       	rjmp	.+434    	; 0x3d8 <DecomposeMessageFromBuffer+0x210>
     226:	8b 81       	ldd	r24, Y+3	; 0x03
     228:	9c 81       	ldd	r25, Y+4	; 0x04
     22a:	02 97       	sbiw	r24, 0x02	; 2
     22c:	fc 01       	movw	r30, r24
     22e:	80 81       	ld	r24, Z
     230:	83 30       	cpi	r24, 0x03	; 3
     232:	09 f0       	breq	.+2      	; 0x236 <DecomposeMessageFromBuffer+0x6e>
     234:	d1 c0       	rjmp	.+418    	; 0x3d8 <DecomposeMessageFromBuffer+0x210>
					uint8_t netMessageLength = ((footerEnd-2)-headerStart);
     236:	8b 81       	ldd	r24, Y+3	; 0x03
     238:	9c 81       	ldd	r25, Y+4	; 0x04
     23a:	02 97       	sbiw	r24, 0x02	; 2
     23c:	28 2f       	mov	r18, r24
     23e:	89 81       	ldd	r24, Y+1	; 0x01
     240:	9a 81       	ldd	r25, Y+2	; 0x02
     242:	f2 2f       	mov	r31, r18
     244:	f8 1b       	sub	r31, r24
     246:	8f 2f       	mov	r24, r31
     248:	88 87       	std	Y+8, r24	; 0x08
					crc_t crc;
					crc = crc_init();
     24a:	0e 94 53 00 	call	0xa6	; 0xa6 <crc_init>
     24e:	89 87       	std	Y+9, r24	; 0x09
					crc = crc_update(crc, headerStart, netMessageLength);
     250:	88 85       	ldd	r24, Y+8	; 0x08
     252:	28 2f       	mov	r18, r24
     254:	30 e0       	ldi	r19, 0x00	; 0
     256:	49 81       	ldd	r20, Y+1	; 0x01
     258:	5a 81       	ldd	r21, Y+2	; 0x02
     25a:	89 85       	ldd	r24, Y+9	; 0x09
     25c:	ba 01       	movw	r22, r20
     25e:	a9 01       	movw	r20, r18
     260:	0e 94 9a 12 	call	0x2534	; 0x2534 <crc_update>
     264:	89 87       	std	Y+9, r24	; 0x09
					crc = crc_finalize(crc);
     266:	89 85       	ldd	r24, Y+9	; 0x09
     268:	0e 94 5b 00 	call	0xb6	; 0xb6 <crc_finalize>
     26c:	89 87       	std	Y+9, r24	; 0x09
					if (*(footerEnd-1)!=crc) return WRONG_CHECKSUM_CONSISTENCY;
     26e:	8b 81       	ldd	r24, Y+3	; 0x03
     270:	9c 81       	ldd	r25, Y+4	; 0x04
     272:	01 97       	sbiw	r24, 0x01	; 1
     274:	fc 01       	movw	r30, r24
     276:	90 81       	ld	r25, Z
     278:	89 85       	ldd	r24, Y+9	; 0x09
     27a:	98 17       	cp	r25, r24
     27c:	11 f0       	breq	.+4      	; 0x282 <DecomposeMessageFromBuffer+0xba>
     27e:	83 e0       	ldi	r24, 0x03	; 3
     280:	d0 c0       	rjmp	.+416    	; 0x422 <DecomposeMessageFromBuffer+0x25a>
					if (*(headerStart+2)!=currentModuleID&&*(headerStart+2)!=0xFF&&currentModuleID!=0x01) return WRONG_MODULE_ID;
     282:	89 81       	ldd	r24, Y+1	; 0x01
     284:	9a 81       	ldd	r25, Y+2	; 0x02
     286:	02 96       	adiw	r24, 0x02	; 2
     288:	fc 01       	movw	r30, r24
     28a:	80 81       	ld	r24, Z
     28c:	83 30       	cpi	r24, 0x03	; 3
     28e:	49 f0       	breq	.+18     	; 0x2a2 <DecomposeMessageFromBuffer+0xda>
     290:	89 81       	ldd	r24, Y+1	; 0x01
     292:	9a 81       	ldd	r25, Y+2	; 0x02
     294:	02 96       	adiw	r24, 0x02	; 2
     296:	fc 01       	movw	r30, r24
     298:	80 81       	ld	r24, Z
     29a:	8f 3f       	cpi	r24, 0xFF	; 255
     29c:	11 f0       	breq	.+4      	; 0x2a2 <DecomposeMessageFromBuffer+0xda>
     29e:	84 e0       	ldi	r24, 0x04	; 4
     2a0:	c0 c0       	rjmp	.+384    	; 0x422 <DecomposeMessageFromBuffer+0x25a>
					lastTargetModuleID = *(headerStart+2);
     2a2:	89 81       	ldd	r24, Y+1	; 0x01
     2a4:	9a 81       	ldd	r25, Y+2	; 0x02
     2a6:	02 96       	adiw	r24, 0x02	; 2
     2a8:	fc 01       	movw	r30, r24
     2aa:	80 81       	ld	r24, Z
     2ac:	80 93 58 01 	sts	0x0158, r24
					lastTransmitterModuleID = *(headerStart+3);
     2b0:	89 81       	ldd	r24, Y+1	; 0x01
     2b2:	9a 81       	ldd	r25, Y+2	; 0x02
     2b4:	03 96       	adiw	r24, 0x03	; 3
     2b6:	fc 01       	movw	r30, r24
     2b8:	80 81       	ld	r24, Z
     2ba:	80 93 51 01 	sts	0x0151, r24
					if (*(headerStart+5)>commandListLength-1) return UNDEFINED_COMMAND_CODE;
     2be:	89 81       	ldd	r24, Y+1	; 0x01
     2c0:	9a 81       	ldd	r25, Y+2	; 0x02
     2c2:	05 96       	adiw	r24, 0x05	; 5
     2c4:	fc 01       	movw	r30, r24
     2c6:	80 81       	ld	r24, Z
     2c8:	85 30       	cpi	r24, 0x05	; 5
     2ca:	10 f0       	brcs	.+4      	; 0x2d0 <DecomposeMessageFromBuffer+0x108>
     2cc:	85 e0       	ldi	r24, 0x05	; 5
     2ce:	a9 c0       	rjmp	.+338    	; 0x422 <DecomposeMessageFromBuffer+0x25a>
					lastMessageCommandType = commandList[*(headerStart+5)];
     2d0:	89 81       	ldd	r24, Y+1	; 0x01
     2d2:	9a 81       	ldd	r25, Y+2	; 0x02
     2d4:	05 96       	adiw	r24, 0x05	; 5
     2d6:	fc 01       	movw	r30, r24
     2d8:	80 81       	ld	r24, Z
     2da:	88 2f       	mov	r24, r24
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	88 0f       	add	r24, r24
     2e0:	99 1f       	adc	r25, r25
     2e2:	82 5e       	subi	r24, 0xE2	; 226
     2e4:	9e 4f       	sbci	r25, 0xFE	; 254
     2e6:	fc 01       	movw	r30, r24
     2e8:	80 81       	ld	r24, Z
     2ea:	91 81       	ldd	r25, Z+1	; 0x01
     2ec:	90 93 53 01 	sts	0x0153, r25
     2f0:	80 93 52 01 	sts	0x0152, r24
					lastMessagePID = *(headerStart+1);
     2f4:	89 81       	ldd	r24, Y+1	; 0x01
     2f6:	9a 81       	ldd	r25, Y+2	; 0x02
     2f8:	01 96       	adiw	r24, 0x01	; 1
     2fa:	fc 01       	movw	r30, r24
     2fc:	80 81       	ld	r24, Z
     2fe:	80 93 54 01 	sts	0x0154, r24

					uint8_t* parameterStart = headerStart+6;
     302:	89 81       	ldd	r24, Y+1	; 0x01
     304:	9a 81       	ldd	r25, Y+2	; 0x02
     306:	06 96       	adiw	r24, 0x06	; 6
     308:	9e 83       	std	Y+6, r25	; 0x06
     30a:	8d 83       	std	Y+5, r24	; 0x05

					for (uint8_t x = 0; x < 12; x++) {
     30c:	1f 82       	std	Y+7, r1	; 0x07
     30e:	5c c0       	rjmp	.+184    	; 0x3c8 <DecomposeMessageFromBuffer+0x200>
						realloc(parameter[x].startingPointer, *parameterStart);
     310:	8f 81       	ldd	r24, Y+7	; 0x07
     312:	28 2f       	mov	r18, r24
     314:	30 e0       	ldi	r19, 0x00	; 0
     316:	c9 01       	movw	r24, r18
     318:	88 0f       	add	r24, r24
     31a:	99 1f       	adc	r25, r25
     31c:	82 0f       	add	r24, r18
     31e:	93 1f       	adc	r25, r19
     320:	83 5d       	subi	r24, 0xD3	; 211
     322:	9e 4f       	sbci	r25, 0xFE	; 254
     324:	fc 01       	movw	r30, r24
     326:	80 81       	ld	r24, Z
     328:	91 81       	ldd	r25, Z+1	; 0x01
     32a:	2d 81       	ldd	r18, Y+5	; 0x05
     32c:	3e 81       	ldd	r19, Y+6	; 0x06
     32e:	f9 01       	movw	r30, r18
     330:	20 81       	ld	r18, Z
     332:	22 2f       	mov	r18, r18
     334:	30 e0       	ldi	r19, 0x00	; 0
     336:	b9 01       	movw	r22, r18
     338:	0e 94 47 1b 	call	0x368e	; 0x368e <realloc>
						parameter[x].byteLength = *parameterStart;
     33c:	8f 81       	ldd	r24, Y+7	; 0x07
     33e:	28 2f       	mov	r18, r24
     340:	30 e0       	ldi	r19, 0x00	; 0
     342:	8d 81       	ldd	r24, Y+5	; 0x05
     344:	9e 81       	ldd	r25, Y+6	; 0x06
     346:	fc 01       	movw	r30, r24
     348:	40 81       	ld	r20, Z
     34a:	c9 01       	movw	r24, r18
     34c:	88 0f       	add	r24, r24
     34e:	99 1f       	adc	r25, r25
     350:	82 0f       	add	r24, r18
     352:	93 1f       	adc	r25, r19
     354:	81 5d       	subi	r24, 0xD1	; 209
     356:	9e 4f       	sbci	r25, 0xFE	; 254
     358:	fc 01       	movw	r30, r24
     35a:	40 83       	st	Z, r20
						memcpy(parameter[x].startingPointer,parameterStart+1, *parameterStart);
     35c:	8f 81       	ldd	r24, Y+7	; 0x07
     35e:	28 2f       	mov	r18, r24
     360:	30 e0       	ldi	r19, 0x00	; 0
     362:	c9 01       	movw	r24, r18
     364:	88 0f       	add	r24, r24
     366:	99 1f       	adc	r25, r25
     368:	82 0f       	add	r24, r18
     36a:	93 1f       	adc	r25, r19
     36c:	83 5d       	subi	r24, 0xD3	; 211
     36e:	9e 4f       	sbci	r25, 0xFE	; 254
     370:	fc 01       	movw	r30, r24
     372:	80 81       	ld	r24, Z
     374:	91 81       	ldd	r25, Z+1	; 0x01
     376:	2d 81       	ldd	r18, Y+5	; 0x05
     378:	3e 81       	ldd	r19, Y+6	; 0x06
     37a:	a9 01       	movw	r20, r18
     37c:	4f 5f       	subi	r20, 0xFF	; 255
     37e:	5f 4f       	sbci	r21, 0xFF	; 255
     380:	2d 81       	ldd	r18, Y+5	; 0x05
     382:	3e 81       	ldd	r19, Y+6	; 0x06
     384:	f9 01       	movw	r30, r18
     386:	20 81       	ld	r18, Z
     388:	22 2f       	mov	r18, r18
     38a:	30 e0       	ldi	r19, 0x00	; 0
     38c:	ba 01       	movw	r22, r20
     38e:	a9 01       	movw	r20, r18
     390:	0e 94 12 1c 	call	0x3824	; 0x3824 <memcpy>
						parameterStart+=((*parameterStart)+1);
     394:	8d 81       	ldd	r24, Y+5	; 0x05
     396:	9e 81       	ldd	r25, Y+6	; 0x06
     398:	fc 01       	movw	r30, r24
     39a:	80 81       	ld	r24, Z
     39c:	88 2f       	mov	r24, r24
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	01 96       	adiw	r24, 0x01	; 1
     3a2:	2d 81       	ldd	r18, Y+5	; 0x05
     3a4:	3e 81       	ldd	r19, Y+6	; 0x06
     3a6:	82 0f       	add	r24, r18
     3a8:	93 1f       	adc	r25, r19
     3aa:	9e 83       	std	Y+6, r25	; 0x06
     3ac:	8d 83       	std	Y+5, r24	; 0x05
						if (parameterStart>=(footerEnd-2)) break;
     3ae:	8b 81       	ldd	r24, Y+3	; 0x03
     3b0:	9c 81       	ldd	r25, Y+4	; 0x04
     3b2:	9c 01       	movw	r18, r24
     3b4:	22 50       	subi	r18, 0x02	; 2
     3b6:	30 40       	sbci	r19, 0x00	; 0
     3b8:	8d 81       	ldd	r24, Y+5	; 0x05
     3ba:	9e 81       	ldd	r25, Y+6	; 0x06
     3bc:	82 17       	cp	r24, r18
     3be:	93 07       	cpc	r25, r19
     3c0:	40 f4       	brcc	.+16     	; 0x3d2 <DecomposeMessageFromBuffer+0x20a>
					lastMessageCommandType = commandList[*(headerStart+5)];
					lastMessagePID = *(headerStart+1);

					uint8_t* parameterStart = headerStart+6;

					for (uint8_t x = 0; x < 12; x++) {
     3c2:	8f 81       	ldd	r24, Y+7	; 0x07
     3c4:	8f 5f       	subi	r24, 0xFF	; 255
     3c6:	8f 83       	std	Y+7, r24	; 0x07
     3c8:	8f 81       	ldd	r24, Y+7	; 0x07
     3ca:	8c 30       	cpi	r24, 0x0C	; 12
     3cc:	08 f4       	brcc	.+2      	; 0x3d0 <DecomposeMessageFromBuffer+0x208>
     3ce:	a0 cf       	rjmp	.-192    	; 0x310 <DecomposeMessageFromBuffer+0x148>
     3d0:	01 c0       	rjmp	.+2      	; 0x3d4 <DecomposeMessageFromBuffer+0x20c>
						realloc(parameter[x].startingPointer, *parameterStart);
						parameter[x].byteLength = *parameterStart;
						memcpy(parameter[x].startingPointer,parameterStart+1, *parameterStart);
						parameterStart+=((*parameterStart)+1);
						if (parameterStart>=(footerEnd-2)) break;
     3d2:	00 00       	nop
					}

					return SUCCESFUL_DECOMPOSITION;
     3d4:	80 e0       	ldi	r24, 0x00	; 0
     3d6:	25 c0       	rjmp	.+74     	; 0x422 <DecomposeMessageFromBuffer+0x25a>
	uint8_t* headerStart = command_buffer;
	uint8_t* footerEnd = command_buffer+31;

	for(;headerStart!=(command_buffer+22);headerStart++){
		if (*headerStart==SOH&&(*(headerStart+4)==STX)){
			for(;footerEnd!=(command_buffer+6);footerEnd--){
     3d8:	8b 81       	ldd	r24, Y+3	; 0x03
     3da:	9c 81       	ldd	r25, Y+4	; 0x04
     3dc:	01 97       	sbiw	r24, 0x01	; 1
     3de:	9c 83       	std	Y+4, r25	; 0x04
     3e0:	8b 83       	std	Y+3, r24	; 0x03
     3e2:	80 91 55 01 	lds	r24, 0x0155
     3e6:	90 91 56 01 	lds	r25, 0x0156
     3ea:	9c 01       	movw	r18, r24
     3ec:	2a 5f       	subi	r18, 0xFA	; 250
     3ee:	3f 4f       	sbci	r19, 0xFF	; 255
     3f0:	8b 81       	ldd	r24, Y+3	; 0x03
     3f2:	9c 81       	ldd	r25, Y+4	; 0x04
     3f4:	28 17       	cp	r18, r24
     3f6:	39 07       	cpc	r19, r25
     3f8:	09 f0       	breq	.+2      	; 0x3fc <DecomposeMessageFromBuffer+0x234>
     3fa:	0e cf       	rjmp	.-484    	; 0x218 <DecomposeMessageFromBuffer+0x50>
CommandStatus DecomposeMessageFromBuffer(){
	// Search for header
	uint8_t* headerStart = command_buffer;
	uint8_t* footerEnd = command_buffer+31;

	for(;headerStart!=(command_buffer+22);headerStart++){
     3fc:	89 81       	ldd	r24, Y+1	; 0x01
     3fe:	9a 81       	ldd	r25, Y+2	; 0x02
     400:	01 96       	adiw	r24, 0x01	; 1
     402:	9a 83       	std	Y+2, r25	; 0x02
     404:	89 83       	std	Y+1, r24	; 0x01
     406:	80 91 55 01 	lds	r24, 0x0155
     40a:	90 91 56 01 	lds	r25, 0x0156
     40e:	9c 01       	movw	r18, r24
     410:	2a 5e       	subi	r18, 0xEA	; 234
     412:	3f 4f       	sbci	r19, 0xFF	; 255
     414:	89 81       	ldd	r24, Y+1	; 0x01
     416:	9a 81       	ldd	r25, Y+2	; 0x02
     418:	28 17       	cp	r18, r24
     41a:	39 07       	cpc	r19, r25
     41c:	09 f0       	breq	.+2      	; 0x420 <DecomposeMessageFromBuffer+0x258>
     41e:	ec ce       	rjmp	.-552    	; 0x1f8 <DecomposeMessageFromBuffer+0x30>
					return SUCCESFUL_DECOMPOSITION;
				}
			}
		}
	}
	return WRONG_HEADER_SEGMENTATION;
     420:	81 e0       	ldi	r24, 0x01	; 1
}
     422:	29 96       	adiw	r28, 0x09	; 9
     424:	0f b6       	in	r0, 0x3f	; 63
     426:	f8 94       	cli
     428:	de bf       	out	0x3e, r29	; 62
     42a:	0f be       	out	0x3f, r0	; 63
     42c:	cd bf       	out	0x3d, r28	; 61
     42e:	cf 91       	pop	r28
     430:	df 91       	pop	r29
     432:	08 95       	ret

00000434 <HandleAvailableCommand>:

void HandleAvailableCommand(){
     434:	df 93       	push	r29
     436:	cf 93       	push	r28
     438:	cd b7       	in	r28, 0x3d	; 61
     43a:	de b7       	in	r29, 0x3e	; 62
	lastMessageCommandType.handlerFunction();
     43c:	80 91 52 01 	lds	r24, 0x0152
     440:	90 91 53 01 	lds	r25, 0x0153
     444:	fc 01       	movw	r30, r24
     446:	09 95       	icall
}
     448:	cf 91       	pop	r28
     44a:	df 91       	pop	r29
     44c:	08 95       	ret

0000044e <ComposeMessageToBuffer>:

CommandStatus ComposeMessageToBuffer(CommandTypeID targetTypeID, uint8_t parameterCount, uint8_t targetBoardID){
     44e:	df 93       	push	r29
     450:	cf 93       	push	r28
     452:	cd b7       	in	r28, 0x3d	; 61
     454:	de b7       	in	r29, 0x3e	; 62
     456:	28 97       	sbiw	r28, 0x08	; 8
     458:	0f b6       	in	r0, 0x3f	; 63
     45a:	f8 94       	cli
     45c:	de bf       	out	0x3e, r29	; 62
     45e:	0f be       	out	0x3f, r0	; 63
     460:	cd bf       	out	0x3d, r28	; 61
     462:	8e 83       	std	Y+6, r24	; 0x06
     464:	6f 83       	std	Y+7, r22	; 0x07
     466:	48 87       	std	Y+8, r20	; 0x08
	memset(command_buffer, 0, 32);
     468:	80 91 55 01 	lds	r24, 0x0155
     46c:	90 91 56 01 	lds	r25, 0x0156
     470:	60 e0       	ldi	r22, 0x00	; 0
     472:	70 e0       	ldi	r23, 0x00	; 0
     474:	40 e2       	ldi	r20, 0x20	; 32
     476:	50 e0       	ldi	r21, 0x00	; 0
     478:	0e 94 1b 1c 	call	0x3836	; 0x3836 <memset>
	command_buffer[0] = SOH;
     47c:	80 91 55 01 	lds	r24, 0x0155
     480:	90 91 56 01 	lds	r25, 0x0156
     484:	21 e0       	ldi	r18, 0x01	; 1
     486:	fc 01       	movw	r30, r24
     488:	20 83       	st	Z, r18
	if (lastMessagePID==0xFF) { lastMessagePID++; } else { lastMessagePID = 0; }
     48a:	80 91 54 01 	lds	r24, 0x0154
     48e:	8f 3f       	cpi	r24, 0xFF	; 255
     490:	31 f4       	brne	.+12     	; 0x49e <ComposeMessageToBuffer+0x50>
     492:	80 91 54 01 	lds	r24, 0x0154
     496:	8f 5f       	subi	r24, 0xFF	; 255
     498:	80 93 54 01 	sts	0x0154, r24
     49c:	02 c0       	rjmp	.+4      	; 0x4a2 <ComposeMessageToBuffer+0x54>
     49e:	10 92 54 01 	sts	0x0154, r1
	command_buffer[1] = lastMessagePID;
     4a2:	80 91 55 01 	lds	r24, 0x0155
     4a6:	90 91 56 01 	lds	r25, 0x0156
     4aa:	01 96       	adiw	r24, 0x01	; 1
     4ac:	20 91 54 01 	lds	r18, 0x0154
     4b0:	fc 01       	movw	r30, r24
     4b2:	20 83       	st	Z, r18
	command_buffer[2] = targetBoardID;
     4b4:	80 91 55 01 	lds	r24, 0x0155
     4b8:	90 91 56 01 	lds	r25, 0x0156
     4bc:	02 96       	adiw	r24, 0x02	; 2
     4be:	28 85       	ldd	r18, Y+8	; 0x08
     4c0:	fc 01       	movw	r30, r24
     4c2:	20 83       	st	Z, r18
	command_buffer[3] = currentModuleID;
     4c4:	80 91 55 01 	lds	r24, 0x0155
     4c8:	90 91 56 01 	lds	r25, 0x0156
     4cc:	03 96       	adiw	r24, 0x03	; 3
     4ce:	23 e0       	ldi	r18, 0x03	; 3
     4d0:	fc 01       	movw	r30, r24
     4d2:	20 83       	st	Z, r18
	command_buffer[4] = STX;
     4d4:	80 91 55 01 	lds	r24, 0x0155
     4d8:	90 91 56 01 	lds	r25, 0x0156
     4dc:	04 96       	adiw	r24, 0x04	; 4
     4de:	22 e0       	ldi	r18, 0x02	; 2
     4e0:	fc 01       	movw	r30, r24
     4e2:	20 83       	st	Z, r18
	command_buffer[5] = targetTypeID;
     4e4:	80 91 55 01 	lds	r24, 0x0155
     4e8:	90 91 56 01 	lds	r25, 0x0156
     4ec:	05 96       	adiw	r24, 0x05	; 5
     4ee:	2e 81       	ldd	r18, Y+6	; 0x06
     4f0:	fc 01       	movw	r30, r24
     4f2:	20 83       	st	Z, r18

	if (parameterCount>12) return PARAMETER_COUNT_OVERSIZE;
     4f4:	8f 81       	ldd	r24, Y+7	; 0x07
     4f6:	8d 30       	cpi	r24, 0x0D	; 13
     4f8:	10 f0       	brcs	.+4      	; 0x4fe <ComposeMessageToBuffer+0xb0>
     4fa:	87 e0       	ldi	r24, 0x07	; 7
     4fc:	8c c0       	rjmp	.+280    	; 0x616 <ComposeMessageToBuffer+0x1c8>

	uint8_t* parameterStart = &command_buffer[6];
     4fe:	80 91 55 01 	lds	r24, 0x0155
     502:	90 91 56 01 	lds	r25, 0x0156
     506:	06 96       	adiw	r24, 0x06	; 6
     508:	9a 83       	std	Y+2, r25	; 0x02
     50a:	89 83       	std	Y+1, r24	; 0x01

	for (uint8_t x = 0; x < parameterCount; x++){
     50c:	1b 82       	std	Y+3, r1	; 0x03
     50e:	4d c0       	rjmp	.+154    	; 0x5aa <ComposeMessageToBuffer+0x15c>
		*parameterStart = parameter[x].byteLength;
     510:	8b 81       	ldd	r24, Y+3	; 0x03
     512:	28 2f       	mov	r18, r24
     514:	30 e0       	ldi	r19, 0x00	; 0
     516:	c9 01       	movw	r24, r18
     518:	88 0f       	add	r24, r24
     51a:	99 1f       	adc	r25, r25
     51c:	82 0f       	add	r24, r18
     51e:	93 1f       	adc	r25, r19
     520:	81 5d       	subi	r24, 0xD1	; 209
     522:	9e 4f       	sbci	r25, 0xFE	; 254
     524:	fc 01       	movw	r30, r24
     526:	20 81       	ld	r18, Z
     528:	89 81       	ldd	r24, Y+1	; 0x01
     52a:	9a 81       	ldd	r25, Y+2	; 0x02
     52c:	fc 01       	movw	r30, r24
     52e:	20 83       	st	Z, r18
		memcpy(parameterStart+1, parameter[x].startingPointer, parameter[x].byteLength);
     530:	89 81       	ldd	r24, Y+1	; 0x01
     532:	9a 81       	ldd	r25, Y+2	; 0x02
     534:	bc 01       	movw	r22, r24
     536:	6f 5f       	subi	r22, 0xFF	; 255
     538:	7f 4f       	sbci	r23, 0xFF	; 255
     53a:	8b 81       	ldd	r24, Y+3	; 0x03
     53c:	28 2f       	mov	r18, r24
     53e:	30 e0       	ldi	r19, 0x00	; 0
     540:	c9 01       	movw	r24, r18
     542:	88 0f       	add	r24, r24
     544:	99 1f       	adc	r25, r25
     546:	82 0f       	add	r24, r18
     548:	93 1f       	adc	r25, r19
     54a:	83 5d       	subi	r24, 0xD3	; 211
     54c:	9e 4f       	sbci	r25, 0xFE	; 254
     54e:	fc 01       	movw	r30, r24
     550:	40 81       	ld	r20, Z
     552:	51 81       	ldd	r21, Z+1	; 0x01
     554:	8b 81       	ldd	r24, Y+3	; 0x03
     556:	28 2f       	mov	r18, r24
     558:	30 e0       	ldi	r19, 0x00	; 0
     55a:	c9 01       	movw	r24, r18
     55c:	88 0f       	add	r24, r24
     55e:	99 1f       	adc	r25, r25
     560:	82 0f       	add	r24, r18
     562:	93 1f       	adc	r25, r19
     564:	81 5d       	subi	r24, 0xD1	; 209
     566:	9e 4f       	sbci	r25, 0xFE	; 254
     568:	fc 01       	movw	r30, r24
     56a:	80 81       	ld	r24, Z
     56c:	28 2f       	mov	r18, r24
     56e:	30 e0       	ldi	r19, 0x00	; 0
     570:	cb 01       	movw	r24, r22
     572:	ba 01       	movw	r22, r20
     574:	a9 01       	movw	r20, r18
     576:	0e 94 12 1c 	call	0x3824	; 0x3824 <memcpy>
		parameterStart+=(parameter[x].byteLength)+1;
     57a:	8b 81       	ldd	r24, Y+3	; 0x03
     57c:	28 2f       	mov	r18, r24
     57e:	30 e0       	ldi	r19, 0x00	; 0
     580:	c9 01       	movw	r24, r18
     582:	88 0f       	add	r24, r24
     584:	99 1f       	adc	r25, r25
     586:	82 0f       	add	r24, r18
     588:	93 1f       	adc	r25, r19
     58a:	81 5d       	subi	r24, 0xD1	; 209
     58c:	9e 4f       	sbci	r25, 0xFE	; 254
     58e:	fc 01       	movw	r30, r24
     590:	80 81       	ld	r24, Z
     592:	88 2f       	mov	r24, r24
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	01 96       	adiw	r24, 0x01	; 1
     598:	29 81       	ldd	r18, Y+1	; 0x01
     59a:	3a 81       	ldd	r19, Y+2	; 0x02
     59c:	82 0f       	add	r24, r18
     59e:	93 1f       	adc	r25, r19
     5a0:	9a 83       	std	Y+2, r25	; 0x02
     5a2:	89 83       	std	Y+1, r24	; 0x01

	if (parameterCount>12) return PARAMETER_COUNT_OVERSIZE;

	uint8_t* parameterStart = &command_buffer[6];

	for (uint8_t x = 0; x < parameterCount; x++){
     5a4:	8b 81       	ldd	r24, Y+3	; 0x03
     5a6:	8f 5f       	subi	r24, 0xFF	; 255
     5a8:	8b 83       	std	Y+3, r24	; 0x03
     5aa:	9b 81       	ldd	r25, Y+3	; 0x03
     5ac:	8f 81       	ldd	r24, Y+7	; 0x07
     5ae:	98 17       	cp	r25, r24
     5b0:	08 f4       	brcc	.+2      	; 0x5b4 <ComposeMessageToBuffer+0x166>
     5b2:	ae cf       	rjmp	.-164    	; 0x510 <ComposeMessageToBuffer+0xc2>
		memcpy(parameterStart+1, parameter[x].startingPointer, parameter[x].byteLength);
		parameterStart+=(parameter[x].byteLength)+1;
	}

	crc_t crc;
	crc = crc_init();
     5b4:	0e 94 53 00 	call	0xa6	; 0xa6 <crc_init>
     5b8:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t crc_length = ((parameterStart)-(&command_buffer[0]));
     5ba:	89 81       	ldd	r24, Y+1	; 0x01
     5bc:	9a 81       	ldd	r25, Y+2	; 0x02
     5be:	28 2f       	mov	r18, r24
     5c0:	80 91 55 01 	lds	r24, 0x0155
     5c4:	90 91 56 01 	lds	r25, 0x0156
     5c8:	f2 2f       	mov	r31, r18
     5ca:	f8 1b       	sub	r31, r24
     5cc:	8f 2f       	mov	r24, r31
     5ce:	8d 83       	std	Y+5, r24	; 0x05
	crc = crc_update(crc, &command_buffer[0], crc_length);
     5d0:	40 91 55 01 	lds	r20, 0x0155
     5d4:	50 91 56 01 	lds	r21, 0x0156
     5d8:	8d 81       	ldd	r24, Y+5	; 0x05
     5da:	28 2f       	mov	r18, r24
     5dc:	30 e0       	ldi	r19, 0x00	; 0
     5de:	8c 81       	ldd	r24, Y+4	; 0x04
     5e0:	ba 01       	movw	r22, r20
     5e2:	a9 01       	movw	r20, r18
     5e4:	0e 94 9a 12 	call	0x2534	; 0x2534 <crc_update>
     5e8:	8c 83       	std	Y+4, r24	; 0x04
	crc = crc_finalize(crc);
     5ea:	8c 81       	ldd	r24, Y+4	; 0x04
     5ec:	0e 94 5b 00 	call	0xb6	; 0xb6 <crc_finalize>
     5f0:	8c 83       	std	Y+4, r24	; 0x04

	*parameterStart = ETX;
     5f2:	89 81       	ldd	r24, Y+1	; 0x01
     5f4:	9a 81       	ldd	r25, Y+2	; 0x02
     5f6:	23 e0       	ldi	r18, 0x03	; 3
     5f8:	fc 01       	movw	r30, r24
     5fa:	20 83       	st	Z, r18
	*(parameterStart+1) = crc;
     5fc:	89 81       	ldd	r24, Y+1	; 0x01
     5fe:	9a 81       	ldd	r25, Y+2	; 0x02
     600:	01 96       	adiw	r24, 0x01	; 1
     602:	2c 81       	ldd	r18, Y+4	; 0x04
     604:	fc 01       	movw	r30, r24
     606:	20 83       	st	Z, r18
	*(parameterStart+2) = ETB;
     608:	89 81       	ldd	r24, Y+1	; 0x01
     60a:	9a 81       	ldd	r25, Y+2	; 0x02
     60c:	02 96       	adiw	r24, 0x02	; 2
     60e:	27 e1       	ldi	r18, 0x17	; 23
     610:	fc 01       	movw	r30, r24
     612:	20 83       	st	Z, r18
	
	return SUCCESFUL_COMPOSITION;
     614:	8a e0       	ldi	r24, 0x0A	; 10
}
     616:	28 96       	adiw	r28, 0x08	; 8
     618:	0f b6       	in	r0, 0x3f	; 63
     61a:	f8 94       	cli
     61c:	de bf       	out	0x3e, r29	; 62
     61e:	0f be       	out	0x3f, r0	; 63
     620:	cd bf       	out	0x3d, r28	; 61
     622:	cf 91       	pop	r28
     624:	df 91       	pop	r29
     626:	08 95       	ret

00000628 <writeParameterValue>:

void writeParameterValue(uint8_t parameterIndex, void* parameterData, uint8_t parameterByteLength){
     628:	0f 93       	push	r16
     62a:	1f 93       	push	r17
     62c:	df 93       	push	r29
     62e:	cf 93       	push	r28
     630:	00 d0       	rcall	.+0      	; 0x632 <writeParameterValue+0xa>
     632:	00 d0       	rcall	.+0      	; 0x634 <writeParameterValue+0xc>
     634:	cd b7       	in	r28, 0x3d	; 61
     636:	de b7       	in	r29, 0x3e	; 62
     638:	89 83       	std	Y+1, r24	; 0x01
     63a:	7b 83       	std	Y+3, r23	; 0x03
     63c:	6a 83       	std	Y+2, r22	; 0x02
     63e:	4c 83       	std	Y+4, r20	; 0x04
	parameter[parameterIndex].startingPointer = (uint8_t*) realloc(parameter[parameterIndex].startingPointer, parameterByteLength);
     640:	89 81       	ldd	r24, Y+1	; 0x01
     642:	08 2f       	mov	r16, r24
     644:	10 e0       	ldi	r17, 0x00	; 0
     646:	89 81       	ldd	r24, Y+1	; 0x01
     648:	28 2f       	mov	r18, r24
     64a:	30 e0       	ldi	r19, 0x00	; 0
     64c:	c9 01       	movw	r24, r18
     64e:	88 0f       	add	r24, r24
     650:	99 1f       	adc	r25, r25
     652:	82 0f       	add	r24, r18
     654:	93 1f       	adc	r25, r19
     656:	83 5d       	subi	r24, 0xD3	; 211
     658:	9e 4f       	sbci	r25, 0xFE	; 254
     65a:	fc 01       	movw	r30, r24
     65c:	80 81       	ld	r24, Z
     65e:	91 81       	ldd	r25, Z+1	; 0x01
     660:	2c 81       	ldd	r18, Y+4	; 0x04
     662:	22 2f       	mov	r18, r18
     664:	30 e0       	ldi	r19, 0x00	; 0
     666:	b9 01       	movw	r22, r18
     668:	0e 94 47 1b 	call	0x368e	; 0x368e <realloc>
     66c:	9c 01       	movw	r18, r24
     66e:	c8 01       	movw	r24, r16
     670:	88 0f       	add	r24, r24
     672:	99 1f       	adc	r25, r25
     674:	80 0f       	add	r24, r16
     676:	91 1f       	adc	r25, r17
     678:	83 5d       	subi	r24, 0xD3	; 211
     67a:	9e 4f       	sbci	r25, 0xFE	; 254
     67c:	fc 01       	movw	r30, r24
     67e:	31 83       	std	Z+1, r19	; 0x01
     680:	20 83       	st	Z, r18
	memcpy(parameter[parameterIndex].startingPointer, parameterData, parameterByteLength);
     682:	89 81       	ldd	r24, Y+1	; 0x01
     684:	28 2f       	mov	r18, r24
     686:	30 e0       	ldi	r19, 0x00	; 0
     688:	c9 01       	movw	r24, r18
     68a:	88 0f       	add	r24, r24
     68c:	99 1f       	adc	r25, r25
     68e:	82 0f       	add	r24, r18
     690:	93 1f       	adc	r25, r19
     692:	83 5d       	subi	r24, 0xD3	; 211
     694:	9e 4f       	sbci	r25, 0xFE	; 254
     696:	fc 01       	movw	r30, r24
     698:	80 81       	ld	r24, Z
     69a:	91 81       	ldd	r25, Z+1	; 0x01
     69c:	2c 81       	ldd	r18, Y+4	; 0x04
     69e:	22 2f       	mov	r18, r18
     6a0:	30 e0       	ldi	r19, 0x00	; 0
     6a2:	4a 81       	ldd	r20, Y+2	; 0x02
     6a4:	5b 81       	ldd	r21, Y+3	; 0x03
     6a6:	ba 01       	movw	r22, r20
     6a8:	a9 01       	movw	r20, r18
     6aa:	0e 94 12 1c 	call	0x3824	; 0x3824 <memcpy>
	parameter[parameterIndex].byteLength = parameterByteLength;
     6ae:	89 81       	ldd	r24, Y+1	; 0x01
     6b0:	28 2f       	mov	r18, r24
     6b2:	30 e0       	ldi	r19, 0x00	; 0
     6b4:	c9 01       	movw	r24, r18
     6b6:	88 0f       	add	r24, r24
     6b8:	99 1f       	adc	r25, r25
     6ba:	82 0f       	add	r24, r18
     6bc:	93 1f       	adc	r25, r19
     6be:	81 5d       	subi	r24, 0xD1	; 209
     6c0:	9e 4f       	sbci	r25, 0xFE	; 254
     6c2:	2c 81       	ldd	r18, Y+4	; 0x04
     6c4:	fc 01       	movw	r30, r24
     6c6:	20 83       	st	Z, r18
}
     6c8:	0f 90       	pop	r0
     6ca:	0f 90       	pop	r0
     6cc:	0f 90       	pop	r0
     6ce:	0f 90       	pop	r0
     6d0:	cf 91       	pop	r28
     6d2:	df 91       	pop	r29
     6d4:	1f 91       	pop	r17
     6d6:	0f 91       	pop	r16
     6d8:	08 95       	ret

000006da <UPDATE_ALL_DEVICES_VALUE_H>:

void UPDATE_ALL_DEVICES_VALUE_H() {
     6da:	0f 93       	push	r16
     6dc:	1f 93       	push	r17
     6de:	df 93       	push	r29
     6e0:	cf 93       	push	r28
     6e2:	cd b7       	in	r28, 0x3d	; 61
     6e4:	de b7       	in	r29, 0x3e	; 62
     6e6:	60 97       	sbiw	r28, 0x10	; 16
     6e8:	0f b6       	in	r0, 0x3f	; 63
     6ea:	f8 94       	cli
     6ec:	de bf       	out	0x3e, r29	; 62
     6ee:	0f be       	out	0x3f, r0	; 63
     6f0:	cd bf       	out	0x3d, r28	; 61
	for (uint8_t x = 0; x < AVAILABLE_DEVICES;x++)
     6f2:	19 82       	std	Y+1, r1	; 0x01
     6f4:	08 c1       	rjmp	.+528    	; 0x906 <__stack+0x7>
	{
		deviceStoredValue[x] = *((uint8_t*)parameter[x].startingPointer);
     6f6:	89 81       	ldd	r24, Y+1	; 0x01
     6f8:	48 2f       	mov	r20, r24
     6fa:	50 e0       	ldi	r21, 0x00	; 0
     6fc:	89 81       	ldd	r24, Y+1	; 0x01
     6fe:	28 2f       	mov	r18, r24
     700:	30 e0       	ldi	r19, 0x00	; 0
     702:	c9 01       	movw	r24, r18
     704:	88 0f       	add	r24, r24
     706:	99 1f       	adc	r25, r25
     708:	82 0f       	add	r24, r18
     70a:	93 1f       	adc	r25, r19
     70c:	83 5d       	subi	r24, 0xD3	; 211
     70e:	9e 4f       	sbci	r25, 0xFE	; 254
     710:	fc 01       	movw	r30, r24
     712:	80 81       	ld	r24, Z
     714:	91 81       	ldd	r25, Z+1	; 0x01
     716:	fc 01       	movw	r30, r24
     718:	20 81       	ld	r18, Z
     71a:	ca 01       	movw	r24, r20
     71c:	86 5d       	subi	r24, 0xD6	; 214
     71e:	9e 4f       	sbci	r25, 0xFE	; 254
     720:	fc 01       	movw	r30, r24
     722:	20 83       	st	Z, r18
		
		switch (x) {
     724:	89 81       	ldd	r24, Y+1	; 0x01
     726:	88 2f       	mov	r24, r24
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	81 30       	cpi	r24, 0x01	; 1
     72c:	91 05       	cpc	r25, r1
     72e:	81 f0       	breq	.+32     	; 0x750 <UPDATE_ALL_DEVICES_VALUE_H+0x76>
     730:	82 30       	cpi	r24, 0x02	; 2
     732:	91 05       	cpc	r25, r1
     734:	b9 f0       	breq	.+46     	; 0x764 <UPDATE_ALL_DEVICES_VALUE_H+0x8a>
     736:	00 97       	sbiw	r24, 0x00	; 0
     738:	09 f0       	breq	.+2      	; 0x73c <UPDATE_ALL_DEVICES_VALUE_H+0x62>
     73a:	e2 c0       	rjmp	.+452    	; 0x900 <__stack+0x1>
			case 0:
				STRETCHER_POS_CHANGE_HANDLE(deviceStoredValue[x]);
     73c:	89 81       	ldd	r24, Y+1	; 0x01
     73e:	88 2f       	mov	r24, r24
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	86 5d       	subi	r24, 0xD6	; 214
     744:	9e 4f       	sbci	r25, 0xFE	; 254
     746:	fc 01       	movw	r30, r24
     748:	80 81       	ld	r24, Z
     74a:	0e 94 83 0c 	call	0x1906	; 0x1906 <STRETCHER_POS_CHANGE_HANDLE>
			break;
     74e:	d8 c0       	rjmp	.+432    	; 0x900 <__stack+0x1>
			case 1:
				CURTAIN_POS_CHANGE_HANDLE(deviceStoredValue[x]);
     750:	89 81       	ldd	r24, Y+1	; 0x01
     752:	88 2f       	mov	r24, r24
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	86 5d       	subi	r24, 0xD6	; 214
     758:	9e 4f       	sbci	r25, 0xFE	; 254
     75a:	fc 01       	movw	r30, r24
     75c:	80 81       	ld	r24, Z
     75e:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <CURTAIN_POS_CHANGE_HANDLE>
			break;
     762:	ce c0       	rjmp	.+412    	; 0x900 <__stack+0x1>
			case 2:
				if (deviceStoredValue[x]==0xFF){
     764:	89 81       	ldd	r24, Y+1	; 0x01
     766:	88 2f       	mov	r24, r24
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	86 5d       	subi	r24, 0xD6	; 214
     76c:	9e 4f       	sbci	r25, 0xFE	; 254
     76e:	fc 01       	movw	r30, r24
     770:	80 81       	ld	r24, Z
     772:	8f 3f       	cpi	r24, 0xFF	; 255
     774:	09 f0       	breq	.+2      	; 0x778 <UPDATE_ALL_DEVICES_VALUE_H+0x9e>
     776:	c3 c0       	rjmp	.+390    	; 0x8fe <UPDATE_ALL_DEVICES_VALUE_H+0x224>
					for (uint8_t x = 0; x < 6; x++)
     778:	1a 82       	std	Y+2, r1	; 0x02
     77a:	a1 c0       	rjmp	.+322    	; 0x8be <UPDATE_ALL_DEVICES_VALUE_H+0x1e4>
					{
						bit_flip(PORTB, BIT(0));
     77c:	85 e2       	ldi	r24, 0x25	; 37
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	25 e2       	ldi	r18, 0x25	; 37
     782:	30 e0       	ldi	r19, 0x00	; 0
     784:	f9 01       	movw	r30, r18
     786:	30 81       	ld	r19, Z
     788:	21 e0       	ldi	r18, 0x01	; 1
     78a:	23 27       	eor	r18, r19
     78c:	fc 01       	movw	r30, r24
     78e:	20 83       	st	Z, r18
						bit_flip(PORTB, BIT(1));
     790:	85 e2       	ldi	r24, 0x25	; 37
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	25 e2       	ldi	r18, 0x25	; 37
     796:	30 e0       	ldi	r19, 0x00	; 0
     798:	f9 01       	movw	r30, r18
     79a:	30 81       	ld	r19, Z
     79c:	22 e0       	ldi	r18, 0x02	; 2
     79e:	23 27       	eor	r18, r19
     7a0:	fc 01       	movw	r30, r24
     7a2:	20 83       	st	Z, r18
						bit_flip(PORTB, BIT(2));
     7a4:	85 e2       	ldi	r24, 0x25	; 37
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	25 e2       	ldi	r18, 0x25	; 37
     7aa:	30 e0       	ldi	r19, 0x00	; 0
     7ac:	f9 01       	movw	r30, r18
     7ae:	30 81       	ld	r19, Z
     7b0:	24 e0       	ldi	r18, 0x04	; 4
     7b2:	23 27       	eor	r18, r19
     7b4:	fc 01       	movw	r30, r24
     7b6:	20 83       	st	Z, r18
     7b8:	80 e0       	ldi	r24, 0x00	; 0
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	a8 e4       	ldi	r26, 0x48	; 72
     7be:	b3 e4       	ldi	r27, 0x43	; 67
     7c0:	8b 83       	std	Y+3, r24	; 0x03
     7c2:	9c 83       	std	Y+4, r25	; 0x04
     7c4:	ad 83       	std	Y+5, r26	; 0x05
     7c6:	be 83       	std	Y+6, r27	; 0x06
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     7c8:	6b 81       	ldd	r22, Y+3	; 0x03
     7ca:	7c 81       	ldd	r23, Y+4	; 0x04
     7cc:	8d 81       	ldd	r24, Y+5	; 0x05
     7ce:	9e 81       	ldd	r25, Y+6	; 0x06
     7d0:	20 e0       	ldi	r18, 0x00	; 0
     7d2:	30 e0       	ldi	r19, 0x00	; 0
     7d4:	4a e7       	ldi	r20, 0x7A	; 122
     7d6:	55 e4       	ldi	r21, 0x45	; 69
     7d8:	0e 94 65 19 	call	0x32ca	; 0x32ca <__mulsf3>
     7dc:	dc 01       	movw	r26, r24
     7de:	cb 01       	movw	r24, r22
     7e0:	8f 83       	std	Y+7, r24	; 0x07
     7e2:	98 87       	std	Y+8, r25	; 0x08
     7e4:	a9 87       	std	Y+9, r26	; 0x09
     7e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     7e8:	11 e0       	ldi	r17, 0x01	; 1
     7ea:	6f 81       	ldd	r22, Y+7	; 0x07
     7ec:	78 85       	ldd	r23, Y+8	; 0x08
     7ee:	89 85       	ldd	r24, Y+9	; 0x09
     7f0:	9a 85       	ldd	r25, Y+10	; 0x0a
     7f2:	20 e0       	ldi	r18, 0x00	; 0
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	40 e8       	ldi	r20, 0x80	; 128
     7f8:	5f e3       	ldi	r21, 0x3F	; 63
     7fa:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <__cmpsf2>
     7fe:	88 23       	and	r24, r24
     800:	0c f0       	brlt	.+2      	; 0x804 <UPDATE_ALL_DEVICES_VALUE_H+0x12a>
     802:	10 e0       	ldi	r17, 0x00	; 0
     804:	11 23       	and	r17, r17
     806:	29 f0       	breq	.+10     	; 0x812 <UPDATE_ALL_DEVICES_VALUE_H+0x138>
		__ticks = 1;
     808:	81 e0       	ldi	r24, 0x01	; 1
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	9c 87       	std	Y+12, r25	; 0x0c
     80e:	8b 87       	std	Y+11, r24	; 0x0b
     810:	46 c0       	rjmp	.+140    	; 0x89e <UPDATE_ALL_DEVICES_VALUE_H+0x1c4>
	else if (__tmp > 65535)
     812:	11 e0       	ldi	r17, 0x01	; 1
     814:	6f 81       	ldd	r22, Y+7	; 0x07
     816:	78 85       	ldd	r23, Y+8	; 0x08
     818:	89 85       	ldd	r24, Y+9	; 0x09
     81a:	9a 85       	ldd	r25, Y+10	; 0x0a
     81c:	20 e0       	ldi	r18, 0x00	; 0
     81e:	3f ef       	ldi	r19, 0xFF	; 255
     820:	4f e7       	ldi	r20, 0x7F	; 127
     822:	57 e4       	ldi	r21, 0x47	; 71
     824:	0e 94 61 19 	call	0x32c2	; 0x32c2 <__gesf2>
     828:	18 16       	cp	r1, r24
     82a:	0c f0       	brlt	.+2      	; 0x82e <UPDATE_ALL_DEVICES_VALUE_H+0x154>
     82c:	10 e0       	ldi	r17, 0x00	; 0
     82e:	11 23       	and	r17, r17
     830:	61 f1       	breq	.+88     	; 0x88a <UPDATE_ALL_DEVICES_VALUE_H+0x1b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     832:	6b 81       	ldd	r22, Y+3	; 0x03
     834:	7c 81       	ldd	r23, Y+4	; 0x04
     836:	8d 81       	ldd	r24, Y+5	; 0x05
     838:	9e 81       	ldd	r25, Y+6	; 0x06
     83a:	20 e0       	ldi	r18, 0x00	; 0
     83c:	30 e0       	ldi	r19, 0x00	; 0
     83e:	40 e2       	ldi	r20, 0x20	; 32
     840:	51 e4       	ldi	r21, 0x41	; 65
     842:	0e 94 65 19 	call	0x32ca	; 0x32ca <__mulsf3>
     846:	dc 01       	movw	r26, r24
     848:	cb 01       	movw	r24, r22
     84a:	bc 01       	movw	r22, r24
     84c:	cd 01       	movw	r24, r26
     84e:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__fixunssfsi>
     852:	dc 01       	movw	r26, r24
     854:	cb 01       	movw	r24, r22
     856:	9c 87       	std	Y+12, r25	; 0x0c
     858:	8b 87       	std	Y+11, r24	; 0x0b
     85a:	12 c0       	rjmp	.+36     	; 0x880 <UPDATE_ALL_DEVICES_VALUE_H+0x1a6>
     85c:	80 e9       	ldi	r24, 0x90	; 144
     85e:	91 e0       	ldi	r25, 0x01	; 1
     860:	9e 87       	std	Y+14, r25	; 0x0e
     862:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     864:	8d 85       	ldd	r24, Y+13	; 0x0d
     866:	9e 85       	ldd	r25, Y+14	; 0x0e
     868:	8c 01       	movw	r16, r24
     86a:	c8 01       	movw	r24, r16
     86c:	01 97       	sbiw	r24, 0x01	; 1
     86e:	f1 f7       	brne	.-4      	; 0x86c <UPDATE_ALL_DEVICES_VALUE_H+0x192>
     870:	8c 01       	movw	r16, r24
     872:	1e 87       	std	Y+14, r17	; 0x0e
     874:	0d 87       	std	Y+13, r16	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     876:	8b 85       	ldd	r24, Y+11	; 0x0b
     878:	9c 85       	ldd	r25, Y+12	; 0x0c
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	9c 87       	std	Y+12, r25	; 0x0c
     87e:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     880:	8b 85       	ldd	r24, Y+11	; 0x0b
     882:	9c 85       	ldd	r25, Y+12	; 0x0c
     884:	00 97       	sbiw	r24, 0x00	; 0
     886:	51 f7       	brne	.-44     	; 0x85c <UPDATE_ALL_DEVICES_VALUE_H+0x182>
     888:	17 c0       	rjmp	.+46     	; 0x8b8 <UPDATE_ALL_DEVICES_VALUE_H+0x1de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     88a:	6f 81       	ldd	r22, Y+7	; 0x07
     88c:	78 85       	ldd	r23, Y+8	; 0x08
     88e:	89 85       	ldd	r24, Y+9	; 0x09
     890:	9a 85       	ldd	r25, Y+10	; 0x0a
     892:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__fixunssfsi>
     896:	dc 01       	movw	r26, r24
     898:	cb 01       	movw	r24, r22
     89a:	9c 87       	std	Y+12, r25	; 0x0c
     89c:	8b 87       	std	Y+11, r24	; 0x0b
     89e:	8b 85       	ldd	r24, Y+11	; 0x0b
     8a0:	9c 85       	ldd	r25, Y+12	; 0x0c
     8a2:	98 8b       	std	Y+16, r25	; 0x10
     8a4:	8f 87       	std	Y+15, r24	; 0x0f
     8a6:	8f 85       	ldd	r24, Y+15	; 0x0f
     8a8:	98 89       	ldd	r25, Y+16	; 0x10
     8aa:	8c 01       	movw	r16, r24
     8ac:	f8 01       	movw	r30, r16
     8ae:	31 97       	sbiw	r30, 0x01	; 1
     8b0:	f1 f7       	brne	.-4      	; 0x8ae <UPDATE_ALL_DEVICES_VALUE_H+0x1d4>
     8b2:	8f 01       	movw	r16, r30
     8b4:	18 8b       	std	Y+16, r17	; 0x10
     8b6:	0f 87       	std	Y+15, r16	; 0x0f
			case 1:
				CURTAIN_POS_CHANGE_HANDLE(deviceStoredValue[x]);
			break;
			case 2:
				if (deviceStoredValue[x]==0xFF){
					for (uint8_t x = 0; x < 6; x++)
     8b8:	8a 81       	ldd	r24, Y+2	; 0x02
     8ba:	8f 5f       	subi	r24, 0xFF	; 255
     8bc:	8a 83       	std	Y+2, r24	; 0x02
     8be:	8a 81       	ldd	r24, Y+2	; 0x02
     8c0:	86 30       	cpi	r24, 0x06	; 6
     8c2:	08 f4       	brcc	.+2      	; 0x8c6 <UPDATE_ALL_DEVICES_VALUE_H+0x1ec>
     8c4:	5b cf       	rjmp	.-330    	; 0x77c <UPDATE_ALL_DEVICES_VALUE_H+0xa2>
						bit_flip(PORTB, BIT(0));
						bit_flip(PORTB, BIT(1));
						bit_flip(PORTB, BIT(2));
						_delay_ms(200);
					}
					bit_clear(PORTB, BIT(0));
     8c6:	85 e2       	ldi	r24, 0x25	; 37
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	25 e2       	ldi	r18, 0x25	; 37
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	f9 01       	movw	r30, r18
     8d0:	20 81       	ld	r18, Z
     8d2:	2e 7f       	andi	r18, 0xFE	; 254
     8d4:	fc 01       	movw	r30, r24
     8d6:	20 83       	st	Z, r18
					bit_clear(PORTB, BIT(1));
     8d8:	85 e2       	ldi	r24, 0x25	; 37
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	25 e2       	ldi	r18, 0x25	; 37
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	f9 01       	movw	r30, r18
     8e2:	20 81       	ld	r18, Z
     8e4:	2d 7f       	andi	r18, 0xFD	; 253
     8e6:	fc 01       	movw	r30, r24
     8e8:	20 83       	st	Z, r18
					bit_clear(PORTB, BIT(2));
     8ea:	85 e2       	ldi	r24, 0x25	; 37
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	25 e2       	ldi	r18, 0x25	; 37
     8f0:	30 e0       	ldi	r19, 0x00	; 0
     8f2:	f9 01       	movw	r30, r18
     8f4:	20 81       	ld	r18, Z
     8f6:	2b 7f       	andi	r18, 0xFB	; 251
     8f8:	fc 01       	movw	r30, r24
     8fa:	20 83       	st	Z, r18
				}
			break;
     8fc:	01 c0       	rjmp	.+2      	; 0x900 <__stack+0x1>
     8fe:	00 00       	nop
	memcpy(parameter[parameterIndex].startingPointer, parameterData, parameterByteLength);
	parameter[parameterIndex].byteLength = parameterByteLength;
}

void UPDATE_ALL_DEVICES_VALUE_H() {
	for (uint8_t x = 0; x < AVAILABLE_DEVICES;x++)
     900:	89 81       	ldd	r24, Y+1	; 0x01
     902:	8f 5f       	subi	r24, 0xFF	; 255
     904:	89 83       	std	Y+1, r24	; 0x01
     906:	89 81       	ldd	r24, Y+1	; 0x01
     908:	83 30       	cpi	r24, 0x03	; 3
     90a:	08 f4       	brcc	.+2      	; 0x90e <__stack+0xf>
     90c:	f4 ce       	rjmp	.-536    	; 0x6f6 <UPDATE_ALL_DEVICES_VALUE_H+0x1c>
				}
			break;
		}
	}
	
}
     90e:	60 96       	adiw	r28, 0x10	; 16
     910:	0f b6       	in	r0, 0x3f	; 63
     912:	f8 94       	cli
     914:	de bf       	out	0x3e, r29	; 62
     916:	0f be       	out	0x3f, r0	; 63
     918:	cd bf       	out	0x3d, r28	; 61
     91a:	cf 91       	pop	r28
     91c:	df 91       	pop	r29
     91e:	1f 91       	pop	r17
     920:	0f 91       	pop	r16
     922:	08 95       	ret

00000924 <UPDATE_DEVICE_VALUE_H>:

#define MOTOR_DELAY_MS 1
#define CURTAIN_CALIBRATION_CONSTANT 200
#define STRETCHER_CALIBRATION_CONSTANT 50

void UPDATE_DEVICE_VALUE_H() {
     924:	0f 93       	push	r16
     926:	1f 93       	push	r17
     928:	df 93       	push	r29
     92a:	cf 93       	push	r28
     92c:	cd b7       	in	r28, 0x3d	; 61
     92e:	de b7       	in	r29, 0x3e	; 62
     930:	61 97       	sbiw	r28, 0x11	; 17
     932:	0f b6       	in	r0, 0x3f	; 63
     934:	f8 94       	cli
     936:	de bf       	out	0x3e, r29	; 62
     938:	0f be       	out	0x3f, r0	; 63
     93a:	cd bf       	out	0x3d, r28	; 61
	const uint8_t deviceIndex = *((uint8_t*)parameter[0].startingPointer);
     93c:	80 91 2d 01 	lds	r24, 0x012D
     940:	90 91 2e 01 	lds	r25, 0x012E
     944:	fc 01       	movw	r30, r24
     946:	80 81       	ld	r24, Z
     948:	8a 83       	std	Y+2, r24	; 0x02
	const uint8_t deviceValue = *((uint8_t*)parameter[1].startingPointer);
     94a:	80 91 30 01 	lds	r24, 0x0130
     94e:	90 91 31 01 	lds	r25, 0x0131
     952:	fc 01       	movw	r30, r24
     954:	80 81       	ld	r24, Z
     956:	8b 83       	std	Y+3, r24	; 0x03
	
	switch (deviceIndex) {
     958:	8a 81       	ldd	r24, Y+2	; 0x02
     95a:	88 2f       	mov	r24, r24
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	81 30       	cpi	r24, 0x01	; 1
     960:	91 05       	cpc	r25, r1
     962:	51 f0       	breq	.+20     	; 0x978 <UPDATE_DEVICE_VALUE_H+0x54>
     964:	82 30       	cpi	r24, 0x02	; 2
     966:	91 05       	cpc	r25, r1
     968:	59 f0       	breq	.+22     	; 0x980 <UPDATE_DEVICE_VALUE_H+0x5c>
     96a:	00 97       	sbiw	r24, 0x00	; 0
     96c:	09 f0       	breq	.+2      	; 0x970 <UPDATE_DEVICE_VALUE_H+0x4c>
     96e:	cb c0       	rjmp	.+406    	; 0xb06 <UPDATE_DEVICE_VALUE_H+0x1e2>
		case 0:
			STRETCHER_POS_CHANGE_HANDLE(deviceValue);
     970:	8b 81       	ldd	r24, Y+3	; 0x03
     972:	0e 94 83 0c 	call	0x1906	; 0x1906 <STRETCHER_POS_CHANGE_HANDLE>
		break;
     976:	c7 c0       	rjmp	.+398    	; 0xb06 <UPDATE_DEVICE_VALUE_H+0x1e2>
		case 1:
			CURTAIN_POS_CHANGE_HANDLE(deviceValue);
     978:	8b 81       	ldd	r24, Y+3	; 0x03
     97a:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <CURTAIN_POS_CHANGE_HANDLE>
		break;
     97e:	c3 c0       	rjmp	.+390    	; 0xb06 <UPDATE_DEVICE_VALUE_H+0x1e2>
		case 2:
			for (uint8_t x = 0; x < 6; x++)
     980:	19 82       	std	Y+1, r1	; 0x01
     982:	a1 c0       	rjmp	.+322    	; 0xac6 <UPDATE_DEVICE_VALUE_H+0x1a2>
			{
				bit_flip(PORTB, BIT(0));
     984:	85 e2       	ldi	r24, 0x25	; 37
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	25 e2       	ldi	r18, 0x25	; 37
     98a:	30 e0       	ldi	r19, 0x00	; 0
     98c:	f9 01       	movw	r30, r18
     98e:	30 81       	ld	r19, Z
     990:	21 e0       	ldi	r18, 0x01	; 1
     992:	23 27       	eor	r18, r19
     994:	fc 01       	movw	r30, r24
     996:	20 83       	st	Z, r18
				bit_flip(PORTB, BIT(1));
     998:	85 e2       	ldi	r24, 0x25	; 37
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	25 e2       	ldi	r18, 0x25	; 37
     99e:	30 e0       	ldi	r19, 0x00	; 0
     9a0:	f9 01       	movw	r30, r18
     9a2:	30 81       	ld	r19, Z
     9a4:	22 e0       	ldi	r18, 0x02	; 2
     9a6:	23 27       	eor	r18, r19
     9a8:	fc 01       	movw	r30, r24
     9aa:	20 83       	st	Z, r18
				bit_flip(PORTB, BIT(2));
     9ac:	85 e2       	ldi	r24, 0x25	; 37
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	25 e2       	ldi	r18, 0x25	; 37
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	f9 01       	movw	r30, r18
     9b6:	30 81       	ld	r19, Z
     9b8:	24 e0       	ldi	r18, 0x04	; 4
     9ba:	23 27       	eor	r18, r19
     9bc:	fc 01       	movw	r30, r24
     9be:	20 83       	st	Z, r18
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	a8 e4       	ldi	r26, 0x48	; 72
     9c6:	b3 e4       	ldi	r27, 0x43	; 67
     9c8:	8c 83       	std	Y+4, r24	; 0x04
     9ca:	9d 83       	std	Y+5, r25	; 0x05
     9cc:	ae 83       	std	Y+6, r26	; 0x06
     9ce:	bf 83       	std	Y+7, r27	; 0x07
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     9d0:	6c 81       	ldd	r22, Y+4	; 0x04
     9d2:	7d 81       	ldd	r23, Y+5	; 0x05
     9d4:	8e 81       	ldd	r24, Y+6	; 0x06
     9d6:	9f 81       	ldd	r25, Y+7	; 0x07
     9d8:	20 e0       	ldi	r18, 0x00	; 0
     9da:	30 e0       	ldi	r19, 0x00	; 0
     9dc:	4a e7       	ldi	r20, 0x7A	; 122
     9de:	55 e4       	ldi	r21, 0x45	; 69
     9e0:	0e 94 65 19 	call	0x32ca	; 0x32ca <__mulsf3>
     9e4:	dc 01       	movw	r26, r24
     9e6:	cb 01       	movw	r24, r22
     9e8:	88 87       	std	Y+8, r24	; 0x08
     9ea:	99 87       	std	Y+9, r25	; 0x09
     9ec:	aa 87       	std	Y+10, r26	; 0x0a
     9ee:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     9f0:	11 e0       	ldi	r17, 0x01	; 1
     9f2:	68 85       	ldd	r22, Y+8	; 0x08
     9f4:	79 85       	ldd	r23, Y+9	; 0x09
     9f6:	8a 85       	ldd	r24, Y+10	; 0x0a
     9f8:	9b 85       	ldd	r25, Y+11	; 0x0b
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e8       	ldi	r20, 0x80	; 128
     a00:	5f e3       	ldi	r21, 0x3F	; 63
     a02:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <__cmpsf2>
     a06:	88 23       	and	r24, r24
     a08:	0c f0       	brlt	.+2      	; 0xa0c <UPDATE_DEVICE_VALUE_H+0xe8>
     a0a:	10 e0       	ldi	r17, 0x00	; 0
     a0c:	11 23       	and	r17, r17
     a0e:	29 f0       	breq	.+10     	; 0xa1a <UPDATE_DEVICE_VALUE_H+0xf6>
		__ticks = 1;
     a10:	81 e0       	ldi	r24, 0x01	; 1
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	9d 87       	std	Y+13, r25	; 0x0d
     a16:	8c 87       	std	Y+12, r24	; 0x0c
     a18:	46 c0       	rjmp	.+140    	; 0xaa6 <UPDATE_DEVICE_VALUE_H+0x182>
	else if (__tmp > 65535)
     a1a:	11 e0       	ldi	r17, 0x01	; 1
     a1c:	68 85       	ldd	r22, Y+8	; 0x08
     a1e:	79 85       	ldd	r23, Y+9	; 0x09
     a20:	8a 85       	ldd	r24, Y+10	; 0x0a
     a22:	9b 85       	ldd	r25, Y+11	; 0x0b
     a24:	20 e0       	ldi	r18, 0x00	; 0
     a26:	3f ef       	ldi	r19, 0xFF	; 255
     a28:	4f e7       	ldi	r20, 0x7F	; 127
     a2a:	57 e4       	ldi	r21, 0x47	; 71
     a2c:	0e 94 61 19 	call	0x32c2	; 0x32c2 <__gesf2>
     a30:	18 16       	cp	r1, r24
     a32:	0c f0       	brlt	.+2      	; 0xa36 <UPDATE_DEVICE_VALUE_H+0x112>
     a34:	10 e0       	ldi	r17, 0x00	; 0
     a36:	11 23       	and	r17, r17
     a38:	61 f1       	breq	.+88     	; 0xa92 <UPDATE_DEVICE_VALUE_H+0x16e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a3a:	6c 81       	ldd	r22, Y+4	; 0x04
     a3c:	7d 81       	ldd	r23, Y+5	; 0x05
     a3e:	8e 81       	ldd	r24, Y+6	; 0x06
     a40:	9f 81       	ldd	r25, Y+7	; 0x07
     a42:	20 e0       	ldi	r18, 0x00	; 0
     a44:	30 e0       	ldi	r19, 0x00	; 0
     a46:	40 e2       	ldi	r20, 0x20	; 32
     a48:	51 e4       	ldi	r21, 0x41	; 65
     a4a:	0e 94 65 19 	call	0x32ca	; 0x32ca <__mulsf3>
     a4e:	dc 01       	movw	r26, r24
     a50:	cb 01       	movw	r24, r22
     a52:	bc 01       	movw	r22, r24
     a54:	cd 01       	movw	r24, r26
     a56:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__fixunssfsi>
     a5a:	dc 01       	movw	r26, r24
     a5c:	cb 01       	movw	r24, r22
     a5e:	9d 87       	std	Y+13, r25	; 0x0d
     a60:	8c 87       	std	Y+12, r24	; 0x0c
     a62:	12 c0       	rjmp	.+36     	; 0xa88 <UPDATE_DEVICE_VALUE_H+0x164>
     a64:	80 e9       	ldi	r24, 0x90	; 144
     a66:	91 e0       	ldi	r25, 0x01	; 1
     a68:	9f 87       	std	Y+15, r25	; 0x0f
     a6a:	8e 87       	std	Y+14, r24	; 0x0e
     a6c:	8e 85       	ldd	r24, Y+14	; 0x0e
     a6e:	9f 85       	ldd	r25, Y+15	; 0x0f
     a70:	8c 01       	movw	r16, r24
     a72:	c8 01       	movw	r24, r16
     a74:	01 97       	sbiw	r24, 0x01	; 1
     a76:	f1 f7       	brne	.-4      	; 0xa74 <UPDATE_DEVICE_VALUE_H+0x150>
     a78:	8c 01       	movw	r16, r24
     a7a:	1f 87       	std	Y+15, r17	; 0x0f
     a7c:	0e 87       	std	Y+14, r16	; 0x0e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a7e:	8c 85       	ldd	r24, Y+12	; 0x0c
     a80:	9d 85       	ldd	r25, Y+13	; 0x0d
     a82:	01 97       	sbiw	r24, 0x01	; 1
     a84:	9d 87       	std	Y+13, r25	; 0x0d
     a86:	8c 87       	std	Y+12, r24	; 0x0c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a88:	8c 85       	ldd	r24, Y+12	; 0x0c
     a8a:	9d 85       	ldd	r25, Y+13	; 0x0d
     a8c:	00 97       	sbiw	r24, 0x00	; 0
     a8e:	51 f7       	brne	.-44     	; 0xa64 <UPDATE_DEVICE_VALUE_H+0x140>
     a90:	17 c0       	rjmp	.+46     	; 0xac0 <UPDATE_DEVICE_VALUE_H+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a92:	68 85       	ldd	r22, Y+8	; 0x08
     a94:	79 85       	ldd	r23, Y+9	; 0x09
     a96:	8a 85       	ldd	r24, Y+10	; 0x0a
     a98:	9b 85       	ldd	r25, Y+11	; 0x0b
     a9a:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__fixunssfsi>
     a9e:	dc 01       	movw	r26, r24
     aa0:	cb 01       	movw	r24, r22
     aa2:	9d 87       	std	Y+13, r25	; 0x0d
     aa4:	8c 87       	std	Y+12, r24	; 0x0c
     aa6:	8c 85       	ldd	r24, Y+12	; 0x0c
     aa8:	9d 85       	ldd	r25, Y+13	; 0x0d
     aaa:	99 8b       	std	Y+17, r25	; 0x11
     aac:	88 8b       	std	Y+16, r24	; 0x10
     aae:	88 89       	ldd	r24, Y+16	; 0x10
     ab0:	99 89       	ldd	r25, Y+17	; 0x11
     ab2:	8c 01       	movw	r16, r24
     ab4:	f8 01       	movw	r30, r16
     ab6:	31 97       	sbiw	r30, 0x01	; 1
     ab8:	f1 f7       	brne	.-4      	; 0xab6 <UPDATE_DEVICE_VALUE_H+0x192>
     aba:	8f 01       	movw	r16, r30
     abc:	19 8b       	std	Y+17, r17	; 0x11
     abe:	08 8b       	std	Y+16, r16	; 0x10
		break;
		case 1:
			CURTAIN_POS_CHANGE_HANDLE(deviceValue);
		break;
		case 2:
			for (uint8_t x = 0; x < 6; x++)
     ac0:	89 81       	ldd	r24, Y+1	; 0x01
     ac2:	8f 5f       	subi	r24, 0xFF	; 255
     ac4:	89 83       	std	Y+1, r24	; 0x01
     ac6:	89 81       	ldd	r24, Y+1	; 0x01
     ac8:	86 30       	cpi	r24, 0x06	; 6
     aca:	08 f4       	brcc	.+2      	; 0xace <UPDATE_DEVICE_VALUE_H+0x1aa>
     acc:	5b cf       	rjmp	.-330    	; 0x984 <UPDATE_DEVICE_VALUE_H+0x60>
				bit_flip(PORTB, BIT(0));
				bit_flip(PORTB, BIT(1));
				bit_flip(PORTB, BIT(2));
				_delay_ms(200);
			}
			bit_clear(PORTB, BIT(0));
     ace:	85 e2       	ldi	r24, 0x25	; 37
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	25 e2       	ldi	r18, 0x25	; 37
     ad4:	30 e0       	ldi	r19, 0x00	; 0
     ad6:	f9 01       	movw	r30, r18
     ad8:	20 81       	ld	r18, Z
     ada:	2e 7f       	andi	r18, 0xFE	; 254
     adc:	fc 01       	movw	r30, r24
     ade:	20 83       	st	Z, r18
			bit_clear(PORTB, BIT(1));
     ae0:	85 e2       	ldi	r24, 0x25	; 37
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	25 e2       	ldi	r18, 0x25	; 37
     ae6:	30 e0       	ldi	r19, 0x00	; 0
     ae8:	f9 01       	movw	r30, r18
     aea:	20 81       	ld	r18, Z
     aec:	2d 7f       	andi	r18, 0xFD	; 253
     aee:	fc 01       	movw	r30, r24
     af0:	20 83       	st	Z, r18
			bit_clear(PORTB, BIT(2));
     af2:	85 e2       	ldi	r24, 0x25	; 37
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	25 e2       	ldi	r18, 0x25	; 37
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	f9 01       	movw	r30, r18
     afc:	20 81       	ld	r18, Z
     afe:	2b 7f       	andi	r18, 0xFB	; 251
     b00:	fc 01       	movw	r30, r24
     b02:	20 83       	st	Z, r18
		break;
     b04:	00 00       	nop
	}
	
	deviceStoredValue[deviceIndex] = deviceValue;
     b06:	8a 81       	ldd	r24, Y+2	; 0x02
     b08:	88 2f       	mov	r24, r24
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	86 5d       	subi	r24, 0xD6	; 214
     b0e:	9e 4f       	sbci	r25, 0xFE	; 254
     b10:	2b 81       	ldd	r18, Y+3	; 0x03
     b12:	fc 01       	movw	r30, r24
     b14:	20 83       	st	Z, r18
	
}
     b16:	61 96       	adiw	r28, 0x11	; 17
     b18:	0f b6       	in	r0, 0x3f	; 63
     b1a:	f8 94       	cli
     b1c:	de bf       	out	0x3e, r29	; 62
     b1e:	0f be       	out	0x3f, r0	; 63
     b20:	cd bf       	out	0x3d, r28	; 61
     b22:	cf 91       	pop	r28
     b24:	df 91       	pop	r29
     b26:	1f 91       	pop	r17
     b28:	0f 91       	pop	r16
     b2a:	08 95       	ret

00000b2c <GET_ALL_DEVICES_VALUE_H>:

void GET_ALL_DEVICES_VALUE_H() {}
     b2c:	df 93       	push	r29
     b2e:	cf 93       	push	r28
     b30:	cd b7       	in	r28, 0x3d	; 61
     b32:	de b7       	in	r29, 0x3e	; 62
     b34:	cf 91       	pop	r28
     b36:	df 91       	pop	r29
     b38:	08 95       	ret

00000b3a <GET_DEVICE_VALUE_H>:
	
void GET_DEVICE_VALUE_H() {
     b3a:	0f 93       	push	r16
     b3c:	1f 93       	push	r17
     b3e:	df 93       	push	r29
     b40:	cf 93       	push	r28
     b42:	cd b7       	in	r28, 0x3d	; 61
     b44:	de b7       	in	r29, 0x3e	; 62
     b46:	60 97       	sbiw	r28, 0x10	; 16
     b48:	0f b6       	in	r0, 0x3f	; 63
     b4a:	f8 94       	cli
     b4c:	de bf       	out	0x3e, r29	; 62
     b4e:	0f be       	out	0x3f, r0	; 63
     b50:	cd bf       	out	0x3d, r28	; 61
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a8 ec       	ldi	r26, 0xC8	; 200
     b58:	b2 e4       	ldi	r27, 0x42	; 66
     b5a:	8a 83       	std	Y+2, r24	; 0x02
     b5c:	9b 83       	std	Y+3, r25	; 0x03
     b5e:	ac 83       	std	Y+4, r26	; 0x04
     b60:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     b62:	6a 81       	ldd	r22, Y+2	; 0x02
     b64:	7b 81       	ldd	r23, Y+3	; 0x03
     b66:	8c 81       	ldd	r24, Y+4	; 0x04
     b68:	9d 81       	ldd	r25, Y+5	; 0x05
     b6a:	20 e0       	ldi	r18, 0x00	; 0
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	4a e7       	ldi	r20, 0x7A	; 122
     b70:	55 e4       	ldi	r21, 0x45	; 69
     b72:	0e 94 65 19 	call	0x32ca	; 0x32ca <__mulsf3>
     b76:	dc 01       	movw	r26, r24
     b78:	cb 01       	movw	r24, r22
     b7a:	8e 83       	std	Y+6, r24	; 0x06
     b7c:	9f 83       	std	Y+7, r25	; 0x07
     b7e:	a8 87       	std	Y+8, r26	; 0x08
     b80:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     b82:	11 e0       	ldi	r17, 0x01	; 1
     b84:	6e 81       	ldd	r22, Y+6	; 0x06
     b86:	7f 81       	ldd	r23, Y+7	; 0x07
     b88:	88 85       	ldd	r24, Y+8	; 0x08
     b8a:	99 85       	ldd	r25, Y+9	; 0x09
     b8c:	20 e0       	ldi	r18, 0x00	; 0
     b8e:	30 e0       	ldi	r19, 0x00	; 0
     b90:	40 e8       	ldi	r20, 0x80	; 128
     b92:	5f e3       	ldi	r21, 0x3F	; 63
     b94:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <__cmpsf2>
     b98:	88 23       	and	r24, r24
     b9a:	0c f0       	brlt	.+2      	; 0xb9e <GET_DEVICE_VALUE_H+0x64>
     b9c:	10 e0       	ldi	r17, 0x00	; 0
     b9e:	11 23       	and	r17, r17
     ba0:	29 f0       	breq	.+10     	; 0xbac <GET_DEVICE_VALUE_H+0x72>
		__ticks = 1;
     ba2:	81 e0       	ldi	r24, 0x01	; 1
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	9b 87       	std	Y+11, r25	; 0x0b
     ba8:	8a 87       	std	Y+10, r24	; 0x0a
     baa:	46 c0       	rjmp	.+140    	; 0xc38 <GET_DEVICE_VALUE_H+0xfe>
	else if (__tmp > 65535)
     bac:	11 e0       	ldi	r17, 0x01	; 1
     bae:	6e 81       	ldd	r22, Y+6	; 0x06
     bb0:	7f 81       	ldd	r23, Y+7	; 0x07
     bb2:	88 85       	ldd	r24, Y+8	; 0x08
     bb4:	99 85       	ldd	r25, Y+9	; 0x09
     bb6:	20 e0       	ldi	r18, 0x00	; 0
     bb8:	3f ef       	ldi	r19, 0xFF	; 255
     bba:	4f e7       	ldi	r20, 0x7F	; 127
     bbc:	57 e4       	ldi	r21, 0x47	; 71
     bbe:	0e 94 61 19 	call	0x32c2	; 0x32c2 <__gesf2>
     bc2:	18 16       	cp	r1, r24
     bc4:	0c f0       	brlt	.+2      	; 0xbc8 <GET_DEVICE_VALUE_H+0x8e>
     bc6:	10 e0       	ldi	r17, 0x00	; 0
     bc8:	11 23       	and	r17, r17
     bca:	61 f1       	breq	.+88     	; 0xc24 <GET_DEVICE_VALUE_H+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bcc:	6a 81       	ldd	r22, Y+2	; 0x02
     bce:	7b 81       	ldd	r23, Y+3	; 0x03
     bd0:	8c 81       	ldd	r24, Y+4	; 0x04
     bd2:	9d 81       	ldd	r25, Y+5	; 0x05
     bd4:	20 e0       	ldi	r18, 0x00	; 0
     bd6:	30 e0       	ldi	r19, 0x00	; 0
     bd8:	40 e2       	ldi	r20, 0x20	; 32
     bda:	51 e4       	ldi	r21, 0x41	; 65
     bdc:	0e 94 65 19 	call	0x32ca	; 0x32ca <__mulsf3>
     be0:	dc 01       	movw	r26, r24
     be2:	cb 01       	movw	r24, r22
     be4:	bc 01       	movw	r22, r24
     be6:	cd 01       	movw	r24, r26
     be8:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__fixunssfsi>
     bec:	dc 01       	movw	r26, r24
     bee:	cb 01       	movw	r24, r22
     bf0:	9b 87       	std	Y+11, r25	; 0x0b
     bf2:	8a 87       	std	Y+10, r24	; 0x0a
     bf4:	12 c0       	rjmp	.+36     	; 0xc1a <GET_DEVICE_VALUE_H+0xe0>
     bf6:	80 e9       	ldi	r24, 0x90	; 144
     bf8:	91 e0       	ldi	r25, 0x01	; 1
     bfa:	9d 87       	std	Y+13, r25	; 0x0d
     bfc:	8c 87       	std	Y+12, r24	; 0x0c
     bfe:	8c 85       	ldd	r24, Y+12	; 0x0c
     c00:	9d 85       	ldd	r25, Y+13	; 0x0d
     c02:	8c 01       	movw	r16, r24
     c04:	c8 01       	movw	r24, r16
     c06:	01 97       	sbiw	r24, 0x01	; 1
     c08:	f1 f7       	brne	.-4      	; 0xc06 <GET_DEVICE_VALUE_H+0xcc>
     c0a:	8c 01       	movw	r16, r24
     c0c:	1d 87       	std	Y+13, r17	; 0x0d
     c0e:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c10:	8a 85       	ldd	r24, Y+10	; 0x0a
     c12:	9b 85       	ldd	r25, Y+11	; 0x0b
     c14:	01 97       	sbiw	r24, 0x01	; 1
     c16:	9b 87       	std	Y+11, r25	; 0x0b
     c18:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c1a:	8a 85       	ldd	r24, Y+10	; 0x0a
     c1c:	9b 85       	ldd	r25, Y+11	; 0x0b
     c1e:	00 97       	sbiw	r24, 0x00	; 0
     c20:	51 f7       	brne	.-44     	; 0xbf6 <GET_DEVICE_VALUE_H+0xbc>
     c22:	17 c0       	rjmp	.+46     	; 0xc52 <GET_DEVICE_VALUE_H+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c24:	6e 81       	ldd	r22, Y+6	; 0x06
     c26:	7f 81       	ldd	r23, Y+7	; 0x07
     c28:	88 85       	ldd	r24, Y+8	; 0x08
     c2a:	99 85       	ldd	r25, Y+9	; 0x09
     c2c:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__fixunssfsi>
     c30:	dc 01       	movw	r26, r24
     c32:	cb 01       	movw	r24, r22
     c34:	9b 87       	std	Y+11, r25	; 0x0b
     c36:	8a 87       	std	Y+10, r24	; 0x0a
     c38:	8a 85       	ldd	r24, Y+10	; 0x0a
     c3a:	9b 85       	ldd	r25, Y+11	; 0x0b
     c3c:	9f 87       	std	Y+15, r25	; 0x0f
     c3e:	8e 87       	std	Y+14, r24	; 0x0e
     c40:	8e 85       	ldd	r24, Y+14	; 0x0e
     c42:	9f 85       	ldd	r25, Y+15	; 0x0f
     c44:	8c 01       	movw	r16, r24
     c46:	f8 01       	movw	r30, r16
     c48:	31 97       	sbiw	r30, 0x01	; 1
     c4a:	f1 f7       	brne	.-4      	; 0xc48 <GET_DEVICE_VALUE_H+0x10e>
     c4c:	8f 01       	movw	r16, r30
     c4e:	1f 87       	std	Y+15, r17	; 0x0f
     c50:	0e 87       	std	Y+14, r16	; 0x0e
	_delay_ms(100);
	uint8_t deviceIndex = *((uint8_t*)parameter[0].startingPointer);
     c52:	80 91 2d 01 	lds	r24, 0x012D
     c56:	90 91 2e 01 	lds	r25, 0x012E
     c5a:	fc 01       	movw	r30, r24
     c5c:	80 81       	ld	r24, Z
     c5e:	88 8b       	std	Y+16, r24	; 0x10
	writeParameterValue(0, &deviceIndex, 1);
     c60:	9e 01       	movw	r18, r28
     c62:	20 5f       	subi	r18, 0xF0	; 240
     c64:	3f 4f       	sbci	r19, 0xFF	; 255
     c66:	80 e0       	ldi	r24, 0x00	; 0
     c68:	b9 01       	movw	r22, r18
     c6a:	41 e0       	ldi	r20, 0x01	; 1
     c6c:	0e 94 14 03 	call	0x628	; 0x628 <writeParameterValue>
	writeParameterValue(1, &deviceStoredValue[deviceIndex], 2);
     c70:	88 89       	ldd	r24, Y+16	; 0x10
     c72:	88 2f       	mov	r24, r24
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	9c 01       	movw	r18, r24
     c78:	26 5d       	subi	r18, 0xD6	; 214
     c7a:	3e 4f       	sbci	r19, 0xFE	; 254
     c7c:	81 e0       	ldi	r24, 0x01	; 1
     c7e:	b9 01       	movw	r22, r18
     c80:	42 e0       	ldi	r20, 0x02	; 2
     c82:	0e 94 14 03 	call	0x628	; 0x628 <writeParameterValue>
	ComposeMessageToBuffer(UPDATE_DEVICE_VALUE_ID, 2, 0x7C);
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	62 e0       	ldi	r22, 0x02	; 2
     c8a:	4c e7       	ldi	r20, 0x7C	; 124
     c8c:	0e 94 27 02 	call	0x44e	; 0x44e <ComposeMessageToBuffer>
	
	nrf24_initRF_SAFE(MAIN_BOARD, TRANSMIT);
     c90:	80 e0       	ldi	r24, 0x00	; 0
     c92:	61 e0       	ldi	r22, 0x01	; 1
     c94:	0e 94 91 18 	call	0x3122	; 0x3122 <nrf24_initRF_SAFE>
	nrf24_send(command_buffer);
     c98:	80 91 55 01 	lds	r24, 0x0155
     c9c:	90 91 56 01 	lds	r25, 0x0156
     ca0:	0e 94 00 16 	call	0x2c00	; 0x2c00 <nrf24_send>
	while(nrf24_isSending());
     ca4:	00 00       	nop
     ca6:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <nrf24_isSending>
     caa:	88 23       	and	r24, r24
     cac:	e1 f7       	brne	.-8      	; 0xca6 <GET_DEVICE_VALUE_H+0x16c>
	uint8_t messageStatus = nrf24_lastMessageStatus();
     cae:	0e 94 57 16 	call	0x2cae	; 0x2cae <nrf24_lastMessageStatus>
     cb2:	89 83       	std	Y+1, r24	; 0x01
}
     cb4:	60 96       	adiw	r28, 0x10	; 16
     cb6:	0f b6       	in	r0, 0x3f	; 63
     cb8:	f8 94       	cli
     cba:	de bf       	out	0x3e, r29	; 62
     cbc:	0f be       	out	0x3f, r0	; 63
     cbe:	cd bf       	out	0x3d, r28	; 61
     cc0:	cf 91       	pop	r28
     cc2:	df 91       	pop	r29
     cc4:	1f 91       	pop	r17
     cc6:	0f 91       	pop	r16
     cc8:	08 95       	ret

00000cca <MESSAGE_STATUS_H>:
void MESSAGE_STATUS_H() {}
     cca:	df 93       	push	r29
     ccc:	cf 93       	push	r28
     cce:	cd b7       	in	r28, 0x3d	; 61
     cd0:	de b7       	in	r29, 0x3e	; 62
     cd2:	cf 91       	pop	r28
     cd4:	df 91       	pop	r29
     cd6:	08 95       	ret

00000cd8 <CURTAIN_POS_CHANGE_HANDLE>:
	
uint8_t previousCurtainPosition = 0;
uint8_t previousStretcherPosition = 0;


void CURTAIN_POS_CHANGE_HANDLE(uint8_t positionToMove){
     cd8:	0f 93       	push	r16
     cda:	1f 93       	push	r17
     cdc:	df 93       	push	r29
     cde:	cf 93       	push	r28
     ce0:	cd b7       	in	r28, 0x3d	; 61
     ce2:	de b7       	in	r29, 0x3e	; 62
     ce4:	c7 57       	subi	r28, 0x77	; 119
     ce6:	d0 40       	sbci	r29, 0x00	; 0
     ce8:	0f b6       	in	r0, 0x3f	; 63
     cea:	f8 94       	cli
     cec:	de bf       	out	0x3e, r29	; 62
     cee:	0f be       	out	0x3f, r0	; 63
     cf0:	cd bf       	out	0x3d, r28	; 61
     cf2:	9e 01       	movw	r18, r28
     cf4:	29 58       	subi	r18, 0x89	; 137
     cf6:	3f 4f       	sbci	r19, 0xFF	; 255
     cf8:	f9 01       	movw	r30, r18
     cfa:	80 83       	st	Z, r24
	bit_set(PORTB, BIT(1));
     cfc:	85 e2       	ldi	r24, 0x25	; 37
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	25 e2       	ldi	r18, 0x25	; 37
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	f9 01       	movw	r30, r18
     d06:	20 81       	ld	r18, Z
     d08:	22 60       	ori	r18, 0x02	; 2
     d0a:	fc 01       	movw	r30, r24
     d0c:	20 83       	st	Z, r18
	bit_set(PORTB, BIT(2));
     d0e:	85 e2       	ldi	r24, 0x25	; 37
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	25 e2       	ldi	r18, 0x25	; 37
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	f9 01       	movw	r30, r18
     d18:	20 81       	ld	r18, Z
     d1a:	24 60       	ori	r18, 0x04	; 4
     d1c:	fc 01       	movw	r30, r24
     d1e:	20 83       	st	Z, r18

	
	if (positionToMove<8) {
     d20:	ce 01       	movw	r24, r28
     d22:	89 58       	subi	r24, 0x89	; 137
     d24:	9f 4f       	sbci	r25, 0xFF	; 255
     d26:	fc 01       	movw	r30, r24
     d28:	80 81       	ld	r24, Z
     d2a:	88 30       	cpi	r24, 0x08	; 8
     d2c:	08 f0       	brcs	.+2      	; 0xd30 <CURTAIN_POS_CHANGE_HANDLE+0x58>
     d2e:	cd c5       	rjmp	.+2970   	; 0x18ca <CURTAIN_POS_CHANGE_HANDLE+0xbf2>
		uint16_t degreesToMove = abs(positionToMove-previousCurtainPosition)*CURTAIN_CALIBRATION_CONSTANT;
     d30:	ce 01       	movw	r24, r28
     d32:	89 58       	subi	r24, 0x89	; 137
     d34:	9f 4f       	sbci	r25, 0xFF	; 255
     d36:	fc 01       	movw	r30, r24
     d38:	80 81       	ld	r24, Z
     d3a:	28 2f       	mov	r18, r24
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	80 91 28 01 	lds	r24, 0x0128
     d42:	88 2f       	mov	r24, r24
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	a9 01       	movw	r20, r18
     d48:	48 1b       	sub	r20, r24
     d4a:	59 0b       	sbc	r21, r25
     d4c:	ca 01       	movw	r24, r20
     d4e:	99 23       	and	r25, r25
     d50:	1c f4       	brge	.+6      	; 0xd58 <CURTAIN_POS_CHANGE_HANDLE+0x80>
     d52:	90 95       	com	r25
     d54:	81 95       	neg	r24
     d56:	9f 4f       	sbci	r25, 0xFF	; 255
     d58:	ac 01       	movw	r20, r24
     d5a:	28 ec       	ldi	r18, 0xC8	; 200
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	42 9f       	mul	r20, r18
     d60:	c0 01       	movw	r24, r0
     d62:	43 9f       	mul	r20, r19
     d64:	90 0d       	add	r25, r0
     d66:	52 9f       	mul	r21, r18
     d68:	90 0d       	add	r25, r0
     d6a:	11 24       	eor	r1, r1
     d6c:	9e 83       	std	Y+6, r25	; 0x06
     d6e:	8d 83       	std	Y+5, r24	; 0x05
		
		if((positionToMove-previousCurtainPosition)>0){
     d70:	ce 01       	movw	r24, r28
     d72:	89 58       	subi	r24, 0x89	; 137
     d74:	9f 4f       	sbci	r25, 0xFF	; 255
     d76:	fc 01       	movw	r30, r24
     d78:	80 81       	ld	r24, Z
     d7a:	28 2f       	mov	r18, r24
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	80 91 28 01 	lds	r24, 0x0128
     d82:	88 2f       	mov	r24, r24
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	a9 01       	movw	r20, r18
     d88:	48 1b       	sub	r20, r24
     d8a:	59 0b       	sbc	r21, r25
     d8c:	ca 01       	movw	r24, r20
     d8e:	18 16       	cp	r1, r24
     d90:	19 06       	cpc	r1, r25
     d92:	0c f0       	brlt	.+2      	; 0xd96 <CURTAIN_POS_CHANGE_HANDLE+0xbe>
     d94:	25 c2       	rjmp	.+1098   	; 0x11e0 <CURTAIN_POS_CHANGE_HANDLE+0x508>
			for (uint16_t x = 0; x < degreesToMove;x++){
     d96:	1a 82       	std	Y+2, r1	; 0x02
     d98:	19 82       	std	Y+1, r1	; 0x01
     d9a:	19 c2       	rjmp	.+1074   	; 0x11ce <CURTAIN_POS_CHANGE_HANDLE+0x4f6>
				PORTD = 0b00000011;
     d9c:	8b e2       	ldi	r24, 0x2B	; 43
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	23 e0       	ldi	r18, 0x03	; 3
     da2:	fc 01       	movw	r30, r24
     da4:	20 83       	st	Z, r18
     da6:	80 e0       	ldi	r24, 0x00	; 0
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	a0 e8       	ldi	r26, 0x80	; 128
     dac:	bf e3       	ldi	r27, 0x3F	; 63
     dae:	8f 83       	std	Y+7, r24	; 0x07
     db0:	98 87       	std	Y+8, r25	; 0x08
     db2:	a9 87       	std	Y+9, r26	; 0x09
     db4:	ba 87       	std	Y+10, r27	; 0x0a
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     db6:	6f 81       	ldd	r22, Y+7	; 0x07
     db8:	78 85       	ldd	r23, Y+8	; 0x08
     dba:	89 85       	ldd	r24, Y+9	; 0x09
     dbc:	9a 85       	ldd	r25, Y+10	; 0x0a
     dbe:	20 e0       	ldi	r18, 0x00	; 0
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	4a e7       	ldi	r20, 0x7A	; 122
     dc4:	55 e4       	ldi	r21, 0x45	; 69
     dc6:	0e 94 65 19 	call	0x32ca	; 0x32ca <__mulsf3>
     dca:	dc 01       	movw	r26, r24
     dcc:	cb 01       	movw	r24, r22
     dce:	8b 87       	std	Y+11, r24	; 0x0b
     dd0:	9c 87       	std	Y+12, r25	; 0x0c
     dd2:	ad 87       	std	Y+13, r26	; 0x0d
     dd4:	be 87       	std	Y+14, r27	; 0x0e
	if (__tmp < 1.0)
     dd6:	11 e0       	ldi	r17, 0x01	; 1
     dd8:	6b 85       	ldd	r22, Y+11	; 0x0b
     dda:	7c 85       	ldd	r23, Y+12	; 0x0c
     ddc:	8d 85       	ldd	r24, Y+13	; 0x0d
     dde:	9e 85       	ldd	r25, Y+14	; 0x0e
     de0:	20 e0       	ldi	r18, 0x00	; 0
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	40 e8       	ldi	r20, 0x80	; 128
     de6:	5f e3       	ldi	r21, 0x3F	; 63
     de8:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <__cmpsf2>
     dec:	88 23       	and	r24, r24
     dee:	0c f0       	brlt	.+2      	; 0xdf2 <CURTAIN_POS_CHANGE_HANDLE+0x11a>
     df0:	10 e0       	ldi	r17, 0x00	; 0
     df2:	11 23       	and	r17, r17
     df4:	29 f0       	breq	.+10     	; 0xe00 <CURTAIN_POS_CHANGE_HANDLE+0x128>
		__ticks = 1;
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	98 8b       	std	Y+16, r25	; 0x10
     dfc:	8f 87       	std	Y+15, r24	; 0x0f
     dfe:	46 c0       	rjmp	.+140    	; 0xe8c <CURTAIN_POS_CHANGE_HANDLE+0x1b4>
	else if (__tmp > 65535)
     e00:	11 e0       	ldi	r17, 0x01	; 1
     e02:	6b 85       	ldd	r22, Y+11	; 0x0b
     e04:	7c 85       	ldd	r23, Y+12	; 0x0c
     e06:	8d 85       	ldd	r24, Y+13	; 0x0d
     e08:	9e 85       	ldd	r25, Y+14	; 0x0e
     e0a:	20 e0       	ldi	r18, 0x00	; 0
     e0c:	3f ef       	ldi	r19, 0xFF	; 255
     e0e:	4f e7       	ldi	r20, 0x7F	; 127
     e10:	57 e4       	ldi	r21, 0x47	; 71
     e12:	0e 94 61 19 	call	0x32c2	; 0x32c2 <__gesf2>
     e16:	18 16       	cp	r1, r24
     e18:	0c f0       	brlt	.+2      	; 0xe1c <CURTAIN_POS_CHANGE_HANDLE+0x144>
     e1a:	10 e0       	ldi	r17, 0x00	; 0
     e1c:	11 23       	and	r17, r17
     e1e:	61 f1       	breq	.+88     	; 0xe78 <CURTAIN_POS_CHANGE_HANDLE+0x1a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e20:	6f 81       	ldd	r22, Y+7	; 0x07
     e22:	78 85       	ldd	r23, Y+8	; 0x08
     e24:	89 85       	ldd	r24, Y+9	; 0x09
     e26:	9a 85       	ldd	r25, Y+10	; 0x0a
     e28:	20 e0       	ldi	r18, 0x00	; 0
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	40 e2       	ldi	r20, 0x20	; 32
     e2e:	51 e4       	ldi	r21, 0x41	; 65
     e30:	0e 94 65 19 	call	0x32ca	; 0x32ca <__mulsf3>
     e34:	dc 01       	movw	r26, r24
     e36:	cb 01       	movw	r24, r22
     e38:	bc 01       	movw	r22, r24
     e3a:	cd 01       	movw	r24, r26
     e3c:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__fixunssfsi>
     e40:	dc 01       	movw	r26, r24
     e42:	cb 01       	movw	r24, r22
     e44:	98 8b       	std	Y+16, r25	; 0x10
     e46:	8f 87       	std	Y+15, r24	; 0x0f
     e48:	12 c0       	rjmp	.+36     	; 0xe6e <CURTAIN_POS_CHANGE_HANDLE+0x196>
     e4a:	80 e9       	ldi	r24, 0x90	; 144
     e4c:	91 e0       	ldi	r25, 0x01	; 1
     e4e:	9a 8b       	std	Y+18, r25	; 0x12
     e50:	89 8b       	std	Y+17, r24	; 0x11
     e52:	89 89       	ldd	r24, Y+17	; 0x11
     e54:	9a 89       	ldd	r25, Y+18	; 0x12
     e56:	8c 01       	movw	r16, r24
     e58:	c8 01       	movw	r24, r16
     e5a:	01 97       	sbiw	r24, 0x01	; 1
     e5c:	f1 f7       	brne	.-4      	; 0xe5a <CURTAIN_POS_CHANGE_HANDLE+0x182>
     e5e:	8c 01       	movw	r16, r24
     e60:	1a 8b       	std	Y+18, r17	; 0x12
     e62:	09 8b       	std	Y+17, r16	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e64:	8f 85       	ldd	r24, Y+15	; 0x0f
     e66:	98 89       	ldd	r25, Y+16	; 0x10
     e68:	01 97       	sbiw	r24, 0x01	; 1
     e6a:	98 8b       	std	Y+16, r25	; 0x10
     e6c:	8f 87       	std	Y+15, r24	; 0x0f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e6e:	8f 85       	ldd	r24, Y+15	; 0x0f
     e70:	98 89       	ldd	r25, Y+16	; 0x10
     e72:	00 97       	sbiw	r24, 0x00	; 0
     e74:	51 f7       	brne	.-44     	; 0xe4a <CURTAIN_POS_CHANGE_HANDLE+0x172>
     e76:	17 c0       	rjmp	.+46     	; 0xea6 <CURTAIN_POS_CHANGE_HANDLE+0x1ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e78:	6b 85       	ldd	r22, Y+11	; 0x0b
     e7a:	7c 85       	ldd	r23, Y+12	; 0x0c
     e7c:	8d 85       	ldd	r24, Y+13	; 0x0d
     e7e:	9e 85       	ldd	r25, Y+14	; 0x0e
     e80:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__fixunssfsi>
     e84:	dc 01       	movw	r26, r24
     e86:	cb 01       	movw	r24, r22
     e88:	98 8b       	std	Y+16, r25	; 0x10
     e8a:	8f 87       	std	Y+15, r24	; 0x0f
     e8c:	8f 85       	ldd	r24, Y+15	; 0x0f
     e8e:	98 89       	ldd	r25, Y+16	; 0x10
     e90:	9c 8b       	std	Y+20, r25	; 0x14
     e92:	8b 8b       	std	Y+19, r24	; 0x13
     e94:	8b 89       	ldd	r24, Y+19	; 0x13
     e96:	9c 89       	ldd	r25, Y+20	; 0x14
     e98:	8c 01       	movw	r16, r24
     e9a:	f8 01       	movw	r30, r16
     e9c:	31 97       	sbiw	r30, 0x01	; 1
     e9e:	f1 f7       	brne	.-4      	; 0xe9c <CURTAIN_POS_CHANGE_HANDLE+0x1c4>
     ea0:	8f 01       	movw	r16, r30
     ea2:	1c 8b       	std	Y+20, r17	; 0x14
     ea4:	0b 8b       	std	Y+19, r16	; 0x13
				_delay_ms(MOTOR_DELAY_MS);
				PORTD = 0b00000110;
     ea6:	8b e2       	ldi	r24, 0x2B	; 43
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	26 e0       	ldi	r18, 0x06	; 6
     eac:	fc 01       	movw	r30, r24
     eae:	20 83       	st	Z, r18
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	a0 e8       	ldi	r26, 0x80	; 128
     eb6:	bf e3       	ldi	r27, 0x3F	; 63
     eb8:	8d 8b       	std	Y+21, r24	; 0x15
     eba:	9e 8b       	std	Y+22, r25	; 0x16
     ebc:	af 8b       	std	Y+23, r26	; 0x17
     ebe:	b8 8f       	std	Y+24, r27	; 0x18
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     ec0:	6d 89       	ldd	r22, Y+21	; 0x15
     ec2:	7e 89       	ldd	r23, Y+22	; 0x16
     ec4:	8f 89       	ldd	r24, Y+23	; 0x17
     ec6:	98 8d       	ldd	r25, Y+24	; 0x18
     ec8:	20 e0       	ldi	r18, 0x00	; 0
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	4a e7       	ldi	r20, 0x7A	; 122
     ece:	55 e4       	ldi	r21, 0x45	; 69
     ed0:	0e 94 65 19 	call	0x32ca	; 0x32ca <__mulsf3>
     ed4:	dc 01       	movw	r26, r24
     ed6:	cb 01       	movw	r24, r22
     ed8:	89 8f       	std	Y+25, r24	; 0x19
     eda:	9a 8f       	std	Y+26, r25	; 0x1a
     edc:	ab 8f       	std	Y+27, r26	; 0x1b
     ede:	bc 8f       	std	Y+28, r27	; 0x1c
	if (__tmp < 1.0)
     ee0:	11 e0       	ldi	r17, 0x01	; 1
     ee2:	69 8d       	ldd	r22, Y+25	; 0x19
     ee4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ee6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ee8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     eea:	20 e0       	ldi	r18, 0x00	; 0
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	40 e8       	ldi	r20, 0x80	; 128
     ef0:	5f e3       	ldi	r21, 0x3F	; 63
     ef2:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <__cmpsf2>
     ef6:	88 23       	and	r24, r24
     ef8:	0c f0       	brlt	.+2      	; 0xefc <CURTAIN_POS_CHANGE_HANDLE+0x224>
     efa:	10 e0       	ldi	r17, 0x00	; 0
     efc:	11 23       	and	r17, r17
     efe:	29 f0       	breq	.+10     	; 0xf0a <CURTAIN_POS_CHANGE_HANDLE+0x232>
		__ticks = 1;
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	9e 8f       	std	Y+30, r25	; 0x1e
     f06:	8d 8f       	std	Y+29, r24	; 0x1d
     f08:	46 c0       	rjmp	.+140    	; 0xf96 <CURTAIN_POS_CHANGE_HANDLE+0x2be>
	else if (__tmp > 65535)
     f0a:	11 e0       	ldi	r17, 0x01	; 1
     f0c:	69 8d       	ldd	r22, Y+25	; 0x19
     f0e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f10:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f12:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f14:	20 e0       	ldi	r18, 0x00	; 0
     f16:	3f ef       	ldi	r19, 0xFF	; 255
     f18:	4f e7       	ldi	r20, 0x7F	; 127
     f1a:	57 e4       	ldi	r21, 0x47	; 71
     f1c:	0e 94 61 19 	call	0x32c2	; 0x32c2 <__gesf2>
     f20:	18 16       	cp	r1, r24
     f22:	0c f0       	brlt	.+2      	; 0xf26 <CURTAIN_POS_CHANGE_HANDLE+0x24e>
     f24:	10 e0       	ldi	r17, 0x00	; 0
     f26:	11 23       	and	r17, r17
     f28:	61 f1       	breq	.+88     	; 0xf82 <CURTAIN_POS_CHANGE_HANDLE+0x2aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f2a:	6d 89       	ldd	r22, Y+21	; 0x15
     f2c:	7e 89       	ldd	r23, Y+22	; 0x16
     f2e:	8f 89       	ldd	r24, Y+23	; 0x17
     f30:	98 8d       	ldd	r25, Y+24	; 0x18
     f32:	20 e0       	ldi	r18, 0x00	; 0
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	40 e2       	ldi	r20, 0x20	; 32
     f38:	51 e4       	ldi	r21, 0x41	; 65
     f3a:	0e 94 65 19 	call	0x32ca	; 0x32ca <__mulsf3>
     f3e:	dc 01       	movw	r26, r24
     f40:	cb 01       	movw	r24, r22
     f42:	bc 01       	movw	r22, r24
     f44:	cd 01       	movw	r24, r26
     f46:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__fixunssfsi>
     f4a:	dc 01       	movw	r26, r24
     f4c:	cb 01       	movw	r24, r22
     f4e:	9e 8f       	std	Y+30, r25	; 0x1e
     f50:	8d 8f       	std	Y+29, r24	; 0x1d
     f52:	12 c0       	rjmp	.+36     	; 0xf78 <CURTAIN_POS_CHANGE_HANDLE+0x2a0>
     f54:	80 e9       	ldi	r24, 0x90	; 144
     f56:	91 e0       	ldi	r25, 0x01	; 1
     f58:	98 a3       	std	Y+32, r25	; 0x20
     f5a:	8f 8f       	std	Y+31, r24	; 0x1f
     f5c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f5e:	98 a1       	ldd	r25, Y+32	; 0x20
     f60:	8c 01       	movw	r16, r24
     f62:	c8 01       	movw	r24, r16
     f64:	01 97       	sbiw	r24, 0x01	; 1
     f66:	f1 f7       	brne	.-4      	; 0xf64 <CURTAIN_POS_CHANGE_HANDLE+0x28c>
     f68:	8c 01       	movw	r16, r24
     f6a:	18 a3       	std	Y+32, r17	; 0x20
     f6c:	0f 8f       	std	Y+31, r16	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f6e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f70:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f72:	01 97       	sbiw	r24, 0x01	; 1
     f74:	9e 8f       	std	Y+30, r25	; 0x1e
     f76:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f78:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f7a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f7c:	00 97       	sbiw	r24, 0x00	; 0
     f7e:	51 f7       	brne	.-44     	; 0xf54 <CURTAIN_POS_CHANGE_HANDLE+0x27c>
     f80:	17 c0       	rjmp	.+46     	; 0xfb0 <CURTAIN_POS_CHANGE_HANDLE+0x2d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f82:	69 8d       	ldd	r22, Y+25	; 0x19
     f84:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f86:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f88:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f8a:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__fixunssfsi>
     f8e:	dc 01       	movw	r26, r24
     f90:	cb 01       	movw	r24, r22
     f92:	9e 8f       	std	Y+30, r25	; 0x1e
     f94:	8d 8f       	std	Y+29, r24	; 0x1d
     f96:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f98:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f9a:	9a a3       	std	Y+34, r25	; 0x22
     f9c:	89 a3       	std	Y+33, r24	; 0x21
     f9e:	89 a1       	ldd	r24, Y+33	; 0x21
     fa0:	9a a1       	ldd	r25, Y+34	; 0x22
     fa2:	8c 01       	movw	r16, r24
     fa4:	f8 01       	movw	r30, r16
     fa6:	31 97       	sbiw	r30, 0x01	; 1
     fa8:	f1 f7       	brne	.-4      	; 0xfa6 <CURTAIN_POS_CHANGE_HANDLE+0x2ce>
     faa:	8f 01       	movw	r16, r30
     fac:	1a a3       	std	Y+34, r17	; 0x22
     fae:	09 a3       	std	Y+33, r16	; 0x21
				_delay_ms(MOTOR_DELAY_MS);
				PORTD = 0b00001100;
     fb0:	8b e2       	ldi	r24, 0x2B	; 43
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	2c e0       	ldi	r18, 0x0C	; 12
     fb6:	fc 01       	movw	r30, r24
     fb8:	20 83       	st	Z, r18
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	a0 e8       	ldi	r26, 0x80	; 128
     fc0:	bf e3       	ldi	r27, 0x3F	; 63
     fc2:	8b a3       	std	Y+35, r24	; 0x23
     fc4:	9c a3       	std	Y+36, r25	; 0x24
     fc6:	ad a3       	std	Y+37, r26	; 0x25
     fc8:	be a3       	std	Y+38, r27	; 0x26
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     fca:	6b a1       	ldd	r22, Y+35	; 0x23
     fcc:	7c a1       	ldd	r23, Y+36	; 0x24
     fce:	8d a1       	ldd	r24, Y+37	; 0x25
     fd0:	9e a1       	ldd	r25, Y+38	; 0x26
     fd2:	20 e0       	ldi	r18, 0x00	; 0
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	4a e7       	ldi	r20, 0x7A	; 122
     fd8:	55 e4       	ldi	r21, 0x45	; 69
     fda:	0e 94 65 19 	call	0x32ca	; 0x32ca <__mulsf3>
     fde:	dc 01       	movw	r26, r24
     fe0:	cb 01       	movw	r24, r22
     fe2:	8f a3       	std	Y+39, r24	; 0x27
     fe4:	98 a7       	std	Y+40, r25	; 0x28
     fe6:	a9 a7       	std	Y+41, r26	; 0x29
     fe8:	ba a7       	std	Y+42, r27	; 0x2a
	if (__tmp < 1.0)
     fea:	11 e0       	ldi	r17, 0x01	; 1
     fec:	6f a1       	ldd	r22, Y+39	; 0x27
     fee:	78 a5       	ldd	r23, Y+40	; 0x28
     ff0:	89 a5       	ldd	r24, Y+41	; 0x29
     ff2:	9a a5       	ldd	r25, Y+42	; 0x2a
     ff4:	20 e0       	ldi	r18, 0x00	; 0
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	40 e8       	ldi	r20, 0x80	; 128
     ffa:	5f e3       	ldi	r21, 0x3F	; 63
     ffc:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <__cmpsf2>
    1000:	88 23       	and	r24, r24
    1002:	0c f0       	brlt	.+2      	; 0x1006 <CURTAIN_POS_CHANGE_HANDLE+0x32e>
    1004:	10 e0       	ldi	r17, 0x00	; 0
    1006:	11 23       	and	r17, r17
    1008:	29 f0       	breq	.+10     	; 0x1014 <CURTAIN_POS_CHANGE_HANDLE+0x33c>
		__ticks = 1;
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	9c a7       	std	Y+44, r25	; 0x2c
    1010:	8b a7       	std	Y+43, r24	; 0x2b
    1012:	46 c0       	rjmp	.+140    	; 0x10a0 <CURTAIN_POS_CHANGE_HANDLE+0x3c8>
	else if (__tmp > 65535)
    1014:	11 e0       	ldi	r17, 0x01	; 1
    1016:	6f a1       	ldd	r22, Y+39	; 0x27
    1018:	78 a5       	ldd	r23, Y+40	; 0x28
    101a:	89 a5       	ldd	r24, Y+41	; 0x29
    101c:	9a a5       	ldd	r25, Y+42	; 0x2a
    101e:	20 e0       	ldi	r18, 0x00	; 0
    1020:	3f ef       	ldi	r19, 0xFF	; 255
    1022:	4f e7       	ldi	r20, 0x7F	; 127
    1024:	57 e4       	ldi	r21, 0x47	; 71
    1026:	0e 94 61 19 	call	0x32c2	; 0x32c2 <__gesf2>
    102a:	18 16       	cp	r1, r24
    102c:	0c f0       	brlt	.+2      	; 0x1030 <CURTAIN_POS_CHANGE_HANDLE+0x358>
    102e:	10 e0       	ldi	r17, 0x00	; 0
    1030:	11 23       	and	r17, r17
    1032:	61 f1       	breq	.+88     	; 0x108c <CURTAIN_POS_CHANGE_HANDLE+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1034:	6b a1       	ldd	r22, Y+35	; 0x23
    1036:	7c a1       	ldd	r23, Y+36	; 0x24
    1038:	8d a1       	ldd	r24, Y+37	; 0x25
    103a:	9e a1       	ldd	r25, Y+38	; 0x26
    103c:	20 e0       	ldi	r18, 0x00	; 0
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	40 e2       	ldi	r20, 0x20	; 32
    1042:	51 e4       	ldi	r21, 0x41	; 65
    1044:	0e 94 65 19 	call	0x32ca	; 0x32ca <__mulsf3>
    1048:	dc 01       	movw	r26, r24
    104a:	cb 01       	movw	r24, r22
    104c:	bc 01       	movw	r22, r24
    104e:	cd 01       	movw	r24, r26
    1050:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__fixunssfsi>
    1054:	dc 01       	movw	r26, r24
    1056:	cb 01       	movw	r24, r22
    1058:	9c a7       	std	Y+44, r25	; 0x2c
    105a:	8b a7       	std	Y+43, r24	; 0x2b
    105c:	12 c0       	rjmp	.+36     	; 0x1082 <CURTAIN_POS_CHANGE_HANDLE+0x3aa>
    105e:	80 e9       	ldi	r24, 0x90	; 144
    1060:	91 e0       	ldi	r25, 0x01	; 1
    1062:	9e a7       	std	Y+46, r25	; 0x2e
    1064:	8d a7       	std	Y+45, r24	; 0x2d
    1066:	8d a5       	ldd	r24, Y+45	; 0x2d
    1068:	9e a5       	ldd	r25, Y+46	; 0x2e
    106a:	8c 01       	movw	r16, r24
    106c:	c8 01       	movw	r24, r16
    106e:	01 97       	sbiw	r24, 0x01	; 1
    1070:	f1 f7       	brne	.-4      	; 0x106e <CURTAIN_POS_CHANGE_HANDLE+0x396>
    1072:	8c 01       	movw	r16, r24
    1074:	1e a7       	std	Y+46, r17	; 0x2e
    1076:	0d a7       	std	Y+45, r16	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1078:	8b a5       	ldd	r24, Y+43	; 0x2b
    107a:	9c a5       	ldd	r25, Y+44	; 0x2c
    107c:	01 97       	sbiw	r24, 0x01	; 1
    107e:	9c a7       	std	Y+44, r25	; 0x2c
    1080:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1082:	8b a5       	ldd	r24, Y+43	; 0x2b
    1084:	9c a5       	ldd	r25, Y+44	; 0x2c
    1086:	00 97       	sbiw	r24, 0x00	; 0
    1088:	51 f7       	brne	.-44     	; 0x105e <CURTAIN_POS_CHANGE_HANDLE+0x386>
    108a:	17 c0       	rjmp	.+46     	; 0x10ba <CURTAIN_POS_CHANGE_HANDLE+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    108c:	6f a1       	ldd	r22, Y+39	; 0x27
    108e:	78 a5       	ldd	r23, Y+40	; 0x28
    1090:	89 a5       	ldd	r24, Y+41	; 0x29
    1092:	9a a5       	ldd	r25, Y+42	; 0x2a
    1094:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__fixunssfsi>
    1098:	dc 01       	movw	r26, r24
    109a:	cb 01       	movw	r24, r22
    109c:	9c a7       	std	Y+44, r25	; 0x2c
    109e:	8b a7       	std	Y+43, r24	; 0x2b
    10a0:	8b a5       	ldd	r24, Y+43	; 0x2b
    10a2:	9c a5       	ldd	r25, Y+44	; 0x2c
    10a4:	98 ab       	std	Y+48, r25	; 0x30
    10a6:	8f a7       	std	Y+47, r24	; 0x2f
    10a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    10aa:	98 a9       	ldd	r25, Y+48	; 0x30
    10ac:	8c 01       	movw	r16, r24
    10ae:	f8 01       	movw	r30, r16
    10b0:	31 97       	sbiw	r30, 0x01	; 1
    10b2:	f1 f7       	brne	.-4      	; 0x10b0 <CURTAIN_POS_CHANGE_HANDLE+0x3d8>
    10b4:	8f 01       	movw	r16, r30
    10b6:	18 ab       	std	Y+48, r17	; 0x30
    10b8:	0f a7       	std	Y+47, r16	; 0x2f
				_delay_ms(MOTOR_DELAY_MS);
				PORTD = 0b00001001;
    10ba:	8b e2       	ldi	r24, 0x2B	; 43
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	29 e0       	ldi	r18, 0x09	; 9
    10c0:	fc 01       	movw	r30, r24
    10c2:	20 83       	st	Z, r18
    10c4:	80 e0       	ldi	r24, 0x00	; 0
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	a0 e8       	ldi	r26, 0x80	; 128
    10ca:	bf e3       	ldi	r27, 0x3F	; 63
    10cc:	89 ab       	std	Y+49, r24	; 0x31
    10ce:	9a ab       	std	Y+50, r25	; 0x32
    10d0:	ab ab       	std	Y+51, r26	; 0x33
    10d2:	bc ab       	std	Y+52, r27	; 0x34
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    10d4:	69 a9       	ldd	r22, Y+49	; 0x31
    10d6:	7a a9       	ldd	r23, Y+50	; 0x32
    10d8:	8b a9       	ldd	r24, Y+51	; 0x33
    10da:	9c a9       	ldd	r25, Y+52	; 0x34
    10dc:	20 e0       	ldi	r18, 0x00	; 0
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	4a e7       	ldi	r20, 0x7A	; 122
    10e2:	55 e4       	ldi	r21, 0x45	; 69
    10e4:	0e 94 65 19 	call	0x32ca	; 0x32ca <__mulsf3>
    10e8:	dc 01       	movw	r26, r24
    10ea:	cb 01       	movw	r24, r22
    10ec:	8d ab       	std	Y+53, r24	; 0x35
    10ee:	9e ab       	std	Y+54, r25	; 0x36
    10f0:	af ab       	std	Y+55, r26	; 0x37
    10f2:	b8 af       	std	Y+56, r27	; 0x38
	if (__tmp < 1.0)
    10f4:	11 e0       	ldi	r17, 0x01	; 1
    10f6:	6d a9       	ldd	r22, Y+53	; 0x35
    10f8:	7e a9       	ldd	r23, Y+54	; 0x36
    10fa:	8f a9       	ldd	r24, Y+55	; 0x37
    10fc:	98 ad       	ldd	r25, Y+56	; 0x38
    10fe:	20 e0       	ldi	r18, 0x00	; 0
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	40 e8       	ldi	r20, 0x80	; 128
    1104:	5f e3       	ldi	r21, 0x3F	; 63
    1106:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <__cmpsf2>
    110a:	88 23       	and	r24, r24
    110c:	0c f0       	brlt	.+2      	; 0x1110 <CURTAIN_POS_CHANGE_HANDLE+0x438>
    110e:	10 e0       	ldi	r17, 0x00	; 0
    1110:	11 23       	and	r17, r17
    1112:	29 f0       	breq	.+10     	; 0x111e <CURTAIN_POS_CHANGE_HANDLE+0x446>
		__ticks = 1;
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	9a af       	std	Y+58, r25	; 0x3a
    111a:	89 af       	std	Y+57, r24	; 0x39
    111c:	46 c0       	rjmp	.+140    	; 0x11aa <CURTAIN_POS_CHANGE_HANDLE+0x4d2>
	else if (__tmp > 65535)
    111e:	11 e0       	ldi	r17, 0x01	; 1
    1120:	6d a9       	ldd	r22, Y+53	; 0x35
    1122:	7e a9       	ldd	r23, Y+54	; 0x36
    1124:	8f a9       	ldd	r24, Y+55	; 0x37
    1126:	98 ad       	ldd	r25, Y+56	; 0x38
    1128:	20 e0       	ldi	r18, 0x00	; 0
    112a:	3f ef       	ldi	r19, 0xFF	; 255
    112c:	4f e7       	ldi	r20, 0x7F	; 127
    112e:	57 e4       	ldi	r21, 0x47	; 71
    1130:	0e 94 61 19 	call	0x32c2	; 0x32c2 <__gesf2>
    1134:	18 16       	cp	r1, r24
    1136:	0c f0       	brlt	.+2      	; 0x113a <CURTAIN_POS_CHANGE_HANDLE+0x462>
    1138:	10 e0       	ldi	r17, 0x00	; 0
    113a:	11 23       	and	r17, r17
    113c:	61 f1       	breq	.+88     	; 0x1196 <CURTAIN_POS_CHANGE_HANDLE+0x4be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    113e:	69 a9       	ldd	r22, Y+49	; 0x31
    1140:	7a a9       	ldd	r23, Y+50	; 0x32
    1142:	8b a9       	ldd	r24, Y+51	; 0x33
    1144:	9c a9       	ldd	r25, Y+52	; 0x34
    1146:	20 e0       	ldi	r18, 0x00	; 0
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	40 e2       	ldi	r20, 0x20	; 32
    114c:	51 e4       	ldi	r21, 0x41	; 65
    114e:	0e 94 65 19 	call	0x32ca	; 0x32ca <__mulsf3>
    1152:	dc 01       	movw	r26, r24
    1154:	cb 01       	movw	r24, r22
    1156:	bc 01       	movw	r22, r24
    1158:	cd 01       	movw	r24, r26
    115a:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__fixunssfsi>
    115e:	dc 01       	movw	r26, r24
    1160:	cb 01       	movw	r24, r22
    1162:	9a af       	std	Y+58, r25	; 0x3a
    1164:	89 af       	std	Y+57, r24	; 0x39
    1166:	12 c0       	rjmp	.+36     	; 0x118c <CURTAIN_POS_CHANGE_HANDLE+0x4b4>
    1168:	80 e9       	ldi	r24, 0x90	; 144
    116a:	91 e0       	ldi	r25, 0x01	; 1
    116c:	9c af       	std	Y+60, r25	; 0x3c
    116e:	8b af       	std	Y+59, r24	; 0x3b
    1170:	8b ad       	ldd	r24, Y+59	; 0x3b
    1172:	9c ad       	ldd	r25, Y+60	; 0x3c
    1174:	8c 01       	movw	r16, r24
    1176:	c8 01       	movw	r24, r16
    1178:	01 97       	sbiw	r24, 0x01	; 1
    117a:	f1 f7       	brne	.-4      	; 0x1178 <CURTAIN_POS_CHANGE_HANDLE+0x4a0>
    117c:	8c 01       	movw	r16, r24
    117e:	1c af       	std	Y+60, r17	; 0x3c
    1180:	0b af       	std	Y+59, r16	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1182:	89 ad       	ldd	r24, Y+57	; 0x39
    1184:	9a ad       	ldd	r25, Y+58	; 0x3a
    1186:	01 97       	sbiw	r24, 0x01	; 1
    1188:	9a af       	std	Y+58, r25	; 0x3a
    118a:	89 af       	std	Y+57, r24	; 0x39
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    118c:	89 ad       	ldd	r24, Y+57	; 0x39
    118e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1190:	00 97       	sbiw	r24, 0x00	; 0
    1192:	51 f7       	brne	.-44     	; 0x1168 <CURTAIN_POS_CHANGE_HANDLE+0x490>
    1194:	17 c0       	rjmp	.+46     	; 0x11c4 <CURTAIN_POS_CHANGE_HANDLE+0x4ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1196:	6d a9       	ldd	r22, Y+53	; 0x35
    1198:	7e a9       	ldd	r23, Y+54	; 0x36
    119a:	8f a9       	ldd	r24, Y+55	; 0x37
    119c:	98 ad       	ldd	r25, Y+56	; 0x38
    119e:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__fixunssfsi>
    11a2:	dc 01       	movw	r26, r24
    11a4:	cb 01       	movw	r24, r22
    11a6:	9a af       	std	Y+58, r25	; 0x3a
    11a8:	89 af       	std	Y+57, r24	; 0x39
    11aa:	89 ad       	ldd	r24, Y+57	; 0x39
    11ac:	9a ad       	ldd	r25, Y+58	; 0x3a
    11ae:	9e af       	std	Y+62, r25	; 0x3e
    11b0:	8d af       	std	Y+61, r24	; 0x3d
    11b2:	8d ad       	ldd	r24, Y+61	; 0x3d
    11b4:	9e ad       	ldd	r25, Y+62	; 0x3e
    11b6:	8c 01       	movw	r16, r24
    11b8:	f8 01       	movw	r30, r16
    11ba:	31 97       	sbiw	r30, 0x01	; 1
    11bc:	f1 f7       	brne	.-4      	; 0x11ba <CURTAIN_POS_CHANGE_HANDLE+0x4e2>
    11be:	8f 01       	movw	r16, r30
    11c0:	1e af       	std	Y+62, r17	; 0x3e
    11c2:	0d af       	std	Y+61, r16	; 0x3d
	
	if (positionToMove<8) {
		uint16_t degreesToMove = abs(positionToMove-previousCurtainPosition)*CURTAIN_CALIBRATION_CONSTANT;
		
		if((positionToMove-previousCurtainPosition)>0){
			for (uint16_t x = 0; x < degreesToMove;x++){
    11c4:	89 81       	ldd	r24, Y+1	; 0x01
    11c6:	9a 81       	ldd	r25, Y+2	; 0x02
    11c8:	01 96       	adiw	r24, 0x01	; 1
    11ca:	9a 83       	std	Y+2, r25	; 0x02
    11cc:	89 83       	std	Y+1, r24	; 0x01
    11ce:	29 81       	ldd	r18, Y+1	; 0x01
    11d0:	3a 81       	ldd	r19, Y+2	; 0x02
    11d2:	8d 81       	ldd	r24, Y+5	; 0x05
    11d4:	9e 81       	ldd	r25, Y+6	; 0x06
    11d6:	28 17       	cp	r18, r24
    11d8:	39 07       	cpc	r19, r25
    11da:	08 f4       	brcc	.+2      	; 0x11de <CURTAIN_POS_CHANGE_HANDLE+0x506>
    11dc:	df cd       	rjmp	.-1090   	; 0xd9c <CURTAIN_POS_CHANGE_HANDLE+0xc4>
    11de:	6a c3       	rjmp	.+1748   	; 0x18b4 <CURTAIN_POS_CHANGE_HANDLE+0xbdc>
				_delay_ms(MOTOR_DELAY_MS);
				PORTD = 0b00001001;
				_delay_ms(MOTOR_DELAY_MS);
			}
			}else{
			for (uint16_t x = 0; x < degreesToMove;x++){
    11e0:	1c 82       	std	Y+4, r1	; 0x04
    11e2:	1b 82       	std	Y+3, r1	; 0x03
    11e4:	5f c3       	rjmp	.+1726   	; 0x18a4 <CURTAIN_POS_CHANGE_HANDLE+0xbcc>
				PORTD = 0b00001100;
    11e6:	8b e2       	ldi	r24, 0x2B	; 43
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	2c e0       	ldi	r18, 0x0C	; 12
    11ec:	fc 01       	movw	r30, r24
    11ee:	20 83       	st	Z, r18
    11f0:	9e 01       	movw	r18, r28
    11f2:	21 5c       	subi	r18, 0xC1	; 193
    11f4:	3f 4f       	sbci	r19, 0xFF	; 255
    11f6:	80 e0       	ldi	r24, 0x00	; 0
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	a0 e8       	ldi	r26, 0x80	; 128
    11fc:	bf e3       	ldi	r27, 0x3F	; 63
    11fe:	f9 01       	movw	r30, r18
    1200:	80 83       	st	Z, r24
    1202:	91 83       	std	Z+1, r25	; 0x01
    1204:	a2 83       	std	Z+2, r26	; 0x02
    1206:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    1208:	8e 01       	movw	r16, r28
    120a:	0d 5b       	subi	r16, 0xBD	; 189
    120c:	1f 4f       	sbci	r17, 0xFF	; 255
    120e:	ce 01       	movw	r24, r28
    1210:	cf 96       	adiw	r24, 0x3f	; 63
    1212:	fc 01       	movw	r30, r24
    1214:	60 81       	ld	r22, Z
    1216:	71 81       	ldd	r23, Z+1	; 0x01
    1218:	82 81       	ldd	r24, Z+2	; 0x02
    121a:	93 81       	ldd	r25, Z+3	; 0x03
    121c:	20 e0       	ldi	r18, 0x00	; 0
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	4a e7       	ldi	r20, 0x7A	; 122
    1222:	55 e4       	ldi	r21, 0x45	; 69
    1224:	0e 94 65 19 	call	0x32ca	; 0x32ca <__mulsf3>
    1228:	dc 01       	movw	r26, r24
    122a:	cb 01       	movw	r24, r22
    122c:	f8 01       	movw	r30, r16
    122e:	80 83       	st	Z, r24
    1230:	91 83       	std	Z+1, r25	; 0x01
    1232:	a2 83       	std	Z+2, r26	; 0x02
    1234:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1236:	ce 01       	movw	r24, r28
    1238:	8d 5b       	subi	r24, 0xBD	; 189
    123a:	9f 4f       	sbci	r25, 0xFF	; 255
    123c:	11 e0       	ldi	r17, 0x01	; 1
    123e:	fc 01       	movw	r30, r24
    1240:	60 81       	ld	r22, Z
    1242:	71 81       	ldd	r23, Z+1	; 0x01
    1244:	82 81       	ldd	r24, Z+2	; 0x02
    1246:	93 81       	ldd	r25, Z+3	; 0x03
    1248:	20 e0       	ldi	r18, 0x00	; 0
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	40 e8       	ldi	r20, 0x80	; 128
    124e:	5f e3       	ldi	r21, 0x3F	; 63
    1250:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <__cmpsf2>
    1254:	88 23       	and	r24, r24
    1256:	0c f0       	brlt	.+2      	; 0x125a <CURTAIN_POS_CHANGE_HANDLE+0x582>
    1258:	10 e0       	ldi	r17, 0x00	; 0
    125a:	11 23       	and	r17, r17
    125c:	49 f0       	breq	.+18     	; 0x1270 <CURTAIN_POS_CHANGE_HANDLE+0x598>
		__ticks = 1;
    125e:	ce 01       	movw	r24, r28
    1260:	89 5b       	subi	r24, 0xB9	; 185
    1262:	9f 4f       	sbci	r25, 0xFF	; 255
    1264:	21 e0       	ldi	r18, 0x01	; 1
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	fc 01       	movw	r30, r24
    126a:	31 83       	std	Z+1, r19	; 0x01
    126c:	20 83       	st	Z, r18
    126e:	73 c0       	rjmp	.+230    	; 0x1356 <CURTAIN_POS_CHANGE_HANDLE+0x67e>
	else if (__tmp > 65535)
    1270:	ce 01       	movw	r24, r28
    1272:	8d 5b       	subi	r24, 0xBD	; 189
    1274:	9f 4f       	sbci	r25, 0xFF	; 255
    1276:	11 e0       	ldi	r17, 0x01	; 1
    1278:	fc 01       	movw	r30, r24
    127a:	60 81       	ld	r22, Z
    127c:	71 81       	ldd	r23, Z+1	; 0x01
    127e:	82 81       	ldd	r24, Z+2	; 0x02
    1280:	93 81       	ldd	r25, Z+3	; 0x03
    1282:	20 e0       	ldi	r18, 0x00	; 0
    1284:	3f ef       	ldi	r19, 0xFF	; 255
    1286:	4f e7       	ldi	r20, 0x7F	; 127
    1288:	57 e4       	ldi	r21, 0x47	; 71
    128a:	0e 94 61 19 	call	0x32c2	; 0x32c2 <__gesf2>
    128e:	18 16       	cp	r1, r24
    1290:	0c f0       	brlt	.+2      	; 0x1294 <CURTAIN_POS_CHANGE_HANDLE+0x5bc>
    1292:	10 e0       	ldi	r17, 0x00	; 0
    1294:	11 23       	and	r17, r17
    1296:	09 f4       	brne	.+2      	; 0x129a <CURTAIN_POS_CHANGE_HANDLE+0x5c2>
    1298:	4c c0       	rjmp	.+152    	; 0x1332 <CURTAIN_POS_CHANGE_HANDLE+0x65a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    129a:	ce 01       	movw	r24, r28
    129c:	cf 96       	adiw	r24, 0x3f	; 63
    129e:	fc 01       	movw	r30, r24
    12a0:	60 81       	ld	r22, Z
    12a2:	71 81       	ldd	r23, Z+1	; 0x01
    12a4:	82 81       	ldd	r24, Z+2	; 0x02
    12a6:	93 81       	ldd	r25, Z+3	; 0x03
    12a8:	20 e0       	ldi	r18, 0x00	; 0
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	40 e2       	ldi	r20, 0x20	; 32
    12ae:	51 e4       	ldi	r21, 0x41	; 65
    12b0:	0e 94 65 19 	call	0x32ca	; 0x32ca <__mulsf3>
    12b4:	dc 01       	movw	r26, r24
    12b6:	cb 01       	movw	r24, r22
    12b8:	8e 01       	movw	r16, r28
    12ba:	09 5b       	subi	r16, 0xB9	; 185
    12bc:	1f 4f       	sbci	r17, 0xFF	; 255
    12be:	bc 01       	movw	r22, r24
    12c0:	cd 01       	movw	r24, r26
    12c2:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__fixunssfsi>
    12c6:	dc 01       	movw	r26, r24
    12c8:	cb 01       	movw	r24, r22
    12ca:	f8 01       	movw	r30, r16
    12cc:	91 83       	std	Z+1, r25	; 0x01
    12ce:	80 83       	st	Z, r24
    12d0:	27 c0       	rjmp	.+78     	; 0x1320 <CURTAIN_POS_CHANGE_HANDLE+0x648>
    12d2:	ce 01       	movw	r24, r28
    12d4:	87 5b       	subi	r24, 0xB7	; 183
    12d6:	9f 4f       	sbci	r25, 0xFF	; 255
    12d8:	20 e9       	ldi	r18, 0x90	; 144
    12da:	31 e0       	ldi	r19, 0x01	; 1
    12dc:	fc 01       	movw	r30, r24
    12de:	31 83       	std	Z+1, r19	; 0x01
    12e0:	20 83       	st	Z, r18
    12e2:	ce 01       	movw	r24, r28
    12e4:	87 5b       	subi	r24, 0xB7	; 183
    12e6:	9f 4f       	sbci	r25, 0xFF	; 255
    12e8:	fc 01       	movw	r30, r24
    12ea:	80 81       	ld	r24, Z
    12ec:	91 81       	ldd	r25, Z+1	; 0x01
    12ee:	8c 01       	movw	r16, r24
    12f0:	c8 01       	movw	r24, r16
    12f2:	01 97       	sbiw	r24, 0x01	; 1
    12f4:	f1 f7       	brne	.-4      	; 0x12f2 <CURTAIN_POS_CHANGE_HANDLE+0x61a>
    12f6:	8c 01       	movw	r16, r24
    12f8:	ce 01       	movw	r24, r28
    12fa:	87 5b       	subi	r24, 0xB7	; 183
    12fc:	9f 4f       	sbci	r25, 0xFF	; 255
    12fe:	fc 01       	movw	r30, r24
    1300:	11 83       	std	Z+1, r17	; 0x01
    1302:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1304:	ce 01       	movw	r24, r28
    1306:	89 5b       	subi	r24, 0xB9	; 185
    1308:	9f 4f       	sbci	r25, 0xFF	; 255
    130a:	9e 01       	movw	r18, r28
    130c:	29 5b       	subi	r18, 0xB9	; 185
    130e:	3f 4f       	sbci	r19, 0xFF	; 255
    1310:	f9 01       	movw	r30, r18
    1312:	20 81       	ld	r18, Z
    1314:	31 81       	ldd	r19, Z+1	; 0x01
    1316:	21 50       	subi	r18, 0x01	; 1
    1318:	30 40       	sbci	r19, 0x00	; 0
    131a:	fc 01       	movw	r30, r24
    131c:	31 83       	std	Z+1, r19	; 0x01
    131e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1320:	ce 01       	movw	r24, r28
    1322:	89 5b       	subi	r24, 0xB9	; 185
    1324:	9f 4f       	sbci	r25, 0xFF	; 255
    1326:	fc 01       	movw	r30, r24
    1328:	80 81       	ld	r24, Z
    132a:	91 81       	ldd	r25, Z+1	; 0x01
    132c:	00 97       	sbiw	r24, 0x00	; 0
    132e:	89 f6       	brne	.-94     	; 0x12d2 <CURTAIN_POS_CHANGE_HANDLE+0x5fa>
    1330:	2f c0       	rjmp	.+94     	; 0x1390 <CURTAIN_POS_CHANGE_HANDLE+0x6b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1332:	8e 01       	movw	r16, r28
    1334:	09 5b       	subi	r16, 0xB9	; 185
    1336:	1f 4f       	sbci	r17, 0xFF	; 255
    1338:	ce 01       	movw	r24, r28
    133a:	8d 5b       	subi	r24, 0xBD	; 189
    133c:	9f 4f       	sbci	r25, 0xFF	; 255
    133e:	fc 01       	movw	r30, r24
    1340:	60 81       	ld	r22, Z
    1342:	71 81       	ldd	r23, Z+1	; 0x01
    1344:	82 81       	ldd	r24, Z+2	; 0x02
    1346:	93 81       	ldd	r25, Z+3	; 0x03
    1348:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__fixunssfsi>
    134c:	dc 01       	movw	r26, r24
    134e:	cb 01       	movw	r24, r22
    1350:	f8 01       	movw	r30, r16
    1352:	91 83       	std	Z+1, r25	; 0x01
    1354:	80 83       	st	Z, r24
    1356:	ce 01       	movw	r24, r28
    1358:	85 5b       	subi	r24, 0xB5	; 181
    135a:	9f 4f       	sbci	r25, 0xFF	; 255
    135c:	9e 01       	movw	r18, r28
    135e:	29 5b       	subi	r18, 0xB9	; 185
    1360:	3f 4f       	sbci	r19, 0xFF	; 255
    1362:	f9 01       	movw	r30, r18
    1364:	20 81       	ld	r18, Z
    1366:	31 81       	ldd	r19, Z+1	; 0x01
    1368:	fc 01       	movw	r30, r24
    136a:	31 83       	std	Z+1, r19	; 0x01
    136c:	20 83       	st	Z, r18
    136e:	ce 01       	movw	r24, r28
    1370:	85 5b       	subi	r24, 0xB5	; 181
    1372:	9f 4f       	sbci	r25, 0xFF	; 255
    1374:	fc 01       	movw	r30, r24
    1376:	80 81       	ld	r24, Z
    1378:	91 81       	ldd	r25, Z+1	; 0x01
    137a:	8c 01       	movw	r16, r24
    137c:	c8 01       	movw	r24, r16
    137e:	01 97       	sbiw	r24, 0x01	; 1
    1380:	f1 f7       	brne	.-4      	; 0x137e <CURTAIN_POS_CHANGE_HANDLE+0x6a6>
    1382:	8c 01       	movw	r16, r24
    1384:	ce 01       	movw	r24, r28
    1386:	85 5b       	subi	r24, 0xB5	; 181
    1388:	9f 4f       	sbci	r25, 0xFF	; 255
    138a:	fc 01       	movw	r30, r24
    138c:	11 83       	std	Z+1, r17	; 0x01
    138e:	00 83       	st	Z, r16
				_delay_ms(MOTOR_DELAY_MS);
				PORTD = 0b00000110;
    1390:	8b e2       	ldi	r24, 0x2B	; 43
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	26 e0       	ldi	r18, 0x06	; 6
    1396:	fc 01       	movw	r30, r24
    1398:	20 83       	st	Z, r18
    139a:	9e 01       	movw	r18, r28
    139c:	23 5b       	subi	r18, 0xB3	; 179
    139e:	3f 4f       	sbci	r19, 0xFF	; 255
    13a0:	80 e0       	ldi	r24, 0x00	; 0
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	a0 e8       	ldi	r26, 0x80	; 128
    13a6:	bf e3       	ldi	r27, 0x3F	; 63
    13a8:	f9 01       	movw	r30, r18
    13aa:	80 83       	st	Z, r24
    13ac:	91 83       	std	Z+1, r25	; 0x01
    13ae:	a2 83       	std	Z+2, r26	; 0x02
    13b0:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    13b2:	8e 01       	movw	r16, r28
    13b4:	0f 5a       	subi	r16, 0xAF	; 175
    13b6:	1f 4f       	sbci	r17, 0xFF	; 255
    13b8:	ce 01       	movw	r24, r28
    13ba:	83 5b       	subi	r24, 0xB3	; 179
    13bc:	9f 4f       	sbci	r25, 0xFF	; 255
    13be:	fc 01       	movw	r30, r24
    13c0:	60 81       	ld	r22, Z
    13c2:	71 81       	ldd	r23, Z+1	; 0x01
    13c4:	82 81       	ldd	r24, Z+2	; 0x02
    13c6:	93 81       	ldd	r25, Z+3	; 0x03
    13c8:	20 e0       	ldi	r18, 0x00	; 0
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	4a e7       	ldi	r20, 0x7A	; 122
    13ce:	55 e4       	ldi	r21, 0x45	; 69
    13d0:	0e 94 65 19 	call	0x32ca	; 0x32ca <__mulsf3>
    13d4:	dc 01       	movw	r26, r24
    13d6:	cb 01       	movw	r24, r22
    13d8:	f8 01       	movw	r30, r16
    13da:	80 83       	st	Z, r24
    13dc:	91 83       	std	Z+1, r25	; 0x01
    13de:	a2 83       	std	Z+2, r26	; 0x02
    13e0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    13e2:	ce 01       	movw	r24, r28
    13e4:	8f 5a       	subi	r24, 0xAF	; 175
    13e6:	9f 4f       	sbci	r25, 0xFF	; 255
    13e8:	11 e0       	ldi	r17, 0x01	; 1
    13ea:	fc 01       	movw	r30, r24
    13ec:	60 81       	ld	r22, Z
    13ee:	71 81       	ldd	r23, Z+1	; 0x01
    13f0:	82 81       	ldd	r24, Z+2	; 0x02
    13f2:	93 81       	ldd	r25, Z+3	; 0x03
    13f4:	20 e0       	ldi	r18, 0x00	; 0
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	40 e8       	ldi	r20, 0x80	; 128
    13fa:	5f e3       	ldi	r21, 0x3F	; 63
    13fc:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <__cmpsf2>
    1400:	88 23       	and	r24, r24
    1402:	0c f0       	brlt	.+2      	; 0x1406 <CURTAIN_POS_CHANGE_HANDLE+0x72e>
    1404:	10 e0       	ldi	r17, 0x00	; 0
    1406:	11 23       	and	r17, r17
    1408:	49 f0       	breq	.+18     	; 0x141c <CURTAIN_POS_CHANGE_HANDLE+0x744>
		__ticks = 1;
    140a:	ce 01       	movw	r24, r28
    140c:	8b 5a       	subi	r24, 0xAB	; 171
    140e:	9f 4f       	sbci	r25, 0xFF	; 255
    1410:	21 e0       	ldi	r18, 0x01	; 1
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	fc 01       	movw	r30, r24
    1416:	31 83       	std	Z+1, r19	; 0x01
    1418:	20 83       	st	Z, r18
    141a:	74 c0       	rjmp	.+232    	; 0x1504 <CURTAIN_POS_CHANGE_HANDLE+0x82c>
	else if (__tmp > 65535)
    141c:	ce 01       	movw	r24, r28
    141e:	8f 5a       	subi	r24, 0xAF	; 175
    1420:	9f 4f       	sbci	r25, 0xFF	; 255
    1422:	11 e0       	ldi	r17, 0x01	; 1
    1424:	fc 01       	movw	r30, r24
    1426:	60 81       	ld	r22, Z
    1428:	71 81       	ldd	r23, Z+1	; 0x01
    142a:	82 81       	ldd	r24, Z+2	; 0x02
    142c:	93 81       	ldd	r25, Z+3	; 0x03
    142e:	20 e0       	ldi	r18, 0x00	; 0
    1430:	3f ef       	ldi	r19, 0xFF	; 255
    1432:	4f e7       	ldi	r20, 0x7F	; 127
    1434:	57 e4       	ldi	r21, 0x47	; 71
    1436:	0e 94 61 19 	call	0x32c2	; 0x32c2 <__gesf2>
    143a:	18 16       	cp	r1, r24
    143c:	0c f0       	brlt	.+2      	; 0x1440 <CURTAIN_POS_CHANGE_HANDLE+0x768>
    143e:	10 e0       	ldi	r17, 0x00	; 0
    1440:	11 23       	and	r17, r17
    1442:	09 f4       	brne	.+2      	; 0x1446 <CURTAIN_POS_CHANGE_HANDLE+0x76e>
    1444:	4d c0       	rjmp	.+154    	; 0x14e0 <CURTAIN_POS_CHANGE_HANDLE+0x808>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1446:	ce 01       	movw	r24, r28
    1448:	83 5b       	subi	r24, 0xB3	; 179
    144a:	9f 4f       	sbci	r25, 0xFF	; 255
    144c:	fc 01       	movw	r30, r24
    144e:	60 81       	ld	r22, Z
    1450:	71 81       	ldd	r23, Z+1	; 0x01
    1452:	82 81       	ldd	r24, Z+2	; 0x02
    1454:	93 81       	ldd	r25, Z+3	; 0x03
    1456:	20 e0       	ldi	r18, 0x00	; 0
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	40 e2       	ldi	r20, 0x20	; 32
    145c:	51 e4       	ldi	r21, 0x41	; 65
    145e:	0e 94 65 19 	call	0x32ca	; 0x32ca <__mulsf3>
    1462:	dc 01       	movw	r26, r24
    1464:	cb 01       	movw	r24, r22
    1466:	8e 01       	movw	r16, r28
    1468:	0b 5a       	subi	r16, 0xAB	; 171
    146a:	1f 4f       	sbci	r17, 0xFF	; 255
    146c:	bc 01       	movw	r22, r24
    146e:	cd 01       	movw	r24, r26
    1470:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__fixunssfsi>
    1474:	dc 01       	movw	r26, r24
    1476:	cb 01       	movw	r24, r22
    1478:	f8 01       	movw	r30, r16
    147a:	91 83       	std	Z+1, r25	; 0x01
    147c:	80 83       	st	Z, r24
    147e:	27 c0       	rjmp	.+78     	; 0x14ce <CURTAIN_POS_CHANGE_HANDLE+0x7f6>
    1480:	ce 01       	movw	r24, r28
    1482:	89 5a       	subi	r24, 0xA9	; 169
    1484:	9f 4f       	sbci	r25, 0xFF	; 255
    1486:	20 e9       	ldi	r18, 0x90	; 144
    1488:	31 e0       	ldi	r19, 0x01	; 1
    148a:	fc 01       	movw	r30, r24
    148c:	31 83       	std	Z+1, r19	; 0x01
    148e:	20 83       	st	Z, r18
    1490:	ce 01       	movw	r24, r28
    1492:	89 5a       	subi	r24, 0xA9	; 169
    1494:	9f 4f       	sbci	r25, 0xFF	; 255
    1496:	fc 01       	movw	r30, r24
    1498:	80 81       	ld	r24, Z
    149a:	91 81       	ldd	r25, Z+1	; 0x01
    149c:	8c 01       	movw	r16, r24
    149e:	c8 01       	movw	r24, r16
    14a0:	01 97       	sbiw	r24, 0x01	; 1
    14a2:	f1 f7       	brne	.-4      	; 0x14a0 <CURTAIN_POS_CHANGE_HANDLE+0x7c8>
    14a4:	8c 01       	movw	r16, r24
    14a6:	ce 01       	movw	r24, r28
    14a8:	89 5a       	subi	r24, 0xA9	; 169
    14aa:	9f 4f       	sbci	r25, 0xFF	; 255
    14ac:	fc 01       	movw	r30, r24
    14ae:	11 83       	std	Z+1, r17	; 0x01
    14b0:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14b2:	ce 01       	movw	r24, r28
    14b4:	8b 5a       	subi	r24, 0xAB	; 171
    14b6:	9f 4f       	sbci	r25, 0xFF	; 255
    14b8:	9e 01       	movw	r18, r28
    14ba:	2b 5a       	subi	r18, 0xAB	; 171
    14bc:	3f 4f       	sbci	r19, 0xFF	; 255
    14be:	f9 01       	movw	r30, r18
    14c0:	20 81       	ld	r18, Z
    14c2:	31 81       	ldd	r19, Z+1	; 0x01
    14c4:	21 50       	subi	r18, 0x01	; 1
    14c6:	30 40       	sbci	r19, 0x00	; 0
    14c8:	fc 01       	movw	r30, r24
    14ca:	31 83       	std	Z+1, r19	; 0x01
    14cc:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ce:	ce 01       	movw	r24, r28
    14d0:	8b 5a       	subi	r24, 0xAB	; 171
    14d2:	9f 4f       	sbci	r25, 0xFF	; 255
    14d4:	fc 01       	movw	r30, r24
    14d6:	80 81       	ld	r24, Z
    14d8:	91 81       	ldd	r25, Z+1	; 0x01
    14da:	00 97       	sbiw	r24, 0x00	; 0
    14dc:	89 f6       	brne	.-94     	; 0x1480 <CURTAIN_POS_CHANGE_HANDLE+0x7a8>
    14de:	2f c0       	rjmp	.+94     	; 0x153e <CURTAIN_POS_CHANGE_HANDLE+0x866>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14e0:	8e 01       	movw	r16, r28
    14e2:	0b 5a       	subi	r16, 0xAB	; 171
    14e4:	1f 4f       	sbci	r17, 0xFF	; 255
    14e6:	ce 01       	movw	r24, r28
    14e8:	8f 5a       	subi	r24, 0xAF	; 175
    14ea:	9f 4f       	sbci	r25, 0xFF	; 255
    14ec:	fc 01       	movw	r30, r24
    14ee:	60 81       	ld	r22, Z
    14f0:	71 81       	ldd	r23, Z+1	; 0x01
    14f2:	82 81       	ldd	r24, Z+2	; 0x02
    14f4:	93 81       	ldd	r25, Z+3	; 0x03
    14f6:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__fixunssfsi>
    14fa:	dc 01       	movw	r26, r24
    14fc:	cb 01       	movw	r24, r22
    14fe:	f8 01       	movw	r30, r16
    1500:	91 83       	std	Z+1, r25	; 0x01
    1502:	80 83       	st	Z, r24
    1504:	ce 01       	movw	r24, r28
    1506:	87 5a       	subi	r24, 0xA7	; 167
    1508:	9f 4f       	sbci	r25, 0xFF	; 255
    150a:	9e 01       	movw	r18, r28
    150c:	2b 5a       	subi	r18, 0xAB	; 171
    150e:	3f 4f       	sbci	r19, 0xFF	; 255
    1510:	f9 01       	movw	r30, r18
    1512:	20 81       	ld	r18, Z
    1514:	31 81       	ldd	r19, Z+1	; 0x01
    1516:	fc 01       	movw	r30, r24
    1518:	31 83       	std	Z+1, r19	; 0x01
    151a:	20 83       	st	Z, r18
    151c:	ce 01       	movw	r24, r28
    151e:	87 5a       	subi	r24, 0xA7	; 167
    1520:	9f 4f       	sbci	r25, 0xFF	; 255
    1522:	fc 01       	movw	r30, r24
    1524:	80 81       	ld	r24, Z
    1526:	91 81       	ldd	r25, Z+1	; 0x01
    1528:	8c 01       	movw	r16, r24
    152a:	c8 01       	movw	r24, r16
    152c:	01 97       	sbiw	r24, 0x01	; 1
    152e:	f1 f7       	brne	.-4      	; 0x152c <CURTAIN_POS_CHANGE_HANDLE+0x854>
    1530:	8c 01       	movw	r16, r24
    1532:	ce 01       	movw	r24, r28
    1534:	87 5a       	subi	r24, 0xA7	; 167
    1536:	9f 4f       	sbci	r25, 0xFF	; 255
    1538:	fc 01       	movw	r30, r24
    153a:	11 83       	std	Z+1, r17	; 0x01
    153c:	00 83       	st	Z, r16
				_delay_ms(MOTOR_DELAY_MS);
				PORTD = 0b00000011;
    153e:	8b e2       	ldi	r24, 0x2B	; 43
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	23 e0       	ldi	r18, 0x03	; 3
    1544:	fc 01       	movw	r30, r24
    1546:	20 83       	st	Z, r18
    1548:	9e 01       	movw	r18, r28
    154a:	25 5a       	subi	r18, 0xA5	; 165
    154c:	3f 4f       	sbci	r19, 0xFF	; 255
    154e:	80 e0       	ldi	r24, 0x00	; 0
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	a0 e8       	ldi	r26, 0x80	; 128
    1554:	bf e3       	ldi	r27, 0x3F	; 63
    1556:	f9 01       	movw	r30, r18
    1558:	80 83       	st	Z, r24
    155a:	91 83       	std	Z+1, r25	; 0x01
    155c:	a2 83       	std	Z+2, r26	; 0x02
    155e:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    1560:	8e 01       	movw	r16, r28
    1562:	01 5a       	subi	r16, 0xA1	; 161
    1564:	1f 4f       	sbci	r17, 0xFF	; 255
    1566:	ce 01       	movw	r24, r28
    1568:	85 5a       	subi	r24, 0xA5	; 165
    156a:	9f 4f       	sbci	r25, 0xFF	; 255
    156c:	fc 01       	movw	r30, r24
    156e:	60 81       	ld	r22, Z
    1570:	71 81       	ldd	r23, Z+1	; 0x01
    1572:	82 81       	ldd	r24, Z+2	; 0x02
    1574:	93 81       	ldd	r25, Z+3	; 0x03
    1576:	20 e0       	ldi	r18, 0x00	; 0
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	4a e7       	ldi	r20, 0x7A	; 122
    157c:	55 e4       	ldi	r21, 0x45	; 69
    157e:	0e 94 65 19 	call	0x32ca	; 0x32ca <__mulsf3>
    1582:	dc 01       	movw	r26, r24
    1584:	cb 01       	movw	r24, r22
    1586:	f8 01       	movw	r30, r16
    1588:	80 83       	st	Z, r24
    158a:	91 83       	std	Z+1, r25	; 0x01
    158c:	a2 83       	std	Z+2, r26	; 0x02
    158e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1590:	ce 01       	movw	r24, r28
    1592:	81 5a       	subi	r24, 0xA1	; 161
    1594:	9f 4f       	sbci	r25, 0xFF	; 255
    1596:	11 e0       	ldi	r17, 0x01	; 1
    1598:	fc 01       	movw	r30, r24
    159a:	60 81       	ld	r22, Z
    159c:	71 81       	ldd	r23, Z+1	; 0x01
    159e:	82 81       	ldd	r24, Z+2	; 0x02
    15a0:	93 81       	ldd	r25, Z+3	; 0x03
    15a2:	20 e0       	ldi	r18, 0x00	; 0
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	40 e8       	ldi	r20, 0x80	; 128
    15a8:	5f e3       	ldi	r21, 0x3F	; 63
    15aa:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <__cmpsf2>
    15ae:	88 23       	and	r24, r24
    15b0:	0c f0       	brlt	.+2      	; 0x15b4 <CURTAIN_POS_CHANGE_HANDLE+0x8dc>
    15b2:	10 e0       	ldi	r17, 0x00	; 0
    15b4:	11 23       	and	r17, r17
    15b6:	49 f0       	breq	.+18     	; 0x15ca <CURTAIN_POS_CHANGE_HANDLE+0x8f2>
		__ticks = 1;
    15b8:	ce 01       	movw	r24, r28
    15ba:	8d 59       	subi	r24, 0x9D	; 157
    15bc:	9f 4f       	sbci	r25, 0xFF	; 255
    15be:	21 e0       	ldi	r18, 0x01	; 1
    15c0:	30 e0       	ldi	r19, 0x00	; 0
    15c2:	fc 01       	movw	r30, r24
    15c4:	31 83       	std	Z+1, r19	; 0x01
    15c6:	20 83       	st	Z, r18
    15c8:	74 c0       	rjmp	.+232    	; 0x16b2 <CURTAIN_POS_CHANGE_HANDLE+0x9da>
	else if (__tmp > 65535)
    15ca:	ce 01       	movw	r24, r28
    15cc:	81 5a       	subi	r24, 0xA1	; 161
    15ce:	9f 4f       	sbci	r25, 0xFF	; 255
    15d0:	11 e0       	ldi	r17, 0x01	; 1
    15d2:	fc 01       	movw	r30, r24
    15d4:	60 81       	ld	r22, Z
    15d6:	71 81       	ldd	r23, Z+1	; 0x01
    15d8:	82 81       	ldd	r24, Z+2	; 0x02
    15da:	93 81       	ldd	r25, Z+3	; 0x03
    15dc:	20 e0       	ldi	r18, 0x00	; 0
    15de:	3f ef       	ldi	r19, 0xFF	; 255
    15e0:	4f e7       	ldi	r20, 0x7F	; 127
    15e2:	57 e4       	ldi	r21, 0x47	; 71
    15e4:	0e 94 61 19 	call	0x32c2	; 0x32c2 <__gesf2>
    15e8:	18 16       	cp	r1, r24
    15ea:	0c f0       	brlt	.+2      	; 0x15ee <CURTAIN_POS_CHANGE_HANDLE+0x916>
    15ec:	10 e0       	ldi	r17, 0x00	; 0
    15ee:	11 23       	and	r17, r17
    15f0:	09 f4       	brne	.+2      	; 0x15f4 <CURTAIN_POS_CHANGE_HANDLE+0x91c>
    15f2:	4d c0       	rjmp	.+154    	; 0x168e <CURTAIN_POS_CHANGE_HANDLE+0x9b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15f4:	ce 01       	movw	r24, r28
    15f6:	85 5a       	subi	r24, 0xA5	; 165
    15f8:	9f 4f       	sbci	r25, 0xFF	; 255
    15fa:	fc 01       	movw	r30, r24
    15fc:	60 81       	ld	r22, Z
    15fe:	71 81       	ldd	r23, Z+1	; 0x01
    1600:	82 81       	ldd	r24, Z+2	; 0x02
    1602:	93 81       	ldd	r25, Z+3	; 0x03
    1604:	20 e0       	ldi	r18, 0x00	; 0
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	40 e2       	ldi	r20, 0x20	; 32
    160a:	51 e4       	ldi	r21, 0x41	; 65
    160c:	0e 94 65 19 	call	0x32ca	; 0x32ca <__mulsf3>
    1610:	dc 01       	movw	r26, r24
    1612:	cb 01       	movw	r24, r22
    1614:	8e 01       	movw	r16, r28
    1616:	0d 59       	subi	r16, 0x9D	; 157
    1618:	1f 4f       	sbci	r17, 0xFF	; 255
    161a:	bc 01       	movw	r22, r24
    161c:	cd 01       	movw	r24, r26
    161e:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__fixunssfsi>
    1622:	dc 01       	movw	r26, r24
    1624:	cb 01       	movw	r24, r22
    1626:	f8 01       	movw	r30, r16
    1628:	91 83       	std	Z+1, r25	; 0x01
    162a:	80 83       	st	Z, r24
    162c:	27 c0       	rjmp	.+78     	; 0x167c <CURTAIN_POS_CHANGE_HANDLE+0x9a4>
    162e:	ce 01       	movw	r24, r28
    1630:	8b 59       	subi	r24, 0x9B	; 155
    1632:	9f 4f       	sbci	r25, 0xFF	; 255
    1634:	20 e9       	ldi	r18, 0x90	; 144
    1636:	31 e0       	ldi	r19, 0x01	; 1
    1638:	fc 01       	movw	r30, r24
    163a:	31 83       	std	Z+1, r19	; 0x01
    163c:	20 83       	st	Z, r18
    163e:	ce 01       	movw	r24, r28
    1640:	8b 59       	subi	r24, 0x9B	; 155
    1642:	9f 4f       	sbci	r25, 0xFF	; 255
    1644:	fc 01       	movw	r30, r24
    1646:	80 81       	ld	r24, Z
    1648:	91 81       	ldd	r25, Z+1	; 0x01
    164a:	8c 01       	movw	r16, r24
    164c:	c8 01       	movw	r24, r16
    164e:	01 97       	sbiw	r24, 0x01	; 1
    1650:	f1 f7       	brne	.-4      	; 0x164e <CURTAIN_POS_CHANGE_HANDLE+0x976>
    1652:	8c 01       	movw	r16, r24
    1654:	ce 01       	movw	r24, r28
    1656:	8b 59       	subi	r24, 0x9B	; 155
    1658:	9f 4f       	sbci	r25, 0xFF	; 255
    165a:	fc 01       	movw	r30, r24
    165c:	11 83       	std	Z+1, r17	; 0x01
    165e:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1660:	ce 01       	movw	r24, r28
    1662:	8d 59       	subi	r24, 0x9D	; 157
    1664:	9f 4f       	sbci	r25, 0xFF	; 255
    1666:	9e 01       	movw	r18, r28
    1668:	2d 59       	subi	r18, 0x9D	; 157
    166a:	3f 4f       	sbci	r19, 0xFF	; 255
    166c:	f9 01       	movw	r30, r18
    166e:	20 81       	ld	r18, Z
    1670:	31 81       	ldd	r19, Z+1	; 0x01
    1672:	21 50       	subi	r18, 0x01	; 1
    1674:	30 40       	sbci	r19, 0x00	; 0
    1676:	fc 01       	movw	r30, r24
    1678:	31 83       	std	Z+1, r19	; 0x01
    167a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    167c:	ce 01       	movw	r24, r28
    167e:	8d 59       	subi	r24, 0x9D	; 157
    1680:	9f 4f       	sbci	r25, 0xFF	; 255
    1682:	fc 01       	movw	r30, r24
    1684:	80 81       	ld	r24, Z
    1686:	91 81       	ldd	r25, Z+1	; 0x01
    1688:	00 97       	sbiw	r24, 0x00	; 0
    168a:	89 f6       	brne	.-94     	; 0x162e <CURTAIN_POS_CHANGE_HANDLE+0x956>
    168c:	2f c0       	rjmp	.+94     	; 0x16ec <CURTAIN_POS_CHANGE_HANDLE+0xa14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    168e:	8e 01       	movw	r16, r28
    1690:	0d 59       	subi	r16, 0x9D	; 157
    1692:	1f 4f       	sbci	r17, 0xFF	; 255
    1694:	ce 01       	movw	r24, r28
    1696:	81 5a       	subi	r24, 0xA1	; 161
    1698:	9f 4f       	sbci	r25, 0xFF	; 255
    169a:	fc 01       	movw	r30, r24
    169c:	60 81       	ld	r22, Z
    169e:	71 81       	ldd	r23, Z+1	; 0x01
    16a0:	82 81       	ldd	r24, Z+2	; 0x02
    16a2:	93 81       	ldd	r25, Z+3	; 0x03
    16a4:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__fixunssfsi>
    16a8:	dc 01       	movw	r26, r24
    16aa:	cb 01       	movw	r24, r22
    16ac:	f8 01       	movw	r30, r16
    16ae:	91 83       	std	Z+1, r25	; 0x01
    16b0:	80 83       	st	Z, r24
    16b2:	ce 01       	movw	r24, r28
    16b4:	89 59       	subi	r24, 0x99	; 153
    16b6:	9f 4f       	sbci	r25, 0xFF	; 255
    16b8:	9e 01       	movw	r18, r28
    16ba:	2d 59       	subi	r18, 0x9D	; 157
    16bc:	3f 4f       	sbci	r19, 0xFF	; 255
    16be:	f9 01       	movw	r30, r18
    16c0:	20 81       	ld	r18, Z
    16c2:	31 81       	ldd	r19, Z+1	; 0x01
    16c4:	fc 01       	movw	r30, r24
    16c6:	31 83       	std	Z+1, r19	; 0x01
    16c8:	20 83       	st	Z, r18
    16ca:	ce 01       	movw	r24, r28
    16cc:	89 59       	subi	r24, 0x99	; 153
    16ce:	9f 4f       	sbci	r25, 0xFF	; 255
    16d0:	fc 01       	movw	r30, r24
    16d2:	80 81       	ld	r24, Z
    16d4:	91 81       	ldd	r25, Z+1	; 0x01
    16d6:	8c 01       	movw	r16, r24
    16d8:	c8 01       	movw	r24, r16
    16da:	01 97       	sbiw	r24, 0x01	; 1
    16dc:	f1 f7       	brne	.-4      	; 0x16da <CURTAIN_POS_CHANGE_HANDLE+0xa02>
    16de:	8c 01       	movw	r16, r24
    16e0:	ce 01       	movw	r24, r28
    16e2:	89 59       	subi	r24, 0x99	; 153
    16e4:	9f 4f       	sbci	r25, 0xFF	; 255
    16e6:	fc 01       	movw	r30, r24
    16e8:	11 83       	std	Z+1, r17	; 0x01
    16ea:	00 83       	st	Z, r16
				_delay_ms(MOTOR_DELAY_MS);
				PORTD = 0b00001001;
    16ec:	8b e2       	ldi	r24, 0x2B	; 43
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	29 e0       	ldi	r18, 0x09	; 9
    16f2:	fc 01       	movw	r30, r24
    16f4:	20 83       	st	Z, r18
    16f6:	9e 01       	movw	r18, r28
    16f8:	27 59       	subi	r18, 0x97	; 151
    16fa:	3f 4f       	sbci	r19, 0xFF	; 255
    16fc:	80 e0       	ldi	r24, 0x00	; 0
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	a0 e8       	ldi	r26, 0x80	; 128
    1702:	bf e3       	ldi	r27, 0x3F	; 63
    1704:	f9 01       	movw	r30, r18
    1706:	80 83       	st	Z, r24
    1708:	91 83       	std	Z+1, r25	; 0x01
    170a:	a2 83       	std	Z+2, r26	; 0x02
    170c:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    170e:	8e 01       	movw	r16, r28
    1710:	03 59       	subi	r16, 0x93	; 147
    1712:	1f 4f       	sbci	r17, 0xFF	; 255
    1714:	ce 01       	movw	r24, r28
    1716:	87 59       	subi	r24, 0x97	; 151
    1718:	9f 4f       	sbci	r25, 0xFF	; 255
    171a:	fc 01       	movw	r30, r24
    171c:	60 81       	ld	r22, Z
    171e:	71 81       	ldd	r23, Z+1	; 0x01
    1720:	82 81       	ldd	r24, Z+2	; 0x02
    1722:	93 81       	ldd	r25, Z+3	; 0x03
    1724:	20 e0       	ldi	r18, 0x00	; 0
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	4a e7       	ldi	r20, 0x7A	; 122
    172a:	55 e4       	ldi	r21, 0x45	; 69
    172c:	0e 94 65 19 	call	0x32ca	; 0x32ca <__mulsf3>
    1730:	dc 01       	movw	r26, r24
    1732:	cb 01       	movw	r24, r22
    1734:	f8 01       	movw	r30, r16
    1736:	80 83       	st	Z, r24
    1738:	91 83       	std	Z+1, r25	; 0x01
    173a:	a2 83       	std	Z+2, r26	; 0x02
    173c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    173e:	ce 01       	movw	r24, r28
    1740:	83 59       	subi	r24, 0x93	; 147
    1742:	9f 4f       	sbci	r25, 0xFF	; 255
    1744:	11 e0       	ldi	r17, 0x01	; 1
    1746:	fc 01       	movw	r30, r24
    1748:	60 81       	ld	r22, Z
    174a:	71 81       	ldd	r23, Z+1	; 0x01
    174c:	82 81       	ldd	r24, Z+2	; 0x02
    174e:	93 81       	ldd	r25, Z+3	; 0x03
    1750:	20 e0       	ldi	r18, 0x00	; 0
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	40 e8       	ldi	r20, 0x80	; 128
    1756:	5f e3       	ldi	r21, 0x3F	; 63
    1758:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <__cmpsf2>
    175c:	88 23       	and	r24, r24
    175e:	0c f0       	brlt	.+2      	; 0x1762 <CURTAIN_POS_CHANGE_HANDLE+0xa8a>
    1760:	10 e0       	ldi	r17, 0x00	; 0
    1762:	11 23       	and	r17, r17
    1764:	49 f0       	breq	.+18     	; 0x1778 <CURTAIN_POS_CHANGE_HANDLE+0xaa0>
		__ticks = 1;
    1766:	ce 01       	movw	r24, r28
    1768:	8f 58       	subi	r24, 0x8F	; 143
    176a:	9f 4f       	sbci	r25, 0xFF	; 255
    176c:	21 e0       	ldi	r18, 0x01	; 1
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	fc 01       	movw	r30, r24
    1772:	31 83       	std	Z+1, r19	; 0x01
    1774:	20 83       	st	Z, r18
    1776:	74 c0       	rjmp	.+232    	; 0x1860 <CURTAIN_POS_CHANGE_HANDLE+0xb88>
	else if (__tmp > 65535)
    1778:	ce 01       	movw	r24, r28
    177a:	83 59       	subi	r24, 0x93	; 147
    177c:	9f 4f       	sbci	r25, 0xFF	; 255
    177e:	11 e0       	ldi	r17, 0x01	; 1
    1780:	fc 01       	movw	r30, r24
    1782:	60 81       	ld	r22, Z
    1784:	71 81       	ldd	r23, Z+1	; 0x01
    1786:	82 81       	ldd	r24, Z+2	; 0x02
    1788:	93 81       	ldd	r25, Z+3	; 0x03
    178a:	20 e0       	ldi	r18, 0x00	; 0
    178c:	3f ef       	ldi	r19, 0xFF	; 255
    178e:	4f e7       	ldi	r20, 0x7F	; 127
    1790:	57 e4       	ldi	r21, 0x47	; 71
    1792:	0e 94 61 19 	call	0x32c2	; 0x32c2 <__gesf2>
    1796:	18 16       	cp	r1, r24
    1798:	0c f0       	brlt	.+2      	; 0x179c <CURTAIN_POS_CHANGE_HANDLE+0xac4>
    179a:	10 e0       	ldi	r17, 0x00	; 0
    179c:	11 23       	and	r17, r17
    179e:	09 f4       	brne	.+2      	; 0x17a2 <CURTAIN_POS_CHANGE_HANDLE+0xaca>
    17a0:	4d c0       	rjmp	.+154    	; 0x183c <CURTAIN_POS_CHANGE_HANDLE+0xb64>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17a2:	ce 01       	movw	r24, r28
    17a4:	87 59       	subi	r24, 0x97	; 151
    17a6:	9f 4f       	sbci	r25, 0xFF	; 255
    17a8:	fc 01       	movw	r30, r24
    17aa:	60 81       	ld	r22, Z
    17ac:	71 81       	ldd	r23, Z+1	; 0x01
    17ae:	82 81       	ldd	r24, Z+2	; 0x02
    17b0:	93 81       	ldd	r25, Z+3	; 0x03
    17b2:	20 e0       	ldi	r18, 0x00	; 0
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	40 e2       	ldi	r20, 0x20	; 32
    17b8:	51 e4       	ldi	r21, 0x41	; 65
    17ba:	0e 94 65 19 	call	0x32ca	; 0x32ca <__mulsf3>
    17be:	dc 01       	movw	r26, r24
    17c0:	cb 01       	movw	r24, r22
    17c2:	8e 01       	movw	r16, r28
    17c4:	0f 58       	subi	r16, 0x8F	; 143
    17c6:	1f 4f       	sbci	r17, 0xFF	; 255
    17c8:	bc 01       	movw	r22, r24
    17ca:	cd 01       	movw	r24, r26
    17cc:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__fixunssfsi>
    17d0:	dc 01       	movw	r26, r24
    17d2:	cb 01       	movw	r24, r22
    17d4:	f8 01       	movw	r30, r16
    17d6:	91 83       	std	Z+1, r25	; 0x01
    17d8:	80 83       	st	Z, r24
    17da:	27 c0       	rjmp	.+78     	; 0x182a <CURTAIN_POS_CHANGE_HANDLE+0xb52>
    17dc:	ce 01       	movw	r24, r28
    17de:	8d 58       	subi	r24, 0x8D	; 141
    17e0:	9f 4f       	sbci	r25, 0xFF	; 255
    17e2:	20 e9       	ldi	r18, 0x90	; 144
    17e4:	31 e0       	ldi	r19, 0x01	; 1
    17e6:	fc 01       	movw	r30, r24
    17e8:	31 83       	std	Z+1, r19	; 0x01
    17ea:	20 83       	st	Z, r18
    17ec:	ce 01       	movw	r24, r28
    17ee:	8d 58       	subi	r24, 0x8D	; 141
    17f0:	9f 4f       	sbci	r25, 0xFF	; 255
    17f2:	fc 01       	movw	r30, r24
    17f4:	80 81       	ld	r24, Z
    17f6:	91 81       	ldd	r25, Z+1	; 0x01
    17f8:	8c 01       	movw	r16, r24
    17fa:	c8 01       	movw	r24, r16
    17fc:	01 97       	sbiw	r24, 0x01	; 1
    17fe:	f1 f7       	brne	.-4      	; 0x17fc <CURTAIN_POS_CHANGE_HANDLE+0xb24>
    1800:	8c 01       	movw	r16, r24
    1802:	ce 01       	movw	r24, r28
    1804:	8d 58       	subi	r24, 0x8D	; 141
    1806:	9f 4f       	sbci	r25, 0xFF	; 255
    1808:	fc 01       	movw	r30, r24
    180a:	11 83       	std	Z+1, r17	; 0x01
    180c:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    180e:	ce 01       	movw	r24, r28
    1810:	8f 58       	subi	r24, 0x8F	; 143
    1812:	9f 4f       	sbci	r25, 0xFF	; 255
    1814:	9e 01       	movw	r18, r28
    1816:	2f 58       	subi	r18, 0x8F	; 143
    1818:	3f 4f       	sbci	r19, 0xFF	; 255
    181a:	f9 01       	movw	r30, r18
    181c:	20 81       	ld	r18, Z
    181e:	31 81       	ldd	r19, Z+1	; 0x01
    1820:	21 50       	subi	r18, 0x01	; 1
    1822:	30 40       	sbci	r19, 0x00	; 0
    1824:	fc 01       	movw	r30, r24
    1826:	31 83       	std	Z+1, r19	; 0x01
    1828:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    182a:	ce 01       	movw	r24, r28
    182c:	8f 58       	subi	r24, 0x8F	; 143
    182e:	9f 4f       	sbci	r25, 0xFF	; 255
    1830:	fc 01       	movw	r30, r24
    1832:	80 81       	ld	r24, Z
    1834:	91 81       	ldd	r25, Z+1	; 0x01
    1836:	00 97       	sbiw	r24, 0x00	; 0
    1838:	89 f6       	brne	.-94     	; 0x17dc <CURTAIN_POS_CHANGE_HANDLE+0xb04>
    183a:	2f c0       	rjmp	.+94     	; 0x189a <CURTAIN_POS_CHANGE_HANDLE+0xbc2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    183c:	8e 01       	movw	r16, r28
    183e:	0f 58       	subi	r16, 0x8F	; 143
    1840:	1f 4f       	sbci	r17, 0xFF	; 255
    1842:	ce 01       	movw	r24, r28
    1844:	83 59       	subi	r24, 0x93	; 147
    1846:	9f 4f       	sbci	r25, 0xFF	; 255
    1848:	fc 01       	movw	r30, r24
    184a:	60 81       	ld	r22, Z
    184c:	71 81       	ldd	r23, Z+1	; 0x01
    184e:	82 81       	ldd	r24, Z+2	; 0x02
    1850:	93 81       	ldd	r25, Z+3	; 0x03
    1852:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__fixunssfsi>
    1856:	dc 01       	movw	r26, r24
    1858:	cb 01       	movw	r24, r22
    185a:	f8 01       	movw	r30, r16
    185c:	91 83       	std	Z+1, r25	; 0x01
    185e:	80 83       	st	Z, r24
    1860:	ce 01       	movw	r24, r28
    1862:	8b 58       	subi	r24, 0x8B	; 139
    1864:	9f 4f       	sbci	r25, 0xFF	; 255
    1866:	9e 01       	movw	r18, r28
    1868:	2f 58       	subi	r18, 0x8F	; 143
    186a:	3f 4f       	sbci	r19, 0xFF	; 255
    186c:	f9 01       	movw	r30, r18
    186e:	20 81       	ld	r18, Z
    1870:	31 81       	ldd	r19, Z+1	; 0x01
    1872:	fc 01       	movw	r30, r24
    1874:	31 83       	std	Z+1, r19	; 0x01
    1876:	20 83       	st	Z, r18
    1878:	ce 01       	movw	r24, r28
    187a:	8b 58       	subi	r24, 0x8B	; 139
    187c:	9f 4f       	sbci	r25, 0xFF	; 255
    187e:	fc 01       	movw	r30, r24
    1880:	80 81       	ld	r24, Z
    1882:	91 81       	ldd	r25, Z+1	; 0x01
    1884:	8c 01       	movw	r16, r24
    1886:	c8 01       	movw	r24, r16
    1888:	01 97       	sbiw	r24, 0x01	; 1
    188a:	f1 f7       	brne	.-4      	; 0x1888 <CURTAIN_POS_CHANGE_HANDLE+0xbb0>
    188c:	8c 01       	movw	r16, r24
    188e:	ce 01       	movw	r24, r28
    1890:	8b 58       	subi	r24, 0x8B	; 139
    1892:	9f 4f       	sbci	r25, 0xFF	; 255
    1894:	fc 01       	movw	r30, r24
    1896:	11 83       	std	Z+1, r17	; 0x01
    1898:	00 83       	st	Z, r16
				_delay_ms(MOTOR_DELAY_MS);
				PORTD = 0b00001001;
				_delay_ms(MOTOR_DELAY_MS);
			}
			}else{
			for (uint16_t x = 0; x < degreesToMove;x++){
    189a:	8b 81       	ldd	r24, Y+3	; 0x03
    189c:	9c 81       	ldd	r25, Y+4	; 0x04
    189e:	01 96       	adiw	r24, 0x01	; 1
    18a0:	9c 83       	std	Y+4, r25	; 0x04
    18a2:	8b 83       	std	Y+3, r24	; 0x03
    18a4:	2b 81       	ldd	r18, Y+3	; 0x03
    18a6:	3c 81       	ldd	r19, Y+4	; 0x04
    18a8:	8d 81       	ldd	r24, Y+5	; 0x05
    18aa:	9e 81       	ldd	r25, Y+6	; 0x06
    18ac:	28 17       	cp	r18, r24
    18ae:	39 07       	cpc	r19, r25
    18b0:	08 f4       	brcc	.+2      	; 0x18b4 <CURTAIN_POS_CHANGE_HANDLE+0xbdc>
    18b2:	99 cc       	rjmp	.-1742   	; 0x11e6 <CURTAIN_POS_CHANGE_HANDLE+0x50e>
				PORTD = 0b00001001;
				_delay_ms(MOTOR_DELAY_MS);
			}
		}
		
		PORTD = 0b00000000;
    18b4:	8b e2       	ldi	r24, 0x2B	; 43
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	fc 01       	movw	r30, r24
    18ba:	10 82       	st	Z, r1
		previousCurtainPosition = positionToMove;
    18bc:	ce 01       	movw	r24, r28
    18be:	89 58       	subi	r24, 0x89	; 137
    18c0:	9f 4f       	sbci	r25, 0xFF	; 255
    18c2:	fc 01       	movw	r30, r24
    18c4:	80 81       	ld	r24, Z
    18c6:	80 93 28 01 	sts	0x0128, r24
	}
	bit_clear(PORTB, BIT(1));
    18ca:	85 e2       	ldi	r24, 0x25	; 37
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	25 e2       	ldi	r18, 0x25	; 37
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	f9 01       	movw	r30, r18
    18d4:	20 81       	ld	r18, Z
    18d6:	2d 7f       	andi	r18, 0xFD	; 253
    18d8:	fc 01       	movw	r30, r24
    18da:	20 83       	st	Z, r18
	bit_clear(PORTB, BIT(2));
    18dc:	85 e2       	ldi	r24, 0x25	; 37
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	25 e2       	ldi	r18, 0x25	; 37
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	f9 01       	movw	r30, r18
    18e6:	20 81       	ld	r18, Z
    18e8:	2b 7f       	andi	r18, 0xFB	; 251
    18ea:	fc 01       	movw	r30, r24
    18ec:	20 83       	st	Z, r18
}
    18ee:	c9 58       	subi	r28, 0x89	; 137
    18f0:	df 4f       	sbci	r29, 0xFF	; 255
    18f2:	0f b6       	in	r0, 0x3f	; 63
    18f4:	f8 94       	cli
    18f6:	de bf       	out	0x3e, r29	; 62
    18f8:	0f be       	out	0x3f, r0	; 63
    18fa:	cd bf       	out	0x3d, r28	; 61
    18fc:	cf 91       	pop	r28
    18fe:	df 91       	pop	r29
    1900:	1f 91       	pop	r17
    1902:	0f 91       	pop	r16
    1904:	08 95       	ret

00001906 <STRETCHER_POS_CHANGE_HANDLE>:

void STRETCHER_POS_CHANGE_HANDLE(uint8_t positionToMove){
    1906:	0f 93       	push	r16
    1908:	1f 93       	push	r17
    190a:	df 93       	push	r29
    190c:	cf 93       	push	r28
    190e:	cd b7       	in	r28, 0x3d	; 61
    1910:	de b7       	in	r29, 0x3e	; 62
    1912:	c7 57       	subi	r28, 0x77	; 119
    1914:	d0 40       	sbci	r29, 0x00	; 0
    1916:	0f b6       	in	r0, 0x3f	; 63
    1918:	f8 94       	cli
    191a:	de bf       	out	0x3e, r29	; 62
    191c:	0f be       	out	0x3f, r0	; 63
    191e:	cd bf       	out	0x3d, r28	; 61
    1920:	9e 01       	movw	r18, r28
    1922:	29 58       	subi	r18, 0x89	; 137
    1924:	3f 4f       	sbci	r19, 0xFF	; 255
    1926:	f9 01       	movw	r30, r18
    1928:	80 83       	st	Z, r24
	bit_set(PORTB, BIT(1));
    192a:	85 e2       	ldi	r24, 0x25	; 37
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	25 e2       	ldi	r18, 0x25	; 37
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	f9 01       	movw	r30, r18
    1934:	20 81       	ld	r18, Z
    1936:	22 60       	ori	r18, 0x02	; 2
    1938:	fc 01       	movw	r30, r24
    193a:	20 83       	st	Z, r18
	bit_set(PORTB, BIT(2));
    193c:	85 e2       	ldi	r24, 0x25	; 37
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	25 e2       	ldi	r18, 0x25	; 37
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	f9 01       	movw	r30, r18
    1946:	20 81       	ld	r18, Z
    1948:	24 60       	ori	r18, 0x04	; 4
    194a:	fc 01       	movw	r30, r24
    194c:	20 83       	st	Z, r18
	
	if (positionToMove<4) {
    194e:	ce 01       	movw	r24, r28
    1950:	89 58       	subi	r24, 0x89	; 137
    1952:	9f 4f       	sbci	r25, 0xFF	; 255
    1954:	fc 01       	movw	r30, r24
    1956:	80 81       	ld	r24, Z
    1958:	84 30       	cpi	r24, 0x04	; 4
    195a:	08 f0       	brcs	.+2      	; 0x195e <STRETCHER_POS_CHANGE_HANDLE+0x58>
    195c:	cd c5       	rjmp	.+2970   	; 0x24f8 <STRETCHER_POS_CHANGE_HANDLE+0xbf2>
		uint16_t degreesToMove = abs(positionToMove-previousStretcherPosition)*STRETCHER_CALIBRATION_CONSTANT;
    195e:	ce 01       	movw	r24, r28
    1960:	89 58       	subi	r24, 0x89	; 137
    1962:	9f 4f       	sbci	r25, 0xFF	; 255
    1964:	fc 01       	movw	r30, r24
    1966:	80 81       	ld	r24, Z
    1968:	28 2f       	mov	r18, r24
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	80 91 29 01 	lds	r24, 0x0129
    1970:	88 2f       	mov	r24, r24
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	a9 01       	movw	r20, r18
    1976:	48 1b       	sub	r20, r24
    1978:	59 0b       	sbc	r21, r25
    197a:	ca 01       	movw	r24, r20
    197c:	99 23       	and	r25, r25
    197e:	1c f4       	brge	.+6      	; 0x1986 <STRETCHER_POS_CHANGE_HANDLE+0x80>
    1980:	90 95       	com	r25
    1982:	81 95       	neg	r24
    1984:	9f 4f       	sbci	r25, 0xFF	; 255
    1986:	ac 01       	movw	r20, r24
    1988:	22 e3       	ldi	r18, 0x32	; 50
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	42 9f       	mul	r20, r18
    198e:	c0 01       	movw	r24, r0
    1990:	43 9f       	mul	r20, r19
    1992:	90 0d       	add	r25, r0
    1994:	52 9f       	mul	r21, r18
    1996:	90 0d       	add	r25, r0
    1998:	11 24       	eor	r1, r1
    199a:	9e 83       	std	Y+6, r25	; 0x06
    199c:	8d 83       	std	Y+5, r24	; 0x05
		
		if((positionToMove-previousCurtainPosition)>0){
    199e:	ce 01       	movw	r24, r28
    19a0:	89 58       	subi	r24, 0x89	; 137
    19a2:	9f 4f       	sbci	r25, 0xFF	; 255
    19a4:	fc 01       	movw	r30, r24
    19a6:	80 81       	ld	r24, Z
    19a8:	28 2f       	mov	r18, r24
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	80 91 28 01 	lds	r24, 0x0128
    19b0:	88 2f       	mov	r24, r24
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	a9 01       	movw	r20, r18
    19b6:	48 1b       	sub	r20, r24
    19b8:	59 0b       	sbc	r21, r25
    19ba:	ca 01       	movw	r24, r20
    19bc:	18 16       	cp	r1, r24
    19be:	19 06       	cpc	r1, r25
    19c0:	0c f0       	brlt	.+2      	; 0x19c4 <STRETCHER_POS_CHANGE_HANDLE+0xbe>
    19c2:	25 c2       	rjmp	.+1098   	; 0x1e0e <STRETCHER_POS_CHANGE_HANDLE+0x508>
			for (uint16_t x = 0; x < degreesToMove;x++){
    19c4:	1a 82       	std	Y+2, r1	; 0x02
    19c6:	19 82       	std	Y+1, r1	; 0x01
    19c8:	19 c2       	rjmp	.+1074   	; 0x1dfc <STRETCHER_POS_CHANGE_HANDLE+0x4f6>
				PORTD = 0b00110000;
    19ca:	8b e2       	ldi	r24, 0x2B	; 43
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	20 e3       	ldi	r18, 0x30	; 48
    19d0:	fc 01       	movw	r30, r24
    19d2:	20 83       	st	Z, r18
    19d4:	80 e0       	ldi	r24, 0x00	; 0
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	a0 e8       	ldi	r26, 0x80	; 128
    19da:	bf e3       	ldi	r27, 0x3F	; 63
    19dc:	8f 83       	std	Y+7, r24	; 0x07
    19de:	98 87       	std	Y+8, r25	; 0x08
    19e0:	a9 87       	std	Y+9, r26	; 0x09
    19e2:	ba 87       	std	Y+10, r27	; 0x0a
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    19e4:	6f 81       	ldd	r22, Y+7	; 0x07
    19e6:	78 85       	ldd	r23, Y+8	; 0x08
    19e8:	89 85       	ldd	r24, Y+9	; 0x09
    19ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ec:	20 e0       	ldi	r18, 0x00	; 0
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	4a e7       	ldi	r20, 0x7A	; 122
    19f2:	55 e4       	ldi	r21, 0x45	; 69
    19f4:	0e 94 65 19 	call	0x32ca	; 0x32ca <__mulsf3>
    19f8:	dc 01       	movw	r26, r24
    19fa:	cb 01       	movw	r24, r22
    19fc:	8b 87       	std	Y+11, r24	; 0x0b
    19fe:	9c 87       	std	Y+12, r25	; 0x0c
    1a00:	ad 87       	std	Y+13, r26	; 0x0d
    1a02:	be 87       	std	Y+14, r27	; 0x0e
	if (__tmp < 1.0)
    1a04:	11 e0       	ldi	r17, 0x01	; 1
    1a06:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a08:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a0e:	20 e0       	ldi	r18, 0x00	; 0
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	40 e8       	ldi	r20, 0x80	; 128
    1a14:	5f e3       	ldi	r21, 0x3F	; 63
    1a16:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <__cmpsf2>
    1a1a:	88 23       	and	r24, r24
    1a1c:	0c f0       	brlt	.+2      	; 0x1a20 <STRETCHER_POS_CHANGE_HANDLE+0x11a>
    1a1e:	10 e0       	ldi	r17, 0x00	; 0
    1a20:	11 23       	and	r17, r17
    1a22:	29 f0       	breq	.+10     	; 0x1a2e <STRETCHER_POS_CHANGE_HANDLE+0x128>
		__ticks = 1;
    1a24:	81 e0       	ldi	r24, 0x01	; 1
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	98 8b       	std	Y+16, r25	; 0x10
    1a2a:	8f 87       	std	Y+15, r24	; 0x0f
    1a2c:	46 c0       	rjmp	.+140    	; 0x1aba <STRETCHER_POS_CHANGE_HANDLE+0x1b4>
	else if (__tmp > 65535)
    1a2e:	11 e0       	ldi	r17, 0x01	; 1
    1a30:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a32:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a34:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a36:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a38:	20 e0       	ldi	r18, 0x00	; 0
    1a3a:	3f ef       	ldi	r19, 0xFF	; 255
    1a3c:	4f e7       	ldi	r20, 0x7F	; 127
    1a3e:	57 e4       	ldi	r21, 0x47	; 71
    1a40:	0e 94 61 19 	call	0x32c2	; 0x32c2 <__gesf2>
    1a44:	18 16       	cp	r1, r24
    1a46:	0c f0       	brlt	.+2      	; 0x1a4a <STRETCHER_POS_CHANGE_HANDLE+0x144>
    1a48:	10 e0       	ldi	r17, 0x00	; 0
    1a4a:	11 23       	and	r17, r17
    1a4c:	61 f1       	breq	.+88     	; 0x1aa6 <STRETCHER_POS_CHANGE_HANDLE+0x1a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a4e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a50:	78 85       	ldd	r23, Y+8	; 0x08
    1a52:	89 85       	ldd	r24, Y+9	; 0x09
    1a54:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a56:	20 e0       	ldi	r18, 0x00	; 0
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	40 e2       	ldi	r20, 0x20	; 32
    1a5c:	51 e4       	ldi	r21, 0x41	; 65
    1a5e:	0e 94 65 19 	call	0x32ca	; 0x32ca <__mulsf3>
    1a62:	dc 01       	movw	r26, r24
    1a64:	cb 01       	movw	r24, r22
    1a66:	bc 01       	movw	r22, r24
    1a68:	cd 01       	movw	r24, r26
    1a6a:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__fixunssfsi>
    1a6e:	dc 01       	movw	r26, r24
    1a70:	cb 01       	movw	r24, r22
    1a72:	98 8b       	std	Y+16, r25	; 0x10
    1a74:	8f 87       	std	Y+15, r24	; 0x0f
    1a76:	12 c0       	rjmp	.+36     	; 0x1a9c <STRETCHER_POS_CHANGE_HANDLE+0x196>
    1a78:	80 e9       	ldi	r24, 0x90	; 144
    1a7a:	91 e0       	ldi	r25, 0x01	; 1
    1a7c:	9a 8b       	std	Y+18, r25	; 0x12
    1a7e:	89 8b       	std	Y+17, r24	; 0x11
    1a80:	89 89       	ldd	r24, Y+17	; 0x11
    1a82:	9a 89       	ldd	r25, Y+18	; 0x12
    1a84:	8c 01       	movw	r16, r24
    1a86:	c8 01       	movw	r24, r16
    1a88:	01 97       	sbiw	r24, 0x01	; 1
    1a8a:	f1 f7       	brne	.-4      	; 0x1a88 <STRETCHER_POS_CHANGE_HANDLE+0x182>
    1a8c:	8c 01       	movw	r16, r24
    1a8e:	1a 8b       	std	Y+18, r17	; 0x12
    1a90:	09 8b       	std	Y+17, r16	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a92:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a94:	98 89       	ldd	r25, Y+16	; 0x10
    1a96:	01 97       	sbiw	r24, 0x01	; 1
    1a98:	98 8b       	std	Y+16, r25	; 0x10
    1a9a:	8f 87       	std	Y+15, r24	; 0x0f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a9c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a9e:	98 89       	ldd	r25, Y+16	; 0x10
    1aa0:	00 97       	sbiw	r24, 0x00	; 0
    1aa2:	51 f7       	brne	.-44     	; 0x1a78 <STRETCHER_POS_CHANGE_HANDLE+0x172>
    1aa4:	17 c0       	rjmp	.+46     	; 0x1ad4 <STRETCHER_POS_CHANGE_HANDLE+0x1ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aa6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aa8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aaa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aac:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aae:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__fixunssfsi>
    1ab2:	dc 01       	movw	r26, r24
    1ab4:	cb 01       	movw	r24, r22
    1ab6:	98 8b       	std	Y+16, r25	; 0x10
    1ab8:	8f 87       	std	Y+15, r24	; 0x0f
    1aba:	8f 85       	ldd	r24, Y+15	; 0x0f
    1abc:	98 89       	ldd	r25, Y+16	; 0x10
    1abe:	9c 8b       	std	Y+20, r25	; 0x14
    1ac0:	8b 8b       	std	Y+19, r24	; 0x13
    1ac2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ac4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ac6:	8c 01       	movw	r16, r24
    1ac8:	f8 01       	movw	r30, r16
    1aca:	31 97       	sbiw	r30, 0x01	; 1
    1acc:	f1 f7       	brne	.-4      	; 0x1aca <STRETCHER_POS_CHANGE_HANDLE+0x1c4>
    1ace:	8f 01       	movw	r16, r30
    1ad0:	1c 8b       	std	Y+20, r17	; 0x14
    1ad2:	0b 8b       	std	Y+19, r16	; 0x13
				_delay_ms(MOTOR_DELAY_MS);
				PORTD = 0b01100000;
    1ad4:	8b e2       	ldi	r24, 0x2B	; 43
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	20 e6       	ldi	r18, 0x60	; 96
    1ada:	fc 01       	movw	r30, r24
    1adc:	20 83       	st	Z, r18
    1ade:	80 e0       	ldi	r24, 0x00	; 0
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	a0 e8       	ldi	r26, 0x80	; 128
    1ae4:	bf e3       	ldi	r27, 0x3F	; 63
    1ae6:	8d 8b       	std	Y+21, r24	; 0x15
    1ae8:	9e 8b       	std	Y+22, r25	; 0x16
    1aea:	af 8b       	std	Y+23, r26	; 0x17
    1aec:	b8 8f       	std	Y+24, r27	; 0x18
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    1aee:	6d 89       	ldd	r22, Y+21	; 0x15
    1af0:	7e 89       	ldd	r23, Y+22	; 0x16
    1af2:	8f 89       	ldd	r24, Y+23	; 0x17
    1af4:	98 8d       	ldd	r25, Y+24	; 0x18
    1af6:	20 e0       	ldi	r18, 0x00	; 0
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	4a e7       	ldi	r20, 0x7A	; 122
    1afc:	55 e4       	ldi	r21, 0x45	; 69
    1afe:	0e 94 65 19 	call	0x32ca	; 0x32ca <__mulsf3>
    1b02:	dc 01       	movw	r26, r24
    1b04:	cb 01       	movw	r24, r22
    1b06:	89 8f       	std	Y+25, r24	; 0x19
    1b08:	9a 8f       	std	Y+26, r25	; 0x1a
    1b0a:	ab 8f       	std	Y+27, r26	; 0x1b
    1b0c:	bc 8f       	std	Y+28, r27	; 0x1c
	if (__tmp < 1.0)
    1b0e:	11 e0       	ldi	r17, 0x01	; 1
    1b10:	69 8d       	ldd	r22, Y+25	; 0x19
    1b12:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b14:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b16:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b18:	20 e0       	ldi	r18, 0x00	; 0
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	40 e8       	ldi	r20, 0x80	; 128
    1b1e:	5f e3       	ldi	r21, 0x3F	; 63
    1b20:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <__cmpsf2>
    1b24:	88 23       	and	r24, r24
    1b26:	0c f0       	brlt	.+2      	; 0x1b2a <STRETCHER_POS_CHANGE_HANDLE+0x224>
    1b28:	10 e0       	ldi	r17, 0x00	; 0
    1b2a:	11 23       	and	r17, r17
    1b2c:	29 f0       	breq	.+10     	; 0x1b38 <STRETCHER_POS_CHANGE_HANDLE+0x232>
		__ticks = 1;
    1b2e:	81 e0       	ldi	r24, 0x01	; 1
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	9e 8f       	std	Y+30, r25	; 0x1e
    1b34:	8d 8f       	std	Y+29, r24	; 0x1d
    1b36:	46 c0       	rjmp	.+140    	; 0x1bc4 <STRETCHER_POS_CHANGE_HANDLE+0x2be>
	else if (__tmp > 65535)
    1b38:	11 e0       	ldi	r17, 0x01	; 1
    1b3a:	69 8d       	ldd	r22, Y+25	; 0x19
    1b3c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b40:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b42:	20 e0       	ldi	r18, 0x00	; 0
    1b44:	3f ef       	ldi	r19, 0xFF	; 255
    1b46:	4f e7       	ldi	r20, 0x7F	; 127
    1b48:	57 e4       	ldi	r21, 0x47	; 71
    1b4a:	0e 94 61 19 	call	0x32c2	; 0x32c2 <__gesf2>
    1b4e:	18 16       	cp	r1, r24
    1b50:	0c f0       	brlt	.+2      	; 0x1b54 <STRETCHER_POS_CHANGE_HANDLE+0x24e>
    1b52:	10 e0       	ldi	r17, 0x00	; 0
    1b54:	11 23       	and	r17, r17
    1b56:	61 f1       	breq	.+88     	; 0x1bb0 <STRETCHER_POS_CHANGE_HANDLE+0x2aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b58:	6d 89       	ldd	r22, Y+21	; 0x15
    1b5a:	7e 89       	ldd	r23, Y+22	; 0x16
    1b5c:	8f 89       	ldd	r24, Y+23	; 0x17
    1b5e:	98 8d       	ldd	r25, Y+24	; 0x18
    1b60:	20 e0       	ldi	r18, 0x00	; 0
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	40 e2       	ldi	r20, 0x20	; 32
    1b66:	51 e4       	ldi	r21, 0x41	; 65
    1b68:	0e 94 65 19 	call	0x32ca	; 0x32ca <__mulsf3>
    1b6c:	dc 01       	movw	r26, r24
    1b6e:	cb 01       	movw	r24, r22
    1b70:	bc 01       	movw	r22, r24
    1b72:	cd 01       	movw	r24, r26
    1b74:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__fixunssfsi>
    1b78:	dc 01       	movw	r26, r24
    1b7a:	cb 01       	movw	r24, r22
    1b7c:	9e 8f       	std	Y+30, r25	; 0x1e
    1b7e:	8d 8f       	std	Y+29, r24	; 0x1d
    1b80:	12 c0       	rjmp	.+36     	; 0x1ba6 <STRETCHER_POS_CHANGE_HANDLE+0x2a0>
    1b82:	80 e9       	ldi	r24, 0x90	; 144
    1b84:	91 e0       	ldi	r25, 0x01	; 1
    1b86:	98 a3       	std	Y+32, r25	; 0x20
    1b88:	8f 8f       	std	Y+31, r24	; 0x1f
    1b8a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b8c:	98 a1       	ldd	r25, Y+32	; 0x20
    1b8e:	8c 01       	movw	r16, r24
    1b90:	c8 01       	movw	r24, r16
    1b92:	01 97       	sbiw	r24, 0x01	; 1
    1b94:	f1 f7       	brne	.-4      	; 0x1b92 <STRETCHER_POS_CHANGE_HANDLE+0x28c>
    1b96:	8c 01       	movw	r16, r24
    1b98:	18 a3       	std	Y+32, r17	; 0x20
    1b9a:	0f 8f       	std	Y+31, r16	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b9c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b9e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ba0:	01 97       	sbiw	r24, 0x01	; 1
    1ba2:	9e 8f       	std	Y+30, r25	; 0x1e
    1ba4:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ba6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ba8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1baa:	00 97       	sbiw	r24, 0x00	; 0
    1bac:	51 f7       	brne	.-44     	; 0x1b82 <STRETCHER_POS_CHANGE_HANDLE+0x27c>
    1bae:	17 c0       	rjmp	.+46     	; 0x1bde <STRETCHER_POS_CHANGE_HANDLE+0x2d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bb0:	69 8d       	ldd	r22, Y+25	; 0x19
    1bb2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bb4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bb6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bb8:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__fixunssfsi>
    1bbc:	dc 01       	movw	r26, r24
    1bbe:	cb 01       	movw	r24, r22
    1bc0:	9e 8f       	std	Y+30, r25	; 0x1e
    1bc2:	8d 8f       	std	Y+29, r24	; 0x1d
    1bc4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bc6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1bc8:	9a a3       	std	Y+34, r25	; 0x22
    1bca:	89 a3       	std	Y+33, r24	; 0x21
    1bcc:	89 a1       	ldd	r24, Y+33	; 0x21
    1bce:	9a a1       	ldd	r25, Y+34	; 0x22
    1bd0:	8c 01       	movw	r16, r24
    1bd2:	f8 01       	movw	r30, r16
    1bd4:	31 97       	sbiw	r30, 0x01	; 1
    1bd6:	f1 f7       	brne	.-4      	; 0x1bd4 <STRETCHER_POS_CHANGE_HANDLE+0x2ce>
    1bd8:	8f 01       	movw	r16, r30
    1bda:	1a a3       	std	Y+34, r17	; 0x22
    1bdc:	09 a3       	std	Y+33, r16	; 0x21
				_delay_ms(MOTOR_DELAY_MS);
				PORTD = 0b11000000;
    1bde:	8b e2       	ldi	r24, 0x2B	; 43
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	20 ec       	ldi	r18, 0xC0	; 192
    1be4:	fc 01       	movw	r30, r24
    1be6:	20 83       	st	Z, r18
    1be8:	80 e0       	ldi	r24, 0x00	; 0
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	a0 e8       	ldi	r26, 0x80	; 128
    1bee:	bf e3       	ldi	r27, 0x3F	; 63
    1bf0:	8b a3       	std	Y+35, r24	; 0x23
    1bf2:	9c a3       	std	Y+36, r25	; 0x24
    1bf4:	ad a3       	std	Y+37, r26	; 0x25
    1bf6:	be a3       	std	Y+38, r27	; 0x26
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    1bf8:	6b a1       	ldd	r22, Y+35	; 0x23
    1bfa:	7c a1       	ldd	r23, Y+36	; 0x24
    1bfc:	8d a1       	ldd	r24, Y+37	; 0x25
    1bfe:	9e a1       	ldd	r25, Y+38	; 0x26
    1c00:	20 e0       	ldi	r18, 0x00	; 0
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	4a e7       	ldi	r20, 0x7A	; 122
    1c06:	55 e4       	ldi	r21, 0x45	; 69
    1c08:	0e 94 65 19 	call	0x32ca	; 0x32ca <__mulsf3>
    1c0c:	dc 01       	movw	r26, r24
    1c0e:	cb 01       	movw	r24, r22
    1c10:	8f a3       	std	Y+39, r24	; 0x27
    1c12:	98 a7       	std	Y+40, r25	; 0x28
    1c14:	a9 a7       	std	Y+41, r26	; 0x29
    1c16:	ba a7       	std	Y+42, r27	; 0x2a
	if (__tmp < 1.0)
    1c18:	11 e0       	ldi	r17, 0x01	; 1
    1c1a:	6f a1       	ldd	r22, Y+39	; 0x27
    1c1c:	78 a5       	ldd	r23, Y+40	; 0x28
    1c1e:	89 a5       	ldd	r24, Y+41	; 0x29
    1c20:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c22:	20 e0       	ldi	r18, 0x00	; 0
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	40 e8       	ldi	r20, 0x80	; 128
    1c28:	5f e3       	ldi	r21, 0x3F	; 63
    1c2a:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <__cmpsf2>
    1c2e:	88 23       	and	r24, r24
    1c30:	0c f0       	brlt	.+2      	; 0x1c34 <STRETCHER_POS_CHANGE_HANDLE+0x32e>
    1c32:	10 e0       	ldi	r17, 0x00	; 0
    1c34:	11 23       	and	r17, r17
    1c36:	29 f0       	breq	.+10     	; 0x1c42 <STRETCHER_POS_CHANGE_HANDLE+0x33c>
		__ticks = 1;
    1c38:	81 e0       	ldi	r24, 0x01	; 1
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	9c a7       	std	Y+44, r25	; 0x2c
    1c3e:	8b a7       	std	Y+43, r24	; 0x2b
    1c40:	46 c0       	rjmp	.+140    	; 0x1cce <STRETCHER_POS_CHANGE_HANDLE+0x3c8>
	else if (__tmp > 65535)
    1c42:	11 e0       	ldi	r17, 0x01	; 1
    1c44:	6f a1       	ldd	r22, Y+39	; 0x27
    1c46:	78 a5       	ldd	r23, Y+40	; 0x28
    1c48:	89 a5       	ldd	r24, Y+41	; 0x29
    1c4a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c4c:	20 e0       	ldi	r18, 0x00	; 0
    1c4e:	3f ef       	ldi	r19, 0xFF	; 255
    1c50:	4f e7       	ldi	r20, 0x7F	; 127
    1c52:	57 e4       	ldi	r21, 0x47	; 71
    1c54:	0e 94 61 19 	call	0x32c2	; 0x32c2 <__gesf2>
    1c58:	18 16       	cp	r1, r24
    1c5a:	0c f0       	brlt	.+2      	; 0x1c5e <STRETCHER_POS_CHANGE_HANDLE+0x358>
    1c5c:	10 e0       	ldi	r17, 0x00	; 0
    1c5e:	11 23       	and	r17, r17
    1c60:	61 f1       	breq	.+88     	; 0x1cba <STRETCHER_POS_CHANGE_HANDLE+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c62:	6b a1       	ldd	r22, Y+35	; 0x23
    1c64:	7c a1       	ldd	r23, Y+36	; 0x24
    1c66:	8d a1       	ldd	r24, Y+37	; 0x25
    1c68:	9e a1       	ldd	r25, Y+38	; 0x26
    1c6a:	20 e0       	ldi	r18, 0x00	; 0
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	40 e2       	ldi	r20, 0x20	; 32
    1c70:	51 e4       	ldi	r21, 0x41	; 65
    1c72:	0e 94 65 19 	call	0x32ca	; 0x32ca <__mulsf3>
    1c76:	dc 01       	movw	r26, r24
    1c78:	cb 01       	movw	r24, r22
    1c7a:	bc 01       	movw	r22, r24
    1c7c:	cd 01       	movw	r24, r26
    1c7e:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__fixunssfsi>
    1c82:	dc 01       	movw	r26, r24
    1c84:	cb 01       	movw	r24, r22
    1c86:	9c a7       	std	Y+44, r25	; 0x2c
    1c88:	8b a7       	std	Y+43, r24	; 0x2b
    1c8a:	12 c0       	rjmp	.+36     	; 0x1cb0 <STRETCHER_POS_CHANGE_HANDLE+0x3aa>
    1c8c:	80 e9       	ldi	r24, 0x90	; 144
    1c8e:	91 e0       	ldi	r25, 0x01	; 1
    1c90:	9e a7       	std	Y+46, r25	; 0x2e
    1c92:	8d a7       	std	Y+45, r24	; 0x2d
    1c94:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c96:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c98:	8c 01       	movw	r16, r24
    1c9a:	c8 01       	movw	r24, r16
    1c9c:	01 97       	sbiw	r24, 0x01	; 1
    1c9e:	f1 f7       	brne	.-4      	; 0x1c9c <STRETCHER_POS_CHANGE_HANDLE+0x396>
    1ca0:	8c 01       	movw	r16, r24
    1ca2:	1e a7       	std	Y+46, r17	; 0x2e
    1ca4:	0d a7       	std	Y+45, r16	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ca6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ca8:	9c a5       	ldd	r25, Y+44	; 0x2c
    1caa:	01 97       	sbiw	r24, 0x01	; 1
    1cac:	9c a7       	std	Y+44, r25	; 0x2c
    1cae:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cb0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1cb2:	9c a5       	ldd	r25, Y+44	; 0x2c
    1cb4:	00 97       	sbiw	r24, 0x00	; 0
    1cb6:	51 f7       	brne	.-44     	; 0x1c8c <STRETCHER_POS_CHANGE_HANDLE+0x386>
    1cb8:	17 c0       	rjmp	.+46     	; 0x1ce8 <STRETCHER_POS_CHANGE_HANDLE+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cba:	6f a1       	ldd	r22, Y+39	; 0x27
    1cbc:	78 a5       	ldd	r23, Y+40	; 0x28
    1cbe:	89 a5       	ldd	r24, Y+41	; 0x29
    1cc0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cc2:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__fixunssfsi>
    1cc6:	dc 01       	movw	r26, r24
    1cc8:	cb 01       	movw	r24, r22
    1cca:	9c a7       	std	Y+44, r25	; 0x2c
    1ccc:	8b a7       	std	Y+43, r24	; 0x2b
    1cce:	8b a5       	ldd	r24, Y+43	; 0x2b
    1cd0:	9c a5       	ldd	r25, Y+44	; 0x2c
    1cd2:	98 ab       	std	Y+48, r25	; 0x30
    1cd4:	8f a7       	std	Y+47, r24	; 0x2f
    1cd6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cd8:	98 a9       	ldd	r25, Y+48	; 0x30
    1cda:	8c 01       	movw	r16, r24
    1cdc:	f8 01       	movw	r30, r16
    1cde:	31 97       	sbiw	r30, 0x01	; 1
    1ce0:	f1 f7       	brne	.-4      	; 0x1cde <STRETCHER_POS_CHANGE_HANDLE+0x3d8>
    1ce2:	8f 01       	movw	r16, r30
    1ce4:	18 ab       	std	Y+48, r17	; 0x30
    1ce6:	0f a7       	std	Y+47, r16	; 0x2f
				_delay_ms(MOTOR_DELAY_MS);
				PORTD = 0b10010000;
    1ce8:	8b e2       	ldi	r24, 0x2B	; 43
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	20 e9       	ldi	r18, 0x90	; 144
    1cee:	fc 01       	movw	r30, r24
    1cf0:	20 83       	st	Z, r18
    1cf2:	80 e0       	ldi	r24, 0x00	; 0
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	a0 e8       	ldi	r26, 0x80	; 128
    1cf8:	bf e3       	ldi	r27, 0x3F	; 63
    1cfa:	89 ab       	std	Y+49, r24	; 0x31
    1cfc:	9a ab       	std	Y+50, r25	; 0x32
    1cfe:	ab ab       	std	Y+51, r26	; 0x33
    1d00:	bc ab       	std	Y+52, r27	; 0x34
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    1d02:	69 a9       	ldd	r22, Y+49	; 0x31
    1d04:	7a a9       	ldd	r23, Y+50	; 0x32
    1d06:	8b a9       	ldd	r24, Y+51	; 0x33
    1d08:	9c a9       	ldd	r25, Y+52	; 0x34
    1d0a:	20 e0       	ldi	r18, 0x00	; 0
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	4a e7       	ldi	r20, 0x7A	; 122
    1d10:	55 e4       	ldi	r21, 0x45	; 69
    1d12:	0e 94 65 19 	call	0x32ca	; 0x32ca <__mulsf3>
    1d16:	dc 01       	movw	r26, r24
    1d18:	cb 01       	movw	r24, r22
    1d1a:	8d ab       	std	Y+53, r24	; 0x35
    1d1c:	9e ab       	std	Y+54, r25	; 0x36
    1d1e:	af ab       	std	Y+55, r26	; 0x37
    1d20:	b8 af       	std	Y+56, r27	; 0x38
	if (__tmp < 1.0)
    1d22:	11 e0       	ldi	r17, 0x01	; 1
    1d24:	6d a9       	ldd	r22, Y+53	; 0x35
    1d26:	7e a9       	ldd	r23, Y+54	; 0x36
    1d28:	8f a9       	ldd	r24, Y+55	; 0x37
    1d2a:	98 ad       	ldd	r25, Y+56	; 0x38
    1d2c:	20 e0       	ldi	r18, 0x00	; 0
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	40 e8       	ldi	r20, 0x80	; 128
    1d32:	5f e3       	ldi	r21, 0x3F	; 63
    1d34:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <__cmpsf2>
    1d38:	88 23       	and	r24, r24
    1d3a:	0c f0       	brlt	.+2      	; 0x1d3e <STRETCHER_POS_CHANGE_HANDLE+0x438>
    1d3c:	10 e0       	ldi	r17, 0x00	; 0
    1d3e:	11 23       	and	r17, r17
    1d40:	29 f0       	breq	.+10     	; 0x1d4c <STRETCHER_POS_CHANGE_HANDLE+0x446>
		__ticks = 1;
    1d42:	81 e0       	ldi	r24, 0x01	; 1
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	9a af       	std	Y+58, r25	; 0x3a
    1d48:	89 af       	std	Y+57, r24	; 0x39
    1d4a:	46 c0       	rjmp	.+140    	; 0x1dd8 <STRETCHER_POS_CHANGE_HANDLE+0x4d2>
	else if (__tmp > 65535)
    1d4c:	11 e0       	ldi	r17, 0x01	; 1
    1d4e:	6d a9       	ldd	r22, Y+53	; 0x35
    1d50:	7e a9       	ldd	r23, Y+54	; 0x36
    1d52:	8f a9       	ldd	r24, Y+55	; 0x37
    1d54:	98 ad       	ldd	r25, Y+56	; 0x38
    1d56:	20 e0       	ldi	r18, 0x00	; 0
    1d58:	3f ef       	ldi	r19, 0xFF	; 255
    1d5a:	4f e7       	ldi	r20, 0x7F	; 127
    1d5c:	57 e4       	ldi	r21, 0x47	; 71
    1d5e:	0e 94 61 19 	call	0x32c2	; 0x32c2 <__gesf2>
    1d62:	18 16       	cp	r1, r24
    1d64:	0c f0       	brlt	.+2      	; 0x1d68 <STRETCHER_POS_CHANGE_HANDLE+0x462>
    1d66:	10 e0       	ldi	r17, 0x00	; 0
    1d68:	11 23       	and	r17, r17
    1d6a:	61 f1       	breq	.+88     	; 0x1dc4 <STRETCHER_POS_CHANGE_HANDLE+0x4be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d6c:	69 a9       	ldd	r22, Y+49	; 0x31
    1d6e:	7a a9       	ldd	r23, Y+50	; 0x32
    1d70:	8b a9       	ldd	r24, Y+51	; 0x33
    1d72:	9c a9       	ldd	r25, Y+52	; 0x34
    1d74:	20 e0       	ldi	r18, 0x00	; 0
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	40 e2       	ldi	r20, 0x20	; 32
    1d7a:	51 e4       	ldi	r21, 0x41	; 65
    1d7c:	0e 94 65 19 	call	0x32ca	; 0x32ca <__mulsf3>
    1d80:	dc 01       	movw	r26, r24
    1d82:	cb 01       	movw	r24, r22
    1d84:	bc 01       	movw	r22, r24
    1d86:	cd 01       	movw	r24, r26
    1d88:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__fixunssfsi>
    1d8c:	dc 01       	movw	r26, r24
    1d8e:	cb 01       	movw	r24, r22
    1d90:	9a af       	std	Y+58, r25	; 0x3a
    1d92:	89 af       	std	Y+57, r24	; 0x39
    1d94:	12 c0       	rjmp	.+36     	; 0x1dba <STRETCHER_POS_CHANGE_HANDLE+0x4b4>
    1d96:	80 e9       	ldi	r24, 0x90	; 144
    1d98:	91 e0       	ldi	r25, 0x01	; 1
    1d9a:	9c af       	std	Y+60, r25	; 0x3c
    1d9c:	8b af       	std	Y+59, r24	; 0x3b
    1d9e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1da0:	9c ad       	ldd	r25, Y+60	; 0x3c
    1da2:	8c 01       	movw	r16, r24
    1da4:	c8 01       	movw	r24, r16
    1da6:	01 97       	sbiw	r24, 0x01	; 1
    1da8:	f1 f7       	brne	.-4      	; 0x1da6 <STRETCHER_POS_CHANGE_HANDLE+0x4a0>
    1daa:	8c 01       	movw	r16, r24
    1dac:	1c af       	std	Y+60, r17	; 0x3c
    1dae:	0b af       	std	Y+59, r16	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1db0:	89 ad       	ldd	r24, Y+57	; 0x39
    1db2:	9a ad       	ldd	r25, Y+58	; 0x3a
    1db4:	01 97       	sbiw	r24, 0x01	; 1
    1db6:	9a af       	std	Y+58, r25	; 0x3a
    1db8:	89 af       	std	Y+57, r24	; 0x39
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dba:	89 ad       	ldd	r24, Y+57	; 0x39
    1dbc:	9a ad       	ldd	r25, Y+58	; 0x3a
    1dbe:	00 97       	sbiw	r24, 0x00	; 0
    1dc0:	51 f7       	brne	.-44     	; 0x1d96 <STRETCHER_POS_CHANGE_HANDLE+0x490>
    1dc2:	17 c0       	rjmp	.+46     	; 0x1df2 <STRETCHER_POS_CHANGE_HANDLE+0x4ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dc4:	6d a9       	ldd	r22, Y+53	; 0x35
    1dc6:	7e a9       	ldd	r23, Y+54	; 0x36
    1dc8:	8f a9       	ldd	r24, Y+55	; 0x37
    1dca:	98 ad       	ldd	r25, Y+56	; 0x38
    1dcc:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__fixunssfsi>
    1dd0:	dc 01       	movw	r26, r24
    1dd2:	cb 01       	movw	r24, r22
    1dd4:	9a af       	std	Y+58, r25	; 0x3a
    1dd6:	89 af       	std	Y+57, r24	; 0x39
    1dd8:	89 ad       	ldd	r24, Y+57	; 0x39
    1dda:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ddc:	9e af       	std	Y+62, r25	; 0x3e
    1dde:	8d af       	std	Y+61, r24	; 0x3d
    1de0:	8d ad       	ldd	r24, Y+61	; 0x3d
    1de2:	9e ad       	ldd	r25, Y+62	; 0x3e
    1de4:	8c 01       	movw	r16, r24
    1de6:	f8 01       	movw	r30, r16
    1de8:	31 97       	sbiw	r30, 0x01	; 1
    1dea:	f1 f7       	brne	.-4      	; 0x1de8 <STRETCHER_POS_CHANGE_HANDLE+0x4e2>
    1dec:	8f 01       	movw	r16, r30
    1dee:	1e af       	std	Y+62, r17	; 0x3e
    1df0:	0d af       	std	Y+61, r16	; 0x3d
	
	if (positionToMove<4) {
		uint16_t degreesToMove = abs(positionToMove-previousStretcherPosition)*STRETCHER_CALIBRATION_CONSTANT;
		
		if((positionToMove-previousCurtainPosition)>0){
			for (uint16_t x = 0; x < degreesToMove;x++){
    1df2:	89 81       	ldd	r24, Y+1	; 0x01
    1df4:	9a 81       	ldd	r25, Y+2	; 0x02
    1df6:	01 96       	adiw	r24, 0x01	; 1
    1df8:	9a 83       	std	Y+2, r25	; 0x02
    1dfa:	89 83       	std	Y+1, r24	; 0x01
    1dfc:	29 81       	ldd	r18, Y+1	; 0x01
    1dfe:	3a 81       	ldd	r19, Y+2	; 0x02
    1e00:	8d 81       	ldd	r24, Y+5	; 0x05
    1e02:	9e 81       	ldd	r25, Y+6	; 0x06
    1e04:	28 17       	cp	r18, r24
    1e06:	39 07       	cpc	r19, r25
    1e08:	08 f4       	brcc	.+2      	; 0x1e0c <STRETCHER_POS_CHANGE_HANDLE+0x506>
    1e0a:	df cd       	rjmp	.-1090   	; 0x19ca <STRETCHER_POS_CHANGE_HANDLE+0xc4>
    1e0c:	6a c3       	rjmp	.+1748   	; 0x24e2 <STRETCHER_POS_CHANGE_HANDLE+0xbdc>
				_delay_ms(MOTOR_DELAY_MS);
				PORTD = 0b10010000;
				_delay_ms(MOTOR_DELAY_MS);
			}
			}else{
			for (uint16_t x = 0; x < degreesToMove;x++){
    1e0e:	1c 82       	std	Y+4, r1	; 0x04
    1e10:	1b 82       	std	Y+3, r1	; 0x03
    1e12:	5f c3       	rjmp	.+1726   	; 0x24d2 <STRETCHER_POS_CHANGE_HANDLE+0xbcc>
				PORTD = 0b11000000;
    1e14:	8b e2       	ldi	r24, 0x2B	; 43
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	20 ec       	ldi	r18, 0xC0	; 192
    1e1a:	fc 01       	movw	r30, r24
    1e1c:	20 83       	st	Z, r18
    1e1e:	9e 01       	movw	r18, r28
    1e20:	21 5c       	subi	r18, 0xC1	; 193
    1e22:	3f 4f       	sbci	r19, 0xFF	; 255
    1e24:	80 e0       	ldi	r24, 0x00	; 0
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	a0 e8       	ldi	r26, 0x80	; 128
    1e2a:	bf e3       	ldi	r27, 0x3F	; 63
    1e2c:	f9 01       	movw	r30, r18
    1e2e:	80 83       	st	Z, r24
    1e30:	91 83       	std	Z+1, r25	; 0x01
    1e32:	a2 83       	std	Z+2, r26	; 0x02
    1e34:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    1e36:	8e 01       	movw	r16, r28
    1e38:	0d 5b       	subi	r16, 0xBD	; 189
    1e3a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e3c:	ce 01       	movw	r24, r28
    1e3e:	cf 96       	adiw	r24, 0x3f	; 63
    1e40:	fc 01       	movw	r30, r24
    1e42:	60 81       	ld	r22, Z
    1e44:	71 81       	ldd	r23, Z+1	; 0x01
    1e46:	82 81       	ldd	r24, Z+2	; 0x02
    1e48:	93 81       	ldd	r25, Z+3	; 0x03
    1e4a:	20 e0       	ldi	r18, 0x00	; 0
    1e4c:	30 e0       	ldi	r19, 0x00	; 0
    1e4e:	4a e7       	ldi	r20, 0x7A	; 122
    1e50:	55 e4       	ldi	r21, 0x45	; 69
    1e52:	0e 94 65 19 	call	0x32ca	; 0x32ca <__mulsf3>
    1e56:	dc 01       	movw	r26, r24
    1e58:	cb 01       	movw	r24, r22
    1e5a:	f8 01       	movw	r30, r16
    1e5c:	80 83       	st	Z, r24
    1e5e:	91 83       	std	Z+1, r25	; 0x01
    1e60:	a2 83       	std	Z+2, r26	; 0x02
    1e62:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e64:	ce 01       	movw	r24, r28
    1e66:	8d 5b       	subi	r24, 0xBD	; 189
    1e68:	9f 4f       	sbci	r25, 0xFF	; 255
    1e6a:	11 e0       	ldi	r17, 0x01	; 1
    1e6c:	fc 01       	movw	r30, r24
    1e6e:	60 81       	ld	r22, Z
    1e70:	71 81       	ldd	r23, Z+1	; 0x01
    1e72:	82 81       	ldd	r24, Z+2	; 0x02
    1e74:	93 81       	ldd	r25, Z+3	; 0x03
    1e76:	20 e0       	ldi	r18, 0x00	; 0
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	40 e8       	ldi	r20, 0x80	; 128
    1e7c:	5f e3       	ldi	r21, 0x3F	; 63
    1e7e:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <__cmpsf2>
    1e82:	88 23       	and	r24, r24
    1e84:	0c f0       	brlt	.+2      	; 0x1e88 <STRETCHER_POS_CHANGE_HANDLE+0x582>
    1e86:	10 e0       	ldi	r17, 0x00	; 0
    1e88:	11 23       	and	r17, r17
    1e8a:	49 f0       	breq	.+18     	; 0x1e9e <STRETCHER_POS_CHANGE_HANDLE+0x598>
		__ticks = 1;
    1e8c:	ce 01       	movw	r24, r28
    1e8e:	89 5b       	subi	r24, 0xB9	; 185
    1e90:	9f 4f       	sbci	r25, 0xFF	; 255
    1e92:	21 e0       	ldi	r18, 0x01	; 1
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	fc 01       	movw	r30, r24
    1e98:	31 83       	std	Z+1, r19	; 0x01
    1e9a:	20 83       	st	Z, r18
    1e9c:	73 c0       	rjmp	.+230    	; 0x1f84 <STRETCHER_POS_CHANGE_HANDLE+0x67e>
	else if (__tmp > 65535)
    1e9e:	ce 01       	movw	r24, r28
    1ea0:	8d 5b       	subi	r24, 0xBD	; 189
    1ea2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ea4:	11 e0       	ldi	r17, 0x01	; 1
    1ea6:	fc 01       	movw	r30, r24
    1ea8:	60 81       	ld	r22, Z
    1eaa:	71 81       	ldd	r23, Z+1	; 0x01
    1eac:	82 81       	ldd	r24, Z+2	; 0x02
    1eae:	93 81       	ldd	r25, Z+3	; 0x03
    1eb0:	20 e0       	ldi	r18, 0x00	; 0
    1eb2:	3f ef       	ldi	r19, 0xFF	; 255
    1eb4:	4f e7       	ldi	r20, 0x7F	; 127
    1eb6:	57 e4       	ldi	r21, 0x47	; 71
    1eb8:	0e 94 61 19 	call	0x32c2	; 0x32c2 <__gesf2>
    1ebc:	18 16       	cp	r1, r24
    1ebe:	0c f0       	brlt	.+2      	; 0x1ec2 <STRETCHER_POS_CHANGE_HANDLE+0x5bc>
    1ec0:	10 e0       	ldi	r17, 0x00	; 0
    1ec2:	11 23       	and	r17, r17
    1ec4:	09 f4       	brne	.+2      	; 0x1ec8 <STRETCHER_POS_CHANGE_HANDLE+0x5c2>
    1ec6:	4c c0       	rjmp	.+152    	; 0x1f60 <STRETCHER_POS_CHANGE_HANDLE+0x65a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ec8:	ce 01       	movw	r24, r28
    1eca:	cf 96       	adiw	r24, 0x3f	; 63
    1ecc:	fc 01       	movw	r30, r24
    1ece:	60 81       	ld	r22, Z
    1ed0:	71 81       	ldd	r23, Z+1	; 0x01
    1ed2:	82 81       	ldd	r24, Z+2	; 0x02
    1ed4:	93 81       	ldd	r25, Z+3	; 0x03
    1ed6:	20 e0       	ldi	r18, 0x00	; 0
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	40 e2       	ldi	r20, 0x20	; 32
    1edc:	51 e4       	ldi	r21, 0x41	; 65
    1ede:	0e 94 65 19 	call	0x32ca	; 0x32ca <__mulsf3>
    1ee2:	dc 01       	movw	r26, r24
    1ee4:	cb 01       	movw	r24, r22
    1ee6:	8e 01       	movw	r16, r28
    1ee8:	09 5b       	subi	r16, 0xB9	; 185
    1eea:	1f 4f       	sbci	r17, 0xFF	; 255
    1eec:	bc 01       	movw	r22, r24
    1eee:	cd 01       	movw	r24, r26
    1ef0:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__fixunssfsi>
    1ef4:	dc 01       	movw	r26, r24
    1ef6:	cb 01       	movw	r24, r22
    1ef8:	f8 01       	movw	r30, r16
    1efa:	91 83       	std	Z+1, r25	; 0x01
    1efc:	80 83       	st	Z, r24
    1efe:	27 c0       	rjmp	.+78     	; 0x1f4e <STRETCHER_POS_CHANGE_HANDLE+0x648>
    1f00:	ce 01       	movw	r24, r28
    1f02:	87 5b       	subi	r24, 0xB7	; 183
    1f04:	9f 4f       	sbci	r25, 0xFF	; 255
    1f06:	20 e9       	ldi	r18, 0x90	; 144
    1f08:	31 e0       	ldi	r19, 0x01	; 1
    1f0a:	fc 01       	movw	r30, r24
    1f0c:	31 83       	std	Z+1, r19	; 0x01
    1f0e:	20 83       	st	Z, r18
    1f10:	ce 01       	movw	r24, r28
    1f12:	87 5b       	subi	r24, 0xB7	; 183
    1f14:	9f 4f       	sbci	r25, 0xFF	; 255
    1f16:	fc 01       	movw	r30, r24
    1f18:	80 81       	ld	r24, Z
    1f1a:	91 81       	ldd	r25, Z+1	; 0x01
    1f1c:	8c 01       	movw	r16, r24
    1f1e:	c8 01       	movw	r24, r16
    1f20:	01 97       	sbiw	r24, 0x01	; 1
    1f22:	f1 f7       	brne	.-4      	; 0x1f20 <STRETCHER_POS_CHANGE_HANDLE+0x61a>
    1f24:	8c 01       	movw	r16, r24
    1f26:	ce 01       	movw	r24, r28
    1f28:	87 5b       	subi	r24, 0xB7	; 183
    1f2a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f2c:	fc 01       	movw	r30, r24
    1f2e:	11 83       	std	Z+1, r17	; 0x01
    1f30:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f32:	ce 01       	movw	r24, r28
    1f34:	89 5b       	subi	r24, 0xB9	; 185
    1f36:	9f 4f       	sbci	r25, 0xFF	; 255
    1f38:	9e 01       	movw	r18, r28
    1f3a:	29 5b       	subi	r18, 0xB9	; 185
    1f3c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f3e:	f9 01       	movw	r30, r18
    1f40:	20 81       	ld	r18, Z
    1f42:	31 81       	ldd	r19, Z+1	; 0x01
    1f44:	21 50       	subi	r18, 0x01	; 1
    1f46:	30 40       	sbci	r19, 0x00	; 0
    1f48:	fc 01       	movw	r30, r24
    1f4a:	31 83       	std	Z+1, r19	; 0x01
    1f4c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f4e:	ce 01       	movw	r24, r28
    1f50:	89 5b       	subi	r24, 0xB9	; 185
    1f52:	9f 4f       	sbci	r25, 0xFF	; 255
    1f54:	fc 01       	movw	r30, r24
    1f56:	80 81       	ld	r24, Z
    1f58:	91 81       	ldd	r25, Z+1	; 0x01
    1f5a:	00 97       	sbiw	r24, 0x00	; 0
    1f5c:	89 f6       	brne	.-94     	; 0x1f00 <STRETCHER_POS_CHANGE_HANDLE+0x5fa>
    1f5e:	2f c0       	rjmp	.+94     	; 0x1fbe <STRETCHER_POS_CHANGE_HANDLE+0x6b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f60:	8e 01       	movw	r16, r28
    1f62:	09 5b       	subi	r16, 0xB9	; 185
    1f64:	1f 4f       	sbci	r17, 0xFF	; 255
    1f66:	ce 01       	movw	r24, r28
    1f68:	8d 5b       	subi	r24, 0xBD	; 189
    1f6a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f6c:	fc 01       	movw	r30, r24
    1f6e:	60 81       	ld	r22, Z
    1f70:	71 81       	ldd	r23, Z+1	; 0x01
    1f72:	82 81       	ldd	r24, Z+2	; 0x02
    1f74:	93 81       	ldd	r25, Z+3	; 0x03
    1f76:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__fixunssfsi>
    1f7a:	dc 01       	movw	r26, r24
    1f7c:	cb 01       	movw	r24, r22
    1f7e:	f8 01       	movw	r30, r16
    1f80:	91 83       	std	Z+1, r25	; 0x01
    1f82:	80 83       	st	Z, r24
    1f84:	ce 01       	movw	r24, r28
    1f86:	85 5b       	subi	r24, 0xB5	; 181
    1f88:	9f 4f       	sbci	r25, 0xFF	; 255
    1f8a:	9e 01       	movw	r18, r28
    1f8c:	29 5b       	subi	r18, 0xB9	; 185
    1f8e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f90:	f9 01       	movw	r30, r18
    1f92:	20 81       	ld	r18, Z
    1f94:	31 81       	ldd	r19, Z+1	; 0x01
    1f96:	fc 01       	movw	r30, r24
    1f98:	31 83       	std	Z+1, r19	; 0x01
    1f9a:	20 83       	st	Z, r18
    1f9c:	ce 01       	movw	r24, r28
    1f9e:	85 5b       	subi	r24, 0xB5	; 181
    1fa0:	9f 4f       	sbci	r25, 0xFF	; 255
    1fa2:	fc 01       	movw	r30, r24
    1fa4:	80 81       	ld	r24, Z
    1fa6:	91 81       	ldd	r25, Z+1	; 0x01
    1fa8:	8c 01       	movw	r16, r24
    1faa:	c8 01       	movw	r24, r16
    1fac:	01 97       	sbiw	r24, 0x01	; 1
    1fae:	f1 f7       	brne	.-4      	; 0x1fac <STRETCHER_POS_CHANGE_HANDLE+0x6a6>
    1fb0:	8c 01       	movw	r16, r24
    1fb2:	ce 01       	movw	r24, r28
    1fb4:	85 5b       	subi	r24, 0xB5	; 181
    1fb6:	9f 4f       	sbci	r25, 0xFF	; 255
    1fb8:	fc 01       	movw	r30, r24
    1fba:	11 83       	std	Z+1, r17	; 0x01
    1fbc:	00 83       	st	Z, r16
				_delay_ms(MOTOR_DELAY_MS);
				PORTD = 0b01100000;
    1fbe:	8b e2       	ldi	r24, 0x2B	; 43
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	20 e6       	ldi	r18, 0x60	; 96
    1fc4:	fc 01       	movw	r30, r24
    1fc6:	20 83       	st	Z, r18
    1fc8:	9e 01       	movw	r18, r28
    1fca:	23 5b       	subi	r18, 0xB3	; 179
    1fcc:	3f 4f       	sbci	r19, 0xFF	; 255
    1fce:	80 e0       	ldi	r24, 0x00	; 0
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	a0 e8       	ldi	r26, 0x80	; 128
    1fd4:	bf e3       	ldi	r27, 0x3F	; 63
    1fd6:	f9 01       	movw	r30, r18
    1fd8:	80 83       	st	Z, r24
    1fda:	91 83       	std	Z+1, r25	; 0x01
    1fdc:	a2 83       	std	Z+2, r26	; 0x02
    1fde:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    1fe0:	8e 01       	movw	r16, r28
    1fe2:	0f 5a       	subi	r16, 0xAF	; 175
    1fe4:	1f 4f       	sbci	r17, 0xFF	; 255
    1fe6:	ce 01       	movw	r24, r28
    1fe8:	83 5b       	subi	r24, 0xB3	; 179
    1fea:	9f 4f       	sbci	r25, 0xFF	; 255
    1fec:	fc 01       	movw	r30, r24
    1fee:	60 81       	ld	r22, Z
    1ff0:	71 81       	ldd	r23, Z+1	; 0x01
    1ff2:	82 81       	ldd	r24, Z+2	; 0x02
    1ff4:	93 81       	ldd	r25, Z+3	; 0x03
    1ff6:	20 e0       	ldi	r18, 0x00	; 0
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	4a e7       	ldi	r20, 0x7A	; 122
    1ffc:	55 e4       	ldi	r21, 0x45	; 69
    1ffe:	0e 94 65 19 	call	0x32ca	; 0x32ca <__mulsf3>
    2002:	dc 01       	movw	r26, r24
    2004:	cb 01       	movw	r24, r22
    2006:	f8 01       	movw	r30, r16
    2008:	80 83       	st	Z, r24
    200a:	91 83       	std	Z+1, r25	; 0x01
    200c:	a2 83       	std	Z+2, r26	; 0x02
    200e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2010:	ce 01       	movw	r24, r28
    2012:	8f 5a       	subi	r24, 0xAF	; 175
    2014:	9f 4f       	sbci	r25, 0xFF	; 255
    2016:	11 e0       	ldi	r17, 0x01	; 1
    2018:	fc 01       	movw	r30, r24
    201a:	60 81       	ld	r22, Z
    201c:	71 81       	ldd	r23, Z+1	; 0x01
    201e:	82 81       	ldd	r24, Z+2	; 0x02
    2020:	93 81       	ldd	r25, Z+3	; 0x03
    2022:	20 e0       	ldi	r18, 0x00	; 0
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	40 e8       	ldi	r20, 0x80	; 128
    2028:	5f e3       	ldi	r21, 0x3F	; 63
    202a:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <__cmpsf2>
    202e:	88 23       	and	r24, r24
    2030:	0c f0       	brlt	.+2      	; 0x2034 <STRETCHER_POS_CHANGE_HANDLE+0x72e>
    2032:	10 e0       	ldi	r17, 0x00	; 0
    2034:	11 23       	and	r17, r17
    2036:	49 f0       	breq	.+18     	; 0x204a <STRETCHER_POS_CHANGE_HANDLE+0x744>
		__ticks = 1;
    2038:	ce 01       	movw	r24, r28
    203a:	8b 5a       	subi	r24, 0xAB	; 171
    203c:	9f 4f       	sbci	r25, 0xFF	; 255
    203e:	21 e0       	ldi	r18, 0x01	; 1
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	fc 01       	movw	r30, r24
    2044:	31 83       	std	Z+1, r19	; 0x01
    2046:	20 83       	st	Z, r18
    2048:	74 c0       	rjmp	.+232    	; 0x2132 <STRETCHER_POS_CHANGE_HANDLE+0x82c>
	else if (__tmp > 65535)
    204a:	ce 01       	movw	r24, r28
    204c:	8f 5a       	subi	r24, 0xAF	; 175
    204e:	9f 4f       	sbci	r25, 0xFF	; 255
    2050:	11 e0       	ldi	r17, 0x01	; 1
    2052:	fc 01       	movw	r30, r24
    2054:	60 81       	ld	r22, Z
    2056:	71 81       	ldd	r23, Z+1	; 0x01
    2058:	82 81       	ldd	r24, Z+2	; 0x02
    205a:	93 81       	ldd	r25, Z+3	; 0x03
    205c:	20 e0       	ldi	r18, 0x00	; 0
    205e:	3f ef       	ldi	r19, 0xFF	; 255
    2060:	4f e7       	ldi	r20, 0x7F	; 127
    2062:	57 e4       	ldi	r21, 0x47	; 71
    2064:	0e 94 61 19 	call	0x32c2	; 0x32c2 <__gesf2>
    2068:	18 16       	cp	r1, r24
    206a:	0c f0       	brlt	.+2      	; 0x206e <STRETCHER_POS_CHANGE_HANDLE+0x768>
    206c:	10 e0       	ldi	r17, 0x00	; 0
    206e:	11 23       	and	r17, r17
    2070:	09 f4       	brne	.+2      	; 0x2074 <STRETCHER_POS_CHANGE_HANDLE+0x76e>
    2072:	4d c0       	rjmp	.+154    	; 0x210e <STRETCHER_POS_CHANGE_HANDLE+0x808>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2074:	ce 01       	movw	r24, r28
    2076:	83 5b       	subi	r24, 0xB3	; 179
    2078:	9f 4f       	sbci	r25, 0xFF	; 255
    207a:	fc 01       	movw	r30, r24
    207c:	60 81       	ld	r22, Z
    207e:	71 81       	ldd	r23, Z+1	; 0x01
    2080:	82 81       	ldd	r24, Z+2	; 0x02
    2082:	93 81       	ldd	r25, Z+3	; 0x03
    2084:	20 e0       	ldi	r18, 0x00	; 0
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	40 e2       	ldi	r20, 0x20	; 32
    208a:	51 e4       	ldi	r21, 0x41	; 65
    208c:	0e 94 65 19 	call	0x32ca	; 0x32ca <__mulsf3>
    2090:	dc 01       	movw	r26, r24
    2092:	cb 01       	movw	r24, r22
    2094:	8e 01       	movw	r16, r28
    2096:	0b 5a       	subi	r16, 0xAB	; 171
    2098:	1f 4f       	sbci	r17, 0xFF	; 255
    209a:	bc 01       	movw	r22, r24
    209c:	cd 01       	movw	r24, r26
    209e:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__fixunssfsi>
    20a2:	dc 01       	movw	r26, r24
    20a4:	cb 01       	movw	r24, r22
    20a6:	f8 01       	movw	r30, r16
    20a8:	91 83       	std	Z+1, r25	; 0x01
    20aa:	80 83       	st	Z, r24
    20ac:	27 c0       	rjmp	.+78     	; 0x20fc <STRETCHER_POS_CHANGE_HANDLE+0x7f6>
    20ae:	ce 01       	movw	r24, r28
    20b0:	89 5a       	subi	r24, 0xA9	; 169
    20b2:	9f 4f       	sbci	r25, 0xFF	; 255
    20b4:	20 e9       	ldi	r18, 0x90	; 144
    20b6:	31 e0       	ldi	r19, 0x01	; 1
    20b8:	fc 01       	movw	r30, r24
    20ba:	31 83       	std	Z+1, r19	; 0x01
    20bc:	20 83       	st	Z, r18
    20be:	ce 01       	movw	r24, r28
    20c0:	89 5a       	subi	r24, 0xA9	; 169
    20c2:	9f 4f       	sbci	r25, 0xFF	; 255
    20c4:	fc 01       	movw	r30, r24
    20c6:	80 81       	ld	r24, Z
    20c8:	91 81       	ldd	r25, Z+1	; 0x01
    20ca:	8c 01       	movw	r16, r24
    20cc:	c8 01       	movw	r24, r16
    20ce:	01 97       	sbiw	r24, 0x01	; 1
    20d0:	f1 f7       	brne	.-4      	; 0x20ce <STRETCHER_POS_CHANGE_HANDLE+0x7c8>
    20d2:	8c 01       	movw	r16, r24
    20d4:	ce 01       	movw	r24, r28
    20d6:	89 5a       	subi	r24, 0xA9	; 169
    20d8:	9f 4f       	sbci	r25, 0xFF	; 255
    20da:	fc 01       	movw	r30, r24
    20dc:	11 83       	std	Z+1, r17	; 0x01
    20de:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20e0:	ce 01       	movw	r24, r28
    20e2:	8b 5a       	subi	r24, 0xAB	; 171
    20e4:	9f 4f       	sbci	r25, 0xFF	; 255
    20e6:	9e 01       	movw	r18, r28
    20e8:	2b 5a       	subi	r18, 0xAB	; 171
    20ea:	3f 4f       	sbci	r19, 0xFF	; 255
    20ec:	f9 01       	movw	r30, r18
    20ee:	20 81       	ld	r18, Z
    20f0:	31 81       	ldd	r19, Z+1	; 0x01
    20f2:	21 50       	subi	r18, 0x01	; 1
    20f4:	30 40       	sbci	r19, 0x00	; 0
    20f6:	fc 01       	movw	r30, r24
    20f8:	31 83       	std	Z+1, r19	; 0x01
    20fa:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20fc:	ce 01       	movw	r24, r28
    20fe:	8b 5a       	subi	r24, 0xAB	; 171
    2100:	9f 4f       	sbci	r25, 0xFF	; 255
    2102:	fc 01       	movw	r30, r24
    2104:	80 81       	ld	r24, Z
    2106:	91 81       	ldd	r25, Z+1	; 0x01
    2108:	00 97       	sbiw	r24, 0x00	; 0
    210a:	89 f6       	brne	.-94     	; 0x20ae <STRETCHER_POS_CHANGE_HANDLE+0x7a8>
    210c:	2f c0       	rjmp	.+94     	; 0x216c <STRETCHER_POS_CHANGE_HANDLE+0x866>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    210e:	8e 01       	movw	r16, r28
    2110:	0b 5a       	subi	r16, 0xAB	; 171
    2112:	1f 4f       	sbci	r17, 0xFF	; 255
    2114:	ce 01       	movw	r24, r28
    2116:	8f 5a       	subi	r24, 0xAF	; 175
    2118:	9f 4f       	sbci	r25, 0xFF	; 255
    211a:	fc 01       	movw	r30, r24
    211c:	60 81       	ld	r22, Z
    211e:	71 81       	ldd	r23, Z+1	; 0x01
    2120:	82 81       	ldd	r24, Z+2	; 0x02
    2122:	93 81       	ldd	r25, Z+3	; 0x03
    2124:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__fixunssfsi>
    2128:	dc 01       	movw	r26, r24
    212a:	cb 01       	movw	r24, r22
    212c:	f8 01       	movw	r30, r16
    212e:	91 83       	std	Z+1, r25	; 0x01
    2130:	80 83       	st	Z, r24
    2132:	ce 01       	movw	r24, r28
    2134:	87 5a       	subi	r24, 0xA7	; 167
    2136:	9f 4f       	sbci	r25, 0xFF	; 255
    2138:	9e 01       	movw	r18, r28
    213a:	2b 5a       	subi	r18, 0xAB	; 171
    213c:	3f 4f       	sbci	r19, 0xFF	; 255
    213e:	f9 01       	movw	r30, r18
    2140:	20 81       	ld	r18, Z
    2142:	31 81       	ldd	r19, Z+1	; 0x01
    2144:	fc 01       	movw	r30, r24
    2146:	31 83       	std	Z+1, r19	; 0x01
    2148:	20 83       	st	Z, r18
    214a:	ce 01       	movw	r24, r28
    214c:	87 5a       	subi	r24, 0xA7	; 167
    214e:	9f 4f       	sbci	r25, 0xFF	; 255
    2150:	fc 01       	movw	r30, r24
    2152:	80 81       	ld	r24, Z
    2154:	91 81       	ldd	r25, Z+1	; 0x01
    2156:	8c 01       	movw	r16, r24
    2158:	c8 01       	movw	r24, r16
    215a:	01 97       	sbiw	r24, 0x01	; 1
    215c:	f1 f7       	brne	.-4      	; 0x215a <STRETCHER_POS_CHANGE_HANDLE+0x854>
    215e:	8c 01       	movw	r16, r24
    2160:	ce 01       	movw	r24, r28
    2162:	87 5a       	subi	r24, 0xA7	; 167
    2164:	9f 4f       	sbci	r25, 0xFF	; 255
    2166:	fc 01       	movw	r30, r24
    2168:	11 83       	std	Z+1, r17	; 0x01
    216a:	00 83       	st	Z, r16
				_delay_ms(MOTOR_DELAY_MS);
				PORTD = 0b00110000;
    216c:	8b e2       	ldi	r24, 0x2B	; 43
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	20 e3       	ldi	r18, 0x30	; 48
    2172:	fc 01       	movw	r30, r24
    2174:	20 83       	st	Z, r18
    2176:	9e 01       	movw	r18, r28
    2178:	25 5a       	subi	r18, 0xA5	; 165
    217a:	3f 4f       	sbci	r19, 0xFF	; 255
    217c:	80 e0       	ldi	r24, 0x00	; 0
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	a0 e8       	ldi	r26, 0x80	; 128
    2182:	bf e3       	ldi	r27, 0x3F	; 63
    2184:	f9 01       	movw	r30, r18
    2186:	80 83       	st	Z, r24
    2188:	91 83       	std	Z+1, r25	; 0x01
    218a:	a2 83       	std	Z+2, r26	; 0x02
    218c:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    218e:	8e 01       	movw	r16, r28
    2190:	01 5a       	subi	r16, 0xA1	; 161
    2192:	1f 4f       	sbci	r17, 0xFF	; 255
    2194:	ce 01       	movw	r24, r28
    2196:	85 5a       	subi	r24, 0xA5	; 165
    2198:	9f 4f       	sbci	r25, 0xFF	; 255
    219a:	fc 01       	movw	r30, r24
    219c:	60 81       	ld	r22, Z
    219e:	71 81       	ldd	r23, Z+1	; 0x01
    21a0:	82 81       	ldd	r24, Z+2	; 0x02
    21a2:	93 81       	ldd	r25, Z+3	; 0x03
    21a4:	20 e0       	ldi	r18, 0x00	; 0
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	4a e7       	ldi	r20, 0x7A	; 122
    21aa:	55 e4       	ldi	r21, 0x45	; 69
    21ac:	0e 94 65 19 	call	0x32ca	; 0x32ca <__mulsf3>
    21b0:	dc 01       	movw	r26, r24
    21b2:	cb 01       	movw	r24, r22
    21b4:	f8 01       	movw	r30, r16
    21b6:	80 83       	st	Z, r24
    21b8:	91 83       	std	Z+1, r25	; 0x01
    21ba:	a2 83       	std	Z+2, r26	; 0x02
    21bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21be:	ce 01       	movw	r24, r28
    21c0:	81 5a       	subi	r24, 0xA1	; 161
    21c2:	9f 4f       	sbci	r25, 0xFF	; 255
    21c4:	11 e0       	ldi	r17, 0x01	; 1
    21c6:	fc 01       	movw	r30, r24
    21c8:	60 81       	ld	r22, Z
    21ca:	71 81       	ldd	r23, Z+1	; 0x01
    21cc:	82 81       	ldd	r24, Z+2	; 0x02
    21ce:	93 81       	ldd	r25, Z+3	; 0x03
    21d0:	20 e0       	ldi	r18, 0x00	; 0
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	40 e8       	ldi	r20, 0x80	; 128
    21d6:	5f e3       	ldi	r21, 0x3F	; 63
    21d8:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <__cmpsf2>
    21dc:	88 23       	and	r24, r24
    21de:	0c f0       	brlt	.+2      	; 0x21e2 <STRETCHER_POS_CHANGE_HANDLE+0x8dc>
    21e0:	10 e0       	ldi	r17, 0x00	; 0
    21e2:	11 23       	and	r17, r17
    21e4:	49 f0       	breq	.+18     	; 0x21f8 <STRETCHER_POS_CHANGE_HANDLE+0x8f2>
		__ticks = 1;
    21e6:	ce 01       	movw	r24, r28
    21e8:	8d 59       	subi	r24, 0x9D	; 157
    21ea:	9f 4f       	sbci	r25, 0xFF	; 255
    21ec:	21 e0       	ldi	r18, 0x01	; 1
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	fc 01       	movw	r30, r24
    21f2:	31 83       	std	Z+1, r19	; 0x01
    21f4:	20 83       	st	Z, r18
    21f6:	74 c0       	rjmp	.+232    	; 0x22e0 <STRETCHER_POS_CHANGE_HANDLE+0x9da>
	else if (__tmp > 65535)
    21f8:	ce 01       	movw	r24, r28
    21fa:	81 5a       	subi	r24, 0xA1	; 161
    21fc:	9f 4f       	sbci	r25, 0xFF	; 255
    21fe:	11 e0       	ldi	r17, 0x01	; 1
    2200:	fc 01       	movw	r30, r24
    2202:	60 81       	ld	r22, Z
    2204:	71 81       	ldd	r23, Z+1	; 0x01
    2206:	82 81       	ldd	r24, Z+2	; 0x02
    2208:	93 81       	ldd	r25, Z+3	; 0x03
    220a:	20 e0       	ldi	r18, 0x00	; 0
    220c:	3f ef       	ldi	r19, 0xFF	; 255
    220e:	4f e7       	ldi	r20, 0x7F	; 127
    2210:	57 e4       	ldi	r21, 0x47	; 71
    2212:	0e 94 61 19 	call	0x32c2	; 0x32c2 <__gesf2>
    2216:	18 16       	cp	r1, r24
    2218:	0c f0       	brlt	.+2      	; 0x221c <STRETCHER_POS_CHANGE_HANDLE+0x916>
    221a:	10 e0       	ldi	r17, 0x00	; 0
    221c:	11 23       	and	r17, r17
    221e:	09 f4       	brne	.+2      	; 0x2222 <STRETCHER_POS_CHANGE_HANDLE+0x91c>
    2220:	4d c0       	rjmp	.+154    	; 0x22bc <STRETCHER_POS_CHANGE_HANDLE+0x9b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2222:	ce 01       	movw	r24, r28
    2224:	85 5a       	subi	r24, 0xA5	; 165
    2226:	9f 4f       	sbci	r25, 0xFF	; 255
    2228:	fc 01       	movw	r30, r24
    222a:	60 81       	ld	r22, Z
    222c:	71 81       	ldd	r23, Z+1	; 0x01
    222e:	82 81       	ldd	r24, Z+2	; 0x02
    2230:	93 81       	ldd	r25, Z+3	; 0x03
    2232:	20 e0       	ldi	r18, 0x00	; 0
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	40 e2       	ldi	r20, 0x20	; 32
    2238:	51 e4       	ldi	r21, 0x41	; 65
    223a:	0e 94 65 19 	call	0x32ca	; 0x32ca <__mulsf3>
    223e:	dc 01       	movw	r26, r24
    2240:	cb 01       	movw	r24, r22
    2242:	8e 01       	movw	r16, r28
    2244:	0d 59       	subi	r16, 0x9D	; 157
    2246:	1f 4f       	sbci	r17, 0xFF	; 255
    2248:	bc 01       	movw	r22, r24
    224a:	cd 01       	movw	r24, r26
    224c:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__fixunssfsi>
    2250:	dc 01       	movw	r26, r24
    2252:	cb 01       	movw	r24, r22
    2254:	f8 01       	movw	r30, r16
    2256:	91 83       	std	Z+1, r25	; 0x01
    2258:	80 83       	st	Z, r24
    225a:	27 c0       	rjmp	.+78     	; 0x22aa <STRETCHER_POS_CHANGE_HANDLE+0x9a4>
    225c:	ce 01       	movw	r24, r28
    225e:	8b 59       	subi	r24, 0x9B	; 155
    2260:	9f 4f       	sbci	r25, 0xFF	; 255
    2262:	20 e9       	ldi	r18, 0x90	; 144
    2264:	31 e0       	ldi	r19, 0x01	; 1
    2266:	fc 01       	movw	r30, r24
    2268:	31 83       	std	Z+1, r19	; 0x01
    226a:	20 83       	st	Z, r18
    226c:	ce 01       	movw	r24, r28
    226e:	8b 59       	subi	r24, 0x9B	; 155
    2270:	9f 4f       	sbci	r25, 0xFF	; 255
    2272:	fc 01       	movw	r30, r24
    2274:	80 81       	ld	r24, Z
    2276:	91 81       	ldd	r25, Z+1	; 0x01
    2278:	8c 01       	movw	r16, r24
    227a:	c8 01       	movw	r24, r16
    227c:	01 97       	sbiw	r24, 0x01	; 1
    227e:	f1 f7       	brne	.-4      	; 0x227c <STRETCHER_POS_CHANGE_HANDLE+0x976>
    2280:	8c 01       	movw	r16, r24
    2282:	ce 01       	movw	r24, r28
    2284:	8b 59       	subi	r24, 0x9B	; 155
    2286:	9f 4f       	sbci	r25, 0xFF	; 255
    2288:	fc 01       	movw	r30, r24
    228a:	11 83       	std	Z+1, r17	; 0x01
    228c:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    228e:	ce 01       	movw	r24, r28
    2290:	8d 59       	subi	r24, 0x9D	; 157
    2292:	9f 4f       	sbci	r25, 0xFF	; 255
    2294:	9e 01       	movw	r18, r28
    2296:	2d 59       	subi	r18, 0x9D	; 157
    2298:	3f 4f       	sbci	r19, 0xFF	; 255
    229a:	f9 01       	movw	r30, r18
    229c:	20 81       	ld	r18, Z
    229e:	31 81       	ldd	r19, Z+1	; 0x01
    22a0:	21 50       	subi	r18, 0x01	; 1
    22a2:	30 40       	sbci	r19, 0x00	; 0
    22a4:	fc 01       	movw	r30, r24
    22a6:	31 83       	std	Z+1, r19	; 0x01
    22a8:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22aa:	ce 01       	movw	r24, r28
    22ac:	8d 59       	subi	r24, 0x9D	; 157
    22ae:	9f 4f       	sbci	r25, 0xFF	; 255
    22b0:	fc 01       	movw	r30, r24
    22b2:	80 81       	ld	r24, Z
    22b4:	91 81       	ldd	r25, Z+1	; 0x01
    22b6:	00 97       	sbiw	r24, 0x00	; 0
    22b8:	89 f6       	brne	.-94     	; 0x225c <STRETCHER_POS_CHANGE_HANDLE+0x956>
    22ba:	2f c0       	rjmp	.+94     	; 0x231a <STRETCHER_POS_CHANGE_HANDLE+0xa14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22bc:	8e 01       	movw	r16, r28
    22be:	0d 59       	subi	r16, 0x9D	; 157
    22c0:	1f 4f       	sbci	r17, 0xFF	; 255
    22c2:	ce 01       	movw	r24, r28
    22c4:	81 5a       	subi	r24, 0xA1	; 161
    22c6:	9f 4f       	sbci	r25, 0xFF	; 255
    22c8:	fc 01       	movw	r30, r24
    22ca:	60 81       	ld	r22, Z
    22cc:	71 81       	ldd	r23, Z+1	; 0x01
    22ce:	82 81       	ldd	r24, Z+2	; 0x02
    22d0:	93 81       	ldd	r25, Z+3	; 0x03
    22d2:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__fixunssfsi>
    22d6:	dc 01       	movw	r26, r24
    22d8:	cb 01       	movw	r24, r22
    22da:	f8 01       	movw	r30, r16
    22dc:	91 83       	std	Z+1, r25	; 0x01
    22de:	80 83       	st	Z, r24
    22e0:	ce 01       	movw	r24, r28
    22e2:	89 59       	subi	r24, 0x99	; 153
    22e4:	9f 4f       	sbci	r25, 0xFF	; 255
    22e6:	9e 01       	movw	r18, r28
    22e8:	2d 59       	subi	r18, 0x9D	; 157
    22ea:	3f 4f       	sbci	r19, 0xFF	; 255
    22ec:	f9 01       	movw	r30, r18
    22ee:	20 81       	ld	r18, Z
    22f0:	31 81       	ldd	r19, Z+1	; 0x01
    22f2:	fc 01       	movw	r30, r24
    22f4:	31 83       	std	Z+1, r19	; 0x01
    22f6:	20 83       	st	Z, r18
    22f8:	ce 01       	movw	r24, r28
    22fa:	89 59       	subi	r24, 0x99	; 153
    22fc:	9f 4f       	sbci	r25, 0xFF	; 255
    22fe:	fc 01       	movw	r30, r24
    2300:	80 81       	ld	r24, Z
    2302:	91 81       	ldd	r25, Z+1	; 0x01
    2304:	8c 01       	movw	r16, r24
    2306:	c8 01       	movw	r24, r16
    2308:	01 97       	sbiw	r24, 0x01	; 1
    230a:	f1 f7       	brne	.-4      	; 0x2308 <STRETCHER_POS_CHANGE_HANDLE+0xa02>
    230c:	8c 01       	movw	r16, r24
    230e:	ce 01       	movw	r24, r28
    2310:	89 59       	subi	r24, 0x99	; 153
    2312:	9f 4f       	sbci	r25, 0xFF	; 255
    2314:	fc 01       	movw	r30, r24
    2316:	11 83       	std	Z+1, r17	; 0x01
    2318:	00 83       	st	Z, r16
				_delay_ms(MOTOR_DELAY_MS);
				PORTD = 0b10010000;
    231a:	8b e2       	ldi	r24, 0x2B	; 43
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	20 e9       	ldi	r18, 0x90	; 144
    2320:	fc 01       	movw	r30, r24
    2322:	20 83       	st	Z, r18
    2324:	9e 01       	movw	r18, r28
    2326:	27 59       	subi	r18, 0x97	; 151
    2328:	3f 4f       	sbci	r19, 0xFF	; 255
    232a:	80 e0       	ldi	r24, 0x00	; 0
    232c:	90 e0       	ldi	r25, 0x00	; 0
    232e:	a0 e8       	ldi	r26, 0x80	; 128
    2330:	bf e3       	ldi	r27, 0x3F	; 63
    2332:	f9 01       	movw	r30, r18
    2334:	80 83       	st	Z, r24
    2336:	91 83       	std	Z+1, r25	; 0x01
    2338:	a2 83       	std	Z+2, r26	; 0x02
    233a:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    233c:	8e 01       	movw	r16, r28
    233e:	03 59       	subi	r16, 0x93	; 147
    2340:	1f 4f       	sbci	r17, 0xFF	; 255
    2342:	ce 01       	movw	r24, r28
    2344:	87 59       	subi	r24, 0x97	; 151
    2346:	9f 4f       	sbci	r25, 0xFF	; 255
    2348:	fc 01       	movw	r30, r24
    234a:	60 81       	ld	r22, Z
    234c:	71 81       	ldd	r23, Z+1	; 0x01
    234e:	82 81       	ldd	r24, Z+2	; 0x02
    2350:	93 81       	ldd	r25, Z+3	; 0x03
    2352:	20 e0       	ldi	r18, 0x00	; 0
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	4a e7       	ldi	r20, 0x7A	; 122
    2358:	55 e4       	ldi	r21, 0x45	; 69
    235a:	0e 94 65 19 	call	0x32ca	; 0x32ca <__mulsf3>
    235e:	dc 01       	movw	r26, r24
    2360:	cb 01       	movw	r24, r22
    2362:	f8 01       	movw	r30, r16
    2364:	80 83       	st	Z, r24
    2366:	91 83       	std	Z+1, r25	; 0x01
    2368:	a2 83       	std	Z+2, r26	; 0x02
    236a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    236c:	ce 01       	movw	r24, r28
    236e:	83 59       	subi	r24, 0x93	; 147
    2370:	9f 4f       	sbci	r25, 0xFF	; 255
    2372:	11 e0       	ldi	r17, 0x01	; 1
    2374:	fc 01       	movw	r30, r24
    2376:	60 81       	ld	r22, Z
    2378:	71 81       	ldd	r23, Z+1	; 0x01
    237a:	82 81       	ldd	r24, Z+2	; 0x02
    237c:	93 81       	ldd	r25, Z+3	; 0x03
    237e:	20 e0       	ldi	r18, 0x00	; 0
    2380:	30 e0       	ldi	r19, 0x00	; 0
    2382:	40 e8       	ldi	r20, 0x80	; 128
    2384:	5f e3       	ldi	r21, 0x3F	; 63
    2386:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <__cmpsf2>
    238a:	88 23       	and	r24, r24
    238c:	0c f0       	brlt	.+2      	; 0x2390 <STRETCHER_POS_CHANGE_HANDLE+0xa8a>
    238e:	10 e0       	ldi	r17, 0x00	; 0
    2390:	11 23       	and	r17, r17
    2392:	49 f0       	breq	.+18     	; 0x23a6 <STRETCHER_POS_CHANGE_HANDLE+0xaa0>
		__ticks = 1;
    2394:	ce 01       	movw	r24, r28
    2396:	8f 58       	subi	r24, 0x8F	; 143
    2398:	9f 4f       	sbci	r25, 0xFF	; 255
    239a:	21 e0       	ldi	r18, 0x01	; 1
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	fc 01       	movw	r30, r24
    23a0:	31 83       	std	Z+1, r19	; 0x01
    23a2:	20 83       	st	Z, r18
    23a4:	74 c0       	rjmp	.+232    	; 0x248e <STRETCHER_POS_CHANGE_HANDLE+0xb88>
	else if (__tmp > 65535)
    23a6:	ce 01       	movw	r24, r28
    23a8:	83 59       	subi	r24, 0x93	; 147
    23aa:	9f 4f       	sbci	r25, 0xFF	; 255
    23ac:	11 e0       	ldi	r17, 0x01	; 1
    23ae:	fc 01       	movw	r30, r24
    23b0:	60 81       	ld	r22, Z
    23b2:	71 81       	ldd	r23, Z+1	; 0x01
    23b4:	82 81       	ldd	r24, Z+2	; 0x02
    23b6:	93 81       	ldd	r25, Z+3	; 0x03
    23b8:	20 e0       	ldi	r18, 0x00	; 0
    23ba:	3f ef       	ldi	r19, 0xFF	; 255
    23bc:	4f e7       	ldi	r20, 0x7F	; 127
    23be:	57 e4       	ldi	r21, 0x47	; 71
    23c0:	0e 94 61 19 	call	0x32c2	; 0x32c2 <__gesf2>
    23c4:	18 16       	cp	r1, r24
    23c6:	0c f0       	brlt	.+2      	; 0x23ca <STRETCHER_POS_CHANGE_HANDLE+0xac4>
    23c8:	10 e0       	ldi	r17, 0x00	; 0
    23ca:	11 23       	and	r17, r17
    23cc:	09 f4       	brne	.+2      	; 0x23d0 <STRETCHER_POS_CHANGE_HANDLE+0xaca>
    23ce:	4d c0       	rjmp	.+154    	; 0x246a <STRETCHER_POS_CHANGE_HANDLE+0xb64>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23d0:	ce 01       	movw	r24, r28
    23d2:	87 59       	subi	r24, 0x97	; 151
    23d4:	9f 4f       	sbci	r25, 0xFF	; 255
    23d6:	fc 01       	movw	r30, r24
    23d8:	60 81       	ld	r22, Z
    23da:	71 81       	ldd	r23, Z+1	; 0x01
    23dc:	82 81       	ldd	r24, Z+2	; 0x02
    23de:	93 81       	ldd	r25, Z+3	; 0x03
    23e0:	20 e0       	ldi	r18, 0x00	; 0
    23e2:	30 e0       	ldi	r19, 0x00	; 0
    23e4:	40 e2       	ldi	r20, 0x20	; 32
    23e6:	51 e4       	ldi	r21, 0x41	; 65
    23e8:	0e 94 65 19 	call	0x32ca	; 0x32ca <__mulsf3>
    23ec:	dc 01       	movw	r26, r24
    23ee:	cb 01       	movw	r24, r22
    23f0:	8e 01       	movw	r16, r28
    23f2:	0f 58       	subi	r16, 0x8F	; 143
    23f4:	1f 4f       	sbci	r17, 0xFF	; 255
    23f6:	bc 01       	movw	r22, r24
    23f8:	cd 01       	movw	r24, r26
    23fa:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__fixunssfsi>
    23fe:	dc 01       	movw	r26, r24
    2400:	cb 01       	movw	r24, r22
    2402:	f8 01       	movw	r30, r16
    2404:	91 83       	std	Z+1, r25	; 0x01
    2406:	80 83       	st	Z, r24
    2408:	27 c0       	rjmp	.+78     	; 0x2458 <STRETCHER_POS_CHANGE_HANDLE+0xb52>
    240a:	ce 01       	movw	r24, r28
    240c:	8d 58       	subi	r24, 0x8D	; 141
    240e:	9f 4f       	sbci	r25, 0xFF	; 255
    2410:	20 e9       	ldi	r18, 0x90	; 144
    2412:	31 e0       	ldi	r19, 0x01	; 1
    2414:	fc 01       	movw	r30, r24
    2416:	31 83       	std	Z+1, r19	; 0x01
    2418:	20 83       	st	Z, r18
    241a:	ce 01       	movw	r24, r28
    241c:	8d 58       	subi	r24, 0x8D	; 141
    241e:	9f 4f       	sbci	r25, 0xFF	; 255
    2420:	fc 01       	movw	r30, r24
    2422:	80 81       	ld	r24, Z
    2424:	91 81       	ldd	r25, Z+1	; 0x01
    2426:	8c 01       	movw	r16, r24
    2428:	c8 01       	movw	r24, r16
    242a:	01 97       	sbiw	r24, 0x01	; 1
    242c:	f1 f7       	brne	.-4      	; 0x242a <STRETCHER_POS_CHANGE_HANDLE+0xb24>
    242e:	8c 01       	movw	r16, r24
    2430:	ce 01       	movw	r24, r28
    2432:	8d 58       	subi	r24, 0x8D	; 141
    2434:	9f 4f       	sbci	r25, 0xFF	; 255
    2436:	fc 01       	movw	r30, r24
    2438:	11 83       	std	Z+1, r17	; 0x01
    243a:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    243c:	ce 01       	movw	r24, r28
    243e:	8f 58       	subi	r24, 0x8F	; 143
    2440:	9f 4f       	sbci	r25, 0xFF	; 255
    2442:	9e 01       	movw	r18, r28
    2444:	2f 58       	subi	r18, 0x8F	; 143
    2446:	3f 4f       	sbci	r19, 0xFF	; 255
    2448:	f9 01       	movw	r30, r18
    244a:	20 81       	ld	r18, Z
    244c:	31 81       	ldd	r19, Z+1	; 0x01
    244e:	21 50       	subi	r18, 0x01	; 1
    2450:	30 40       	sbci	r19, 0x00	; 0
    2452:	fc 01       	movw	r30, r24
    2454:	31 83       	std	Z+1, r19	; 0x01
    2456:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2458:	ce 01       	movw	r24, r28
    245a:	8f 58       	subi	r24, 0x8F	; 143
    245c:	9f 4f       	sbci	r25, 0xFF	; 255
    245e:	fc 01       	movw	r30, r24
    2460:	80 81       	ld	r24, Z
    2462:	91 81       	ldd	r25, Z+1	; 0x01
    2464:	00 97       	sbiw	r24, 0x00	; 0
    2466:	89 f6       	brne	.-94     	; 0x240a <STRETCHER_POS_CHANGE_HANDLE+0xb04>
    2468:	2f c0       	rjmp	.+94     	; 0x24c8 <STRETCHER_POS_CHANGE_HANDLE+0xbc2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    246a:	8e 01       	movw	r16, r28
    246c:	0f 58       	subi	r16, 0x8F	; 143
    246e:	1f 4f       	sbci	r17, 0xFF	; 255
    2470:	ce 01       	movw	r24, r28
    2472:	83 59       	subi	r24, 0x93	; 147
    2474:	9f 4f       	sbci	r25, 0xFF	; 255
    2476:	fc 01       	movw	r30, r24
    2478:	60 81       	ld	r22, Z
    247a:	71 81       	ldd	r23, Z+1	; 0x01
    247c:	82 81       	ldd	r24, Z+2	; 0x02
    247e:	93 81       	ldd	r25, Z+3	; 0x03
    2480:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__fixunssfsi>
    2484:	dc 01       	movw	r26, r24
    2486:	cb 01       	movw	r24, r22
    2488:	f8 01       	movw	r30, r16
    248a:	91 83       	std	Z+1, r25	; 0x01
    248c:	80 83       	st	Z, r24
    248e:	ce 01       	movw	r24, r28
    2490:	8b 58       	subi	r24, 0x8B	; 139
    2492:	9f 4f       	sbci	r25, 0xFF	; 255
    2494:	9e 01       	movw	r18, r28
    2496:	2f 58       	subi	r18, 0x8F	; 143
    2498:	3f 4f       	sbci	r19, 0xFF	; 255
    249a:	f9 01       	movw	r30, r18
    249c:	20 81       	ld	r18, Z
    249e:	31 81       	ldd	r19, Z+1	; 0x01
    24a0:	fc 01       	movw	r30, r24
    24a2:	31 83       	std	Z+1, r19	; 0x01
    24a4:	20 83       	st	Z, r18
    24a6:	ce 01       	movw	r24, r28
    24a8:	8b 58       	subi	r24, 0x8B	; 139
    24aa:	9f 4f       	sbci	r25, 0xFF	; 255
    24ac:	fc 01       	movw	r30, r24
    24ae:	80 81       	ld	r24, Z
    24b0:	91 81       	ldd	r25, Z+1	; 0x01
    24b2:	8c 01       	movw	r16, r24
    24b4:	c8 01       	movw	r24, r16
    24b6:	01 97       	sbiw	r24, 0x01	; 1
    24b8:	f1 f7       	brne	.-4      	; 0x24b6 <STRETCHER_POS_CHANGE_HANDLE+0xbb0>
    24ba:	8c 01       	movw	r16, r24
    24bc:	ce 01       	movw	r24, r28
    24be:	8b 58       	subi	r24, 0x8B	; 139
    24c0:	9f 4f       	sbci	r25, 0xFF	; 255
    24c2:	fc 01       	movw	r30, r24
    24c4:	11 83       	std	Z+1, r17	; 0x01
    24c6:	00 83       	st	Z, r16
				_delay_ms(MOTOR_DELAY_MS);
				PORTD = 0b10010000;
				_delay_ms(MOTOR_DELAY_MS);
			}
			}else{
			for (uint16_t x = 0; x < degreesToMove;x++){
    24c8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ca:	9c 81       	ldd	r25, Y+4	; 0x04
    24cc:	01 96       	adiw	r24, 0x01	; 1
    24ce:	9c 83       	std	Y+4, r25	; 0x04
    24d0:	8b 83       	std	Y+3, r24	; 0x03
    24d2:	2b 81       	ldd	r18, Y+3	; 0x03
    24d4:	3c 81       	ldd	r19, Y+4	; 0x04
    24d6:	8d 81       	ldd	r24, Y+5	; 0x05
    24d8:	9e 81       	ldd	r25, Y+6	; 0x06
    24da:	28 17       	cp	r18, r24
    24dc:	39 07       	cpc	r19, r25
    24de:	08 f4       	brcc	.+2      	; 0x24e2 <STRETCHER_POS_CHANGE_HANDLE+0xbdc>
    24e0:	99 cc       	rjmp	.-1742   	; 0x1e14 <STRETCHER_POS_CHANGE_HANDLE+0x50e>
				PORTD = 0b10010000;
				_delay_ms(MOTOR_DELAY_MS);
			}
		}
		
		PORTD = 0b00000000;
    24e2:	8b e2       	ldi	r24, 0x2B	; 43
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	fc 01       	movw	r30, r24
    24e8:	10 82       	st	Z, r1
		previousStretcherPosition = positionToMove;
    24ea:	ce 01       	movw	r24, r28
    24ec:	89 58       	subi	r24, 0x89	; 137
    24ee:	9f 4f       	sbci	r25, 0xFF	; 255
    24f0:	fc 01       	movw	r30, r24
    24f2:	80 81       	ld	r24, Z
    24f4:	80 93 29 01 	sts	0x0129, r24
	}
	bit_clear(PORTB, BIT(1));
    24f8:	85 e2       	ldi	r24, 0x25	; 37
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	25 e2       	ldi	r18, 0x25	; 37
    24fe:	30 e0       	ldi	r19, 0x00	; 0
    2500:	f9 01       	movw	r30, r18
    2502:	20 81       	ld	r18, Z
    2504:	2d 7f       	andi	r18, 0xFD	; 253
    2506:	fc 01       	movw	r30, r24
    2508:	20 83       	st	Z, r18
	bit_clear(PORTB, BIT(2));
    250a:	85 e2       	ldi	r24, 0x25	; 37
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	25 e2       	ldi	r18, 0x25	; 37
    2510:	30 e0       	ldi	r19, 0x00	; 0
    2512:	f9 01       	movw	r30, r18
    2514:	20 81       	ld	r18, Z
    2516:	2b 7f       	andi	r18, 0xFB	; 251
    2518:	fc 01       	movw	r30, r24
    251a:	20 83       	st	Z, r18
    251c:	c9 58       	subi	r28, 0x89	; 137
    251e:	df 4f       	sbci	r29, 0xFF	; 255
    2520:	0f b6       	in	r0, 0x3f	; 63
    2522:	f8 94       	cli
    2524:	de bf       	out	0x3e, r29	; 62
    2526:	0f be       	out	0x3f, r0	; 63
    2528:	cd bf       	out	0x3d, r28	; 61
    252a:	cf 91       	pop	r28
    252c:	df 91       	pop	r29
    252e:	1f 91       	pop	r17
    2530:	0f 91       	pop	r16
    2532:	08 95       	ret

00002534 <crc_update>:
#include <stdbool.h>



crc_t crc_update(crc_t crc, const void *data, size_t data_len)
{
    2534:	df 93       	push	r29
    2536:	cf 93       	push	r28
    2538:	cd b7       	in	r28, 0x3d	; 61
    253a:	de b7       	in	r29, 0x3e	; 62
    253c:	2b 97       	sbiw	r28, 0x0b	; 11
    253e:	0f b6       	in	r0, 0x3f	; 63
    2540:	f8 94       	cli
    2542:	de bf       	out	0x3e, r29	; 62
    2544:	0f be       	out	0x3f, r0	; 63
    2546:	cd bf       	out	0x3d, r28	; 61
    2548:	8f 83       	std	Y+7, r24	; 0x07
    254a:	79 87       	std	Y+9, r23	; 0x09
    254c:	68 87       	std	Y+8, r22	; 0x08
    254e:	5b 87       	std	Y+11, r21	; 0x0b
    2550:	4a 87       	std	Y+10, r20	; 0x0a
    const unsigned char *d = (const unsigned char *)data;
    2552:	88 85       	ldd	r24, Y+8	; 0x08
    2554:	99 85       	ldd	r25, Y+9	; 0x09
    2556:	9a 83       	std	Y+2, r25	; 0x02
    2558:	89 83       	std	Y+1, r24	; 0x01
    unsigned int i;
    bool bit;
    unsigned char c;

    while (data_len--) {
    255a:	3c c0       	rjmp	.+120    	; 0x25d4 <crc_update+0xa0>
        c = *d++;
    255c:	89 81       	ldd	r24, Y+1	; 0x01
    255e:	9a 81       	ldd	r25, Y+2	; 0x02
    2560:	fc 01       	movw	r30, r24
    2562:	80 81       	ld	r24, Z
    2564:	8e 83       	std	Y+6, r24	; 0x06
    2566:	89 81       	ldd	r24, Y+1	; 0x01
    2568:	9a 81       	ldd	r25, Y+2	; 0x02
    256a:	01 96       	adiw	r24, 0x01	; 1
    256c:	9a 83       	std	Y+2, r25	; 0x02
    256e:	89 83       	std	Y+1, r24	; 0x01
        for (i = 0x80; i > 0; i >>= 1) {
    2570:	80 e8       	ldi	r24, 0x80	; 128
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	9c 83       	std	Y+4, r25	; 0x04
    2576:	8b 83       	std	Y+3, r24	; 0x03
    2578:	29 c0       	rjmp	.+82     	; 0x25cc <crc_update+0x98>
            bit = crc & 0x80;
    257a:	8f 81       	ldd	r24, Y+7	; 0x07
    257c:	88 2f       	mov	r24, r24
    257e:	90 e0       	ldi	r25, 0x00	; 0
    2580:	80 78       	andi	r24, 0x80	; 128
    2582:	90 70       	andi	r25, 0x00	; 0
    2584:	21 e0       	ldi	r18, 0x01	; 1
    2586:	00 97       	sbiw	r24, 0x00	; 0
    2588:	09 f4       	brne	.+2      	; 0x258c <crc_update+0x58>
    258a:	20 e0       	ldi	r18, 0x00	; 0
    258c:	2d 83       	std	Y+5, r18	; 0x05
            if (c & i) {
    258e:	8e 81       	ldd	r24, Y+6	; 0x06
    2590:	28 2f       	mov	r18, r24
    2592:	30 e0       	ldi	r19, 0x00	; 0
    2594:	8b 81       	ldd	r24, Y+3	; 0x03
    2596:	9c 81       	ldd	r25, Y+4	; 0x04
    2598:	82 23       	and	r24, r18
    259a:	93 23       	and	r25, r19
    259c:	00 97       	sbiw	r24, 0x00	; 0
    259e:	31 f0       	breq	.+12     	; 0x25ac <crc_update+0x78>
                bit = !bit;
    25a0:	9d 81       	ldd	r25, Y+5	; 0x05
    25a2:	81 e0       	ldi	r24, 0x01	; 1
    25a4:	89 27       	eor	r24, r25
    25a6:	88 2f       	mov	r24, r24
    25a8:	90 e0       	ldi	r25, 0x00	; 0
    25aa:	8d 83       	std	Y+5, r24	; 0x05
            }
            crc <<= 1;
    25ac:	8f 81       	ldd	r24, Y+7	; 0x07
    25ae:	88 0f       	add	r24, r24
    25b0:	8f 83       	std	Y+7, r24	; 0x07
            if (bit) {
    25b2:	8d 81       	ldd	r24, Y+5	; 0x05
    25b4:	88 23       	and	r24, r24
    25b6:	21 f0       	breq	.+8      	; 0x25c0 <crc_update+0x8c>
                crc ^= 0x07;
    25b8:	9f 81       	ldd	r25, Y+7	; 0x07
    25ba:	87 e0       	ldi	r24, 0x07	; 7
    25bc:	89 27       	eor	r24, r25
    25be:	8f 83       	std	Y+7, r24	; 0x07
    bool bit;
    unsigned char c;

    while (data_len--) {
        c = *d++;
        for (i = 0x80; i > 0; i >>= 1) {
    25c0:	8b 81       	ldd	r24, Y+3	; 0x03
    25c2:	9c 81       	ldd	r25, Y+4	; 0x04
    25c4:	96 95       	lsr	r25
    25c6:	87 95       	ror	r24
    25c8:	9c 83       	std	Y+4, r25	; 0x04
    25ca:	8b 83       	std	Y+3, r24	; 0x03
    25cc:	8b 81       	ldd	r24, Y+3	; 0x03
    25ce:	9c 81       	ldd	r25, Y+4	; 0x04
    25d0:	00 97       	sbiw	r24, 0x00	; 0
    25d2:	99 f6       	brne	.-90     	; 0x257a <crc_update+0x46>
    const unsigned char *d = (const unsigned char *)data;
    unsigned int i;
    bool bit;
    unsigned char c;

    while (data_len--) {
    25d4:	21 e0       	ldi	r18, 0x01	; 1
    25d6:	8a 85       	ldd	r24, Y+10	; 0x0a
    25d8:	9b 85       	ldd	r25, Y+11	; 0x0b
    25da:	00 97       	sbiw	r24, 0x00	; 0
    25dc:	09 f4       	brne	.+2      	; 0x25e0 <crc_update+0xac>
    25de:	20 e0       	ldi	r18, 0x00	; 0
    25e0:	8a 85       	ldd	r24, Y+10	; 0x0a
    25e2:	9b 85       	ldd	r25, Y+11	; 0x0b
    25e4:	01 97       	sbiw	r24, 0x01	; 1
    25e6:	9b 87       	std	Y+11, r25	; 0x0b
    25e8:	8a 87       	std	Y+10, r24	; 0x0a
    25ea:	22 23       	and	r18, r18
    25ec:	09 f0       	breq	.+2      	; 0x25f0 <crc_update+0xbc>
    25ee:	b6 cf       	rjmp	.-148    	; 0x255c <crc_update+0x28>
                crc ^= 0x07;
            }
        }
        crc &= 0xff;
    }
    return crc & 0xff;
    25f0:	8f 81       	ldd	r24, Y+7	; 0x07
}
    25f2:	2b 96       	adiw	r28, 0x0b	; 11
    25f4:	0f b6       	in	r0, 0x3f	; 63
    25f6:	f8 94       	cli
    25f8:	de bf       	out	0x3e, r29	; 62
    25fa:	0f be       	out	0x3f, r0	; 63
    25fc:	cd bf       	out	0x3d, r28	; 61
    25fe:	cf 91       	pop	r28
    2600:	df 91       	pop	r29
    2602:	08 95       	ret

00002604 <main>:
#include "nrf24.h"

void initIO();

int main(void)
{
    2604:	df 93       	push	r29
    2606:	cf 93       	push	r28
    2608:	0f 92       	push	r0
    260a:	cd b7       	in	r28, 0x3d	; 61
    260c:	de b7       	in	r29, 0x3e	; 62
    initIO();
    260e:	0e 94 2d 13 	call	0x265a	; 0x265a <initIO>
	nrf24_initRF_SAFE(MAIN_BOARD, RECEIVE);	// CONNECTION TO MAIN BOARD : GENERAL RF CHANNEL 112
    2612:	80 e0       	ldi	r24, 0x00	; 0
    2614:	60 e0       	ldi	r22, 0x00	; 0
    2616:	0e 94 91 18 	call	0x3122	; 0x3122 <nrf24_initRF_SAFE>
    261a:	01 c0       	rjmp	.+2      	; 0x261e <main+0x1a>
			CommandStatus status = DecomposeMessageFromBuffer();
			if (status==SUCCESFUL_DECOMPOSITION) { HandleAvailableCommand(); }
		}
		
		if (nrf24_checkAvailability()==false) { nrf24_initRF_SAFE(MAIN_BOARD, RECEIVE); }
	}
    261c:	00 00       	nop
    initIO();
	nrf24_initRF_SAFE(MAIN_BOARD, RECEIVE);	// CONNECTION TO MAIN BOARD : GENERAL RF CHANNEL 112
	
	while (1)
	{
		if(nrf24_dataReady())
    261e:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <nrf24_dataReady>
    2622:	88 23       	and	r24, r24
    2624:	71 f0       	breq	.+28     	; 0x2642 <main+0x3e>
		{
			
			nrf24_getData(command_buffer);
    2626:	80 91 55 01 	lds	r24, 0x0155
    262a:	90 91 56 01 	lds	r25, 0x0156
    262e:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <nrf24_getData>
			CommandStatus status = DecomposeMessageFromBuffer();
    2632:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <DecomposeMessageFromBuffer>
    2636:	89 83       	std	Y+1, r24	; 0x01
			if (status==SUCCESFUL_DECOMPOSITION) { HandleAvailableCommand(); }
    2638:	89 81       	ldd	r24, Y+1	; 0x01
    263a:	88 23       	and	r24, r24
    263c:	11 f4       	brne	.+4      	; 0x2642 <main+0x3e>
    263e:	0e 94 1a 02 	call	0x434	; 0x434 <HandleAvailableCommand>
		}
		
		if (nrf24_checkAvailability()==false) { nrf24_initRF_SAFE(MAIN_BOARD, RECEIVE); }
    2642:	0e 94 36 14 	call	0x286c	; 0x286c <nrf24_checkAvailability>
    2646:	98 2f       	mov	r25, r24
    2648:	81 e0       	ldi	r24, 0x01	; 1
    264a:	89 27       	eor	r24, r25
    264c:	88 23       	and	r24, r24
    264e:	31 f3       	breq	.-52     	; 0x261c <main+0x18>
    2650:	80 e0       	ldi	r24, 0x00	; 0
    2652:	60 e0       	ldi	r22, 0x00	; 0
    2654:	0e 94 91 18 	call	0x3122	; 0x3122 <nrf24_initRF_SAFE>
	}
    2658:	e2 cf       	rjmp	.-60     	; 0x261e <main+0x1a>

0000265a <initIO>:
}


void initIO(){
    265a:	df 93       	push	r29
    265c:	cf 93       	push	r28
    265e:	cd b7       	in	r28, 0x3d	; 61
    2660:	de b7       	in	r29, 0x3e	; 62
			CSN	 : PC1						|	OUTPUT
			MISO : PD0 (MSPIM MISO ATMEGA)	|	INPUT
			MOSI : PD1 (MSPIM MOSI ATMEGA)	|	OUTPUT
			SCK	 : PD4 (MSPIM XCK)			|	OUTPUT
	*/ 
	DDRD = 0b11111111;
    2662:	8a e2       	ldi	r24, 0x2A	; 42
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	2f ef       	ldi	r18, 0xFF	; 255
    2668:	fc 01       	movw	r30, r24
    266a:	20 83       	st	Z, r18
	DDRB = 0b00101111;
    266c:	84 e2       	ldi	r24, 0x24	; 36
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	2f e2       	ldi	r18, 0x2F	; 47
    2672:	fc 01       	movw	r30, r24
    2674:	20 83       	st	Z, r18
	DDRC = 0b11011111;
    2676:	87 e2       	ldi	r24, 0x27	; 39
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	2f ed       	ldi	r18, 0xDF	; 223
    267c:	fc 01       	movw	r30, r24
    267e:	20 83       	st	Z, r18
}
    2680:	cf 91       	pop	r28
    2682:	df 91       	pop	r29
    2684:	08 95       	ret

00002686 <nrf24_init>:
uint8_t GENERAL_RF_CHANNEL = 112;



void nrf24_init() 
{
    2686:	df 93       	push	r29
    2688:	cf 93       	push	r28
    268a:	cd b7       	in	r28, 0x3d	; 61
    268c:	de b7       	in	r29, 0x3e	; 62
    nrf24_setupPins();
    268e:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <nrf24_setupPins>
    nrf24_ce_digitalWrite(LOW);
    2692:	80 e0       	ldi	r24, 0x00	; 0
    2694:	0e 94 05 18 	call	0x300a	; 0x300a <nrf24_ce_digitalWrite>
    nrf24_csn_digitalWrite(HIGH);    
    2698:	81 e0       	ldi	r24, 0x01	; 1
    269a:	0e 94 25 18 	call	0x304a	; 0x304a <nrf24_csn_digitalWrite>
}
    269e:	cf 91       	pop	r28
    26a0:	df 91       	pop	r29
    26a2:	08 95       	ret

000026a4 <nrf24_config>:

void nrf24_config(uint8_t channel, uint8_t pay_length)
{
    26a4:	df 93       	push	r29
    26a6:	cf 93       	push	r28
    26a8:	00 d0       	rcall	.+0      	; 0x26aa <nrf24_config+0x6>
    26aa:	cd b7       	in	r28, 0x3d	; 61
    26ac:	de b7       	in	r29, 0x3e	; 62
    26ae:	89 83       	std	Y+1, r24	; 0x01
    26b0:	6a 83       	std	Y+2, r22	; 0x02
	/* Use static payload length ... */
	payload_len = pay_length;
    26b2:	8a 81       	ldd	r24, Y+2	; 0x02
    26b4:	80 93 59 01 	sts	0x0159, r24
	selectedChannel = channel;
    26b8:	89 81       	ldd	r24, Y+1	; 0x01
    26ba:	80 93 5a 01 	sts	0x015A, r24
	// Set RF channel
	nrf24_configRegister(RF_CH,channel);
    26be:	85 e0       	ldi	r24, 0x05	; 5
    26c0:	69 81       	ldd	r22, Y+1	; 0x01
    26c2:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <nrf24_configRegister>
	// Set length of incoming payload
	nrf24_configRegister(RX_PW_P0, 0x00); // Auto-ACK pipe ...
    26c6:	81 e1       	ldi	r24, 0x11	; 17
    26c8:	60 e0       	ldi	r22, 0x00	; 0
    26ca:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <nrf24_configRegister>
	nrf24_configRegister(RX_PW_P1, payload_len); // Data payload pipe
    26ce:	90 91 59 01 	lds	r25, 0x0159
    26d2:	82 e1       	ldi	r24, 0x12	; 18
    26d4:	69 2f       	mov	r22, r25
    26d6:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <nrf24_configRegister>
	nrf24_configRegister(RX_PW_P2, 0x00); // Pipe not used
    26da:	83 e1       	ldi	r24, 0x13	; 19
    26dc:	60 e0       	ldi	r22, 0x00	; 0
    26de:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <nrf24_configRegister>
	nrf24_configRegister(RX_PW_P3, 0x00); // Pipe not used
    26e2:	84 e1       	ldi	r24, 0x14	; 20
    26e4:	60 e0       	ldi	r22, 0x00	; 0
    26e6:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <nrf24_configRegister>
	nrf24_configRegister(RX_PW_P4, 0x00); // Pipe not used
    26ea:	85 e1       	ldi	r24, 0x15	; 21
    26ec:	60 e0       	ldi	r22, 0x00	; 0
    26ee:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <nrf24_configRegister>
	nrf24_configRegister(RX_PW_P5, 0x00); // Pipe not used
    26f2:	86 e1       	ldi	r24, 0x16	; 22
    26f4:	60 e0       	ldi	r22, 0x00	; 0
    26f6:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <nrf24_configRegister>
	// 1 Mbps, TX gain: 0dbm
	nrf24_configRegister(RF_SETUP, (0<<RF_DR)|((0x03)<<RF_PWR));
    26fa:	86 e0       	ldi	r24, 0x06	; 6
    26fc:	66 e0       	ldi	r22, 0x06	; 6
    26fe:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <nrf24_configRegister>
	// CRC enable, 1 byte CRC length
	nrf24_configRegister(CONFIG,nrf24_CONFIG);
    2702:	80 e0       	ldi	r24, 0x00	; 0
    2704:	68 e0       	ldi	r22, 0x08	; 8
    2706:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <nrf24_configRegister>
	// Auto Acknowledgment
	nrf24_configRegister(EN_AA,(1<<ENAA_P0)|(1<<ENAA_P1)|(0<<ENAA_P2)|(0<<ENAA_P3)|(0<<ENAA_P4)|(0<<ENAA_P5));
    270a:	81 e0       	ldi	r24, 0x01	; 1
    270c:	63 e0       	ldi	r22, 0x03	; 3
    270e:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <nrf24_configRegister>
	// Enable RX addresses
	nrf24_configRegister(EN_RXADDR,(1<<ERX_P0)|(1<<ERX_P1)|(0<<ERX_P2)|(0<<ERX_P3)|(0<<ERX_P4)|(0<<ERX_P5));
    2712:	82 e0       	ldi	r24, 0x02	; 2
    2714:	63 e0       	ldi	r22, 0x03	; 3
    2716:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <nrf24_configRegister>
	// Auto retransmit delay: 1000 us and Up to 15 retransmit trials
	nrf24_configRegister(SETUP_RETR,(0x04<<ARD)|(0x0F<<ARC));
    271a:	84 e0       	ldi	r24, 0x04	; 4
    271c:	6f e4       	ldi	r22, 0x4F	; 79
    271e:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <nrf24_configRegister>
	// Dynamic length configurations: No dynamic length
	nrf24_configRegister(DYNPD,(0<<DPL_P0)|(0<<DPL_P1)|(0<<DPL_P2)|(0<<DPL_P3)|(0<<DPL_P4)|(0<<DPL_P5));
    2722:	8c e1       	ldi	r24, 0x1C	; 28
    2724:	60 e0       	ldi	r22, 0x00	; 0
    2726:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <nrf24_configRegister>

}
    272a:	0f 90       	pop	r0
    272c:	0f 90       	pop	r0
    272e:	cf 91       	pop	r28
    2730:	df 91       	pop	r29
    2732:	08 95       	ret

00002734 <nrf24_checkConfig>:

bool nrf24_checkConfig(){
    2734:	df 93       	push	r29
    2736:	cf 93       	push	r28
    2738:	cd b7       	in	r28, 0x3d	; 61
    273a:	de b7       	in	r29, 0x3e	; 62
	// Check all registers
	if (nrf24_checkRegister(RF_CH, selectedChannel,1)==false) return false;
    273c:	90 91 5a 01 	lds	r25, 0x015A
    2740:	85 e0       	ldi	r24, 0x05	; 5
    2742:	69 2f       	mov	r22, r25
    2744:	41 e0       	ldi	r20, 0x01	; 1
    2746:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <nrf24_checkRegister>
    274a:	98 2f       	mov	r25, r24
    274c:	81 e0       	ldi	r24, 0x01	; 1
    274e:	89 27       	eor	r24, r25
    2750:	88 23       	and	r24, r24
    2752:	11 f0       	breq	.+4      	; 0x2758 <nrf24_checkConfig+0x24>
    2754:	80 e0       	ldi	r24, 0x00	; 0
    2756:	87 c0       	rjmp	.+270    	; 0x2866 <nrf24_checkConfig+0x132>
	if (nrf24_checkRegister(RX_PW_P0, 0x00,1)==false) return false;
    2758:	81 e1       	ldi	r24, 0x11	; 17
    275a:	60 e0       	ldi	r22, 0x00	; 0
    275c:	41 e0       	ldi	r20, 0x01	; 1
    275e:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <nrf24_checkRegister>
    2762:	98 2f       	mov	r25, r24
    2764:	81 e0       	ldi	r24, 0x01	; 1
    2766:	89 27       	eor	r24, r25
    2768:	88 23       	and	r24, r24
    276a:	11 f0       	breq	.+4      	; 0x2770 <nrf24_checkConfig+0x3c>
    276c:	80 e0       	ldi	r24, 0x00	; 0
    276e:	7b c0       	rjmp	.+246    	; 0x2866 <nrf24_checkConfig+0x132>
	if (nrf24_checkRegister(RX_PW_P1, payload_len,1)==false) return false;
    2770:	90 91 59 01 	lds	r25, 0x0159
    2774:	82 e1       	ldi	r24, 0x12	; 18
    2776:	69 2f       	mov	r22, r25
    2778:	41 e0       	ldi	r20, 0x01	; 1
    277a:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <nrf24_checkRegister>
    277e:	98 2f       	mov	r25, r24
    2780:	81 e0       	ldi	r24, 0x01	; 1
    2782:	89 27       	eor	r24, r25
    2784:	88 23       	and	r24, r24
    2786:	11 f0       	breq	.+4      	; 0x278c <nrf24_checkConfig+0x58>
    2788:	80 e0       	ldi	r24, 0x00	; 0
    278a:	6d c0       	rjmp	.+218    	; 0x2866 <nrf24_checkConfig+0x132>
	if (nrf24_checkRegister(RX_PW_P2, 0x00,1)==false) return false;
    278c:	83 e1       	ldi	r24, 0x13	; 19
    278e:	60 e0       	ldi	r22, 0x00	; 0
    2790:	41 e0       	ldi	r20, 0x01	; 1
    2792:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <nrf24_checkRegister>
    2796:	98 2f       	mov	r25, r24
    2798:	81 e0       	ldi	r24, 0x01	; 1
    279a:	89 27       	eor	r24, r25
    279c:	88 23       	and	r24, r24
    279e:	11 f0       	breq	.+4      	; 0x27a4 <nrf24_checkConfig+0x70>
    27a0:	80 e0       	ldi	r24, 0x00	; 0
    27a2:	61 c0       	rjmp	.+194    	; 0x2866 <nrf24_checkConfig+0x132>
	if (nrf24_checkRegister(RX_PW_P3, 0x00,1)==false) return false;
    27a4:	84 e1       	ldi	r24, 0x14	; 20
    27a6:	60 e0       	ldi	r22, 0x00	; 0
    27a8:	41 e0       	ldi	r20, 0x01	; 1
    27aa:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <nrf24_checkRegister>
    27ae:	98 2f       	mov	r25, r24
    27b0:	81 e0       	ldi	r24, 0x01	; 1
    27b2:	89 27       	eor	r24, r25
    27b4:	88 23       	and	r24, r24
    27b6:	11 f0       	breq	.+4      	; 0x27bc <nrf24_checkConfig+0x88>
    27b8:	80 e0       	ldi	r24, 0x00	; 0
    27ba:	55 c0       	rjmp	.+170    	; 0x2866 <nrf24_checkConfig+0x132>
	if (nrf24_checkRegister(RX_PW_P4, 0x00,1)==false) return false;
    27bc:	85 e1       	ldi	r24, 0x15	; 21
    27be:	60 e0       	ldi	r22, 0x00	; 0
    27c0:	41 e0       	ldi	r20, 0x01	; 1
    27c2:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <nrf24_checkRegister>
    27c6:	98 2f       	mov	r25, r24
    27c8:	81 e0       	ldi	r24, 0x01	; 1
    27ca:	89 27       	eor	r24, r25
    27cc:	88 23       	and	r24, r24
    27ce:	11 f0       	breq	.+4      	; 0x27d4 <nrf24_checkConfig+0xa0>
    27d0:	80 e0       	ldi	r24, 0x00	; 0
    27d2:	49 c0       	rjmp	.+146    	; 0x2866 <nrf24_checkConfig+0x132>
	if (nrf24_checkRegister(RX_PW_P5, 0x00,1)==false) return false;
    27d4:	86 e1       	ldi	r24, 0x16	; 22
    27d6:	60 e0       	ldi	r22, 0x00	; 0
    27d8:	41 e0       	ldi	r20, 0x01	; 1
    27da:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <nrf24_checkRegister>
    27de:	98 2f       	mov	r25, r24
    27e0:	81 e0       	ldi	r24, 0x01	; 1
    27e2:	89 27       	eor	r24, r25
    27e4:	88 23       	and	r24, r24
    27e6:	11 f0       	breq	.+4      	; 0x27ec <nrf24_checkConfig+0xb8>
    27e8:	80 e0       	ldi	r24, 0x00	; 0
    27ea:	3d c0       	rjmp	.+122    	; 0x2866 <nrf24_checkConfig+0x132>
	if (nrf24_checkRegister(RF_SETUP, (0<<RF_DR)|((0x03)<<RF_PWR),1)==false) return false;
    27ec:	86 e0       	ldi	r24, 0x06	; 6
    27ee:	66 e0       	ldi	r22, 0x06	; 6
    27f0:	41 e0       	ldi	r20, 0x01	; 1
    27f2:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <nrf24_checkRegister>
    27f6:	98 2f       	mov	r25, r24
    27f8:	81 e0       	ldi	r24, 0x01	; 1
    27fa:	89 27       	eor	r24, r25
    27fc:	88 23       	and	r24, r24
    27fe:	11 f0       	breq	.+4      	; 0x2804 <nrf24_checkConfig+0xd0>
    2800:	80 e0       	ldi	r24, 0x00	; 0
    2802:	31 c0       	rjmp	.+98     	; 0x2866 <nrf24_checkConfig+0x132>
	if (nrf24_checkRegister(CONFIG,nrf24_CONFIG,1)==false) return false;
    2804:	80 e0       	ldi	r24, 0x00	; 0
    2806:	68 e0       	ldi	r22, 0x08	; 8
    2808:	41 e0       	ldi	r20, 0x01	; 1
    280a:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <nrf24_checkRegister>
    280e:	98 2f       	mov	r25, r24
    2810:	81 e0       	ldi	r24, 0x01	; 1
    2812:	89 27       	eor	r24, r25
    2814:	88 23       	and	r24, r24
    2816:	11 f0       	breq	.+4      	; 0x281c <nrf24_checkConfig+0xe8>
    2818:	80 e0       	ldi	r24, 0x00	; 0
    281a:	25 c0       	rjmp	.+74     	; 0x2866 <nrf24_checkConfig+0x132>
	if (nrf24_checkRegister(EN_AA,(1<<ENAA_P0)|(1<<ENAA_P1)|(0<<ENAA_P2)|(0<<ENAA_P3)|(0<<ENAA_P4)|(0<<ENAA_P5),1)==false) return false;
    281c:	81 e0       	ldi	r24, 0x01	; 1
    281e:	63 e0       	ldi	r22, 0x03	; 3
    2820:	41 e0       	ldi	r20, 0x01	; 1
    2822:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <nrf24_checkRegister>
    2826:	98 2f       	mov	r25, r24
    2828:	81 e0       	ldi	r24, 0x01	; 1
    282a:	89 27       	eor	r24, r25
    282c:	88 23       	and	r24, r24
    282e:	11 f0       	breq	.+4      	; 0x2834 <nrf24_checkConfig+0x100>
    2830:	80 e0       	ldi	r24, 0x00	; 0
    2832:	19 c0       	rjmp	.+50     	; 0x2866 <nrf24_checkConfig+0x132>
	if (nrf24_checkRegister(SETUP_RETR,(0x04<<ARD)|(0x0F<<ARC),1)==false) return false;
    2834:	84 e0       	ldi	r24, 0x04	; 4
    2836:	6f e4       	ldi	r22, 0x4F	; 79
    2838:	41 e0       	ldi	r20, 0x01	; 1
    283a:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <nrf24_checkRegister>
    283e:	98 2f       	mov	r25, r24
    2840:	81 e0       	ldi	r24, 0x01	; 1
    2842:	89 27       	eor	r24, r25
    2844:	88 23       	and	r24, r24
    2846:	11 f0       	breq	.+4      	; 0x284c <nrf24_checkConfig+0x118>
    2848:	80 e0       	ldi	r24, 0x00	; 0
    284a:	0d c0       	rjmp	.+26     	; 0x2866 <nrf24_checkConfig+0x132>
	if (nrf24_checkRegister(DYNPD,(0<<DPL_P0)|(0<<DPL_P1)|(0<<DPL_P2)|(0<<DPL_P3)|(0<<DPL_P4)|(0<<DPL_P5),1)==false) return false;
    284c:	8c e1       	ldi	r24, 0x1C	; 28
    284e:	60 e0       	ldi	r22, 0x00	; 0
    2850:	41 e0       	ldi	r20, 0x01	; 1
    2852:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <nrf24_checkRegister>
    2856:	98 2f       	mov	r25, r24
    2858:	81 e0       	ldi	r24, 0x01	; 1
    285a:	89 27       	eor	r24, r25
    285c:	88 23       	and	r24, r24
    285e:	11 f0       	breq	.+4      	; 0x2864 <nrf24_checkConfig+0x130>
    2860:	80 e0       	ldi	r24, 0x00	; 0
    2862:	01 c0       	rjmp	.+2      	; 0x2866 <nrf24_checkConfig+0x132>
	
	return true;
    2864:	81 e0       	ldi	r24, 0x01	; 1
}
    2866:	cf 91       	pop	r28
    2868:	df 91       	pop	r29
    286a:	08 95       	ret

0000286c <nrf24_checkAvailability>:

bool nrf24_checkAvailability(){
    286c:	df 93       	push	r29
    286e:	cf 93       	push	r28
    2870:	cd b7       	in	r28, 0x3d	; 61
    2872:	de b7       	in	r29, 0x3e	; 62
	if (nrf24_checkRegister(RF_CH, selectedChannel,1)==true) { return true; } else { return false;}
    2874:	90 91 5a 01 	lds	r25, 0x015A
    2878:	85 e0       	ldi	r24, 0x05	; 5
    287a:	69 2f       	mov	r22, r25
    287c:	41 e0       	ldi	r20, 0x01	; 1
    287e:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <nrf24_checkRegister>
    2882:	88 23       	and	r24, r24
    2884:	11 f0       	breq	.+4      	; 0x288a <nrf24_checkAvailability+0x1e>
    2886:	81 e0       	ldi	r24, 0x01	; 1
    2888:	01 c0       	rjmp	.+2      	; 0x288c <nrf24_checkAvailability+0x20>
    288a:	80 e0       	ldi	r24, 0x00	; 0
}
    288c:	cf 91       	pop	r28
    288e:	df 91       	pop	r29
    2890:	08 95       	ret

00002892 <faultyRF_Alarm>:




void faultyRF_Alarm(){
    2892:	0f 93       	push	r16
    2894:	1f 93       	push	r17
    2896:	df 93       	push	r29
    2898:	cf 93       	push	r28
    289a:	cd b7       	in	r28, 0x3d	; 61
    289c:	de b7       	in	r29, 0x3e	; 62
    289e:	6d 97       	sbiw	r28, 0x1d	; 29
    28a0:	0f b6       	in	r0, 0x3f	; 63
    28a2:	f8 94       	cli
    28a4:	de bf       	out	0x3e, r29	; 62
    28a6:	0f be       	out	0x3f, r0	; 63
    28a8:	cd bf       	out	0x3d, r28	; 61
	CLEAR_FAULTY_RF_LED;
    28aa:	85 e2       	ldi	r24, 0x25	; 37
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	25 e2       	ldi	r18, 0x25	; 37
    28b0:	30 e0       	ldi	r19, 0x00	; 0
    28b2:	f9 01       	movw	r30, r18
    28b4:	20 81       	ld	r18, Z
    28b6:	2d 7f       	andi	r18, 0xFD	; 253
    28b8:	fc 01       	movw	r30, r24
    28ba:	20 83       	st	Z, r18
	for (uint8_t x = 0; x < 6; x++)
    28bc:	19 82       	std	Y+1, r1	; 0x01
    28be:	8d c0       	rjmp	.+282    	; 0x29da <faultyRF_Alarm+0x148>
	{
		FLIP_FAULTY_RF_LED;
    28c0:	85 e2       	ldi	r24, 0x25	; 37
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	25 e2       	ldi	r18, 0x25	; 37
    28c6:	30 e0       	ldi	r19, 0x00	; 0
    28c8:	f9 01       	movw	r30, r18
    28ca:	30 81       	ld	r19, Z
    28cc:	22 e0       	ldi	r18, 0x02	; 2
    28ce:	23 27       	eor	r18, r19
    28d0:	fc 01       	movw	r30, r24
    28d2:	20 83       	st	Z, r18
    28d4:	80 e0       	ldi	r24, 0x00	; 0
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	aa ef       	ldi	r26, 0xFA	; 250
    28da:	b2 e4       	ldi	r27, 0x42	; 66
    28dc:	8a 83       	std	Y+2, r24	; 0x02
    28de:	9b 83       	std	Y+3, r25	; 0x03
    28e0:	ac 83       	std	Y+4, r26	; 0x04
    28e2:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    28e4:	6a 81       	ldd	r22, Y+2	; 0x02
    28e6:	7b 81       	ldd	r23, Y+3	; 0x03
    28e8:	8c 81       	ldd	r24, Y+4	; 0x04
    28ea:	9d 81       	ldd	r25, Y+5	; 0x05
    28ec:	20 e0       	ldi	r18, 0x00	; 0
    28ee:	30 e0       	ldi	r19, 0x00	; 0
    28f0:	4a e7       	ldi	r20, 0x7A	; 122
    28f2:	55 e4       	ldi	r21, 0x45	; 69
    28f4:	0e 94 65 19 	call	0x32ca	; 0x32ca <__mulsf3>
    28f8:	dc 01       	movw	r26, r24
    28fa:	cb 01       	movw	r24, r22
    28fc:	8e 83       	std	Y+6, r24	; 0x06
    28fe:	9f 83       	std	Y+7, r25	; 0x07
    2900:	a8 87       	std	Y+8, r26	; 0x08
    2902:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
    2904:	11 e0       	ldi	r17, 0x01	; 1
    2906:	6e 81       	ldd	r22, Y+6	; 0x06
    2908:	7f 81       	ldd	r23, Y+7	; 0x07
    290a:	88 85       	ldd	r24, Y+8	; 0x08
    290c:	99 85       	ldd	r25, Y+9	; 0x09
    290e:	20 e0       	ldi	r18, 0x00	; 0
    2910:	30 e0       	ldi	r19, 0x00	; 0
    2912:	40 e8       	ldi	r20, 0x80	; 128
    2914:	5f e3       	ldi	r21, 0x3F	; 63
    2916:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <__cmpsf2>
    291a:	88 23       	and	r24, r24
    291c:	0c f0       	brlt	.+2      	; 0x2920 <faultyRF_Alarm+0x8e>
    291e:	10 e0       	ldi	r17, 0x00	; 0
    2920:	11 23       	and	r17, r17
    2922:	29 f0       	breq	.+10     	; 0x292e <faultyRF_Alarm+0x9c>
		__ticks = 1;
    2924:	81 e0       	ldi	r24, 0x01	; 1
    2926:	90 e0       	ldi	r25, 0x00	; 0
    2928:	9b 87       	std	Y+11, r25	; 0x0b
    292a:	8a 87       	std	Y+10, r24	; 0x0a
    292c:	46 c0       	rjmp	.+140    	; 0x29ba <faultyRF_Alarm+0x128>
	else if (__tmp > 65535)
    292e:	11 e0       	ldi	r17, 0x01	; 1
    2930:	6e 81       	ldd	r22, Y+6	; 0x06
    2932:	7f 81       	ldd	r23, Y+7	; 0x07
    2934:	88 85       	ldd	r24, Y+8	; 0x08
    2936:	99 85       	ldd	r25, Y+9	; 0x09
    2938:	20 e0       	ldi	r18, 0x00	; 0
    293a:	3f ef       	ldi	r19, 0xFF	; 255
    293c:	4f e7       	ldi	r20, 0x7F	; 127
    293e:	57 e4       	ldi	r21, 0x47	; 71
    2940:	0e 94 61 19 	call	0x32c2	; 0x32c2 <__gesf2>
    2944:	18 16       	cp	r1, r24
    2946:	0c f0       	brlt	.+2      	; 0x294a <faultyRF_Alarm+0xb8>
    2948:	10 e0       	ldi	r17, 0x00	; 0
    294a:	11 23       	and	r17, r17
    294c:	61 f1       	breq	.+88     	; 0x29a6 <faultyRF_Alarm+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    294e:	6a 81       	ldd	r22, Y+2	; 0x02
    2950:	7b 81       	ldd	r23, Y+3	; 0x03
    2952:	8c 81       	ldd	r24, Y+4	; 0x04
    2954:	9d 81       	ldd	r25, Y+5	; 0x05
    2956:	20 e0       	ldi	r18, 0x00	; 0
    2958:	30 e0       	ldi	r19, 0x00	; 0
    295a:	40 e2       	ldi	r20, 0x20	; 32
    295c:	51 e4       	ldi	r21, 0x41	; 65
    295e:	0e 94 65 19 	call	0x32ca	; 0x32ca <__mulsf3>
    2962:	dc 01       	movw	r26, r24
    2964:	cb 01       	movw	r24, r22
    2966:	bc 01       	movw	r22, r24
    2968:	cd 01       	movw	r24, r26
    296a:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__fixunssfsi>
    296e:	dc 01       	movw	r26, r24
    2970:	cb 01       	movw	r24, r22
    2972:	9b 87       	std	Y+11, r25	; 0x0b
    2974:	8a 87       	std	Y+10, r24	; 0x0a
    2976:	12 c0       	rjmp	.+36     	; 0x299c <faultyRF_Alarm+0x10a>
    2978:	80 e9       	ldi	r24, 0x90	; 144
    297a:	91 e0       	ldi	r25, 0x01	; 1
    297c:	9d 87       	std	Y+13, r25	; 0x0d
    297e:	8c 87       	std	Y+12, r24	; 0x0c
    2980:	8c 85       	ldd	r24, Y+12	; 0x0c
    2982:	9d 85       	ldd	r25, Y+13	; 0x0d
    2984:	8c 01       	movw	r16, r24
    2986:	c8 01       	movw	r24, r16
    2988:	01 97       	sbiw	r24, 0x01	; 1
    298a:	f1 f7       	brne	.-4      	; 0x2988 <faultyRF_Alarm+0xf6>
    298c:	8c 01       	movw	r16, r24
    298e:	1d 87       	std	Y+13, r17	; 0x0d
    2990:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2992:	8a 85       	ldd	r24, Y+10	; 0x0a
    2994:	9b 85       	ldd	r25, Y+11	; 0x0b
    2996:	01 97       	sbiw	r24, 0x01	; 1
    2998:	9b 87       	std	Y+11, r25	; 0x0b
    299a:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    299c:	8a 85       	ldd	r24, Y+10	; 0x0a
    299e:	9b 85       	ldd	r25, Y+11	; 0x0b
    29a0:	00 97       	sbiw	r24, 0x00	; 0
    29a2:	51 f7       	brne	.-44     	; 0x2978 <faultyRF_Alarm+0xe6>
    29a4:	17 c0       	rjmp	.+46     	; 0x29d4 <faultyRF_Alarm+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29a6:	6e 81       	ldd	r22, Y+6	; 0x06
    29a8:	7f 81       	ldd	r23, Y+7	; 0x07
    29aa:	88 85       	ldd	r24, Y+8	; 0x08
    29ac:	99 85       	ldd	r25, Y+9	; 0x09
    29ae:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__fixunssfsi>
    29b2:	dc 01       	movw	r26, r24
    29b4:	cb 01       	movw	r24, r22
    29b6:	9b 87       	std	Y+11, r25	; 0x0b
    29b8:	8a 87       	std	Y+10, r24	; 0x0a
    29ba:	8a 85       	ldd	r24, Y+10	; 0x0a
    29bc:	9b 85       	ldd	r25, Y+11	; 0x0b
    29be:	9f 87       	std	Y+15, r25	; 0x0f
    29c0:	8e 87       	std	Y+14, r24	; 0x0e
    29c2:	8e 85       	ldd	r24, Y+14	; 0x0e
    29c4:	9f 85       	ldd	r25, Y+15	; 0x0f
    29c6:	8c 01       	movw	r16, r24
    29c8:	f8 01       	movw	r30, r16
    29ca:	31 97       	sbiw	r30, 0x01	; 1
    29cc:	f1 f7       	brne	.-4      	; 0x29ca <faultyRF_Alarm+0x138>
    29ce:	8f 01       	movw	r16, r30
    29d0:	1f 87       	std	Y+15, r17	; 0x0f
    29d2:	0e 87       	std	Y+14, r16	; 0x0e



void faultyRF_Alarm(){
	CLEAR_FAULTY_RF_LED;
	for (uint8_t x = 0; x < 6; x++)
    29d4:	89 81       	ldd	r24, Y+1	; 0x01
    29d6:	8f 5f       	subi	r24, 0xFF	; 255
    29d8:	89 83       	std	Y+1, r24	; 0x01
    29da:	89 81       	ldd	r24, Y+1	; 0x01
    29dc:	86 30       	cpi	r24, 0x06	; 6
    29de:	08 f4       	brcc	.+2      	; 0x29e2 <faultyRF_Alarm+0x150>
    29e0:	6f cf       	rjmp	.-290    	; 0x28c0 <faultyRF_Alarm+0x2e>
    29e2:	80 e0       	ldi	r24, 0x00	; 0
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	aa e7       	ldi	r26, 0x7A	; 122
    29e8:	b3 e4       	ldi	r27, 0x43	; 67
    29ea:	88 8b       	std	Y+16, r24	; 0x10
    29ec:	99 8b       	std	Y+17, r25	; 0x11
    29ee:	aa 8b       	std	Y+18, r26	; 0x12
    29f0:	bb 8b       	std	Y+19, r27	; 0x13
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    29f2:	68 89       	ldd	r22, Y+16	; 0x10
    29f4:	79 89       	ldd	r23, Y+17	; 0x11
    29f6:	8a 89       	ldd	r24, Y+18	; 0x12
    29f8:	9b 89       	ldd	r25, Y+19	; 0x13
    29fa:	20 e0       	ldi	r18, 0x00	; 0
    29fc:	30 e0       	ldi	r19, 0x00	; 0
    29fe:	4a e7       	ldi	r20, 0x7A	; 122
    2a00:	55 e4       	ldi	r21, 0x45	; 69
    2a02:	0e 94 65 19 	call	0x32ca	; 0x32ca <__mulsf3>
    2a06:	dc 01       	movw	r26, r24
    2a08:	cb 01       	movw	r24, r22
    2a0a:	8c 8b       	std	Y+20, r24	; 0x14
    2a0c:	9d 8b       	std	Y+21, r25	; 0x15
    2a0e:	ae 8b       	std	Y+22, r26	; 0x16
    2a10:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
    2a12:	11 e0       	ldi	r17, 0x01	; 1
    2a14:	6c 89       	ldd	r22, Y+20	; 0x14
    2a16:	7d 89       	ldd	r23, Y+21	; 0x15
    2a18:	8e 89       	ldd	r24, Y+22	; 0x16
    2a1a:	9f 89       	ldd	r25, Y+23	; 0x17
    2a1c:	20 e0       	ldi	r18, 0x00	; 0
    2a1e:	30 e0       	ldi	r19, 0x00	; 0
    2a20:	40 e8       	ldi	r20, 0x80	; 128
    2a22:	5f e3       	ldi	r21, 0x3F	; 63
    2a24:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <__cmpsf2>
    2a28:	88 23       	and	r24, r24
    2a2a:	0c f0       	brlt	.+2      	; 0x2a2e <faultyRF_Alarm+0x19c>
    2a2c:	10 e0       	ldi	r17, 0x00	; 0
    2a2e:	11 23       	and	r17, r17
    2a30:	29 f0       	breq	.+10     	; 0x2a3c <faultyRF_Alarm+0x1aa>
		__ticks = 1;
    2a32:	81 e0       	ldi	r24, 0x01	; 1
    2a34:	90 e0       	ldi	r25, 0x00	; 0
    2a36:	99 8f       	std	Y+25, r25	; 0x19
    2a38:	88 8f       	std	Y+24, r24	; 0x18
    2a3a:	46 c0       	rjmp	.+140    	; 0x2ac8 <faultyRF_Alarm+0x236>
	else if (__tmp > 65535)
    2a3c:	11 e0       	ldi	r17, 0x01	; 1
    2a3e:	6c 89       	ldd	r22, Y+20	; 0x14
    2a40:	7d 89       	ldd	r23, Y+21	; 0x15
    2a42:	8e 89       	ldd	r24, Y+22	; 0x16
    2a44:	9f 89       	ldd	r25, Y+23	; 0x17
    2a46:	20 e0       	ldi	r18, 0x00	; 0
    2a48:	3f ef       	ldi	r19, 0xFF	; 255
    2a4a:	4f e7       	ldi	r20, 0x7F	; 127
    2a4c:	57 e4       	ldi	r21, 0x47	; 71
    2a4e:	0e 94 61 19 	call	0x32c2	; 0x32c2 <__gesf2>
    2a52:	18 16       	cp	r1, r24
    2a54:	0c f0       	brlt	.+2      	; 0x2a58 <faultyRF_Alarm+0x1c6>
    2a56:	10 e0       	ldi	r17, 0x00	; 0
    2a58:	11 23       	and	r17, r17
    2a5a:	61 f1       	breq	.+88     	; 0x2ab4 <faultyRF_Alarm+0x222>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a5c:	68 89       	ldd	r22, Y+16	; 0x10
    2a5e:	79 89       	ldd	r23, Y+17	; 0x11
    2a60:	8a 89       	ldd	r24, Y+18	; 0x12
    2a62:	9b 89       	ldd	r25, Y+19	; 0x13
    2a64:	20 e0       	ldi	r18, 0x00	; 0
    2a66:	30 e0       	ldi	r19, 0x00	; 0
    2a68:	40 e2       	ldi	r20, 0x20	; 32
    2a6a:	51 e4       	ldi	r21, 0x41	; 65
    2a6c:	0e 94 65 19 	call	0x32ca	; 0x32ca <__mulsf3>
    2a70:	dc 01       	movw	r26, r24
    2a72:	cb 01       	movw	r24, r22
    2a74:	bc 01       	movw	r22, r24
    2a76:	cd 01       	movw	r24, r26
    2a78:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__fixunssfsi>
    2a7c:	dc 01       	movw	r26, r24
    2a7e:	cb 01       	movw	r24, r22
    2a80:	99 8f       	std	Y+25, r25	; 0x19
    2a82:	88 8f       	std	Y+24, r24	; 0x18
    2a84:	12 c0       	rjmp	.+36     	; 0x2aaa <faultyRF_Alarm+0x218>
    2a86:	80 e9       	ldi	r24, 0x90	; 144
    2a88:	91 e0       	ldi	r25, 0x01	; 1
    2a8a:	9b 8f       	std	Y+27, r25	; 0x1b
    2a8c:	8a 8f       	std	Y+26, r24	; 0x1a
    2a8e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2a90:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2a92:	8c 01       	movw	r16, r24
    2a94:	c8 01       	movw	r24, r16
    2a96:	01 97       	sbiw	r24, 0x01	; 1
    2a98:	f1 f7       	brne	.-4      	; 0x2a96 <faultyRF_Alarm+0x204>
    2a9a:	8c 01       	movw	r16, r24
    2a9c:	1b 8f       	std	Y+27, r17	; 0x1b
    2a9e:	0a 8f       	std	Y+26, r16	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aa0:	88 8d       	ldd	r24, Y+24	; 0x18
    2aa2:	99 8d       	ldd	r25, Y+25	; 0x19
    2aa4:	01 97       	sbiw	r24, 0x01	; 1
    2aa6:	99 8f       	std	Y+25, r25	; 0x19
    2aa8:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aaa:	88 8d       	ldd	r24, Y+24	; 0x18
    2aac:	99 8d       	ldd	r25, Y+25	; 0x19
    2aae:	00 97       	sbiw	r24, 0x00	; 0
    2ab0:	51 f7       	brne	.-44     	; 0x2a86 <faultyRF_Alarm+0x1f4>
    2ab2:	17 c0       	rjmp	.+46     	; 0x2ae2 <faultyRF_Alarm+0x250>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ab4:	6c 89       	ldd	r22, Y+20	; 0x14
    2ab6:	7d 89       	ldd	r23, Y+21	; 0x15
    2ab8:	8e 89       	ldd	r24, Y+22	; 0x16
    2aba:	9f 89       	ldd	r25, Y+23	; 0x17
    2abc:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__fixunssfsi>
    2ac0:	dc 01       	movw	r26, r24
    2ac2:	cb 01       	movw	r24, r22
    2ac4:	99 8f       	std	Y+25, r25	; 0x19
    2ac6:	88 8f       	std	Y+24, r24	; 0x18
    2ac8:	88 8d       	ldd	r24, Y+24	; 0x18
    2aca:	99 8d       	ldd	r25, Y+25	; 0x19
    2acc:	9d 8f       	std	Y+29, r25	; 0x1d
    2ace:	8c 8f       	std	Y+28, r24	; 0x1c
    2ad0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2ad2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2ad4:	8c 01       	movw	r16, r24
    2ad6:	f8 01       	movw	r30, r16
    2ad8:	31 97       	sbiw	r30, 0x01	; 1
    2ada:	f1 f7       	brne	.-4      	; 0x2ad8 <faultyRF_Alarm+0x246>
    2adc:	8f 01       	movw	r16, r30
    2ade:	1d 8f       	std	Y+29, r17	; 0x1d
    2ae0:	0c 8f       	std	Y+28, r16	; 0x1c
	{
		FLIP_FAULTY_RF_LED;
		_delay_ms(125);
	}
	_delay_ms(250);
}
    2ae2:	6d 96       	adiw	r28, 0x1d	; 29
    2ae4:	0f b6       	in	r0, 0x3f	; 63
    2ae6:	f8 94       	cli
    2ae8:	de bf       	out	0x3e, r29	; 62
    2aea:	0f be       	out	0x3f, r0	; 63
    2aec:	cd bf       	out	0x3d, r28	; 61
    2aee:	cf 91       	pop	r28
    2af0:	df 91       	pop	r29
    2af2:	1f 91       	pop	r17
    2af4:	0f 91       	pop	r16
    2af6:	08 95       	ret

00002af8 <nrf24_rx_address>:



/* Set the RX address */
void nrf24_rx_address(uint8_t * adr) 
{
    2af8:	df 93       	push	r29
    2afa:	cf 93       	push	r28
    2afc:	00 d0       	rcall	.+0      	; 0x2afe <nrf24_rx_address+0x6>
    2afe:	cd b7       	in	r28, 0x3d	; 61
    2b00:	de b7       	in	r29, 0x3e	; 62
    2b02:	9a 83       	std	Y+2, r25	; 0x02
    2b04:	89 83       	std	Y+1, r24	; 0x01
    nrf24_ce_digitalWrite(LOW);
    2b06:	80 e0       	ldi	r24, 0x00	; 0
    2b08:	0e 94 05 18 	call	0x300a	; 0x300a <nrf24_ce_digitalWrite>
    nrf24_writeRegister(RX_ADDR_P1,adr,nrf24_ADDR_LEN);
    2b0c:	29 81       	ldd	r18, Y+1	; 0x01
    2b0e:	3a 81       	ldd	r19, Y+2	; 0x02
    2b10:	8b e0       	ldi	r24, 0x0B	; 11
    2b12:	b9 01       	movw	r22, r18
    2b14:	45 e0       	ldi	r20, 0x05	; 5
    2b16:	0e 94 91 17 	call	0x2f22	; 0x2f22 <nrf24_writeRegister>
    nrf24_ce_digitalWrite(HIGH);
    2b1a:	81 e0       	ldi	r24, 0x01	; 1
    2b1c:	0e 94 05 18 	call	0x300a	; 0x300a <nrf24_ce_digitalWrite>
}
    2b20:	0f 90       	pop	r0
    2b22:	0f 90       	pop	r0
    2b24:	cf 91       	pop	r28
    2b26:	df 91       	pop	r29
    2b28:	08 95       	ret

00002b2a <nrf24_tx_address>:
    return payload_len;
}

/* Set the TX address */
void nrf24_tx_address(uint8_t* adr)
{
    2b2a:	df 93       	push	r29
    2b2c:	cf 93       	push	r28
    2b2e:	00 d0       	rcall	.+0      	; 0x2b30 <nrf24_tx_address+0x6>
    2b30:	cd b7       	in	r28, 0x3d	; 61
    2b32:	de b7       	in	r29, 0x3e	; 62
    2b34:	9a 83       	std	Y+2, r25	; 0x02
    2b36:	89 83       	std	Y+1, r24	; 0x01
    /* RX_ADDR_P0 must be set to the sending addr for auto ack to work. */
    nrf24_writeRegister(RX_ADDR_P0,adr,nrf24_ADDR_LEN);
    2b38:	29 81       	ldd	r18, Y+1	; 0x01
    2b3a:	3a 81       	ldd	r19, Y+2	; 0x02
    2b3c:	8a e0       	ldi	r24, 0x0A	; 10
    2b3e:	b9 01       	movw	r22, r18
    2b40:	45 e0       	ldi	r20, 0x05	; 5
    2b42:	0e 94 91 17 	call	0x2f22	; 0x2f22 <nrf24_writeRegister>
    nrf24_writeRegister(TX_ADDR,adr,nrf24_ADDR_LEN);
    2b46:	29 81       	ldd	r18, Y+1	; 0x01
    2b48:	3a 81       	ldd	r19, Y+2	; 0x02
    2b4a:	80 e1       	ldi	r24, 0x10	; 16
    2b4c:	b9 01       	movw	r22, r18
    2b4e:	45 e0       	ldi	r20, 0x05	; 5
    2b50:	0e 94 91 17 	call	0x2f22	; 0x2f22 <nrf24_writeRegister>
}
    2b54:	0f 90       	pop	r0
    2b56:	0f 90       	pop	r0
    2b58:	cf 91       	pop	r28
    2b5a:	df 91       	pop	r29
    2b5c:	08 95       	ret

00002b5e <nrf24_dataReady>:

/* Checks if data is available for reading */
/* Returns 1 if data is ready ... */
uint8_t nrf24_dataReady() 
{
    2b5e:	df 93       	push	r29
    2b60:	cf 93       	push	r28
    2b62:	0f 92       	push	r0
    2b64:	cd b7       	in	r28, 0x3d	; 61
    2b66:	de b7       	in	r29, 0x3e	; 62
    // See note in getData() function - just checking RX_DR isn't good enough
    uint8_t status = nrf24_getStatus();
    2b68:	0e 94 43 16 	call	0x2c86	; 0x2c86 <nrf24_getStatus>
    2b6c:	89 83       	std	Y+1, r24	; 0x01

    // We can short circuit on RX_DR, but if it's not set, we still need
    // to check the FIFO for any pending packets
    if ( status & (1 << RX_DR) ) 
    2b6e:	89 81       	ldd	r24, Y+1	; 0x01
    2b70:	88 2f       	mov	r24, r24
    2b72:	90 e0       	ldi	r25, 0x00	; 0
    2b74:	80 74       	andi	r24, 0x40	; 64
    2b76:	90 70       	andi	r25, 0x00	; 0
    2b78:	00 97       	sbiw	r24, 0x00	; 0
    2b7a:	11 f0       	breq	.+4      	; 0x2b80 <nrf24_dataReady+0x22>
    {
        return 1;
    2b7c:	81 e0       	ldi	r24, 0x01	; 1
    2b7e:	07 c0       	rjmp	.+14     	; 0x2b8e <nrf24_dataReady+0x30>
    }

    return !nrf24_rxFifoEmpty();;
    2b80:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <nrf24_rxFifoEmpty>
    2b84:	98 2f       	mov	r25, r24
    2b86:	81 e0       	ldi	r24, 0x01	; 1
    2b88:	99 23       	and	r25, r25
    2b8a:	09 f0       	breq	.+2      	; 0x2b8e <nrf24_dataReady+0x30>
    2b8c:	80 e0       	ldi	r24, 0x00	; 0
}
    2b8e:	0f 90       	pop	r0
    2b90:	cf 91       	pop	r28
    2b92:	df 91       	pop	r29
    2b94:	08 95       	ret

00002b96 <nrf24_rxFifoEmpty>:

/* Checks if receive FIFO is empty or not */
uint8_t nrf24_rxFifoEmpty()
{
    2b96:	df 93       	push	r29
    2b98:	cf 93       	push	r28
    2b9a:	0f 92       	push	r0
    2b9c:	cd b7       	in	r28, 0x3d	; 61
    2b9e:	de b7       	in	r29, 0x3e	; 62
    uint8_t fifoStatus;

    nrf24_readRegister(FIFO_STATUS,&fifoStatus,1);
    2ba0:	87 e1       	ldi	r24, 0x17	; 23
    2ba2:	9e 01       	movw	r18, r28
    2ba4:	2f 5f       	subi	r18, 0xFF	; 255
    2ba6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ba8:	b9 01       	movw	r22, r18
    2baa:	41 e0       	ldi	r20, 0x01	; 1
    2bac:	0e 94 6e 17 	call	0x2edc	; 0x2edc <nrf24_readRegister>
    
    return (fifoStatus & (1 << RX_EMPTY));
    2bb0:	89 81       	ldd	r24, Y+1	; 0x01
    2bb2:	81 70       	andi	r24, 0x01	; 1
}
    2bb4:	0f 90       	pop	r0
    2bb6:	cf 91       	pop	r28
    2bb8:	df 91       	pop	r29
    2bba:	08 95       	ret

00002bbc <nrf24_getData>:
    return status;
}

/* Reads payload bytes into data array */
void nrf24_getData(uint8_t* data) 
{
    2bbc:	df 93       	push	r29
    2bbe:	cf 93       	push	r28
    2bc0:	00 d0       	rcall	.+0      	; 0x2bc2 <nrf24_getData+0x6>
    2bc2:	cd b7       	in	r28, 0x3d	; 61
    2bc4:	de b7       	in	r29, 0x3e	; 62
    2bc6:	9a 83       	std	Y+2, r25	; 0x02
    2bc8:	89 83       	std	Y+1, r24	; 0x01
    /* Pull down chip select */
    nrf24_csn_digitalWrite(LOW);                               
    2bca:	80 e0       	ldi	r24, 0x00	; 0
    2bcc:	0e 94 25 18 	call	0x304a	; 0x304a <nrf24_csn_digitalWrite>

    /* Send cmd to read rx payload */
    spi_transfer( R_RX_PAYLOAD );
    2bd0:	81 e6       	ldi	r24, 0x61	; 97
    2bd2:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <spi_transfer>
    
    /* Read payload */
    nrf24_transferSync(data,data,payload_len);
    2bd6:	40 91 59 01 	lds	r20, 0x0159
    2bda:	89 81       	ldd	r24, Y+1	; 0x01
    2bdc:	9a 81       	ldd	r25, Y+2	; 0x02
    2bde:	29 81       	ldd	r18, Y+1	; 0x01
    2be0:	3a 81       	ldd	r19, Y+2	; 0x02
    2be2:	b9 01       	movw	r22, r18
    2be4:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <nrf24_transferSync>
    
    /* Pull up chip select */
    nrf24_csn_digitalWrite(HIGH);
    2be8:	81 e0       	ldi	r24, 0x01	; 1
    2bea:	0e 94 25 18 	call	0x304a	; 0x304a <nrf24_csn_digitalWrite>

    /* Reset status register */
    nrf24_configRegister(STATUS,(1<<RX_DR));   
    2bee:	87 e0       	ldi	r24, 0x07	; 7
    2bf0:	60 e4       	ldi	r22, 0x40	; 64
    2bf2:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <nrf24_configRegister>
}
    2bf6:	0f 90       	pop	r0
    2bf8:	0f 90       	pop	r0
    2bfa:	cf 91       	pop	r28
    2bfc:	df 91       	pop	r29
    2bfe:	08 95       	ret

00002c00 <nrf24_send>:
}

// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
void nrf24_send(uint8_t* value) 
{    
    2c00:	df 93       	push	r29
    2c02:	cf 93       	push	r28
    2c04:	00 d0       	rcall	.+0      	; 0x2c06 <nrf24_send+0x6>
    2c06:	cd b7       	in	r28, 0x3d	; 61
    2c08:	de b7       	in	r29, 0x3e	; 62
    2c0a:	9a 83       	std	Y+2, r25	; 0x02
    2c0c:	89 83       	std	Y+1, r24	; 0x01
    /* Go to Standby-I first */
    nrf24_ce_digitalWrite(LOW);
    2c0e:	80 e0       	ldi	r24, 0x00	; 0
    2c10:	0e 94 05 18 	call	0x300a	; 0x300a <nrf24_ce_digitalWrite>
     
    /* Set to transmitter mode , Power up if needed */
    nrf24_powerUpTx();
    2c14:	0e 94 94 16 	call	0x2d28	; 0x2d28 <nrf24_powerUpTx>

    /* Do we really need to flush TX fifo each time ? */
    #if 1
        /* Pull down chip select */
        nrf24_csn_digitalWrite(LOW);           
    2c18:	80 e0       	ldi	r24, 0x00	; 0
    2c1a:	0e 94 25 18 	call	0x304a	; 0x304a <nrf24_csn_digitalWrite>

        /* Write cmd to flush transmit FIFO */
        spi_transfer(FLUSH_TX);     
    2c1e:	81 ee       	ldi	r24, 0xE1	; 225
    2c20:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <spi_transfer>

        /* Pull up chip select */
        nrf24_csn_digitalWrite(HIGH);                    
    2c24:	81 e0       	ldi	r24, 0x01	; 1
    2c26:	0e 94 25 18 	call	0x304a	; 0x304a <nrf24_csn_digitalWrite>
    #endif 

    /* Pull down chip select */
    nrf24_csn_digitalWrite(LOW);
    2c2a:	80 e0       	ldi	r24, 0x00	; 0
    2c2c:	0e 94 25 18 	call	0x304a	; 0x304a <nrf24_csn_digitalWrite>

    /* Write cmd to write payload */
    spi_transfer(W_TX_PAYLOAD);
    2c30:	80 ea       	ldi	r24, 0xA0	; 160
    2c32:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <spi_transfer>

    /* Write payload */
    nrf24_transmitSync(value,payload_len);   
    2c36:	20 91 59 01 	lds	r18, 0x0159
    2c3a:	89 81       	ldd	r24, Y+1	; 0x01
    2c3c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c3e:	62 2f       	mov	r22, r18
    2c40:	0e 94 30 17 	call	0x2e60	; 0x2e60 <nrf24_transmitSync>

    /* Pull up chip select */
    nrf24_csn_digitalWrite(HIGH);
    2c44:	81 e0       	ldi	r24, 0x01	; 1
    2c46:	0e 94 25 18 	call	0x304a	; 0x304a <nrf24_csn_digitalWrite>

    /* Start the transmission */
    nrf24_ce_digitalWrite(HIGH);    
    2c4a:	81 e0       	ldi	r24, 0x01	; 1
    2c4c:	0e 94 05 18 	call	0x300a	; 0x300a <nrf24_ce_digitalWrite>
}
    2c50:	0f 90       	pop	r0
    2c52:	0f 90       	pop	r0
    2c54:	cf 91       	pop	r28
    2c56:	df 91       	pop	r29
    2c58:	08 95       	ret

00002c5a <nrf24_isSending>:

uint8_t nrf24_isSending()
{
    2c5a:	df 93       	push	r29
    2c5c:	cf 93       	push	r28
    2c5e:	0f 92       	push	r0
    2c60:	cd b7       	in	r28, 0x3d	; 61
    2c62:	de b7       	in	r29, 0x3e	; 62
    uint8_t status;

    /* read the current status */
    status = nrf24_getStatus();
    2c64:	0e 94 43 16 	call	0x2c86	; 0x2c86 <nrf24_getStatus>
    2c68:	89 83       	std	Y+1, r24	; 0x01
                
    /* if sending successful (TX_DS) or max retries exceded (MAX_RT). */
    if((status & ((1 << TX_DS)  | (1 << MAX_RT))))
    2c6a:	89 81       	ldd	r24, Y+1	; 0x01
    2c6c:	88 2f       	mov	r24, r24
    2c6e:	90 e0       	ldi	r25, 0x00	; 0
    2c70:	80 73       	andi	r24, 0x30	; 48
    2c72:	90 70       	andi	r25, 0x00	; 0
    2c74:	00 97       	sbiw	r24, 0x00	; 0
    2c76:	11 f0       	breq	.+4      	; 0x2c7c <nrf24_isSending+0x22>
    {        
        return 0; /* false */
    2c78:	80 e0       	ldi	r24, 0x00	; 0
    2c7a:	01 c0       	rjmp	.+2      	; 0x2c7e <nrf24_isSending+0x24>
    }

    return 1; /* true */
    2c7c:	81 e0       	ldi	r24, 0x01	; 1

}
    2c7e:	0f 90       	pop	r0
    2c80:	cf 91       	pop	r28
    2c82:	df 91       	pop	r29
    2c84:	08 95       	ret

00002c86 <nrf24_getStatus>:

uint8_t nrf24_getStatus()
{
    2c86:	df 93       	push	r29
    2c88:	cf 93       	push	r28
    2c8a:	0f 92       	push	r0
    2c8c:	cd b7       	in	r28, 0x3d	; 61
    2c8e:	de b7       	in	r29, 0x3e	; 62
    uint8_t rv;
    nrf24_csn_digitalWrite(LOW);
    2c90:	80 e0       	ldi	r24, 0x00	; 0
    2c92:	0e 94 25 18 	call	0x304a	; 0x304a <nrf24_csn_digitalWrite>
    rv = spi_transfer(NOP);
    2c96:	8f ef       	ldi	r24, 0xFF	; 255
    2c98:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <spi_transfer>
    2c9c:	89 83       	std	Y+1, r24	; 0x01
    nrf24_csn_digitalWrite(HIGH);
    2c9e:	81 e0       	ldi	r24, 0x01	; 1
    2ca0:	0e 94 25 18 	call	0x304a	; 0x304a <nrf24_csn_digitalWrite>
    return rv;
    2ca4:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ca6:	0f 90       	pop	r0
    2ca8:	cf 91       	pop	r28
    2caa:	df 91       	pop	r29
    2cac:	08 95       	ret

00002cae <nrf24_lastMessageStatus>:

uint8_t nrf24_lastMessageStatus()
{
    2cae:	df 93       	push	r29
    2cb0:	cf 93       	push	r28
    2cb2:	0f 92       	push	r0
    2cb4:	cd b7       	in	r28, 0x3d	; 61
    2cb6:	de b7       	in	r29, 0x3e	; 62
    uint8_t rv;

    rv = nrf24_getStatus();
    2cb8:	0e 94 43 16 	call	0x2c86	; 0x2c86 <nrf24_getStatus>
    2cbc:	89 83       	std	Y+1, r24	; 0x01

    /* Transmission went OK */
    if((rv & ((1 << TX_DS))))
    2cbe:	89 81       	ldd	r24, Y+1	; 0x01
    2cc0:	88 2f       	mov	r24, r24
    2cc2:	90 e0       	ldi	r25, 0x00	; 0
    2cc4:	80 72       	andi	r24, 0x20	; 32
    2cc6:	90 70       	andi	r25, 0x00	; 0
    2cc8:	00 97       	sbiw	r24, 0x00	; 0
    2cca:	11 f0       	breq	.+4      	; 0x2cd0 <nrf24_lastMessageStatus+0x22>
    {
        return NRF24_TRANSMISSON_OK;
    2ccc:	80 e0       	ldi	r24, 0x00	; 0
    2cce:	0a c0       	rjmp	.+20     	; 0x2ce4 <nrf24_lastMessageStatus+0x36>
    }
    /* Maximum retransmission count is reached */
    /* Last message probably went missing ... */
    else if((rv & ((1 << MAX_RT))))
    2cd0:	89 81       	ldd	r24, Y+1	; 0x01
    2cd2:	88 2f       	mov	r24, r24
    2cd4:	90 e0       	ldi	r25, 0x00	; 0
    2cd6:	80 71       	andi	r24, 0x10	; 16
    2cd8:	90 70       	andi	r25, 0x00	; 0
    2cda:	00 97       	sbiw	r24, 0x00	; 0
    2cdc:	11 f0       	breq	.+4      	; 0x2ce2 <nrf24_lastMessageStatus+0x34>
    {
        return NRF24_MESSAGE_LOST;
    2cde:	81 e0       	ldi	r24, 0x01	; 1
    2ce0:	01 c0       	rjmp	.+2      	; 0x2ce4 <nrf24_lastMessageStatus+0x36>
    }  
    /* Probably still sending ... */
    else
    {
        return 0xFF;
    2ce2:	8f ef       	ldi	r24, 0xFF	; 255
    }
}
    2ce4:	0f 90       	pop	r0
    2ce6:	cf 91       	pop	r28
    2ce8:	df 91       	pop	r29
    2cea:	08 95       	ret

00002cec <nrf24_powerUpRx>:

void nrf24_powerUpRx()
{     
    2cec:	df 93       	push	r29
    2cee:	cf 93       	push	r28
    2cf0:	cd b7       	in	r28, 0x3d	; 61
    2cf2:	de b7       	in	r29, 0x3e	; 62
    nrf24_csn_digitalWrite(LOW);
    2cf4:	80 e0       	ldi	r24, 0x00	; 0
    2cf6:	0e 94 25 18 	call	0x304a	; 0x304a <nrf24_csn_digitalWrite>
    spi_transfer(FLUSH_RX);
    2cfa:	82 ee       	ldi	r24, 0xE2	; 226
    2cfc:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <spi_transfer>
    nrf24_csn_digitalWrite(HIGH);
    2d00:	81 e0       	ldi	r24, 0x01	; 1
    2d02:	0e 94 25 18 	call	0x304a	; 0x304a <nrf24_csn_digitalWrite>

    nrf24_configRegister(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT)); 
    2d06:	87 e0       	ldi	r24, 0x07	; 7
    2d08:	60 e7       	ldi	r22, 0x70	; 112
    2d0a:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <nrf24_configRegister>

    nrf24_ce_digitalWrite(LOW);    
    2d0e:	80 e0       	ldi	r24, 0x00	; 0
    2d10:	0e 94 05 18 	call	0x300a	; 0x300a <nrf24_ce_digitalWrite>
    nrf24_configRegister(CONFIG,nrf24_CONFIG|((1<<PWR_UP)|(1<<PRIM_RX)));    
    2d14:	80 e0       	ldi	r24, 0x00	; 0
    2d16:	6b e0       	ldi	r22, 0x0B	; 11
    2d18:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <nrf24_configRegister>
    nrf24_ce_digitalWrite(HIGH);
    2d1c:	81 e0       	ldi	r24, 0x01	; 1
    2d1e:	0e 94 05 18 	call	0x300a	; 0x300a <nrf24_ce_digitalWrite>
}
    2d22:	cf 91       	pop	r28
    2d24:	df 91       	pop	r29
    2d26:	08 95       	ret

00002d28 <nrf24_powerUpTx>:

void nrf24_powerUpTx()
{
    2d28:	df 93       	push	r29
    2d2a:	cf 93       	push	r28
    2d2c:	cd b7       	in	r28, 0x3d	; 61
    2d2e:	de b7       	in	r29, 0x3e	; 62
    nrf24_configRegister(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT)); 
    2d30:	87 e0       	ldi	r24, 0x07	; 7
    2d32:	60 e7       	ldi	r22, 0x70	; 112
    2d34:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <nrf24_configRegister>

    nrf24_configRegister(CONFIG,nrf24_CONFIG|((1<<PWR_UP)|(0<<PRIM_RX)));
    2d38:	80 e0       	ldi	r24, 0x00	; 0
    2d3a:	6a e0       	ldi	r22, 0x0A	; 10
    2d3c:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <nrf24_configRegister>
}
    2d40:	cf 91       	pop	r28
    2d42:	df 91       	pop	r29
    2d44:	08 95       	ret

00002d46 <nrf24_powerDown>:

void nrf24_powerDown()
{
    2d46:	df 93       	push	r29
    2d48:	cf 93       	push	r28
    2d4a:	cd b7       	in	r28, 0x3d	; 61
    2d4c:	de b7       	in	r29, 0x3e	; 62
    nrf24_ce_digitalWrite(LOW);
    2d4e:	80 e0       	ldi	r24, 0x00	; 0
    2d50:	0e 94 05 18 	call	0x300a	; 0x300a <nrf24_ce_digitalWrite>
    nrf24_configRegister(CONFIG,nrf24_CONFIG);
    2d54:	80 e0       	ldi	r24, 0x00	; 0
    2d56:	68 e0       	ldi	r22, 0x08	; 8
    2d58:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <nrf24_configRegister>
}
    2d5c:	cf 91       	pop	r28
    2d5e:	df 91       	pop	r29
    2d60:	08 95       	ret

00002d62 <spi_transfer>:

uint8_t spi_transfer(uint8_t tx)
{
    2d62:	df 93       	push	r29
    2d64:	cf 93       	push	r28
    2d66:	00 d0       	rcall	.+0      	; 0x2d68 <spi_transfer+0x6>
    2d68:	0f 92       	push	r0
    2d6a:	cd b7       	in	r28, 0x3d	; 61
    2d6c:	de b7       	in	r29, 0x3e	; 62
    2d6e:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t i = 0;
    2d70:	19 82       	std	Y+1, r1	; 0x01
    uint8_t rx = 0;
    2d72:	1a 82       	std	Y+2, r1	; 0x02

    nrf24_sck_digitalWrite(LOW);
    2d74:	80 e0       	ldi	r24, 0x00	; 0
    2d76:	0e 94 45 18 	call	0x308a	; 0x308a <nrf24_sck_digitalWrite>

    for(i=0;i<8;i++)
    2d7a:	19 82       	std	Y+1, r1	; 0x01
    2d7c:	30 c0       	rjmp	.+96     	; 0x2dde <spi_transfer+0x7c>
    {

	    if(tx & (1<<(7-i)))
    2d7e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d80:	88 2f       	mov	r24, r24
    2d82:	90 e0       	ldi	r25, 0x00	; 0
    2d84:	29 81       	ldd	r18, Y+1	; 0x01
    2d86:	22 2f       	mov	r18, r18
    2d88:	30 e0       	ldi	r19, 0x00	; 0
    2d8a:	47 e0       	ldi	r20, 0x07	; 7
    2d8c:	50 e0       	ldi	r21, 0x00	; 0
    2d8e:	ba 01       	movw	r22, r20
    2d90:	62 1b       	sub	r22, r18
    2d92:	73 0b       	sbc	r23, r19
    2d94:	9b 01       	movw	r18, r22
    2d96:	02 2e       	mov	r0, r18
    2d98:	02 c0       	rjmp	.+4      	; 0x2d9e <spi_transfer+0x3c>
    2d9a:	95 95       	asr	r25
    2d9c:	87 95       	ror	r24
    2d9e:	0a 94       	dec	r0
    2da0:	e2 f7       	brpl	.-8      	; 0x2d9a <spi_transfer+0x38>
    2da2:	81 70       	andi	r24, 0x01	; 1
    2da4:	90 70       	andi	r25, 0x00	; 0
    2da6:	88 23       	and	r24, r24
    2da8:	21 f0       	breq	.+8      	; 0x2db2 <spi_transfer+0x50>
	    {
		    nrf24_mosi_digitalWrite(HIGH);
    2daa:	81 e0       	ldi	r24, 0x01	; 1
    2dac:	0e 94 65 18 	call	0x30ca	; 0x30ca <nrf24_mosi_digitalWrite>
    2db0:	03 c0       	rjmp	.+6      	; 0x2db8 <spi_transfer+0x56>
	    }
	    else
	    {
		    nrf24_mosi_digitalWrite(LOW);
    2db2:	80 e0       	ldi	r24, 0x00	; 0
    2db4:	0e 94 65 18 	call	0x30ca	; 0x30ca <nrf24_mosi_digitalWrite>
	    }

	    nrf24_sck_digitalWrite(HIGH);
    2db8:	81 e0       	ldi	r24, 0x01	; 1
    2dba:	0e 94 45 18 	call	0x308a	; 0x308a <nrf24_sck_digitalWrite>

	    rx = rx << 1;
    2dbe:	8a 81       	ldd	r24, Y+2	; 0x02
    2dc0:	88 0f       	add	r24, r24
    2dc2:	8a 83       	std	Y+2, r24	; 0x02
	    if(nrf24_miso_digitalRead())
    2dc4:	0e 94 85 18 	call	0x310a	; 0x310a <nrf24_miso_digitalRead>
    2dc8:	88 23       	and	r24, r24
    2dca:	19 f0       	breq	.+6      	; 0x2dd2 <spi_transfer+0x70>
	    {
		    rx |= 0x01;
    2dcc:	8a 81       	ldd	r24, Y+2	; 0x02
    2dce:	81 60       	ori	r24, 0x01	; 1
    2dd0:	8a 83       	std	Y+2, r24	; 0x02
	    }

	    nrf24_sck_digitalWrite(LOW);
    2dd2:	80 e0       	ldi	r24, 0x00	; 0
    2dd4:	0e 94 45 18 	call	0x308a	; 0x308a <nrf24_sck_digitalWrite>
    uint8_t i = 0;
    uint8_t rx = 0;

    nrf24_sck_digitalWrite(LOW);

    for(i=0;i<8;i++)
    2dd8:	89 81       	ldd	r24, Y+1	; 0x01
    2dda:	8f 5f       	subi	r24, 0xFF	; 255
    2ddc:	89 83       	std	Y+1, r24	; 0x01
    2dde:	89 81       	ldd	r24, Y+1	; 0x01
    2de0:	88 30       	cpi	r24, 0x08	; 8
    2de2:	68 f2       	brcs	.-102    	; 0x2d7e <spi_transfer+0x1c>

	    nrf24_sck_digitalWrite(LOW);

    }

    return rx;
    2de4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2de6:	0f 90       	pop	r0
    2de8:	0f 90       	pop	r0
    2dea:	0f 90       	pop	r0
    2dec:	cf 91       	pop	r28
    2dee:	df 91       	pop	r29
    2df0:	08 95       	ret

00002df2 <nrf24_transferSync>:

/* send and receive multiple bytes over SPI */
void nrf24_transferSync(uint8_t* dataout,uint8_t* datain,uint8_t len)
{
    2df2:	0f 93       	push	r16
    2df4:	1f 93       	push	r17
    2df6:	df 93       	push	r29
    2df8:	cf 93       	push	r28
    2dfa:	00 d0       	rcall	.+0      	; 0x2dfc <nrf24_transferSync+0xa>
    2dfc:	00 d0       	rcall	.+0      	; 0x2dfe <nrf24_transferSync+0xc>
    2dfe:	00 d0       	rcall	.+0      	; 0x2e00 <nrf24_transferSync+0xe>
    2e00:	cd b7       	in	r28, 0x3d	; 61
    2e02:	de b7       	in	r29, 0x3e	; 62
    2e04:	9b 83       	std	Y+3, r25	; 0x03
    2e06:	8a 83       	std	Y+2, r24	; 0x02
    2e08:	7d 83       	std	Y+5, r23	; 0x05
    2e0a:	6c 83       	std	Y+4, r22	; 0x04
    2e0c:	4e 83       	std	Y+6, r20	; 0x06
    uint8_t i;

    for(i=0;i<len;i++)
    2e0e:	19 82       	std	Y+1, r1	; 0x01
    2e10:	18 c0       	rjmp	.+48     	; 0x2e42 <nrf24_transferSync+0x50>
    {
        datain[i] = spi_transfer(dataout[i]);
    2e12:	89 81       	ldd	r24, Y+1	; 0x01
    2e14:	88 2f       	mov	r24, r24
    2e16:	90 e0       	ldi	r25, 0x00	; 0
    2e18:	2c 81       	ldd	r18, Y+4	; 0x04
    2e1a:	3d 81       	ldd	r19, Y+5	; 0x05
    2e1c:	89 01       	movw	r16, r18
    2e1e:	08 0f       	add	r16, r24
    2e20:	19 1f       	adc	r17, r25
    2e22:	89 81       	ldd	r24, Y+1	; 0x01
    2e24:	88 2f       	mov	r24, r24
    2e26:	90 e0       	ldi	r25, 0x00	; 0
    2e28:	2a 81       	ldd	r18, Y+2	; 0x02
    2e2a:	3b 81       	ldd	r19, Y+3	; 0x03
    2e2c:	82 0f       	add	r24, r18
    2e2e:	93 1f       	adc	r25, r19
    2e30:	fc 01       	movw	r30, r24
    2e32:	80 81       	ld	r24, Z
    2e34:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <spi_transfer>
    2e38:	f8 01       	movw	r30, r16
    2e3a:	80 83       	st	Z, r24
/* send and receive multiple bytes over SPI */
void nrf24_transferSync(uint8_t* dataout,uint8_t* datain,uint8_t len)
{
    uint8_t i;

    for(i=0;i<len;i++)
    2e3c:	89 81       	ldd	r24, Y+1	; 0x01
    2e3e:	8f 5f       	subi	r24, 0xFF	; 255
    2e40:	89 83       	std	Y+1, r24	; 0x01
    2e42:	99 81       	ldd	r25, Y+1	; 0x01
    2e44:	8e 81       	ldd	r24, Y+6	; 0x06
    2e46:	98 17       	cp	r25, r24
    2e48:	20 f3       	brcs	.-56     	; 0x2e12 <nrf24_transferSync+0x20>
    {
        datain[i] = spi_transfer(dataout[i]);
    }

}
    2e4a:	26 96       	adiw	r28, 0x06	; 6
    2e4c:	0f b6       	in	r0, 0x3f	; 63
    2e4e:	f8 94       	cli
    2e50:	de bf       	out	0x3e, r29	; 62
    2e52:	0f be       	out	0x3f, r0	; 63
    2e54:	cd bf       	out	0x3d, r28	; 61
    2e56:	cf 91       	pop	r28
    2e58:	df 91       	pop	r29
    2e5a:	1f 91       	pop	r17
    2e5c:	0f 91       	pop	r16
    2e5e:	08 95       	ret

00002e60 <nrf24_transmitSync>:

/* send multiple bytes over SPI */
void nrf24_transmitSync(uint8_t* dataout,uint8_t len)
{
    2e60:	df 93       	push	r29
    2e62:	cf 93       	push	r28
    2e64:	00 d0       	rcall	.+0      	; 0x2e66 <nrf24_transmitSync+0x6>
    2e66:	00 d0       	rcall	.+0      	; 0x2e68 <nrf24_transmitSync+0x8>
    2e68:	cd b7       	in	r28, 0x3d	; 61
    2e6a:	de b7       	in	r29, 0x3e	; 62
    2e6c:	9b 83       	std	Y+3, r25	; 0x03
    2e6e:	8a 83       	std	Y+2, r24	; 0x02
    2e70:	6c 83       	std	Y+4, r22	; 0x04
    uint8_t i;
    
    for(i=0;i<len;i++)
    2e72:	19 82       	std	Y+1, r1	; 0x01
    2e74:	0e c0       	rjmp	.+28     	; 0x2e92 <nrf24_transmitSync+0x32>
    {
        spi_transfer(dataout[i]);
    2e76:	89 81       	ldd	r24, Y+1	; 0x01
    2e78:	88 2f       	mov	r24, r24
    2e7a:	90 e0       	ldi	r25, 0x00	; 0
    2e7c:	2a 81       	ldd	r18, Y+2	; 0x02
    2e7e:	3b 81       	ldd	r19, Y+3	; 0x03
    2e80:	82 0f       	add	r24, r18
    2e82:	93 1f       	adc	r25, r19
    2e84:	fc 01       	movw	r30, r24
    2e86:	80 81       	ld	r24, Z
    2e88:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <spi_transfer>
/* send multiple bytes over SPI */
void nrf24_transmitSync(uint8_t* dataout,uint8_t len)
{
    uint8_t i;
    
    for(i=0;i<len;i++)
    2e8c:	89 81       	ldd	r24, Y+1	; 0x01
    2e8e:	8f 5f       	subi	r24, 0xFF	; 255
    2e90:	89 83       	std	Y+1, r24	; 0x01
    2e92:	99 81       	ldd	r25, Y+1	; 0x01
    2e94:	8c 81       	ldd	r24, Y+4	; 0x04
    2e96:	98 17       	cp	r25, r24
    2e98:	70 f3       	brcs	.-36     	; 0x2e76 <nrf24_transmitSync+0x16>
    {
        spi_transfer(dataout[i]);
    }

}
    2e9a:	0f 90       	pop	r0
    2e9c:	0f 90       	pop	r0
    2e9e:	0f 90       	pop	r0
    2ea0:	0f 90       	pop	r0
    2ea2:	cf 91       	pop	r28
    2ea4:	df 91       	pop	r29
    2ea6:	08 95       	ret

00002ea8 <nrf24_configRegister>:

/* Clocks only one byte into the given nrf24 register */
void nrf24_configRegister(uint8_t reg, uint8_t value)
{
    2ea8:	df 93       	push	r29
    2eaa:	cf 93       	push	r28
    2eac:	00 d0       	rcall	.+0      	; 0x2eae <nrf24_configRegister+0x6>
    2eae:	cd b7       	in	r28, 0x3d	; 61
    2eb0:	de b7       	in	r29, 0x3e	; 62
    2eb2:	89 83       	std	Y+1, r24	; 0x01
    2eb4:	6a 83       	std	Y+2, r22	; 0x02
    nrf24_csn_digitalWrite(LOW);
    2eb6:	80 e0       	ldi	r24, 0x00	; 0
    2eb8:	0e 94 25 18 	call	0x304a	; 0x304a <nrf24_csn_digitalWrite>
    spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
    2ebc:	89 81       	ldd	r24, Y+1	; 0x01
    2ebe:	8f 71       	andi	r24, 0x1F	; 31
    2ec0:	80 62       	ori	r24, 0x20	; 32
    2ec2:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <spi_transfer>
    spi_transfer(value);
    2ec6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ec8:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <spi_transfer>
    nrf24_csn_digitalWrite(HIGH);
    2ecc:	81 e0       	ldi	r24, 0x01	; 1
    2ece:	0e 94 25 18 	call	0x304a	; 0x304a <nrf24_csn_digitalWrite>
}
    2ed2:	0f 90       	pop	r0
    2ed4:	0f 90       	pop	r0
    2ed6:	cf 91       	pop	r28
    2ed8:	df 91       	pop	r29
    2eda:	08 95       	ret

00002edc <nrf24_readRegister>:

/* Read single register from nrf24 */
void nrf24_readRegister(uint8_t reg, uint8_t* value, uint8_t len)
{
    2edc:	df 93       	push	r29
    2ede:	cf 93       	push	r28
    2ee0:	00 d0       	rcall	.+0      	; 0x2ee2 <nrf24_readRegister+0x6>
    2ee2:	00 d0       	rcall	.+0      	; 0x2ee4 <nrf24_readRegister+0x8>
    2ee4:	cd b7       	in	r28, 0x3d	; 61
    2ee6:	de b7       	in	r29, 0x3e	; 62
    2ee8:	89 83       	std	Y+1, r24	; 0x01
    2eea:	7b 83       	std	Y+3, r23	; 0x03
    2eec:	6a 83       	std	Y+2, r22	; 0x02
    2eee:	4c 83       	std	Y+4, r20	; 0x04
    nrf24_csn_digitalWrite(LOW);
    2ef0:	80 e0       	ldi	r24, 0x00	; 0
    2ef2:	0e 94 25 18 	call	0x304a	; 0x304a <nrf24_csn_digitalWrite>
    spi_transfer(R_REGISTER | (REGISTER_MASK & reg));
    2ef6:	89 81       	ldd	r24, Y+1	; 0x01
    2ef8:	8f 71       	andi	r24, 0x1F	; 31
    2efa:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <spi_transfer>
    nrf24_transferSync(value,value,len);
    2efe:	8a 81       	ldd	r24, Y+2	; 0x02
    2f00:	9b 81       	ldd	r25, Y+3	; 0x03
    2f02:	2a 81       	ldd	r18, Y+2	; 0x02
    2f04:	3b 81       	ldd	r19, Y+3	; 0x03
    2f06:	b9 01       	movw	r22, r18
    2f08:	4c 81       	ldd	r20, Y+4	; 0x04
    2f0a:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <nrf24_transferSync>
    nrf24_csn_digitalWrite(HIGH);
    2f0e:	81 e0       	ldi	r24, 0x01	; 1
    2f10:	0e 94 25 18 	call	0x304a	; 0x304a <nrf24_csn_digitalWrite>
}
    2f14:	0f 90       	pop	r0
    2f16:	0f 90       	pop	r0
    2f18:	0f 90       	pop	r0
    2f1a:	0f 90       	pop	r0
    2f1c:	cf 91       	pop	r28
    2f1e:	df 91       	pop	r29
    2f20:	08 95       	ret

00002f22 <nrf24_writeRegister>:

/* Write to a single register of nrf24 */
void nrf24_writeRegister(uint8_t reg, uint8_t* value, uint8_t len) 
{
    2f22:	df 93       	push	r29
    2f24:	cf 93       	push	r28
    2f26:	00 d0       	rcall	.+0      	; 0x2f28 <nrf24_writeRegister+0x6>
    2f28:	00 d0       	rcall	.+0      	; 0x2f2a <nrf24_writeRegister+0x8>
    2f2a:	cd b7       	in	r28, 0x3d	; 61
    2f2c:	de b7       	in	r29, 0x3e	; 62
    2f2e:	89 83       	std	Y+1, r24	; 0x01
    2f30:	7b 83       	std	Y+3, r23	; 0x03
    2f32:	6a 83       	std	Y+2, r22	; 0x02
    2f34:	4c 83       	std	Y+4, r20	; 0x04
    nrf24_csn_digitalWrite(LOW);
    2f36:	80 e0       	ldi	r24, 0x00	; 0
    2f38:	0e 94 25 18 	call	0x304a	; 0x304a <nrf24_csn_digitalWrite>
    spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
    2f3c:	89 81       	ldd	r24, Y+1	; 0x01
    2f3e:	8f 71       	andi	r24, 0x1F	; 31
    2f40:	80 62       	ori	r24, 0x20	; 32
    2f42:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <spi_transfer>
    nrf24_transmitSync(value,len);
    2f46:	8a 81       	ldd	r24, Y+2	; 0x02
    2f48:	9b 81       	ldd	r25, Y+3	; 0x03
    2f4a:	6c 81       	ldd	r22, Y+4	; 0x04
    2f4c:	0e 94 30 17 	call	0x2e60	; 0x2e60 <nrf24_transmitSync>
    nrf24_csn_digitalWrite(HIGH);
    2f50:	81 e0       	ldi	r24, 0x01	; 1
    2f52:	0e 94 25 18 	call	0x304a	; 0x304a <nrf24_csn_digitalWrite>
}
    2f56:	0f 90       	pop	r0
    2f58:	0f 90       	pop	r0
    2f5a:	0f 90       	pop	r0
    2f5c:	0f 90       	pop	r0
    2f5e:	cf 91       	pop	r28
    2f60:	df 91       	pop	r29
    2f62:	08 95       	ret

00002f64 <nrf24_checkRegister>:

/* Check single register from nrf24 */
bool nrf24_checkRegister(uint8_t reg, uint8_t desiredValue, uint8_t len)
{
    2f64:	df 93       	push	r29
    2f66:	cf 93       	push	r28
    2f68:	00 d0       	rcall	.+0      	; 0x2f6a <nrf24_checkRegister+0x6>
    2f6a:	00 d0       	rcall	.+0      	; 0x2f6c <nrf24_checkRegister+0x8>
    2f6c:	cd b7       	in	r28, 0x3d	; 61
    2f6e:	de b7       	in	r29, 0x3e	; 62
    2f70:	8a 83       	std	Y+2, r24	; 0x02
    2f72:	6b 83       	std	Y+3, r22	; 0x03
    2f74:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t registerValue;
	nrf24_readRegister(reg,&registerValue,len);
    2f76:	8a 81       	ldd	r24, Y+2	; 0x02
    2f78:	9e 01       	movw	r18, r28
    2f7a:	2f 5f       	subi	r18, 0xFF	; 255
    2f7c:	3f 4f       	sbci	r19, 0xFF	; 255
    2f7e:	b9 01       	movw	r22, r18
    2f80:	4c 81       	ldd	r20, Y+4	; 0x04
    2f82:	0e 94 6e 17 	call	0x2edc	; 0x2edc <nrf24_readRegister>
	if (registerValue==desiredValue) { return true; } else { return false; }
    2f86:	99 81       	ldd	r25, Y+1	; 0x01
    2f88:	8b 81       	ldd	r24, Y+3	; 0x03
    2f8a:	98 17       	cp	r25, r24
    2f8c:	11 f4       	brne	.+4      	; 0x2f92 <nrf24_checkRegister+0x2e>
    2f8e:	81 e0       	ldi	r24, 0x01	; 1
    2f90:	01 c0       	rjmp	.+2      	; 0x2f94 <nrf24_checkRegister+0x30>
    2f92:	80 e0       	ldi	r24, 0x00	; 0
}
    2f94:	0f 90       	pop	r0
    2f96:	0f 90       	pop	r0
    2f98:	0f 90       	pop	r0
    2f9a:	0f 90       	pop	r0
    2f9c:	cf 91       	pop	r28
    2f9e:	df 91       	pop	r29
    2fa0:	08 95       	ret

00002fa2 <nrf24_setupPins>:
#define check_bit(reg,bit) (reg&(1<<bit))

/* ------------------------------------------------------------------------- */

void nrf24_setupPins()
{
    2fa2:	df 93       	push	r29
    2fa4:	cf 93       	push	r28
    2fa6:	cd b7       	in	r28, 0x3d	; 61
    2fa8:	de b7       	in	r29, 0x3e	; 62
	set_bit(RF_DDR,0); // CE output
    2faa:	87 e2       	ldi	r24, 0x27	; 39
    2fac:	90 e0       	ldi	r25, 0x00	; 0
    2fae:	27 e2       	ldi	r18, 0x27	; 39
    2fb0:	30 e0       	ldi	r19, 0x00	; 0
    2fb2:	f9 01       	movw	r30, r18
    2fb4:	20 81       	ld	r18, Z
    2fb6:	21 60       	ori	r18, 0x01	; 1
    2fb8:	fc 01       	movw	r30, r24
    2fba:	20 83       	st	Z, r18
	set_bit(RF_DDR,1); // CSN output
    2fbc:	87 e2       	ldi	r24, 0x27	; 39
    2fbe:	90 e0       	ldi	r25, 0x00	; 0
    2fc0:	27 e2       	ldi	r18, 0x27	; 39
    2fc2:	30 e0       	ldi	r19, 0x00	; 0
    2fc4:	f9 01       	movw	r30, r18
    2fc6:	20 81       	ld	r18, Z
    2fc8:	22 60       	ori	r18, 0x02	; 2
    2fca:	fc 01       	movw	r30, r24
    2fcc:	20 83       	st	Z, r18
	set_bit(RF_DDR,2); // SCK output
    2fce:	87 e2       	ldi	r24, 0x27	; 39
    2fd0:	90 e0       	ldi	r25, 0x00	; 0
    2fd2:	27 e2       	ldi	r18, 0x27	; 39
    2fd4:	30 e0       	ldi	r19, 0x00	; 0
    2fd6:	f9 01       	movw	r30, r18
    2fd8:	20 81       	ld	r18, Z
    2fda:	24 60       	ori	r18, 0x04	; 4
    2fdc:	fc 01       	movw	r30, r24
    2fde:	20 83       	st	Z, r18
	set_bit(RF_DDR,3); // MOSI output
    2fe0:	87 e2       	ldi	r24, 0x27	; 39
    2fe2:	90 e0       	ldi	r25, 0x00	; 0
    2fe4:	27 e2       	ldi	r18, 0x27	; 39
    2fe6:	30 e0       	ldi	r19, 0x00	; 0
    2fe8:	f9 01       	movw	r30, r18
    2fea:	20 81       	ld	r18, Z
    2fec:	28 60       	ori	r18, 0x08	; 8
    2fee:	fc 01       	movw	r30, r24
    2ff0:	20 83       	st	Z, r18
	clr_bit(RF_DDR,4); // MISO input
    2ff2:	87 e2       	ldi	r24, 0x27	; 39
    2ff4:	90 e0       	ldi	r25, 0x00	; 0
    2ff6:	27 e2       	ldi	r18, 0x27	; 39
    2ff8:	30 e0       	ldi	r19, 0x00	; 0
    2ffa:	f9 01       	movw	r30, r18
    2ffc:	20 81       	ld	r18, Z
    2ffe:	2f 7e       	andi	r18, 0xEF	; 239
    3000:	fc 01       	movw	r30, r24
    3002:	20 83       	st	Z, r18
}
    3004:	cf 91       	pop	r28
    3006:	df 91       	pop	r29
    3008:	08 95       	ret

0000300a <nrf24_ce_digitalWrite>:
/* ------------------------------------------------------------------------- */
void nrf24_ce_digitalWrite(uint8_t state)
{
    300a:	df 93       	push	r29
    300c:	cf 93       	push	r28
    300e:	0f 92       	push	r0
    3010:	cd b7       	in	r28, 0x3d	; 61
    3012:	de b7       	in	r29, 0x3e	; 62
    3014:	89 83       	std	Y+1, r24	; 0x01
	if(state)
    3016:	89 81       	ldd	r24, Y+1	; 0x01
    3018:	88 23       	and	r24, r24
    301a:	51 f0       	breq	.+20     	; 0x3030 <nrf24_ce_digitalWrite+0x26>
	{
		set_bit(RF_PORT,0);
    301c:	88 e2       	ldi	r24, 0x28	; 40
    301e:	90 e0       	ldi	r25, 0x00	; 0
    3020:	28 e2       	ldi	r18, 0x28	; 40
    3022:	30 e0       	ldi	r19, 0x00	; 0
    3024:	f9 01       	movw	r30, r18
    3026:	20 81       	ld	r18, Z
    3028:	21 60       	ori	r18, 0x01	; 1
    302a:	fc 01       	movw	r30, r24
    302c:	20 83       	st	Z, r18
    302e:	09 c0       	rjmp	.+18     	; 0x3042 <nrf24_ce_digitalWrite+0x38>
	}
	else
	{
		clr_bit(RF_PORT,0);
    3030:	88 e2       	ldi	r24, 0x28	; 40
    3032:	90 e0       	ldi	r25, 0x00	; 0
    3034:	28 e2       	ldi	r18, 0x28	; 40
    3036:	30 e0       	ldi	r19, 0x00	; 0
    3038:	f9 01       	movw	r30, r18
    303a:	20 81       	ld	r18, Z
    303c:	2e 7f       	andi	r18, 0xFE	; 254
    303e:	fc 01       	movw	r30, r24
    3040:	20 83       	st	Z, r18
	}
}
    3042:	0f 90       	pop	r0
    3044:	cf 91       	pop	r28
    3046:	df 91       	pop	r29
    3048:	08 95       	ret

0000304a <nrf24_csn_digitalWrite>:
/* ------------------------------------------------------------------------- */
void nrf24_csn_digitalWrite(uint8_t state)
{
    304a:	df 93       	push	r29
    304c:	cf 93       	push	r28
    304e:	0f 92       	push	r0
    3050:	cd b7       	in	r28, 0x3d	; 61
    3052:	de b7       	in	r29, 0x3e	; 62
    3054:	89 83       	std	Y+1, r24	; 0x01
	if(state)
    3056:	89 81       	ldd	r24, Y+1	; 0x01
    3058:	88 23       	and	r24, r24
    305a:	51 f0       	breq	.+20     	; 0x3070 <nrf24_csn_digitalWrite+0x26>
	{
		set_bit(RF_PORT,1);
    305c:	88 e2       	ldi	r24, 0x28	; 40
    305e:	90 e0       	ldi	r25, 0x00	; 0
    3060:	28 e2       	ldi	r18, 0x28	; 40
    3062:	30 e0       	ldi	r19, 0x00	; 0
    3064:	f9 01       	movw	r30, r18
    3066:	20 81       	ld	r18, Z
    3068:	22 60       	ori	r18, 0x02	; 2
    306a:	fc 01       	movw	r30, r24
    306c:	20 83       	st	Z, r18
    306e:	09 c0       	rjmp	.+18     	; 0x3082 <nrf24_csn_digitalWrite+0x38>
	}
	else
	{
		clr_bit(RF_PORT,1);
    3070:	88 e2       	ldi	r24, 0x28	; 40
    3072:	90 e0       	ldi	r25, 0x00	; 0
    3074:	28 e2       	ldi	r18, 0x28	; 40
    3076:	30 e0       	ldi	r19, 0x00	; 0
    3078:	f9 01       	movw	r30, r18
    307a:	20 81       	ld	r18, Z
    307c:	2d 7f       	andi	r18, 0xFD	; 253
    307e:	fc 01       	movw	r30, r24
    3080:	20 83       	st	Z, r18
	}
}
    3082:	0f 90       	pop	r0
    3084:	cf 91       	pop	r28
    3086:	df 91       	pop	r29
    3088:	08 95       	ret

0000308a <nrf24_sck_digitalWrite>:
/* ------------------------------------------------------------------------- */
void nrf24_sck_digitalWrite(uint8_t state)
{
    308a:	df 93       	push	r29
    308c:	cf 93       	push	r28
    308e:	0f 92       	push	r0
    3090:	cd b7       	in	r28, 0x3d	; 61
    3092:	de b7       	in	r29, 0x3e	; 62
    3094:	89 83       	std	Y+1, r24	; 0x01
	if(state)
    3096:	89 81       	ldd	r24, Y+1	; 0x01
    3098:	88 23       	and	r24, r24
    309a:	51 f0       	breq	.+20     	; 0x30b0 <nrf24_sck_digitalWrite+0x26>
	{
		set_bit(RF_PORT,2);
    309c:	88 e2       	ldi	r24, 0x28	; 40
    309e:	90 e0       	ldi	r25, 0x00	; 0
    30a0:	28 e2       	ldi	r18, 0x28	; 40
    30a2:	30 e0       	ldi	r19, 0x00	; 0
    30a4:	f9 01       	movw	r30, r18
    30a6:	20 81       	ld	r18, Z
    30a8:	24 60       	ori	r18, 0x04	; 4
    30aa:	fc 01       	movw	r30, r24
    30ac:	20 83       	st	Z, r18
    30ae:	09 c0       	rjmp	.+18     	; 0x30c2 <nrf24_sck_digitalWrite+0x38>
	}
	else
	{
		clr_bit(RF_PORT,2);
    30b0:	88 e2       	ldi	r24, 0x28	; 40
    30b2:	90 e0       	ldi	r25, 0x00	; 0
    30b4:	28 e2       	ldi	r18, 0x28	; 40
    30b6:	30 e0       	ldi	r19, 0x00	; 0
    30b8:	f9 01       	movw	r30, r18
    30ba:	20 81       	ld	r18, Z
    30bc:	2b 7f       	andi	r18, 0xFB	; 251
    30be:	fc 01       	movw	r30, r24
    30c0:	20 83       	st	Z, r18
	}
}
    30c2:	0f 90       	pop	r0
    30c4:	cf 91       	pop	r28
    30c6:	df 91       	pop	r29
    30c8:	08 95       	ret

000030ca <nrf24_mosi_digitalWrite>:
/* ------------------------------------------------------------------------- */
void nrf24_mosi_digitalWrite(uint8_t state)
{
    30ca:	df 93       	push	r29
    30cc:	cf 93       	push	r28
    30ce:	0f 92       	push	r0
    30d0:	cd b7       	in	r28, 0x3d	; 61
    30d2:	de b7       	in	r29, 0x3e	; 62
    30d4:	89 83       	std	Y+1, r24	; 0x01
	if(state)
    30d6:	89 81       	ldd	r24, Y+1	; 0x01
    30d8:	88 23       	and	r24, r24
    30da:	51 f0       	breq	.+20     	; 0x30f0 <nrf24_mosi_digitalWrite+0x26>
	{
		set_bit(RF_PORT,3);
    30dc:	88 e2       	ldi	r24, 0x28	; 40
    30de:	90 e0       	ldi	r25, 0x00	; 0
    30e0:	28 e2       	ldi	r18, 0x28	; 40
    30e2:	30 e0       	ldi	r19, 0x00	; 0
    30e4:	f9 01       	movw	r30, r18
    30e6:	20 81       	ld	r18, Z
    30e8:	28 60       	ori	r18, 0x08	; 8
    30ea:	fc 01       	movw	r30, r24
    30ec:	20 83       	st	Z, r18
    30ee:	09 c0       	rjmp	.+18     	; 0x3102 <nrf24_mosi_digitalWrite+0x38>
	}
	else
	{
		clr_bit(RF_PORT,3);
    30f0:	88 e2       	ldi	r24, 0x28	; 40
    30f2:	90 e0       	ldi	r25, 0x00	; 0
    30f4:	28 e2       	ldi	r18, 0x28	; 40
    30f6:	30 e0       	ldi	r19, 0x00	; 0
    30f8:	f9 01       	movw	r30, r18
    30fa:	20 81       	ld	r18, Z
    30fc:	27 7f       	andi	r18, 0xF7	; 247
    30fe:	fc 01       	movw	r30, r24
    3100:	20 83       	st	Z, r18
	}
}
    3102:	0f 90       	pop	r0
    3104:	cf 91       	pop	r28
    3106:	df 91       	pop	r29
    3108:	08 95       	ret

0000310a <nrf24_miso_digitalRead>:
/* ------------------------------------------------------------------------- */
uint8_t nrf24_miso_digitalRead()
{
    310a:	df 93       	push	r29
    310c:	cf 93       	push	r28
    310e:	cd b7       	in	r28, 0x3d	; 61
    3110:	de b7       	in	r29, 0x3e	; 62
	return check_bit(RF_PIN,4);
    3112:	86 e2       	ldi	r24, 0x26	; 38
    3114:	90 e0       	ldi	r25, 0x00	; 0
    3116:	fc 01       	movw	r30, r24
    3118:	80 81       	ld	r24, Z
    311a:	80 71       	andi	r24, 0x10	; 16
}
    311c:	cf 91       	pop	r28
    311e:	df 91       	pop	r29
    3120:	08 95       	ret

00003122 <nrf24_initRF_SAFE>:
/* ------------------------------------------------------------------------- */

void nrf24_initRF_SAFE(uint8_t boardIndex,TransmissionMode initMode){
    3122:	df 93       	push	r29
    3124:	cf 93       	push	r28
    3126:	00 d0       	rcall	.+0      	; 0x3128 <nrf24_initRF_SAFE+0x6>
    3128:	0f 92       	push	r0
    312a:	cd b7       	in	r28, 0x3d	; 61
    312c:	de b7       	in	r29, 0x3e	; 62
    312e:	8a 83       	std	Y+2, r24	; 0x02
    3130:	6b 83       	std	Y+3, r22	; 0x03

	initliazeMemory();
    3132:	0e 94 66 00 	call	0xcc	; 0xcc <initliazeMemory>
	bool successfulRfInit = false;
    3136:	19 82       	std	Y+1, r1	; 0x01
	
	while(successfulRfInit==false){
    3138:	12 c0       	rjmp	.+36     	; 0x315e <nrf24_initRF_SAFE+0x3c>
		nrf24_powerDown();
    313a:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <nrf24_powerDown>
		nrf24_init();
    313e:	0e 94 43 13 	call	0x2686	; 0x2686 <nrf24_init>
		nrf24_config(GENERAL_RF_CHANNEL,32);
    3142:	80 91 1d 01 	lds	r24, 0x011D
    3146:	60 e2       	ldi	r22, 0x20	; 32
    3148:	0e 94 52 13 	call	0x26a4	; 0x26a4 <nrf24_config>
		if (nrf24_checkConfig()) { successfulRfInit = true; } else { faultyRF_Alarm(); }
    314c:	0e 94 9a 13 	call	0x2734	; 0x2734 <nrf24_checkConfig>
    3150:	88 23       	and	r24, r24
    3152:	19 f0       	breq	.+6      	; 0x315a <nrf24_initRF_SAFE+0x38>
    3154:	81 e0       	ldi	r24, 0x01	; 1
    3156:	89 83       	std	Y+1, r24	; 0x01
    3158:	02 c0       	rjmp	.+4      	; 0x315e <nrf24_initRF_SAFE+0x3c>
    315a:	0e 94 49 14 	call	0x2892	; 0x2892 <faultyRF_Alarm>
void nrf24_initRF_SAFE(uint8_t boardIndex,TransmissionMode initMode){

	initliazeMemory();
	bool successfulRfInit = false;
	
	while(successfulRfInit==false){
    315e:	99 81       	ldd	r25, Y+1	; 0x01
    3160:	81 e0       	ldi	r24, 0x01	; 1
    3162:	89 27       	eor	r24, r25
    3164:	88 23       	and	r24, r24
    3166:	49 f7       	brne	.-46     	; 0x313a <nrf24_initRF_SAFE+0x18>
		nrf24_init();
		nrf24_config(GENERAL_RF_CHANNEL,32);
		if (nrf24_checkConfig()) { successfulRfInit = true; } else { faultyRF_Alarm(); }
	}
	
	if (initMode==TRANSMIT){
    3168:	8b 81       	ldd	r24, Y+3	; 0x03
    316a:	81 30       	cpi	r24, 0x01	; 1
    316c:	99 f4       	brne	.+38     	; 0x3194 <nrf24_initRF_SAFE+0x72>
		nrf24_tx_address(CURRENT_BOARD_ADDRESS);
    316e:	80 91 1b 01 	lds	r24, 0x011B
    3172:	90 91 1c 01 	lds	r25, 0x011C
    3176:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <nrf24_tx_address>
		nrf24_rx_address(BOARD_ADDRESS[boardIndex]);
    317a:	8a 81       	ldd	r24, Y+2	; 0x02
    317c:	88 2f       	mov	r24, r24
    317e:	90 e0       	ldi	r25, 0x00	; 0
    3180:	88 0f       	add	r24, r24
    3182:	99 1f       	adc	r25, r25
    3184:	8b 5e       	subi	r24, 0xEB	; 235
    3186:	9e 4f       	sbci	r25, 0xFE	; 254
    3188:	fc 01       	movw	r30, r24
    318a:	80 81       	ld	r24, Z
    318c:	91 81       	ldd	r25, Z+1	; 0x01
    318e:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <nrf24_rx_address>
    3192:	12 c0       	rjmp	.+36     	; 0x31b8 <nrf24_initRF_SAFE+0x96>
		}else{
		nrf24_tx_address(BOARD_ADDRESS[boardIndex]);
    3194:	8a 81       	ldd	r24, Y+2	; 0x02
    3196:	88 2f       	mov	r24, r24
    3198:	90 e0       	ldi	r25, 0x00	; 0
    319a:	88 0f       	add	r24, r24
    319c:	99 1f       	adc	r25, r25
    319e:	8b 5e       	subi	r24, 0xEB	; 235
    31a0:	9e 4f       	sbci	r25, 0xFE	; 254
    31a2:	fc 01       	movw	r30, r24
    31a4:	80 81       	ld	r24, Z
    31a6:	91 81       	ldd	r25, Z+1	; 0x01
    31a8:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <nrf24_tx_address>
		nrf24_rx_address(CURRENT_BOARD_ADDRESS);
    31ac:	80 91 1b 01 	lds	r24, 0x011B
    31b0:	90 91 1c 01 	lds	r25, 0x011C
    31b4:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <nrf24_rx_address>
	}
	nrf24_powerUpRx();
    31b8:	0e 94 76 16 	call	0x2cec	; 0x2cec <nrf24_powerUpRx>
    31bc:	0f 90       	pop	r0
    31be:	0f 90       	pop	r0
    31c0:	0f 90       	pop	r0
    31c2:	cf 91       	pop	r28
    31c4:	df 91       	pop	r29
    31c6:	08 95       	ret

000031c8 <__cmpsf2>:
    31c8:	2f d0       	rcall	.+94     	; 0x3228 <__fp_cmp>
    31ca:	08 f4       	brcc	.+2      	; 0x31ce <__cmpsf2+0x6>
    31cc:	81 e0       	ldi	r24, 0x01	; 1
    31ce:	08 95       	ret

000031d0 <__fixunssfsi>:
    31d0:	57 d0       	rcall	.+174    	; 0x3280 <__fp_splitA>
    31d2:	88 f0       	brcs	.+34     	; 0x31f6 <__fixunssfsi+0x26>
    31d4:	9f 57       	subi	r25, 0x7F	; 127
    31d6:	90 f0       	brcs	.+36     	; 0x31fc <__fixunssfsi+0x2c>
    31d8:	b9 2f       	mov	r27, r25
    31da:	99 27       	eor	r25, r25
    31dc:	b7 51       	subi	r27, 0x17	; 23
    31de:	a0 f0       	brcs	.+40     	; 0x3208 <__fixunssfsi+0x38>
    31e0:	d1 f0       	breq	.+52     	; 0x3216 <__fixunssfsi+0x46>
    31e2:	66 0f       	add	r22, r22
    31e4:	77 1f       	adc	r23, r23
    31e6:	88 1f       	adc	r24, r24
    31e8:	99 1f       	adc	r25, r25
    31ea:	1a f0       	brmi	.+6      	; 0x31f2 <__fixunssfsi+0x22>
    31ec:	ba 95       	dec	r27
    31ee:	c9 f7       	brne	.-14     	; 0x31e2 <__fixunssfsi+0x12>
    31f0:	12 c0       	rjmp	.+36     	; 0x3216 <__fixunssfsi+0x46>
    31f2:	b1 30       	cpi	r27, 0x01	; 1
    31f4:	81 f0       	breq	.+32     	; 0x3216 <__fixunssfsi+0x46>
    31f6:	5e d0       	rcall	.+188    	; 0x32b4 <__fp_zero>
    31f8:	b1 e0       	ldi	r27, 0x01	; 1
    31fa:	08 95       	ret
    31fc:	5b c0       	rjmp	.+182    	; 0x32b4 <__fp_zero>
    31fe:	67 2f       	mov	r22, r23
    3200:	78 2f       	mov	r23, r24
    3202:	88 27       	eor	r24, r24
    3204:	b8 5f       	subi	r27, 0xF8	; 248
    3206:	39 f0       	breq	.+14     	; 0x3216 <__fixunssfsi+0x46>
    3208:	b9 3f       	cpi	r27, 0xF9	; 249
    320a:	cc f3       	brlt	.-14     	; 0x31fe <__fixunssfsi+0x2e>
    320c:	86 95       	lsr	r24
    320e:	77 95       	ror	r23
    3210:	67 95       	ror	r22
    3212:	b3 95       	inc	r27
    3214:	d9 f7       	brne	.-10     	; 0x320c <__fixunssfsi+0x3c>
    3216:	3e f4       	brtc	.+14     	; 0x3226 <__fixunssfsi+0x56>
    3218:	90 95       	com	r25
    321a:	80 95       	com	r24
    321c:	70 95       	com	r23
    321e:	61 95       	neg	r22
    3220:	7f 4f       	sbci	r23, 0xFF	; 255
    3222:	8f 4f       	sbci	r24, 0xFF	; 255
    3224:	9f 4f       	sbci	r25, 0xFF	; 255
    3226:	08 95       	ret

00003228 <__fp_cmp>:
    3228:	99 0f       	add	r25, r25
    322a:	00 08       	sbc	r0, r0
    322c:	55 0f       	add	r21, r21
    322e:	aa 0b       	sbc	r26, r26
    3230:	e0 e8       	ldi	r30, 0x80	; 128
    3232:	fe ef       	ldi	r31, 0xFE	; 254
    3234:	16 16       	cp	r1, r22
    3236:	17 06       	cpc	r1, r23
    3238:	e8 07       	cpc	r30, r24
    323a:	f9 07       	cpc	r31, r25
    323c:	c0 f0       	brcs	.+48     	; 0x326e <__fp_cmp+0x46>
    323e:	12 16       	cp	r1, r18
    3240:	13 06       	cpc	r1, r19
    3242:	e4 07       	cpc	r30, r20
    3244:	f5 07       	cpc	r31, r21
    3246:	98 f0       	brcs	.+38     	; 0x326e <__fp_cmp+0x46>
    3248:	62 1b       	sub	r22, r18
    324a:	73 0b       	sbc	r23, r19
    324c:	84 0b       	sbc	r24, r20
    324e:	95 0b       	sbc	r25, r21
    3250:	39 f4       	brne	.+14     	; 0x3260 <__fp_cmp+0x38>
    3252:	0a 26       	eor	r0, r26
    3254:	61 f0       	breq	.+24     	; 0x326e <__fp_cmp+0x46>
    3256:	23 2b       	or	r18, r19
    3258:	24 2b       	or	r18, r20
    325a:	25 2b       	or	r18, r21
    325c:	21 f4       	brne	.+8      	; 0x3266 <__fp_cmp+0x3e>
    325e:	08 95       	ret
    3260:	0a 26       	eor	r0, r26
    3262:	09 f4       	brne	.+2      	; 0x3266 <__fp_cmp+0x3e>
    3264:	a1 40       	sbci	r26, 0x01	; 1
    3266:	a6 95       	lsr	r26
    3268:	8f ef       	ldi	r24, 0xFF	; 255
    326a:	81 1d       	adc	r24, r1
    326c:	81 1d       	adc	r24, r1
    326e:	08 95       	ret

00003270 <__fp_split3>:
    3270:	57 fd       	sbrc	r21, 7
    3272:	90 58       	subi	r25, 0x80	; 128
    3274:	44 0f       	add	r20, r20
    3276:	55 1f       	adc	r21, r21
    3278:	59 f0       	breq	.+22     	; 0x3290 <__fp_splitA+0x10>
    327a:	5f 3f       	cpi	r21, 0xFF	; 255
    327c:	71 f0       	breq	.+28     	; 0x329a <__fp_splitA+0x1a>
    327e:	47 95       	ror	r20

00003280 <__fp_splitA>:
    3280:	88 0f       	add	r24, r24
    3282:	97 fb       	bst	r25, 7
    3284:	99 1f       	adc	r25, r25
    3286:	61 f0       	breq	.+24     	; 0x32a0 <__fp_splitA+0x20>
    3288:	9f 3f       	cpi	r25, 0xFF	; 255
    328a:	79 f0       	breq	.+30     	; 0x32aa <__fp_splitA+0x2a>
    328c:	87 95       	ror	r24
    328e:	08 95       	ret
    3290:	12 16       	cp	r1, r18
    3292:	13 06       	cpc	r1, r19
    3294:	14 06       	cpc	r1, r20
    3296:	55 1f       	adc	r21, r21
    3298:	f2 cf       	rjmp	.-28     	; 0x327e <__fp_split3+0xe>
    329a:	46 95       	lsr	r20
    329c:	f1 df       	rcall	.-30     	; 0x3280 <__fp_splitA>
    329e:	08 c0       	rjmp	.+16     	; 0x32b0 <__fp_splitA+0x30>
    32a0:	16 16       	cp	r1, r22
    32a2:	17 06       	cpc	r1, r23
    32a4:	18 06       	cpc	r1, r24
    32a6:	99 1f       	adc	r25, r25
    32a8:	f1 cf       	rjmp	.-30     	; 0x328c <__fp_splitA+0xc>
    32aa:	86 95       	lsr	r24
    32ac:	71 05       	cpc	r23, r1
    32ae:	61 05       	cpc	r22, r1
    32b0:	08 94       	sec
    32b2:	08 95       	ret

000032b4 <__fp_zero>:
    32b4:	e8 94       	clt

000032b6 <__fp_szero>:
    32b6:	bb 27       	eor	r27, r27
    32b8:	66 27       	eor	r22, r22
    32ba:	77 27       	eor	r23, r23
    32bc:	cb 01       	movw	r24, r22
    32be:	97 f9       	bld	r25, 7
    32c0:	08 95       	ret

000032c2 <__gesf2>:
    32c2:	b2 df       	rcall	.-156    	; 0x3228 <__fp_cmp>
    32c4:	08 f4       	brcc	.+2      	; 0x32c8 <__gesf2+0x6>
    32c6:	8f ef       	ldi	r24, 0xFF	; 255
    32c8:	08 95       	ret

000032ca <__mulsf3>:
    32ca:	0b d0       	rcall	.+22     	; 0x32e2 <__mulsf3x>
    32cc:	78 c0       	rjmp	.+240    	; 0x33be <__fp_round>
    32ce:	69 d0       	rcall	.+210    	; 0x33a2 <__fp_pscA>
    32d0:	28 f0       	brcs	.+10     	; 0x32dc <__mulsf3+0x12>
    32d2:	6e d0       	rcall	.+220    	; 0x33b0 <__fp_pscB>
    32d4:	18 f0       	brcs	.+6      	; 0x32dc <__mulsf3+0x12>
    32d6:	95 23       	and	r25, r21
    32d8:	09 f0       	breq	.+2      	; 0x32dc <__mulsf3+0x12>
    32da:	5a c0       	rjmp	.+180    	; 0x3390 <__fp_inf>
    32dc:	5f c0       	rjmp	.+190    	; 0x339c <__fp_nan>
    32de:	11 24       	eor	r1, r1
    32e0:	ea cf       	rjmp	.-44     	; 0x32b6 <__fp_szero>

000032e2 <__mulsf3x>:
    32e2:	c6 df       	rcall	.-116    	; 0x3270 <__fp_split3>
    32e4:	a0 f3       	brcs	.-24     	; 0x32ce <__mulsf3+0x4>

000032e6 <__mulsf3_pse>:
    32e6:	95 9f       	mul	r25, r21
    32e8:	d1 f3       	breq	.-12     	; 0x32de <__mulsf3+0x14>
    32ea:	95 0f       	add	r25, r21
    32ec:	50 e0       	ldi	r21, 0x00	; 0
    32ee:	55 1f       	adc	r21, r21
    32f0:	62 9f       	mul	r22, r18
    32f2:	f0 01       	movw	r30, r0
    32f4:	72 9f       	mul	r23, r18
    32f6:	bb 27       	eor	r27, r27
    32f8:	f0 0d       	add	r31, r0
    32fa:	b1 1d       	adc	r27, r1
    32fc:	63 9f       	mul	r22, r19
    32fe:	aa 27       	eor	r26, r26
    3300:	f0 0d       	add	r31, r0
    3302:	b1 1d       	adc	r27, r1
    3304:	aa 1f       	adc	r26, r26
    3306:	64 9f       	mul	r22, r20
    3308:	66 27       	eor	r22, r22
    330a:	b0 0d       	add	r27, r0
    330c:	a1 1d       	adc	r26, r1
    330e:	66 1f       	adc	r22, r22
    3310:	82 9f       	mul	r24, r18
    3312:	22 27       	eor	r18, r18
    3314:	b0 0d       	add	r27, r0
    3316:	a1 1d       	adc	r26, r1
    3318:	62 1f       	adc	r22, r18
    331a:	73 9f       	mul	r23, r19
    331c:	b0 0d       	add	r27, r0
    331e:	a1 1d       	adc	r26, r1
    3320:	62 1f       	adc	r22, r18
    3322:	83 9f       	mul	r24, r19
    3324:	a0 0d       	add	r26, r0
    3326:	61 1d       	adc	r22, r1
    3328:	22 1f       	adc	r18, r18
    332a:	74 9f       	mul	r23, r20
    332c:	33 27       	eor	r19, r19
    332e:	a0 0d       	add	r26, r0
    3330:	61 1d       	adc	r22, r1
    3332:	23 1f       	adc	r18, r19
    3334:	84 9f       	mul	r24, r20
    3336:	60 0d       	add	r22, r0
    3338:	21 1d       	adc	r18, r1
    333a:	82 2f       	mov	r24, r18
    333c:	76 2f       	mov	r23, r22
    333e:	6a 2f       	mov	r22, r26
    3340:	11 24       	eor	r1, r1
    3342:	9f 57       	subi	r25, 0x7F	; 127
    3344:	50 40       	sbci	r21, 0x00	; 0
    3346:	8a f0       	brmi	.+34     	; 0x336a <__mulsf3_pse+0x84>
    3348:	e1 f0       	breq	.+56     	; 0x3382 <__mulsf3_pse+0x9c>
    334a:	88 23       	and	r24, r24
    334c:	4a f0       	brmi	.+18     	; 0x3360 <__mulsf3_pse+0x7a>
    334e:	ee 0f       	add	r30, r30
    3350:	ff 1f       	adc	r31, r31
    3352:	bb 1f       	adc	r27, r27
    3354:	66 1f       	adc	r22, r22
    3356:	77 1f       	adc	r23, r23
    3358:	88 1f       	adc	r24, r24
    335a:	91 50       	subi	r25, 0x01	; 1
    335c:	50 40       	sbci	r21, 0x00	; 0
    335e:	a9 f7       	brne	.-22     	; 0x334a <__mulsf3_pse+0x64>
    3360:	9e 3f       	cpi	r25, 0xFE	; 254
    3362:	51 05       	cpc	r21, r1
    3364:	70 f0       	brcs	.+28     	; 0x3382 <__mulsf3_pse+0x9c>
    3366:	14 c0       	rjmp	.+40     	; 0x3390 <__fp_inf>
    3368:	a6 cf       	rjmp	.-180    	; 0x32b6 <__fp_szero>
    336a:	5f 3f       	cpi	r21, 0xFF	; 255
    336c:	ec f3       	brlt	.-6      	; 0x3368 <__mulsf3_pse+0x82>
    336e:	98 3e       	cpi	r25, 0xE8	; 232
    3370:	dc f3       	brlt	.-10     	; 0x3368 <__mulsf3_pse+0x82>
    3372:	86 95       	lsr	r24
    3374:	77 95       	ror	r23
    3376:	67 95       	ror	r22
    3378:	b7 95       	ror	r27
    337a:	f7 95       	ror	r31
    337c:	e7 95       	ror	r30
    337e:	9f 5f       	subi	r25, 0xFF	; 255
    3380:	c1 f7       	brne	.-16     	; 0x3372 <__mulsf3_pse+0x8c>
    3382:	fe 2b       	or	r31, r30
    3384:	88 0f       	add	r24, r24
    3386:	91 1d       	adc	r25, r1
    3388:	96 95       	lsr	r25
    338a:	87 95       	ror	r24
    338c:	97 f9       	bld	r25, 7
    338e:	08 95       	ret

00003390 <__fp_inf>:
    3390:	97 f9       	bld	r25, 7
    3392:	9f 67       	ori	r25, 0x7F	; 127
    3394:	80 e8       	ldi	r24, 0x80	; 128
    3396:	70 e0       	ldi	r23, 0x00	; 0
    3398:	60 e0       	ldi	r22, 0x00	; 0
    339a:	08 95       	ret

0000339c <__fp_nan>:
    339c:	9f ef       	ldi	r25, 0xFF	; 255
    339e:	80 ec       	ldi	r24, 0xC0	; 192
    33a0:	08 95       	ret

000033a2 <__fp_pscA>:
    33a2:	00 24       	eor	r0, r0
    33a4:	0a 94       	dec	r0
    33a6:	16 16       	cp	r1, r22
    33a8:	17 06       	cpc	r1, r23
    33aa:	18 06       	cpc	r1, r24
    33ac:	09 06       	cpc	r0, r25
    33ae:	08 95       	ret

000033b0 <__fp_pscB>:
    33b0:	00 24       	eor	r0, r0
    33b2:	0a 94       	dec	r0
    33b4:	12 16       	cp	r1, r18
    33b6:	13 06       	cpc	r1, r19
    33b8:	14 06       	cpc	r1, r20
    33ba:	05 06       	cpc	r0, r21
    33bc:	08 95       	ret

000033be <__fp_round>:
    33be:	09 2e       	mov	r0, r25
    33c0:	03 94       	inc	r0
    33c2:	00 0c       	add	r0, r0
    33c4:	11 f4       	brne	.+4      	; 0x33ca <__fp_round+0xc>
    33c6:	88 23       	and	r24, r24
    33c8:	52 f0       	brmi	.+20     	; 0x33de <__fp_round+0x20>
    33ca:	bb 0f       	add	r27, r27
    33cc:	40 f4       	brcc	.+16     	; 0x33de <__fp_round+0x20>
    33ce:	bf 2b       	or	r27, r31
    33d0:	11 f4       	brne	.+4      	; 0x33d6 <__fp_round+0x18>
    33d2:	60 ff       	sbrs	r22, 0
    33d4:	04 c0       	rjmp	.+8      	; 0x33de <__fp_round+0x20>
    33d6:	6f 5f       	subi	r22, 0xFF	; 255
    33d8:	7f 4f       	sbci	r23, 0xFF	; 255
    33da:	8f 4f       	sbci	r24, 0xFF	; 255
    33dc:	9f 4f       	sbci	r25, 0xFF	; 255
    33de:	08 95       	ret

000033e0 <calloc>:
    33e0:	ef 92       	push	r14
    33e2:	ff 92       	push	r15
    33e4:	0f 93       	push	r16
    33e6:	1f 93       	push	r17
    33e8:	cf 93       	push	r28
    33ea:	df 93       	push	r29
    33ec:	68 9f       	mul	r22, r24
    33ee:	80 01       	movw	r16, r0
    33f0:	69 9f       	mul	r22, r25
    33f2:	10 0d       	add	r17, r0
    33f4:	78 9f       	mul	r23, r24
    33f6:	10 0d       	add	r17, r0
    33f8:	11 24       	eor	r1, r1
    33fa:	c8 01       	movw	r24, r16
    33fc:	0e 94 14 1a 	call	0x3428	; 0x3428 <malloc>
    3400:	e8 2e       	mov	r14, r24
    3402:	e7 01       	movw	r28, r14
    3404:	7e 01       	movw	r14, r28
    3406:	f9 2e       	mov	r15, r25
    3408:	e7 01       	movw	r28, r14
    340a:	20 97       	sbiw	r28, 0x00	; 0
    340c:	31 f0       	breq	.+12     	; 0x341a <calloc+0x3a>
    340e:	8e 2d       	mov	r24, r14
    3410:	60 e0       	ldi	r22, 0x00	; 0
    3412:	70 e0       	ldi	r23, 0x00	; 0
    3414:	a8 01       	movw	r20, r16
    3416:	0e 94 1b 1c 	call	0x3836	; 0x3836 <memset>
    341a:	7e 01       	movw	r14, r28
    341c:	ce 01       	movw	r24, r28
    341e:	cd b7       	in	r28, 0x3d	; 61
    3420:	de b7       	in	r29, 0x3e	; 62
    3422:	e6 e0       	ldi	r30, 0x06	; 6
    3424:	0c 94 4a 1c 	jmp	0x3894	; 0x3894 <__epilogue_restores__+0x18>

00003428 <malloc>:
    3428:	cf 93       	push	r28
    342a:	df 93       	push	r29
    342c:	82 30       	cpi	r24, 0x02	; 2
    342e:	91 05       	cpc	r25, r1
    3430:	10 f4       	brcc	.+4      	; 0x3436 <malloc+0xe>
    3432:	82 e0       	ldi	r24, 0x02	; 2
    3434:	90 e0       	ldi	r25, 0x00	; 0
    3436:	e0 91 5d 01 	lds	r30, 0x015D
    343a:	f0 91 5e 01 	lds	r31, 0x015E
    343e:	40 e0       	ldi	r20, 0x00	; 0
    3440:	50 e0       	ldi	r21, 0x00	; 0
    3442:	20 e0       	ldi	r18, 0x00	; 0
    3444:	30 e0       	ldi	r19, 0x00	; 0
    3446:	26 c0       	rjmp	.+76     	; 0x3494 <malloc+0x6c>
    3448:	60 81       	ld	r22, Z
    344a:	71 81       	ldd	r23, Z+1	; 0x01
    344c:	68 17       	cp	r22, r24
    344e:	79 07       	cpc	r23, r25
    3450:	e0 f0       	brcs	.+56     	; 0x348a <malloc+0x62>
    3452:	68 17       	cp	r22, r24
    3454:	79 07       	cpc	r23, r25
    3456:	81 f4       	brne	.+32     	; 0x3478 <malloc+0x50>
    3458:	82 81       	ldd	r24, Z+2	; 0x02
    345a:	93 81       	ldd	r25, Z+3	; 0x03
    345c:	21 15       	cp	r18, r1
    345e:	31 05       	cpc	r19, r1
    3460:	31 f0       	breq	.+12     	; 0x346e <malloc+0x46>
    3462:	d9 01       	movw	r26, r18
    3464:	13 96       	adiw	r26, 0x03	; 3
    3466:	9c 93       	st	X, r25
    3468:	8e 93       	st	-X, r24
    346a:	12 97       	sbiw	r26, 0x02	; 2
    346c:	2b c0       	rjmp	.+86     	; 0x34c4 <malloc+0x9c>
    346e:	90 93 5e 01 	sts	0x015E, r25
    3472:	80 93 5d 01 	sts	0x015D, r24
    3476:	26 c0       	rjmp	.+76     	; 0x34c4 <malloc+0x9c>
    3478:	41 15       	cp	r20, r1
    347a:	51 05       	cpc	r21, r1
    347c:	19 f0       	breq	.+6      	; 0x3484 <malloc+0x5c>
    347e:	64 17       	cp	r22, r20
    3480:	75 07       	cpc	r23, r21
    3482:	18 f4       	brcc	.+6      	; 0x348a <malloc+0x62>
    3484:	ab 01       	movw	r20, r22
    3486:	e9 01       	movw	r28, r18
    3488:	df 01       	movw	r26, r30
    348a:	9f 01       	movw	r18, r30
    348c:	72 81       	ldd	r23, Z+2	; 0x02
    348e:	63 81       	ldd	r22, Z+3	; 0x03
    3490:	e7 2f       	mov	r30, r23
    3492:	f6 2f       	mov	r31, r22
    3494:	30 97       	sbiw	r30, 0x00	; 0
    3496:	c1 f6       	brne	.-80     	; 0x3448 <malloc+0x20>
    3498:	41 15       	cp	r20, r1
    349a:	51 05       	cpc	r21, r1
    349c:	01 f1       	breq	.+64     	; 0x34de <malloc+0xb6>
    349e:	48 1b       	sub	r20, r24
    34a0:	59 0b       	sbc	r21, r25
    34a2:	44 30       	cpi	r20, 0x04	; 4
    34a4:	51 05       	cpc	r21, r1
    34a6:	80 f4       	brcc	.+32     	; 0x34c8 <malloc+0xa0>
    34a8:	12 96       	adiw	r26, 0x02	; 2
    34aa:	8d 91       	ld	r24, X+
    34ac:	9c 91       	ld	r25, X
    34ae:	13 97       	sbiw	r26, 0x03	; 3
    34b0:	20 97       	sbiw	r28, 0x00	; 0
    34b2:	19 f0       	breq	.+6      	; 0x34ba <malloc+0x92>
    34b4:	9b 83       	std	Y+3, r25	; 0x03
    34b6:	8a 83       	std	Y+2, r24	; 0x02
    34b8:	04 c0       	rjmp	.+8      	; 0x34c2 <malloc+0x9a>
    34ba:	90 93 5e 01 	sts	0x015E, r25
    34be:	80 93 5d 01 	sts	0x015D, r24
    34c2:	fd 01       	movw	r30, r26
    34c4:	32 96       	adiw	r30, 0x02	; 2
    34c6:	46 c0       	rjmp	.+140    	; 0x3554 <malloc+0x12c>
    34c8:	fd 01       	movw	r30, r26
    34ca:	e4 0f       	add	r30, r20
    34cc:	f5 1f       	adc	r31, r21
    34ce:	81 93       	st	Z+, r24
    34d0:	91 93       	st	Z+, r25
    34d2:	42 50       	subi	r20, 0x02	; 2
    34d4:	50 40       	sbci	r21, 0x00	; 0
    34d6:	11 96       	adiw	r26, 0x01	; 1
    34d8:	5c 93       	st	X, r21
    34da:	4e 93       	st	-X, r20
    34dc:	3b c0       	rjmp	.+118    	; 0x3554 <malloc+0x12c>
    34de:	20 91 5b 01 	lds	r18, 0x015B
    34e2:	30 91 5c 01 	lds	r19, 0x015C
    34e6:	21 15       	cp	r18, r1
    34e8:	31 05       	cpc	r19, r1
    34ea:	41 f4       	brne	.+16     	; 0x34fc <malloc+0xd4>
    34ec:	20 91 02 01 	lds	r18, 0x0102
    34f0:	30 91 03 01 	lds	r19, 0x0103
    34f4:	30 93 5c 01 	sts	0x015C, r19
    34f8:	20 93 5b 01 	sts	0x015B, r18
    34fc:	20 91 04 01 	lds	r18, 0x0104
    3500:	30 91 05 01 	lds	r19, 0x0105
    3504:	21 15       	cp	r18, r1
    3506:	31 05       	cpc	r19, r1
    3508:	41 f4       	brne	.+16     	; 0x351a <malloc+0xf2>
    350a:	2d b7       	in	r18, 0x3d	; 61
    350c:	3e b7       	in	r19, 0x3e	; 62
    350e:	40 91 00 01 	lds	r20, 0x0100
    3512:	50 91 01 01 	lds	r21, 0x0101
    3516:	24 1b       	sub	r18, r20
    3518:	35 0b       	sbc	r19, r21
    351a:	e0 91 5b 01 	lds	r30, 0x015B
    351e:	f0 91 5c 01 	lds	r31, 0x015C
    3522:	e2 17       	cp	r30, r18
    3524:	f3 07       	cpc	r31, r19
    3526:	a0 f4       	brcc	.+40     	; 0x3550 <malloc+0x128>
    3528:	2e 1b       	sub	r18, r30
    352a:	3f 0b       	sbc	r19, r31
    352c:	28 17       	cp	r18, r24
    352e:	39 07       	cpc	r19, r25
    3530:	78 f0       	brcs	.+30     	; 0x3550 <malloc+0x128>
    3532:	ac 01       	movw	r20, r24
    3534:	4e 5f       	subi	r20, 0xFE	; 254
    3536:	5f 4f       	sbci	r21, 0xFF	; 255
    3538:	24 17       	cp	r18, r20
    353a:	35 07       	cpc	r19, r21
    353c:	48 f0       	brcs	.+18     	; 0x3550 <malloc+0x128>
    353e:	4e 0f       	add	r20, r30
    3540:	5f 1f       	adc	r21, r31
    3542:	50 93 5c 01 	sts	0x015C, r21
    3546:	40 93 5b 01 	sts	0x015B, r20
    354a:	81 93       	st	Z+, r24
    354c:	91 93       	st	Z+, r25
    354e:	02 c0       	rjmp	.+4      	; 0x3554 <malloc+0x12c>
    3550:	e0 e0       	ldi	r30, 0x00	; 0
    3552:	f0 e0       	ldi	r31, 0x00	; 0
    3554:	cf 01       	movw	r24, r30
    3556:	df 91       	pop	r29
    3558:	cf 91       	pop	r28
    355a:	08 95       	ret

0000355c <free>:
    355c:	cf 93       	push	r28
    355e:	df 93       	push	r29
    3560:	00 97       	sbiw	r24, 0x00	; 0
    3562:	09 f4       	brne	.+2      	; 0x3566 <free+0xa>
    3564:	91 c0       	rjmp	.+290    	; 0x3688 <free+0x12c>
    3566:	fc 01       	movw	r30, r24
    3568:	32 97       	sbiw	r30, 0x02	; 2
    356a:	13 82       	std	Z+3, r1	; 0x03
    356c:	12 82       	std	Z+2, r1	; 0x02
    356e:	60 91 5d 01 	lds	r22, 0x015D
    3572:	70 91 5e 01 	lds	r23, 0x015E
    3576:	61 15       	cp	r22, r1
    3578:	71 05       	cpc	r23, r1
    357a:	81 f4       	brne	.+32     	; 0x359c <free+0x40>
    357c:	20 81       	ld	r18, Z
    357e:	31 81       	ldd	r19, Z+1	; 0x01
    3580:	28 0f       	add	r18, r24
    3582:	39 1f       	adc	r19, r25
    3584:	80 91 5b 01 	lds	r24, 0x015B
    3588:	90 91 5c 01 	lds	r25, 0x015C
    358c:	82 17       	cp	r24, r18
    358e:	93 07       	cpc	r25, r19
    3590:	99 f5       	brne	.+102    	; 0x35f8 <free+0x9c>
    3592:	f0 93 5c 01 	sts	0x015C, r31
    3596:	e0 93 5b 01 	sts	0x015B, r30
    359a:	76 c0       	rjmp	.+236    	; 0x3688 <free+0x12c>
    359c:	db 01       	movw	r26, r22
    359e:	80 e0       	ldi	r24, 0x00	; 0
    35a0:	90 e0       	ldi	r25, 0x00	; 0
    35a2:	02 c0       	rjmp	.+4      	; 0x35a8 <free+0x4c>
    35a4:	cd 01       	movw	r24, r26
    35a6:	d9 01       	movw	r26, r18
    35a8:	ae 17       	cp	r26, r30
    35aa:	bf 07       	cpc	r27, r31
    35ac:	48 f4       	brcc	.+18     	; 0x35c0 <free+0x64>
    35ae:	12 96       	adiw	r26, 0x02	; 2
    35b0:	2d 91       	ld	r18, X+
    35b2:	3c 91       	ld	r19, X
    35b4:	13 97       	sbiw	r26, 0x03	; 3
    35b6:	21 15       	cp	r18, r1
    35b8:	31 05       	cpc	r19, r1
    35ba:	a1 f7       	brne	.-24     	; 0x35a4 <free+0x48>
    35bc:	cd 01       	movw	r24, r26
    35be:	21 c0       	rjmp	.+66     	; 0x3602 <free+0xa6>
    35c0:	b3 83       	std	Z+3, r27	; 0x03
    35c2:	a2 83       	std	Z+2, r26	; 0x02
    35c4:	ef 01       	movw	r28, r30
    35c6:	49 91       	ld	r20, Y+
    35c8:	59 91       	ld	r21, Y+
    35ca:	9e 01       	movw	r18, r28
    35cc:	24 0f       	add	r18, r20
    35ce:	35 1f       	adc	r19, r21
    35d0:	a2 17       	cp	r26, r18
    35d2:	b3 07       	cpc	r27, r19
    35d4:	79 f4       	brne	.+30     	; 0x35f4 <free+0x98>
    35d6:	2d 91       	ld	r18, X+
    35d8:	3c 91       	ld	r19, X
    35da:	11 97       	sbiw	r26, 0x01	; 1
    35dc:	24 0f       	add	r18, r20
    35de:	35 1f       	adc	r19, r21
    35e0:	2e 5f       	subi	r18, 0xFE	; 254
    35e2:	3f 4f       	sbci	r19, 0xFF	; 255
    35e4:	31 83       	std	Z+1, r19	; 0x01
    35e6:	20 83       	st	Z, r18
    35e8:	12 96       	adiw	r26, 0x02	; 2
    35ea:	2d 91       	ld	r18, X+
    35ec:	3c 91       	ld	r19, X
    35ee:	13 97       	sbiw	r26, 0x03	; 3
    35f0:	33 83       	std	Z+3, r19	; 0x03
    35f2:	22 83       	std	Z+2, r18	; 0x02
    35f4:	00 97       	sbiw	r24, 0x00	; 0
    35f6:	29 f4       	brne	.+10     	; 0x3602 <free+0xa6>
    35f8:	f0 93 5e 01 	sts	0x015E, r31
    35fc:	e0 93 5d 01 	sts	0x015D, r30
    3600:	43 c0       	rjmp	.+134    	; 0x3688 <free+0x12c>
    3602:	dc 01       	movw	r26, r24
    3604:	13 96       	adiw	r26, 0x03	; 3
    3606:	fc 93       	st	X, r31
    3608:	ee 93       	st	-X, r30
    360a:	12 97       	sbiw	r26, 0x02	; 2
    360c:	4d 91       	ld	r20, X+
    360e:	5d 91       	ld	r21, X+
    3610:	a4 0f       	add	r26, r20
    3612:	b5 1f       	adc	r27, r21
    3614:	ea 17       	cp	r30, r26
    3616:	fb 07       	cpc	r31, r27
    3618:	69 f4       	brne	.+26     	; 0x3634 <free+0xd8>
    361a:	20 81       	ld	r18, Z
    361c:	31 81       	ldd	r19, Z+1	; 0x01
    361e:	24 0f       	add	r18, r20
    3620:	35 1f       	adc	r19, r21
    3622:	2e 5f       	subi	r18, 0xFE	; 254
    3624:	3f 4f       	sbci	r19, 0xFF	; 255
    3626:	ec 01       	movw	r28, r24
    3628:	39 83       	std	Y+1, r19	; 0x01
    362a:	28 83       	st	Y, r18
    362c:	22 81       	ldd	r18, Z+2	; 0x02
    362e:	33 81       	ldd	r19, Z+3	; 0x03
    3630:	3b 83       	std	Y+3, r19	; 0x03
    3632:	2a 83       	std	Y+2, r18	; 0x02
    3634:	e0 e0       	ldi	r30, 0x00	; 0
    3636:	f0 e0       	ldi	r31, 0x00	; 0
    3638:	02 c0       	rjmp	.+4      	; 0x363e <free+0xe2>
    363a:	fb 01       	movw	r30, r22
    363c:	bc 01       	movw	r22, r24
    363e:	db 01       	movw	r26, r22
    3640:	12 96       	adiw	r26, 0x02	; 2
    3642:	8d 91       	ld	r24, X+
    3644:	9c 91       	ld	r25, X
    3646:	13 97       	sbiw	r26, 0x03	; 3
    3648:	00 97       	sbiw	r24, 0x00	; 0
    364a:	b9 f7       	brne	.-18     	; 0x363a <free+0xde>
    364c:	9b 01       	movw	r18, r22
    364e:	2e 5f       	subi	r18, 0xFE	; 254
    3650:	3f 4f       	sbci	r19, 0xFF	; 255
    3652:	8d 91       	ld	r24, X+
    3654:	9c 91       	ld	r25, X
    3656:	11 97       	sbiw	r26, 0x01	; 1
    3658:	82 0f       	add	r24, r18
    365a:	93 1f       	adc	r25, r19
    365c:	40 91 5b 01 	lds	r20, 0x015B
    3660:	50 91 5c 01 	lds	r21, 0x015C
    3664:	48 17       	cp	r20, r24
    3666:	59 07       	cpc	r21, r25
    3668:	79 f4       	brne	.+30     	; 0x3688 <free+0x12c>
    366a:	30 97       	sbiw	r30, 0x00	; 0
    366c:	29 f4       	brne	.+10     	; 0x3678 <free+0x11c>
    366e:	10 92 5e 01 	sts	0x015E, r1
    3672:	10 92 5d 01 	sts	0x015D, r1
    3676:	02 c0       	rjmp	.+4      	; 0x367c <free+0x120>
    3678:	13 82       	std	Z+3, r1	; 0x03
    367a:	12 82       	std	Z+2, r1	; 0x02
    367c:	22 50       	subi	r18, 0x02	; 2
    367e:	30 40       	sbci	r19, 0x00	; 0
    3680:	30 93 5c 01 	sts	0x015C, r19
    3684:	20 93 5b 01 	sts	0x015B, r18
    3688:	df 91       	pop	r29
    368a:	cf 91       	pop	r28
    368c:	08 95       	ret

0000368e <realloc>:
    368e:	a0 e0       	ldi	r26, 0x00	; 0
    3690:	b0 e0       	ldi	r27, 0x00	; 0
    3692:	ed e4       	ldi	r30, 0x4D	; 77
    3694:	fb e1       	ldi	r31, 0x1B	; 27
    3696:	0c 94 28 1c 	jmp	0x3850	; 0x3850 <__prologue_saves__+0xc>
    369a:	8c 01       	movw	r16, r24
    369c:	cb 01       	movw	r24, r22
    369e:	01 15       	cp	r16, r1
    36a0:	11 05       	cpc	r17, r1
    36a2:	29 f4       	brne	.+10     	; 0x36ae <realloc+0x20>
    36a4:	0e 94 14 1a 	call	0x3428	; 0x3428 <malloc>
    36a8:	08 2f       	mov	r16, r24
    36aa:	19 2f       	mov	r17, r25
    36ac:	b5 c0       	rjmp	.+362    	; 0x3818 <realloc+0x18a>
    36ae:	d8 01       	movw	r26, r16
    36b0:	12 97       	sbiw	r26, 0x02	; 2
    36b2:	98 01       	movw	r18, r16
    36b4:	26 0f       	add	r18, r22
    36b6:	37 1f       	adc	r19, r23
    36b8:	2a 17       	cp	r18, r26
    36ba:	3b 07       	cpc	r19, r27
    36bc:	08 f4       	brcc	.+2      	; 0x36c0 <realloc+0x32>
    36be:	aa c0       	rjmp	.+340    	; 0x3814 <realloc+0x186>
    36c0:	ed 90       	ld	r14, X+
    36c2:	fc 90       	ld	r15, X
    36c4:	11 97       	sbiw	r26, 0x01	; 1
    36c6:	e6 16       	cp	r14, r22
    36c8:	f7 06       	cpc	r15, r23
    36ca:	d0 f0       	brcs	.+52     	; 0x3700 <realloc+0x72>
    36cc:	45 e0       	ldi	r20, 0x05	; 5
    36ce:	e4 16       	cp	r14, r20
    36d0:	f1 04       	cpc	r15, r1
    36d2:	08 f4       	brcc	.+2      	; 0x36d6 <realloc+0x48>
    36d4:	a1 c0       	rjmp	.+322    	; 0x3818 <realloc+0x18a>
    36d6:	a7 01       	movw	r20, r14
    36d8:	44 50       	subi	r20, 0x04	; 4
    36da:	50 40       	sbci	r21, 0x00	; 0
    36dc:	46 17       	cp	r20, r22
    36de:	57 07       	cpc	r21, r23
    36e0:	08 f4       	brcc	.+2      	; 0x36e4 <realloc+0x56>
    36e2:	9a c0       	rjmp	.+308    	; 0x3818 <realloc+0x18a>
    36e4:	a7 01       	movw	r20, r14
    36e6:	42 50       	subi	r20, 0x02	; 2
    36e8:	50 40       	sbci	r21, 0x00	; 0
    36ea:	46 1b       	sub	r20, r22
    36ec:	57 0b       	sbc	r21, r23
    36ee:	f9 01       	movw	r30, r18
    36f0:	41 93       	st	Z+, r20
    36f2:	51 93       	st	Z+, r21
    36f4:	6d 93       	st	X+, r22
    36f6:	7c 93       	st	X, r23
    36f8:	cf 01       	movw	r24, r30
    36fa:	0e 94 ae 1a 	call	0x355c	; 0x355c <free>
    36fe:	8c c0       	rjmp	.+280    	; 0x3818 <realloc+0x18a>
    3700:	5b 01       	movw	r10, r22
    3702:	ae 18       	sub	r10, r14
    3704:	bf 08       	sbc	r11, r15
    3706:	48 01       	movw	r8, r16
    3708:	8e 0c       	add	r8, r14
    370a:	9f 1c       	adc	r9, r15
    370c:	e0 91 5d 01 	lds	r30, 0x015D
    3710:	f0 91 5e 01 	lds	r31, 0x015E
    3714:	cc 24       	eor	r12, r12
    3716:	dd 24       	eor	r13, r13
    3718:	c0 e0       	ldi	r28, 0x00	; 0
    371a:	d0 e0       	ldi	r29, 0x00	; 0
    371c:	41 c0       	rjmp	.+130    	; 0x37a0 <realloc+0x112>
    371e:	e8 15       	cp	r30, r8
    3720:	f9 05       	cpc	r31, r9
    3722:	99 f5       	brne	.+102    	; 0x378a <realloc+0xfc>
    3724:	60 81       	ld	r22, Z
    3726:	71 81       	ldd	r23, Z+1	; 0x01
    3728:	ab 01       	movw	r20, r22
    372a:	4e 5f       	subi	r20, 0xFE	; 254
    372c:	5f 4f       	sbci	r21, 0xFF	; 255
    372e:	4a 15       	cp	r20, r10
    3730:	5b 05       	cpc	r21, r11
    3732:	58 f1       	brcs	.+86     	; 0x378a <realloc+0xfc>
    3734:	ab 01       	movw	r20, r22
    3736:	4a 19       	sub	r20, r10
    3738:	5b 09       	sbc	r21, r11
    373a:	cc 24       	eor	r12, r12
    373c:	dd 24       	eor	r13, r13
    373e:	68 94       	set
    3740:	c1 f8       	bld	r12, 1
    3742:	c4 0e       	add	r12, r20
    3744:	d5 1e       	adc	r13, r21
    3746:	82 80       	ldd	r8, Z+2	; 0x02
    3748:	a3 80       	ldd	r10, Z+3	; 0x03
    374a:	e5 e0       	ldi	r30, 0x05	; 5
    374c:	ce 16       	cp	r12, r30
    374e:	d1 04       	cpc	r13, r1
    3750:	48 f0       	brcs	.+18     	; 0x3764 <realloc+0xd6>
    3752:	f9 01       	movw	r30, r18
    3754:	82 82       	std	Z+2, r8	; 0x02
    3756:	a3 82       	std	Z+3, r10	; 0x03
    3758:	51 83       	std	Z+1, r21	; 0x01
    375a:	40 83       	st	Z, r20
    375c:	11 96       	adiw	r26, 0x01	; 1
    375e:	9c 93       	st	X, r25
    3760:	8e 93       	st	-X, r24
    3762:	09 c0       	rjmp	.+18     	; 0x3776 <realloc+0xe8>
    3764:	c7 01       	movw	r24, r14
    3766:	02 96       	adiw	r24, 0x02	; 2
    3768:	86 0f       	add	r24, r22
    376a:	97 1f       	adc	r25, r23
    376c:	11 96       	adiw	r26, 0x01	; 1
    376e:	9c 93       	st	X, r25
    3770:	8e 93       	st	-X, r24
    3772:	e8 2d       	mov	r30, r8
    3774:	fa 2d       	mov	r31, r10
    3776:	20 97       	sbiw	r28, 0x00	; 0
    3778:	19 f0       	breq	.+6      	; 0x3780 <realloc+0xf2>
    377a:	fb 83       	std	Y+3, r31	; 0x03
    377c:	ea 83       	std	Y+2, r30	; 0x02
    377e:	4c c0       	rjmp	.+152    	; 0x3818 <realloc+0x18a>
    3780:	f0 93 5e 01 	sts	0x015E, r31
    3784:	e0 93 5d 01 	sts	0x015D, r30
    3788:	47 c0       	rjmp	.+142    	; 0x3818 <realloc+0x18a>
    378a:	40 81       	ld	r20, Z
    378c:	51 81       	ldd	r21, Z+1	; 0x01
    378e:	c4 16       	cp	r12, r20
    3790:	d5 06       	cpc	r13, r21
    3792:	08 f4       	brcc	.+2      	; 0x3796 <realloc+0x108>
    3794:	6a 01       	movw	r12, r20
    3796:	ef 01       	movw	r28, r30
    3798:	52 81       	ldd	r21, Z+2	; 0x02
    379a:	43 81       	ldd	r20, Z+3	; 0x03
    379c:	e5 2f       	mov	r30, r21
    379e:	f4 2f       	mov	r31, r20
    37a0:	30 97       	sbiw	r30, 0x00	; 0
    37a2:	09 f0       	breq	.+2      	; 0x37a6 <realloc+0x118>
    37a4:	bc cf       	rjmp	.-136    	; 0x371e <realloc+0x90>
    37a6:	40 91 5b 01 	lds	r20, 0x015B
    37aa:	50 91 5c 01 	lds	r21, 0x015C
    37ae:	48 15       	cp	r20, r8
    37b0:	59 05       	cpc	r21, r9
    37b2:	e9 f4       	brne	.+58     	; 0x37ee <realloc+0x160>
    37b4:	c8 16       	cp	r12, r24
    37b6:	d9 06       	cpc	r13, r25
    37b8:	d0 f4       	brcc	.+52     	; 0x37ee <realloc+0x160>
    37ba:	40 91 04 01 	lds	r20, 0x0104
    37be:	50 91 05 01 	lds	r21, 0x0105
    37c2:	41 15       	cp	r20, r1
    37c4:	51 05       	cpc	r21, r1
    37c6:	41 f4       	brne	.+16     	; 0x37d8 <realloc+0x14a>
    37c8:	4d b7       	in	r20, 0x3d	; 61
    37ca:	5e b7       	in	r21, 0x3e	; 62
    37cc:	60 91 00 01 	lds	r22, 0x0100
    37d0:	70 91 01 01 	lds	r23, 0x0101
    37d4:	46 1b       	sub	r20, r22
    37d6:	57 0b       	sbc	r21, r23
    37d8:	24 17       	cp	r18, r20
    37da:	35 07       	cpc	r19, r21
    37dc:	d8 f4       	brcc	.+54     	; 0x3814 <realloc+0x186>
    37de:	30 93 5c 01 	sts	0x015C, r19
    37e2:	20 93 5b 01 	sts	0x015B, r18
    37e6:	11 96       	adiw	r26, 0x01	; 1
    37e8:	9c 93       	st	X, r25
    37ea:	8e 93       	st	-X, r24
    37ec:	15 c0       	rjmp	.+42     	; 0x3818 <realloc+0x18a>
    37ee:	0e 94 14 1a 	call	0x3428	; 0x3428 <malloc>
    37f2:	c8 2e       	mov	r12, r24
    37f4:	e6 01       	movw	r28, r12
    37f6:	6e 01       	movw	r12, r28
    37f8:	d9 2e       	mov	r13, r25
    37fa:	e6 01       	movw	r28, r12
    37fc:	20 97       	sbiw	r28, 0x00	; 0
    37fe:	51 f0       	breq	.+20     	; 0x3814 <realloc+0x186>
    3800:	8c 2d       	mov	r24, r12
    3802:	b8 01       	movw	r22, r16
    3804:	a7 01       	movw	r20, r14
    3806:	0e 94 12 1c 	call	0x3824	; 0x3824 <memcpy>
    380a:	c8 01       	movw	r24, r16
    380c:	0e 94 ae 1a 	call	0x355c	; 0x355c <free>
    3810:	86 01       	movw	r16, r12
    3812:	02 c0       	rjmp	.+4      	; 0x3818 <realloc+0x18a>
    3814:	00 e0       	ldi	r16, 0x00	; 0
    3816:	10 e0       	ldi	r17, 0x00	; 0
    3818:	c8 01       	movw	r24, r16
    381a:	cd b7       	in	r28, 0x3d	; 61
    381c:	de b7       	in	r29, 0x3e	; 62
    381e:	ec e0       	ldi	r30, 0x0C	; 12
    3820:	0c 94 44 1c 	jmp	0x3888	; 0x3888 <__epilogue_restores__+0xc>

00003824 <memcpy>:
    3824:	fb 01       	movw	r30, r22
    3826:	dc 01       	movw	r26, r24
    3828:	02 c0       	rjmp	.+4      	; 0x382e <memcpy+0xa>
    382a:	01 90       	ld	r0, Z+
    382c:	0d 92       	st	X+, r0
    382e:	41 50       	subi	r20, 0x01	; 1
    3830:	50 40       	sbci	r21, 0x00	; 0
    3832:	d8 f7       	brcc	.-10     	; 0x382a <memcpy+0x6>
    3834:	08 95       	ret

00003836 <memset>:
    3836:	dc 01       	movw	r26, r24
    3838:	01 c0       	rjmp	.+2      	; 0x383c <memset+0x6>
    383a:	6d 93       	st	X+, r22
    383c:	41 50       	subi	r20, 0x01	; 1
    383e:	50 40       	sbci	r21, 0x00	; 0
    3840:	e0 f7       	brcc	.-8      	; 0x383a <memset+0x4>
    3842:	08 95       	ret

00003844 <__prologue_saves__>:
    3844:	2f 92       	push	r2
    3846:	3f 92       	push	r3
    3848:	4f 92       	push	r4
    384a:	5f 92       	push	r5
    384c:	6f 92       	push	r6
    384e:	7f 92       	push	r7
    3850:	8f 92       	push	r8
    3852:	9f 92       	push	r9
    3854:	af 92       	push	r10
    3856:	bf 92       	push	r11
    3858:	cf 92       	push	r12
    385a:	df 92       	push	r13
    385c:	ef 92       	push	r14
    385e:	ff 92       	push	r15
    3860:	0f 93       	push	r16
    3862:	1f 93       	push	r17
    3864:	cf 93       	push	r28
    3866:	df 93       	push	r29
    3868:	cd b7       	in	r28, 0x3d	; 61
    386a:	de b7       	in	r29, 0x3e	; 62
    386c:	ca 1b       	sub	r28, r26
    386e:	db 0b       	sbc	r29, r27
    3870:	0f b6       	in	r0, 0x3f	; 63
    3872:	f8 94       	cli
    3874:	de bf       	out	0x3e, r29	; 62
    3876:	0f be       	out	0x3f, r0	; 63
    3878:	cd bf       	out	0x3d, r28	; 61
    387a:	09 94       	ijmp

0000387c <__epilogue_restores__>:
    387c:	2a 88       	ldd	r2, Y+18	; 0x12
    387e:	39 88       	ldd	r3, Y+17	; 0x11
    3880:	48 88       	ldd	r4, Y+16	; 0x10
    3882:	5f 84       	ldd	r5, Y+15	; 0x0f
    3884:	6e 84       	ldd	r6, Y+14	; 0x0e
    3886:	7d 84       	ldd	r7, Y+13	; 0x0d
    3888:	8c 84       	ldd	r8, Y+12	; 0x0c
    388a:	9b 84       	ldd	r9, Y+11	; 0x0b
    388c:	aa 84       	ldd	r10, Y+10	; 0x0a
    388e:	b9 84       	ldd	r11, Y+9	; 0x09
    3890:	c8 84       	ldd	r12, Y+8	; 0x08
    3892:	df 80       	ldd	r13, Y+7	; 0x07
    3894:	ee 80       	ldd	r14, Y+6	; 0x06
    3896:	fd 80       	ldd	r15, Y+5	; 0x05
    3898:	0c 81       	ldd	r16, Y+4	; 0x04
    389a:	1b 81       	ldd	r17, Y+3	; 0x03
    389c:	aa 81       	ldd	r26, Y+2	; 0x02
    389e:	b9 81       	ldd	r27, Y+1	; 0x01
    38a0:	ce 0f       	add	r28, r30
    38a2:	d1 1d       	adc	r29, r1
    38a4:	0f b6       	in	r0, 0x3f	; 63
    38a6:	f8 94       	cli
    38a8:	de bf       	out	0x3e, r29	; 62
    38aa:	0f be       	out	0x3f, r0	; 63
    38ac:	cd bf       	out	0x3d, r28	; 61
    38ae:	ed 01       	movw	r28, r26
    38b0:	08 95       	ret

000038b2 <_exit>:
    38b2:	f8 94       	cli

000038b4 <__stop_program>:
    38b4:	ff cf       	rjmp	.-2      	; 0x38b4 <__stop_program>
