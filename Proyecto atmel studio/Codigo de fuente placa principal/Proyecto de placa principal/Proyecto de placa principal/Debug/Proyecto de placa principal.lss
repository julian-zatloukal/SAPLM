
Proyecto de placa principal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00002414  000024a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002414  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000041  00800128  00800128  000024d0  2**0
                  ALLOC
  3 .stab         00001728  00000000  00000000  000024d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000762  00000000  00000000  00003bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000002d0  00000000  00000000  0000435a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000abf  00000000  00000000  0000462a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002101  00000000  00000000  000050e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000aab  00000000  00000000  000071ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002683  00000000  00000000  00007c95  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000004a0  00000000  00000000  0000a318  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000dc1  00000000  00000000  0000a7b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007c5  00000000  00000000  0000b579  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000035b  00000000  00000000  0000bd3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000268  00000000  00000000  0000c099  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 c3 0d 	jmp	0x1b86	; 0x1b86 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 89 0d 	jmp	0x1b12	; 0x1b12 <__vector_20>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 e1       	ldi	r30, 0x14	; 20
      7c:	f4 e2       	ldi	r31, 0x24	; 36
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a8 32       	cpi	r26, 0x28	; 40
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a8 e2       	ldi	r26, 0x28	; 40
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a9 36       	cpi	r26, 0x69	; 105
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 91 06 	call	0xd22	; 0xd22 <main>
      9e:	0c 94 08 12 	jmp	0x2410	; 0x2410 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <crc_init>:
 * Calculate the initial crc value.
 *
 * \return     The initial crc value.
 */
static inline crc_t crc_init(void)
{
      a6:	df 93       	push	r29
      a8:	cf 93       	push	r28
      aa:	cd b7       	in	r28, 0x3d	; 61
      ac:	de b7       	in	r29, 0x3e	; 62
    return 0x00;
      ae:	80 e0       	ldi	r24, 0x00	; 0
}
      b0:	cf 91       	pop	r28
      b2:	df 91       	pop	r29
      b4:	08 95       	ret

000000b6 <crc_finalize>:
 *
 * \param[in] crc  The current crc value.
 * \return     The final crc value.
 */
static inline crc_t crc_finalize(crc_t crc)
{
      b6:	df 93       	push	r29
      b8:	cf 93       	push	r28
      ba:	0f 92       	push	r0
      bc:	cd b7       	in	r28, 0x3d	; 61
      be:	de b7       	in	r29, 0x3e	; 62
      c0:	89 83       	std	Y+1, r24	; 0x01
    return crc;
      c2:	89 81       	ldd	r24, Y+1	; 0x01
}
      c4:	0f 90       	pop	r0
      c6:	cf 91       	pop	r28
      c8:	df 91       	pop	r29
      ca:	08 95       	ret

000000cc <initliazeMemory>:
	{ .handlerFunction = &GET_DEVICE_VALUE_H},
	{ .handlerFunction = &MESSAGE_STATUS_H}
};
#define commandListLength (uint8_t)(sizeof commandList/sizeof commandList[0])

bool initliazeMemory(){
      cc:	0f 93       	push	r16
      ce:	1f 93       	push	r17
      d0:	df 93       	push	r29
      d2:	cf 93       	push	r28
      d4:	00 d0       	rcall	.+0      	; 0xd6 <initliazeMemory+0xa>
      d6:	cd b7       	in	r28, 0x3d	; 61
      d8:	de b7       	in	r29, 0x3e	; 62
	if(memoryInitialized) return false;
      da:	80 91 54 01 	lds	r24, 0x0154
      de:	88 23       	and	r24, r24
      e0:	11 f0       	breq	.+4      	; 0xe6 <initliazeMemory+0x1a>
      e2:	80 e0       	ldi	r24, 0x00	; 0
      e4:	6a c0       	rjmp	.+212    	; 0x1ba <initliazeMemory+0xee>
	parameter[0].startingPointer = (void*)calloc(23,1);
      e6:	87 e1       	ldi	r24, 0x17	; 23
      e8:	90 e0       	ldi	r25, 0x00	; 0
      ea:	61 e0       	ldi	r22, 0x01	; 1
      ec:	70 e0       	ldi	r23, 0x00	; 0
      ee:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <calloc>
      f2:	90 93 29 01 	sts	0x0129, r25
      f6:	80 93 28 01 	sts	0x0128, r24
	parameter[1].startingPointer = (void*)calloc(2,1);
      fa:	82 e0       	ldi	r24, 0x02	; 2
      fc:	90 e0       	ldi	r25, 0x00	; 0
      fe:	61 e0       	ldi	r22, 0x01	; 1
     100:	70 e0       	ldi	r23, 0x00	; 0
     102:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <calloc>
     106:	90 93 2c 01 	sts	0x012C, r25
     10a:	80 93 2b 01 	sts	0x012B, r24
	parameter[2].startingPointer = (void*)calloc(2,1);
     10e:	82 e0       	ldi	r24, 0x02	; 2
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	61 e0       	ldi	r22, 0x01	; 1
     114:	70 e0       	ldi	r23, 0x00	; 0
     116:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <calloc>
     11a:	90 93 2f 01 	sts	0x012F, r25
     11e:	80 93 2e 01 	sts	0x012E, r24
	for (uint8_t x = 3; x<12; x++) parameter[x].startingPointer = (void*)calloc(1,1);
     122:	83 e0       	ldi	r24, 0x03	; 3
     124:	89 83       	std	Y+1, r24	; 0x01
     126:	17 c0       	rjmp	.+46     	; 0x156 <initliazeMemory+0x8a>
     128:	89 81       	ldd	r24, Y+1	; 0x01
     12a:	08 2f       	mov	r16, r24
     12c:	10 e0       	ldi	r17, 0x00	; 0
     12e:	81 e0       	ldi	r24, 0x01	; 1
     130:	90 e0       	ldi	r25, 0x00	; 0
     132:	61 e0       	ldi	r22, 0x01	; 1
     134:	70 e0       	ldi	r23, 0x00	; 0
     136:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <calloc>
     13a:	9c 01       	movw	r18, r24
     13c:	c8 01       	movw	r24, r16
     13e:	88 0f       	add	r24, r24
     140:	99 1f       	adc	r25, r25
     142:	80 0f       	add	r24, r16
     144:	91 1f       	adc	r25, r17
     146:	88 5d       	subi	r24, 0xD8	; 216
     148:	9e 4f       	sbci	r25, 0xFE	; 254
     14a:	fc 01       	movw	r30, r24
     14c:	31 83       	std	Z+1, r19	; 0x01
     14e:	20 83       	st	Z, r18
     150:	89 81       	ldd	r24, Y+1	; 0x01
     152:	8f 5f       	subi	r24, 0xFF	; 255
     154:	89 83       	std	Y+1, r24	; 0x01
     156:	89 81       	ldd	r24, Y+1	; 0x01
     158:	8c 30       	cpi	r24, 0x0C	; 12
     15a:	30 f3       	brcs	.-52     	; 0x128 <initliazeMemory+0x5c>
	command_buffer = (uint8_t*)calloc(32,1);
     15c:	80 e2       	ldi	r24, 0x20	; 32
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	61 e0       	ldi	r22, 0x01	; 1
     162:	70 e0       	ldi	r23, 0x00	; 0
     164:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <calloc>
     168:	90 93 53 01 	sts	0x0153, r25
     16c:	80 93 52 01 	sts	0x0152, r24
	if(command_buffer==NULL) return false;
     170:	80 91 52 01 	lds	r24, 0x0152
     174:	90 91 53 01 	lds	r25, 0x0153
     178:	00 97       	sbiw	r24, 0x00	; 0
     17a:	11 f4       	brne	.+4      	; 0x180 <initliazeMemory+0xb4>
     17c:	80 e0       	ldi	r24, 0x00	; 0
     17e:	1d c0       	rjmp	.+58     	; 0x1ba <initliazeMemory+0xee>
	for (uint8_t x = 0; x<12; x++) { if(parameter[x].startingPointer==NULL) return false; }
     180:	1a 82       	std	Y+2, r1	; 0x02
     182:	14 c0       	rjmp	.+40     	; 0x1ac <initliazeMemory+0xe0>
     184:	8a 81       	ldd	r24, Y+2	; 0x02
     186:	28 2f       	mov	r18, r24
     188:	30 e0       	ldi	r19, 0x00	; 0
     18a:	c9 01       	movw	r24, r18
     18c:	88 0f       	add	r24, r24
     18e:	99 1f       	adc	r25, r25
     190:	82 0f       	add	r24, r18
     192:	93 1f       	adc	r25, r19
     194:	88 5d       	subi	r24, 0xD8	; 216
     196:	9e 4f       	sbci	r25, 0xFE	; 254
     198:	fc 01       	movw	r30, r24
     19a:	80 81       	ld	r24, Z
     19c:	91 81       	ldd	r25, Z+1	; 0x01
     19e:	00 97       	sbiw	r24, 0x00	; 0
     1a0:	11 f4       	brne	.+4      	; 0x1a6 <initliazeMemory+0xda>
     1a2:	80 e0       	ldi	r24, 0x00	; 0
     1a4:	0a c0       	rjmp	.+20     	; 0x1ba <initliazeMemory+0xee>
     1a6:	8a 81       	ldd	r24, Y+2	; 0x02
     1a8:	8f 5f       	subi	r24, 0xFF	; 255
     1aa:	8a 83       	std	Y+2, r24	; 0x02
     1ac:	8a 81       	ldd	r24, Y+2	; 0x02
     1ae:	8c 30       	cpi	r24, 0x0C	; 12
     1b0:	48 f3       	brcs	.-46     	; 0x184 <initliazeMemory+0xb8>
	memoryInitialized = true;
     1b2:	81 e0       	ldi	r24, 0x01	; 1
     1b4:	80 93 54 01 	sts	0x0154, r24
	return true;
     1b8:	81 e0       	ldi	r24, 0x01	; 1
}
     1ba:	0f 90       	pop	r0
     1bc:	0f 90       	pop	r0
     1be:	cf 91       	pop	r28
     1c0:	df 91       	pop	r29
     1c2:	1f 91       	pop	r17
     1c4:	0f 91       	pop	r16
     1c6:	08 95       	ret

000001c8 <DecomposeMessageFromBuffer>:

CommandStatus DecomposeMessageFromBuffer(){
     1c8:	df 93       	push	r29
     1ca:	cf 93       	push	r28
     1cc:	cd b7       	in	r28, 0x3d	; 61
     1ce:	de b7       	in	r29, 0x3e	; 62
     1d0:	29 97       	sbiw	r28, 0x09	; 9
     1d2:	0f b6       	in	r0, 0x3f	; 63
     1d4:	f8 94       	cli
     1d6:	de bf       	out	0x3e, r29	; 62
     1d8:	0f be       	out	0x3f, r0	; 63
     1da:	cd bf       	out	0x3d, r28	; 61
	// Search for header
	uint8_t* headerStart = command_buffer;
     1dc:	80 91 52 01 	lds	r24, 0x0152
     1e0:	90 91 53 01 	lds	r25, 0x0153
     1e4:	9a 83       	std	Y+2, r25	; 0x02
     1e6:	89 83       	std	Y+1, r24	; 0x01
	uint8_t* footerEnd = command_buffer+31;
     1e8:	80 91 52 01 	lds	r24, 0x0152
     1ec:	90 91 53 01 	lds	r25, 0x0153
     1f0:	4f 96       	adiw	r24, 0x1f	; 31
     1f2:	9c 83       	std	Y+4, r25	; 0x04
     1f4:	8b 83       	std	Y+3, r24	; 0x03

	for(;headerStart!=(command_buffer+22);headerStart++){
     1f6:	f7 c0       	rjmp	.+494    	; 0x3e6 <DecomposeMessageFromBuffer+0x21e>
		if (*headerStart==SOH&&(*(headerStart+4)==STX)){
     1f8:	89 81       	ldd	r24, Y+1	; 0x01
     1fa:	9a 81       	ldd	r25, Y+2	; 0x02
     1fc:	fc 01       	movw	r30, r24
     1fe:	80 81       	ld	r24, Z
     200:	81 30       	cpi	r24, 0x01	; 1
     202:	09 f0       	breq	.+2      	; 0x206 <DecomposeMessageFromBuffer+0x3e>
     204:	eb c0       	rjmp	.+470    	; 0x3dc <DecomposeMessageFromBuffer+0x214>
     206:	89 81       	ldd	r24, Y+1	; 0x01
     208:	9a 81       	ldd	r25, Y+2	; 0x02
     20a:	04 96       	adiw	r24, 0x04	; 4
     20c:	fc 01       	movw	r30, r24
     20e:	80 81       	ld	r24, Z
     210:	82 30       	cpi	r24, 0x02	; 2
     212:	09 f0       	breq	.+2      	; 0x216 <DecomposeMessageFromBuffer+0x4e>
     214:	e3 c0       	rjmp	.+454    	; 0x3dc <DecomposeMessageFromBuffer+0x214>
			for(;footerEnd!=(command_buffer+6);footerEnd--){
     216:	d5 c0       	rjmp	.+426    	; 0x3c2 <DecomposeMessageFromBuffer+0x1fa>
				if (*footerEnd==ETB&&(*(footerEnd-2)==ETX)){
     218:	8b 81       	ldd	r24, Y+3	; 0x03
     21a:	9c 81       	ldd	r25, Y+4	; 0x04
     21c:	fc 01       	movw	r30, r24
     21e:	80 81       	ld	r24, Z
     220:	87 31       	cpi	r24, 0x17	; 23
     222:	09 f0       	breq	.+2      	; 0x226 <DecomposeMessageFromBuffer+0x5e>
     224:	c9 c0       	rjmp	.+402    	; 0x3b8 <DecomposeMessageFromBuffer+0x1f0>
     226:	8b 81       	ldd	r24, Y+3	; 0x03
     228:	9c 81       	ldd	r25, Y+4	; 0x04
     22a:	02 97       	sbiw	r24, 0x02	; 2
     22c:	fc 01       	movw	r30, r24
     22e:	80 81       	ld	r24, Z
     230:	83 30       	cpi	r24, 0x03	; 3
     232:	09 f0       	breq	.+2      	; 0x236 <DecomposeMessageFromBuffer+0x6e>
     234:	c1 c0       	rjmp	.+386    	; 0x3b8 <DecomposeMessageFromBuffer+0x1f0>
					uint8_t netMessageLength = ((footerEnd-2)-headerStart);
     236:	8b 81       	ldd	r24, Y+3	; 0x03
     238:	9c 81       	ldd	r25, Y+4	; 0x04
     23a:	02 97       	sbiw	r24, 0x02	; 2
     23c:	28 2f       	mov	r18, r24
     23e:	89 81       	ldd	r24, Y+1	; 0x01
     240:	9a 81       	ldd	r25, Y+2	; 0x02
     242:	f2 2f       	mov	r31, r18
     244:	f8 1b       	sub	r31, r24
     246:	8f 2f       	mov	r24, r31
     248:	88 87       	std	Y+8, r24	; 0x08
					crc_t crc;
					crc = crc_init();
     24a:	0e 94 53 00 	call	0xa6	; 0xa6 <crc_init>
     24e:	89 87       	std	Y+9, r24	; 0x09
					crc = crc_update(crc, headerStart, netMessageLength);
     250:	88 85       	ldd	r24, Y+8	; 0x08
     252:	28 2f       	mov	r18, r24
     254:	30 e0       	ldi	r19, 0x00	; 0
     256:	49 81       	ldd	r20, Y+1	; 0x01
     258:	5a 81       	ldd	r21, Y+2	; 0x02
     25a:	89 85       	ldd	r24, Y+9	; 0x09
     25c:	ba 01       	movw	r22, r20
     25e:	a9 01       	movw	r20, r18
     260:	0e 94 29 06 	call	0xc52	; 0xc52 <crc_update>
     264:	89 87       	std	Y+9, r24	; 0x09
					crc = crc_finalize(crc);
     266:	89 85       	ldd	r24, Y+9	; 0x09
     268:	0e 94 5b 00 	call	0xb6	; 0xb6 <crc_finalize>
     26c:	89 87       	std	Y+9, r24	; 0x09
					if (*(footerEnd-1)!=crc) return WRONG_CHECKSUM_CONSISTENCY;	
     26e:	8b 81       	ldd	r24, Y+3	; 0x03
     270:	9c 81       	ldd	r25, Y+4	; 0x04
     272:	01 97       	sbiw	r24, 0x01	; 1
     274:	fc 01       	movw	r30, r24
     276:	90 81       	ld	r25, Z
     278:	89 85       	ldd	r24, Y+9	; 0x09
     27a:	98 17       	cp	r25, r24
     27c:	11 f0       	breq	.+4      	; 0x282 <DecomposeMessageFromBuffer+0xba>
     27e:	83 e0       	ldi	r24, 0x03	; 3
     280:	c0 c0       	rjmp	.+384    	; 0x402 <DecomposeMessageFromBuffer+0x23a>
					if (*(headerStart+2)!=currentModuleID&&*(headerStart+2)!=0xFF&&currentModuleID!=0x01) return WRONG_MODULE_ID;
					lastTargetModuleID = *(headerStart+2);
     282:	89 81       	ldd	r24, Y+1	; 0x01
     284:	9a 81       	ldd	r25, Y+2	; 0x02
     286:	02 96       	adiw	r24, 0x02	; 2
     288:	fc 01       	movw	r30, r24
     28a:	80 81       	ld	r24, Z
     28c:	80 93 55 01 	sts	0x0155, r24
					lastTransmitterModuleID = *(headerStart+3);
     290:	89 81       	ldd	r24, Y+1	; 0x01
     292:	9a 81       	ldd	r25, Y+2	; 0x02
     294:	03 96       	adiw	r24, 0x03	; 3
     296:	fc 01       	movw	r30, r24
     298:	80 81       	ld	r24, Z
     29a:	80 93 4d 01 	sts	0x014D, r24
					if (*(headerStart+5)>commandListLength-1) return UNDEFINED_COMMAND_CODE;
     29e:	89 81       	ldd	r24, Y+1	; 0x01
     2a0:	9a 81       	ldd	r25, Y+2	; 0x02
     2a2:	05 96       	adiw	r24, 0x05	; 5
     2a4:	fc 01       	movw	r30, r24
     2a6:	80 81       	ld	r24, Z
     2a8:	85 30       	cpi	r24, 0x05	; 5
     2aa:	10 f0       	brcs	.+4      	; 0x2b0 <DecomposeMessageFromBuffer+0xe8>
     2ac:	85 e0       	ldi	r24, 0x05	; 5
     2ae:	a9 c0       	rjmp	.+338    	; 0x402 <DecomposeMessageFromBuffer+0x23a>
					lastMessageCommandType = commandList[*(headerStart+5)];
     2b0:	89 81       	ldd	r24, Y+1	; 0x01
     2b2:	9a 81       	ldd	r25, Y+2	; 0x02
     2b4:	05 96       	adiw	r24, 0x05	; 5
     2b6:	fc 01       	movw	r30, r24
     2b8:	80 81       	ld	r24, Z
     2ba:	88 2f       	mov	r24, r24
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	88 0f       	add	r24, r24
     2c0:	99 1f       	adc	r25, r25
     2c2:	83 5e       	subi	r24, 0xE3	; 227
     2c4:	9e 4f       	sbci	r25, 0xFE	; 254
     2c6:	fc 01       	movw	r30, r24
     2c8:	80 81       	ld	r24, Z
     2ca:	91 81       	ldd	r25, Z+1	; 0x01
     2cc:	90 93 4f 01 	sts	0x014F, r25
     2d0:	80 93 4e 01 	sts	0x014E, r24
					lastMessagePID = *(headerStart+1);
     2d4:	89 81       	ldd	r24, Y+1	; 0x01
     2d6:	9a 81       	ldd	r25, Y+2	; 0x02
     2d8:	01 96       	adiw	r24, 0x01	; 1
     2da:	fc 01       	movw	r30, r24
     2dc:	80 81       	ld	r24, Z
     2de:	80 93 51 01 	sts	0x0151, r24

					uint8_t* parameterStart = headerStart+6;
     2e2:	89 81       	ldd	r24, Y+1	; 0x01
     2e4:	9a 81       	ldd	r25, Y+2	; 0x02
     2e6:	06 96       	adiw	r24, 0x06	; 6
     2e8:	9e 83       	std	Y+6, r25	; 0x06
     2ea:	8d 83       	std	Y+5, r24	; 0x05

					for (uint8_t x = 0; x < 12; x++) {
     2ec:	1f 82       	std	Y+7, r1	; 0x07
     2ee:	5c c0       	rjmp	.+184    	; 0x3a8 <DecomposeMessageFromBuffer+0x1e0>
						realloc(parameter[x].startingPointer, *parameterStart);
     2f0:	8f 81       	ldd	r24, Y+7	; 0x07
     2f2:	28 2f       	mov	r18, r24
     2f4:	30 e0       	ldi	r19, 0x00	; 0
     2f6:	c9 01       	movw	r24, r18
     2f8:	88 0f       	add	r24, r24
     2fa:	99 1f       	adc	r25, r25
     2fc:	82 0f       	add	r24, r18
     2fe:	93 1f       	adc	r25, r19
     300:	88 5d       	subi	r24, 0xD8	; 216
     302:	9e 4f       	sbci	r25, 0xFE	; 254
     304:	fc 01       	movw	r30, r24
     306:	80 81       	ld	r24, Z
     308:	91 81       	ldd	r25, Z+1	; 0x01
     30a:	2d 81       	ldd	r18, Y+5	; 0x05
     30c:	3e 81       	ldd	r19, Y+6	; 0x06
     30e:	f9 01       	movw	r30, r18
     310:	20 81       	ld	r18, Z
     312:	22 2f       	mov	r18, r18
     314:	30 e0       	ldi	r19, 0x00	; 0
     316:	b9 01       	movw	r22, r18
     318:	0e 94 f6 10 	call	0x21ec	; 0x21ec <realloc>
						parameter[x].byteLength = *parameterStart;
     31c:	8f 81       	ldd	r24, Y+7	; 0x07
     31e:	28 2f       	mov	r18, r24
     320:	30 e0       	ldi	r19, 0x00	; 0
     322:	8d 81       	ldd	r24, Y+5	; 0x05
     324:	9e 81       	ldd	r25, Y+6	; 0x06
     326:	fc 01       	movw	r30, r24
     328:	40 81       	ld	r20, Z
     32a:	c9 01       	movw	r24, r18
     32c:	88 0f       	add	r24, r24
     32e:	99 1f       	adc	r25, r25
     330:	82 0f       	add	r24, r18
     332:	93 1f       	adc	r25, r19
     334:	86 5d       	subi	r24, 0xD6	; 214
     336:	9e 4f       	sbci	r25, 0xFE	; 254
     338:	fc 01       	movw	r30, r24
     33a:	40 83       	st	Z, r20
						memcpy(parameter[x].startingPointer,parameterStart+1, *parameterStart);
     33c:	8f 81       	ldd	r24, Y+7	; 0x07
     33e:	28 2f       	mov	r18, r24
     340:	30 e0       	ldi	r19, 0x00	; 0
     342:	c9 01       	movw	r24, r18
     344:	88 0f       	add	r24, r24
     346:	99 1f       	adc	r25, r25
     348:	82 0f       	add	r24, r18
     34a:	93 1f       	adc	r25, r19
     34c:	88 5d       	subi	r24, 0xD8	; 216
     34e:	9e 4f       	sbci	r25, 0xFE	; 254
     350:	fc 01       	movw	r30, r24
     352:	80 81       	ld	r24, Z
     354:	91 81       	ldd	r25, Z+1	; 0x01
     356:	2d 81       	ldd	r18, Y+5	; 0x05
     358:	3e 81       	ldd	r19, Y+6	; 0x06
     35a:	a9 01       	movw	r20, r18
     35c:	4f 5f       	subi	r20, 0xFF	; 255
     35e:	5f 4f       	sbci	r21, 0xFF	; 255
     360:	2d 81       	ldd	r18, Y+5	; 0x05
     362:	3e 81       	ldd	r19, Y+6	; 0x06
     364:	f9 01       	movw	r30, r18
     366:	20 81       	ld	r18, Z
     368:	22 2f       	mov	r18, r18
     36a:	30 e0       	ldi	r19, 0x00	; 0
     36c:	ba 01       	movw	r22, r20
     36e:	a9 01       	movw	r20, r18
     370:	0e 94 c1 11 	call	0x2382	; 0x2382 <memcpy>
						parameterStart+=((*parameterStart)+1);
     374:	8d 81       	ldd	r24, Y+5	; 0x05
     376:	9e 81       	ldd	r25, Y+6	; 0x06
     378:	fc 01       	movw	r30, r24
     37a:	80 81       	ld	r24, Z
     37c:	88 2f       	mov	r24, r24
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	01 96       	adiw	r24, 0x01	; 1
     382:	2d 81       	ldd	r18, Y+5	; 0x05
     384:	3e 81       	ldd	r19, Y+6	; 0x06
     386:	82 0f       	add	r24, r18
     388:	93 1f       	adc	r25, r19
     38a:	9e 83       	std	Y+6, r25	; 0x06
     38c:	8d 83       	std	Y+5, r24	; 0x05
						if (parameterStart>=(footerEnd-2)) break;
     38e:	8b 81       	ldd	r24, Y+3	; 0x03
     390:	9c 81       	ldd	r25, Y+4	; 0x04
     392:	9c 01       	movw	r18, r24
     394:	22 50       	subi	r18, 0x02	; 2
     396:	30 40       	sbci	r19, 0x00	; 0
     398:	8d 81       	ldd	r24, Y+5	; 0x05
     39a:	9e 81       	ldd	r25, Y+6	; 0x06
     39c:	82 17       	cp	r24, r18
     39e:	93 07       	cpc	r25, r19
     3a0:	40 f4       	brcc	.+16     	; 0x3b2 <DecomposeMessageFromBuffer+0x1ea>
					lastMessageCommandType = commandList[*(headerStart+5)];
					lastMessagePID = *(headerStart+1);

					uint8_t* parameterStart = headerStart+6;

					for (uint8_t x = 0; x < 12; x++) {
     3a2:	8f 81       	ldd	r24, Y+7	; 0x07
     3a4:	8f 5f       	subi	r24, 0xFF	; 255
     3a6:	8f 83       	std	Y+7, r24	; 0x07
     3a8:	8f 81       	ldd	r24, Y+7	; 0x07
     3aa:	8c 30       	cpi	r24, 0x0C	; 12
     3ac:	08 f4       	brcc	.+2      	; 0x3b0 <DecomposeMessageFromBuffer+0x1e8>
     3ae:	a0 cf       	rjmp	.-192    	; 0x2f0 <DecomposeMessageFromBuffer+0x128>
     3b0:	01 c0       	rjmp	.+2      	; 0x3b4 <DecomposeMessageFromBuffer+0x1ec>
						realloc(parameter[x].startingPointer, *parameterStart);
						parameter[x].byteLength = *parameterStart;
						memcpy(parameter[x].startingPointer,parameterStart+1, *parameterStart);
						parameterStart+=((*parameterStart)+1);
						if (parameterStart>=(footerEnd-2)) break;
     3b2:	00 00       	nop
					}

					return SUCCESFUL_DECOMPOSITION;
     3b4:	80 e0       	ldi	r24, 0x00	; 0
     3b6:	25 c0       	rjmp	.+74     	; 0x402 <DecomposeMessageFromBuffer+0x23a>
	uint8_t* headerStart = command_buffer;
	uint8_t* footerEnd = command_buffer+31;

	for(;headerStart!=(command_buffer+22);headerStart++){
		if (*headerStart==SOH&&(*(headerStart+4)==STX)){
			for(;footerEnd!=(command_buffer+6);footerEnd--){
     3b8:	8b 81       	ldd	r24, Y+3	; 0x03
     3ba:	9c 81       	ldd	r25, Y+4	; 0x04
     3bc:	01 97       	sbiw	r24, 0x01	; 1
     3be:	9c 83       	std	Y+4, r25	; 0x04
     3c0:	8b 83       	std	Y+3, r24	; 0x03
     3c2:	80 91 52 01 	lds	r24, 0x0152
     3c6:	90 91 53 01 	lds	r25, 0x0153
     3ca:	9c 01       	movw	r18, r24
     3cc:	2a 5f       	subi	r18, 0xFA	; 250
     3ce:	3f 4f       	sbci	r19, 0xFF	; 255
     3d0:	8b 81       	ldd	r24, Y+3	; 0x03
     3d2:	9c 81       	ldd	r25, Y+4	; 0x04
     3d4:	28 17       	cp	r18, r24
     3d6:	39 07       	cpc	r19, r25
     3d8:	09 f0       	breq	.+2      	; 0x3dc <DecomposeMessageFromBuffer+0x214>
     3da:	1e cf       	rjmp	.-452    	; 0x218 <DecomposeMessageFromBuffer+0x50>
CommandStatus DecomposeMessageFromBuffer(){
	// Search for header
	uint8_t* headerStart = command_buffer;
	uint8_t* footerEnd = command_buffer+31;

	for(;headerStart!=(command_buffer+22);headerStart++){
     3dc:	89 81       	ldd	r24, Y+1	; 0x01
     3de:	9a 81       	ldd	r25, Y+2	; 0x02
     3e0:	01 96       	adiw	r24, 0x01	; 1
     3e2:	9a 83       	std	Y+2, r25	; 0x02
     3e4:	89 83       	std	Y+1, r24	; 0x01
     3e6:	80 91 52 01 	lds	r24, 0x0152
     3ea:	90 91 53 01 	lds	r25, 0x0153
     3ee:	9c 01       	movw	r18, r24
     3f0:	2a 5e       	subi	r18, 0xEA	; 234
     3f2:	3f 4f       	sbci	r19, 0xFF	; 255
     3f4:	89 81       	ldd	r24, Y+1	; 0x01
     3f6:	9a 81       	ldd	r25, Y+2	; 0x02
     3f8:	28 17       	cp	r18, r24
     3fa:	39 07       	cpc	r19, r25
     3fc:	09 f0       	breq	.+2      	; 0x400 <DecomposeMessageFromBuffer+0x238>
     3fe:	fc ce       	rjmp	.-520    	; 0x1f8 <DecomposeMessageFromBuffer+0x30>
					return SUCCESFUL_DECOMPOSITION;
				}
			}
		}
	}
	return WRONG_HEADER_SEGMENTATION;
     400:	81 e0       	ldi	r24, 0x01	; 1
}
     402:	29 96       	adiw	r28, 0x09	; 9
     404:	0f b6       	in	r0, 0x3f	; 63
     406:	f8 94       	cli
     408:	de bf       	out	0x3e, r29	; 62
     40a:	0f be       	out	0x3f, r0	; 63
     40c:	cd bf       	out	0x3d, r28	; 61
     40e:	cf 91       	pop	r28
     410:	df 91       	pop	r29
     412:	08 95       	ret

00000414 <ComposeMessageToBuffer>:

CommandStatus ComposeMessageToBuffer(CommandTypeID targetTypeID, uint8_t parameterCount, uint8_t targetBoardID){
     414:	df 93       	push	r29
     416:	cf 93       	push	r28
     418:	cd b7       	in	r28, 0x3d	; 61
     41a:	de b7       	in	r29, 0x3e	; 62
     41c:	28 97       	sbiw	r28, 0x08	; 8
     41e:	0f b6       	in	r0, 0x3f	; 63
     420:	f8 94       	cli
     422:	de bf       	out	0x3e, r29	; 62
     424:	0f be       	out	0x3f, r0	; 63
     426:	cd bf       	out	0x3d, r28	; 61
     428:	8e 83       	std	Y+6, r24	; 0x06
     42a:	6f 83       	std	Y+7, r22	; 0x07
     42c:	48 87       	std	Y+8, r20	; 0x08
	
	memset(command_buffer, 0, 32);
     42e:	80 91 52 01 	lds	r24, 0x0152
     432:	90 91 53 01 	lds	r25, 0x0153
     436:	60 e0       	ldi	r22, 0x00	; 0
     438:	70 e0       	ldi	r23, 0x00	; 0
     43a:	40 e2       	ldi	r20, 0x20	; 32
     43c:	50 e0       	ldi	r21, 0x00	; 0
     43e:	0e 94 ca 11 	call	0x2394	; 0x2394 <memset>
	
	command_buffer[0] = SOH;
     442:	80 91 52 01 	lds	r24, 0x0152
     446:	90 91 53 01 	lds	r25, 0x0153
     44a:	21 e0       	ldi	r18, 0x01	; 1
     44c:	fc 01       	movw	r30, r24
     44e:	20 83       	st	Z, r18
	if (lastMessagePID==0xFF) { lastMessagePID++; } else { lastMessagePID = 0; }
     450:	80 91 51 01 	lds	r24, 0x0151
     454:	8f 3f       	cpi	r24, 0xFF	; 255
     456:	31 f4       	brne	.+12     	; 0x464 <ComposeMessageToBuffer+0x50>
     458:	80 91 51 01 	lds	r24, 0x0151
     45c:	8f 5f       	subi	r24, 0xFF	; 255
     45e:	80 93 51 01 	sts	0x0151, r24
     462:	02 c0       	rjmp	.+4      	; 0x468 <ComposeMessageToBuffer+0x54>
     464:	10 92 51 01 	sts	0x0151, r1
	command_buffer[1] = lastMessagePID;
     468:	80 91 52 01 	lds	r24, 0x0152
     46c:	90 91 53 01 	lds	r25, 0x0153
     470:	01 96       	adiw	r24, 0x01	; 1
     472:	20 91 51 01 	lds	r18, 0x0151
     476:	fc 01       	movw	r30, r24
     478:	20 83       	st	Z, r18
	command_buffer[2] = targetBoardID;
     47a:	80 91 52 01 	lds	r24, 0x0152
     47e:	90 91 53 01 	lds	r25, 0x0153
     482:	02 96       	adiw	r24, 0x02	; 2
     484:	28 85       	ldd	r18, Y+8	; 0x08
     486:	fc 01       	movw	r30, r24
     488:	20 83       	st	Z, r18
	command_buffer[3] = currentModuleID;
     48a:	80 91 52 01 	lds	r24, 0x0152
     48e:	90 91 53 01 	lds	r25, 0x0153
     492:	03 96       	adiw	r24, 0x03	; 3
     494:	21 e0       	ldi	r18, 0x01	; 1
     496:	fc 01       	movw	r30, r24
     498:	20 83       	st	Z, r18
	command_buffer[4] = STX;
     49a:	80 91 52 01 	lds	r24, 0x0152
     49e:	90 91 53 01 	lds	r25, 0x0153
     4a2:	04 96       	adiw	r24, 0x04	; 4
     4a4:	22 e0       	ldi	r18, 0x02	; 2
     4a6:	fc 01       	movw	r30, r24
     4a8:	20 83       	st	Z, r18
	command_buffer[5] = targetTypeID;
     4aa:	80 91 52 01 	lds	r24, 0x0152
     4ae:	90 91 53 01 	lds	r25, 0x0153
     4b2:	05 96       	adiw	r24, 0x05	; 5
     4b4:	2e 81       	ldd	r18, Y+6	; 0x06
     4b6:	fc 01       	movw	r30, r24
     4b8:	20 83       	st	Z, r18

	if (parameterCount>12) return PARAMETER_COUNT_OVERSIZE;
     4ba:	8f 81       	ldd	r24, Y+7	; 0x07
     4bc:	8d 30       	cpi	r24, 0x0D	; 13
     4be:	10 f0       	brcs	.+4      	; 0x4c4 <ComposeMessageToBuffer+0xb0>
     4c0:	87 e0       	ldi	r24, 0x07	; 7
     4c2:	8c c0       	rjmp	.+280    	; 0x5dc <ComposeMessageToBuffer+0x1c8>

	uint8_t* parameterStart = &command_buffer[6];
     4c4:	80 91 52 01 	lds	r24, 0x0152
     4c8:	90 91 53 01 	lds	r25, 0x0153
     4cc:	06 96       	adiw	r24, 0x06	; 6
     4ce:	9a 83       	std	Y+2, r25	; 0x02
     4d0:	89 83       	std	Y+1, r24	; 0x01

	for (uint8_t x = 0; x < parameterCount; x++){
     4d2:	1b 82       	std	Y+3, r1	; 0x03
     4d4:	4d c0       	rjmp	.+154    	; 0x570 <ComposeMessageToBuffer+0x15c>
		*parameterStart = parameter[x].byteLength;
     4d6:	8b 81       	ldd	r24, Y+3	; 0x03
     4d8:	28 2f       	mov	r18, r24
     4da:	30 e0       	ldi	r19, 0x00	; 0
     4dc:	c9 01       	movw	r24, r18
     4de:	88 0f       	add	r24, r24
     4e0:	99 1f       	adc	r25, r25
     4e2:	82 0f       	add	r24, r18
     4e4:	93 1f       	adc	r25, r19
     4e6:	86 5d       	subi	r24, 0xD6	; 214
     4e8:	9e 4f       	sbci	r25, 0xFE	; 254
     4ea:	fc 01       	movw	r30, r24
     4ec:	20 81       	ld	r18, Z
     4ee:	89 81       	ldd	r24, Y+1	; 0x01
     4f0:	9a 81       	ldd	r25, Y+2	; 0x02
     4f2:	fc 01       	movw	r30, r24
     4f4:	20 83       	st	Z, r18
		memcpy(parameterStart+1, parameter[x].startingPointer, parameter[x].byteLength);
     4f6:	89 81       	ldd	r24, Y+1	; 0x01
     4f8:	9a 81       	ldd	r25, Y+2	; 0x02
     4fa:	bc 01       	movw	r22, r24
     4fc:	6f 5f       	subi	r22, 0xFF	; 255
     4fe:	7f 4f       	sbci	r23, 0xFF	; 255
     500:	8b 81       	ldd	r24, Y+3	; 0x03
     502:	28 2f       	mov	r18, r24
     504:	30 e0       	ldi	r19, 0x00	; 0
     506:	c9 01       	movw	r24, r18
     508:	88 0f       	add	r24, r24
     50a:	99 1f       	adc	r25, r25
     50c:	82 0f       	add	r24, r18
     50e:	93 1f       	adc	r25, r19
     510:	88 5d       	subi	r24, 0xD8	; 216
     512:	9e 4f       	sbci	r25, 0xFE	; 254
     514:	fc 01       	movw	r30, r24
     516:	40 81       	ld	r20, Z
     518:	51 81       	ldd	r21, Z+1	; 0x01
     51a:	8b 81       	ldd	r24, Y+3	; 0x03
     51c:	28 2f       	mov	r18, r24
     51e:	30 e0       	ldi	r19, 0x00	; 0
     520:	c9 01       	movw	r24, r18
     522:	88 0f       	add	r24, r24
     524:	99 1f       	adc	r25, r25
     526:	82 0f       	add	r24, r18
     528:	93 1f       	adc	r25, r19
     52a:	86 5d       	subi	r24, 0xD6	; 214
     52c:	9e 4f       	sbci	r25, 0xFE	; 254
     52e:	fc 01       	movw	r30, r24
     530:	80 81       	ld	r24, Z
     532:	28 2f       	mov	r18, r24
     534:	30 e0       	ldi	r19, 0x00	; 0
     536:	cb 01       	movw	r24, r22
     538:	ba 01       	movw	r22, r20
     53a:	a9 01       	movw	r20, r18
     53c:	0e 94 c1 11 	call	0x2382	; 0x2382 <memcpy>
		parameterStart+=(parameter[x].byteLength)+1;
     540:	8b 81       	ldd	r24, Y+3	; 0x03
     542:	28 2f       	mov	r18, r24
     544:	30 e0       	ldi	r19, 0x00	; 0
     546:	c9 01       	movw	r24, r18
     548:	88 0f       	add	r24, r24
     54a:	99 1f       	adc	r25, r25
     54c:	82 0f       	add	r24, r18
     54e:	93 1f       	adc	r25, r19
     550:	86 5d       	subi	r24, 0xD6	; 214
     552:	9e 4f       	sbci	r25, 0xFE	; 254
     554:	fc 01       	movw	r30, r24
     556:	80 81       	ld	r24, Z
     558:	88 2f       	mov	r24, r24
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	01 96       	adiw	r24, 0x01	; 1
     55e:	29 81       	ldd	r18, Y+1	; 0x01
     560:	3a 81       	ldd	r19, Y+2	; 0x02
     562:	82 0f       	add	r24, r18
     564:	93 1f       	adc	r25, r19
     566:	9a 83       	std	Y+2, r25	; 0x02
     568:	89 83       	std	Y+1, r24	; 0x01

	if (parameterCount>12) return PARAMETER_COUNT_OVERSIZE;

	uint8_t* parameterStart = &command_buffer[6];

	for (uint8_t x = 0; x < parameterCount; x++){
     56a:	8b 81       	ldd	r24, Y+3	; 0x03
     56c:	8f 5f       	subi	r24, 0xFF	; 255
     56e:	8b 83       	std	Y+3, r24	; 0x03
     570:	9b 81       	ldd	r25, Y+3	; 0x03
     572:	8f 81       	ldd	r24, Y+7	; 0x07
     574:	98 17       	cp	r25, r24
     576:	08 f4       	brcc	.+2      	; 0x57a <ComposeMessageToBuffer+0x166>
     578:	ae cf       	rjmp	.-164    	; 0x4d6 <ComposeMessageToBuffer+0xc2>
		memcpy(parameterStart+1, parameter[x].startingPointer, parameter[x].byteLength);
		parameterStart+=(parameter[x].byteLength)+1;
	}

	crc_t crc;
	crc = crc_init();
     57a:	0e 94 53 00 	call	0xa6	; 0xa6 <crc_init>
     57e:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t crc_length = ((parameterStart)-(&command_buffer[0]));
     580:	89 81       	ldd	r24, Y+1	; 0x01
     582:	9a 81       	ldd	r25, Y+2	; 0x02
     584:	28 2f       	mov	r18, r24
     586:	80 91 52 01 	lds	r24, 0x0152
     58a:	90 91 53 01 	lds	r25, 0x0153
     58e:	f2 2f       	mov	r31, r18
     590:	f8 1b       	sub	r31, r24
     592:	8f 2f       	mov	r24, r31
     594:	8d 83       	std	Y+5, r24	; 0x05
	crc = crc_update(crc, &command_buffer[0], crc_length);
     596:	40 91 52 01 	lds	r20, 0x0152
     59a:	50 91 53 01 	lds	r21, 0x0153
     59e:	8d 81       	ldd	r24, Y+5	; 0x05
     5a0:	28 2f       	mov	r18, r24
     5a2:	30 e0       	ldi	r19, 0x00	; 0
     5a4:	8c 81       	ldd	r24, Y+4	; 0x04
     5a6:	ba 01       	movw	r22, r20
     5a8:	a9 01       	movw	r20, r18
     5aa:	0e 94 29 06 	call	0xc52	; 0xc52 <crc_update>
     5ae:	8c 83       	std	Y+4, r24	; 0x04
	crc = crc_finalize(crc);
     5b0:	8c 81       	ldd	r24, Y+4	; 0x04
     5b2:	0e 94 5b 00 	call	0xb6	; 0xb6 <crc_finalize>
     5b6:	8c 83       	std	Y+4, r24	; 0x04

	*parameterStart = ETX;
     5b8:	89 81       	ldd	r24, Y+1	; 0x01
     5ba:	9a 81       	ldd	r25, Y+2	; 0x02
     5bc:	23 e0       	ldi	r18, 0x03	; 3
     5be:	fc 01       	movw	r30, r24
     5c0:	20 83       	st	Z, r18
	*(parameterStart+1) = crc;
     5c2:	89 81       	ldd	r24, Y+1	; 0x01
     5c4:	9a 81       	ldd	r25, Y+2	; 0x02
     5c6:	01 96       	adiw	r24, 0x01	; 1
     5c8:	2c 81       	ldd	r18, Y+4	; 0x04
     5ca:	fc 01       	movw	r30, r24
     5cc:	20 83       	st	Z, r18
	*(parameterStart+2) = ETB;
     5ce:	89 81       	ldd	r24, Y+1	; 0x01
     5d0:	9a 81       	ldd	r25, Y+2	; 0x02
     5d2:	02 96       	adiw	r24, 0x02	; 2
     5d4:	27 e1       	ldi	r18, 0x17	; 23
     5d6:	fc 01       	movw	r30, r24
     5d8:	20 83       	st	Z, r18
	
	return SUCCESFUL_COMPOSITION;
     5da:	8a e0       	ldi	r24, 0x0A	; 10
}
     5dc:	28 96       	adiw	r28, 0x08	; 8
     5de:	0f b6       	in	r0, 0x3f	; 63
     5e0:	f8 94       	cli
     5e2:	de bf       	out	0x3e, r29	; 62
     5e4:	0f be       	out	0x3f, r0	; 63
     5e6:	cd bf       	out	0x3d, r28	; 61
     5e8:	cf 91       	pop	r28
     5ea:	df 91       	pop	r29
     5ec:	08 95       	ret

000005ee <HandleAvailableCommand>:

void HandleAvailableCommand(){
     5ee:	df 93       	push	r29
     5f0:	cf 93       	push	r28
     5f2:	cd b7       	in	r28, 0x3d	; 61
     5f4:	de b7       	in	r29, 0x3e	; 62
	lastMessageCommandType.handlerFunction();
     5f6:	80 91 4e 01 	lds	r24, 0x014E
     5fa:	90 91 4f 01 	lds	r25, 0x014F
     5fe:	fc 01       	movw	r30, r24
     600:	09 95       	icall
}
     602:	cf 91       	pop	r28
     604:	df 91       	pop	r29
     606:	08 95       	ret

00000608 <RetransmissionToModule>:

RF_TransmissionStatus RetransmissionToModule(){
     608:	df 93       	push	r29
     60a:	cf 93       	push	r28
     60c:	0f 92       	push	r0
     60e:	cd b7       	in	r28, 0x3d	; 61
     610:	de b7       	in	r29, 0x3e	; 62
	nrf24_initRF_SAFE((lastTargetModuleID-1), TRANSMIT);	// CONNECTION TO MODULE: GENERAL RF CHANNEL 112, (lastTargetModuleID-1) offset 1
     612:	80 91 55 01 	lds	r24, 0x0155
     616:	81 50       	subi	r24, 0x01	; 1
     618:	61 e0       	ldi	r22, 0x01	; 1
     61a:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <nrf24_initRF_SAFE>
	nrf24_send(command_buffer);
     61e:	80 91 52 01 	lds	r24, 0x0152
     622:	90 91 53 01 	lds	r25, 0x0153
     626:	0e 94 4a 09 	call	0x1294	; 0x1294 <nrf24_send>
	while(nrf24_isSending());
     62a:	00 00       	nop
     62c:	0e 94 77 09 	call	0x12ee	; 0x12ee <nrf24_isSending>
     630:	88 23       	and	r24, r24
     632:	e1 f7       	brne	.-8      	; 0x62c <RetransmissionToModule+0x24>

	uint8_t messageStatus = nrf24_lastMessageStatus();
     634:	0e 94 a1 09 	call	0x1342	; 0x1342 <nrf24_lastMessageStatus>
     638:	89 83       	std	Y+1, r24	; 0x01
	if(messageStatus == NRF24_TRANSMISSON_OK) { return RF_SUCCESFUL_TRANSMISSION; }
     63a:	89 81       	ldd	r24, Y+1	; 0x01
     63c:	88 23       	and	r24, r24
     63e:	11 f4       	brne	.+4      	; 0x644 <RetransmissionToModule+0x3c>
     640:	80 e0       	ldi	r24, 0x00	; 0
     642:	06 c0       	rjmp	.+12     	; 0x650 <RetransmissionToModule+0x48>
	else if(messageStatus == NRF24_MESSAGE_LOST) { return RF_UNREACHEABLE_MODULE;}
     644:	89 81       	ldd	r24, Y+1	; 0x01
     646:	81 30       	cpi	r24, 0x01	; 1
     648:	11 f4       	brne	.+4      	; 0x64e <RetransmissionToModule+0x46>
     64a:	81 e0       	ldi	r24, 0x01	; 1
     64c:	01 c0       	rjmp	.+2      	; 0x650 <RetransmissionToModule+0x48>
	return RF_UNREACHEABLE_MODULE;
     64e:	81 e0       	ldi	r24, 0x01	; 1
}
     650:	0f 90       	pop	r0
     652:	cf 91       	pop	r28
     654:	df 91       	pop	r29
     656:	08 95       	ret

00000658 <RetransmissionToPhone>:

void RetransmissionToPhone(){
     658:	df 93       	push	r29
     65a:	cf 93       	push	r28
     65c:	cd b7       	in	r28, 0x3d	; 61
     65e:	de b7       	in	r29, 0x3e	; 62
	transmitMessageSync(command_buffer, 32);
     660:	80 91 52 01 	lds	r24, 0x0152
     664:	90 91 53 01 	lds	r25, 0x0153
     668:	60 e2       	ldi	r22, 0x20	; 32
     66a:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <transmitMessageSync>
}
     66e:	cf 91       	pop	r28
     670:	df 91       	pop	r29
     672:	08 95       	ret

00000674 <writeParameterValue>:



void writeParameterValue(uint8_t parameterIndex, uint8_t* parameterData, uint8_t parameterByteLength){
     674:	0f 93       	push	r16
     676:	1f 93       	push	r17
     678:	df 93       	push	r29
     67a:	cf 93       	push	r28
     67c:	00 d0       	rcall	.+0      	; 0x67e <writeParameterValue+0xa>
     67e:	00 d0       	rcall	.+0      	; 0x680 <writeParameterValue+0xc>
     680:	cd b7       	in	r28, 0x3d	; 61
     682:	de b7       	in	r29, 0x3e	; 62
     684:	89 83       	std	Y+1, r24	; 0x01
     686:	7b 83       	std	Y+3, r23	; 0x03
     688:	6a 83       	std	Y+2, r22	; 0x02
     68a:	4c 83       	std	Y+4, r20	; 0x04
	parameter[parameterIndex].startingPointer = (uint8_t*) realloc(parameter[parameterIndex].startingPointer, parameterByteLength);
     68c:	89 81       	ldd	r24, Y+1	; 0x01
     68e:	08 2f       	mov	r16, r24
     690:	10 e0       	ldi	r17, 0x00	; 0
     692:	89 81       	ldd	r24, Y+1	; 0x01
     694:	28 2f       	mov	r18, r24
     696:	30 e0       	ldi	r19, 0x00	; 0
     698:	c9 01       	movw	r24, r18
     69a:	88 0f       	add	r24, r24
     69c:	99 1f       	adc	r25, r25
     69e:	82 0f       	add	r24, r18
     6a0:	93 1f       	adc	r25, r19
     6a2:	88 5d       	subi	r24, 0xD8	; 216
     6a4:	9e 4f       	sbci	r25, 0xFE	; 254
     6a6:	fc 01       	movw	r30, r24
     6a8:	80 81       	ld	r24, Z
     6aa:	91 81       	ldd	r25, Z+1	; 0x01
     6ac:	2c 81       	ldd	r18, Y+4	; 0x04
     6ae:	22 2f       	mov	r18, r18
     6b0:	30 e0       	ldi	r19, 0x00	; 0
     6b2:	b9 01       	movw	r22, r18
     6b4:	0e 94 f6 10 	call	0x21ec	; 0x21ec <realloc>
     6b8:	9c 01       	movw	r18, r24
     6ba:	c8 01       	movw	r24, r16
     6bc:	88 0f       	add	r24, r24
     6be:	99 1f       	adc	r25, r25
     6c0:	80 0f       	add	r24, r16
     6c2:	91 1f       	adc	r25, r17
     6c4:	88 5d       	subi	r24, 0xD8	; 216
     6c6:	9e 4f       	sbci	r25, 0xFE	; 254
     6c8:	fc 01       	movw	r30, r24
     6ca:	31 83       	std	Z+1, r19	; 0x01
     6cc:	20 83       	st	Z, r18
	memcpy(parameter[parameterIndex].startingPointer, parameterData, parameterByteLength);
     6ce:	89 81       	ldd	r24, Y+1	; 0x01
     6d0:	28 2f       	mov	r18, r24
     6d2:	30 e0       	ldi	r19, 0x00	; 0
     6d4:	c9 01       	movw	r24, r18
     6d6:	88 0f       	add	r24, r24
     6d8:	99 1f       	adc	r25, r25
     6da:	82 0f       	add	r24, r18
     6dc:	93 1f       	adc	r25, r19
     6de:	88 5d       	subi	r24, 0xD8	; 216
     6e0:	9e 4f       	sbci	r25, 0xFE	; 254
     6e2:	fc 01       	movw	r30, r24
     6e4:	80 81       	ld	r24, Z
     6e6:	91 81       	ldd	r25, Z+1	; 0x01
     6e8:	2c 81       	ldd	r18, Y+4	; 0x04
     6ea:	22 2f       	mov	r18, r18
     6ec:	30 e0       	ldi	r19, 0x00	; 0
     6ee:	4a 81       	ldd	r20, Y+2	; 0x02
     6f0:	5b 81       	ldd	r21, Y+3	; 0x03
     6f2:	ba 01       	movw	r22, r20
     6f4:	a9 01       	movw	r20, r18
     6f6:	0e 94 c1 11 	call	0x2382	; 0x2382 <memcpy>
	parameter[parameterIndex].byteLength = parameterByteLength;
     6fa:	89 81       	ldd	r24, Y+1	; 0x01
     6fc:	28 2f       	mov	r18, r24
     6fe:	30 e0       	ldi	r19, 0x00	; 0
     700:	c9 01       	movw	r24, r18
     702:	88 0f       	add	r24, r24
     704:	99 1f       	adc	r25, r25
     706:	82 0f       	add	r24, r18
     708:	93 1f       	adc	r25, r19
     70a:	86 5d       	subi	r24, 0xD6	; 214
     70c:	9e 4f       	sbci	r25, 0xFE	; 254
     70e:	2c 81       	ldd	r18, Y+4	; 0x04
     710:	fc 01       	movw	r30, r24
     712:	20 83       	st	Z, r18
}
     714:	0f 90       	pop	r0
     716:	0f 90       	pop	r0
     718:	0f 90       	pop	r0
     71a:	0f 90       	pop	r0
     71c:	cf 91       	pop	r28
     71e:	df 91       	pop	r29
     720:	1f 91       	pop	r17
     722:	0f 91       	pop	r16
     724:	08 95       	ret

00000726 <UPDATE_ALL_DEVICES_VALUE_H>:

void UPDATE_ALL_DEVICES_VALUE_H() {}
     726:	df 93       	push	r29
     728:	cf 93       	push	r28
     72a:	cd b7       	in	r28, 0x3d	; 61
     72c:	de b7       	in	r29, 0x3e	; 62
     72e:	cf 91       	pop	r28
     730:	df 91       	pop	r29
     732:	08 95       	ret

00000734 <UPDATE_DEVICE_VALUE_H>:
void UPDATE_DEVICE_VALUE_H() {}
     734:	df 93       	push	r29
     736:	cf 93       	push	r28
     738:	cd b7       	in	r28, 0x3d	; 61
     73a:	de b7       	in	r29, 0x3e	; 62
     73c:	cf 91       	pop	r28
     73e:	df 91       	pop	r29
     740:	08 95       	ret

00000742 <GET_ALL_DEVICES_VALUE_H>:
void GET_ALL_DEVICES_VALUE_H() {
     742:	0f 93       	push	r16
     744:	1f 93       	push	r17
     746:	df 93       	push	r29
     748:	cf 93       	push	r28
     74a:	cd b7       	in	r28, 0x3d	; 61
     74c:	de b7       	in	r29, 0x3e	; 62
     74e:	a0 97       	sbiw	r28, 0x20	; 32
     750:	0f b6       	in	r0, 0x3f	; 63
     752:	f8 94       	cli
     754:	de bf       	out	0x3e, r29	; 62
     756:	0f be       	out	0x3f, r0	; 63
     758:	cd bf       	out	0x3d, r28	; 61
     75a:	80 e0       	ldi	r24, 0x00	; 0
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	a8 ec       	ldi	r26, 0xC8	; 200
     760:	b2 e4       	ldi	r27, 0x42	; 66
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ad 83       	std	Y+5, r26	; 0x05
     768:	be 83       	std	Y+6, r27	; 0x06
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     76a:	6b 81       	ldd	r22, Y+3	; 0x03
     76c:	7c 81       	ldd	r23, Y+4	; 0x04
     76e:	8d 81       	ldd	r24, Y+5	; 0x05
     770:	9e 81       	ldd	r25, Y+6	; 0x06
     772:	20 e0       	ldi	r18, 0x00	; 0
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	4a e7       	ldi	r20, 0x7A	; 122
     778:	55 e4       	ldi	r21, 0x45	; 69
     77a:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <__mulsf3>
     77e:	dc 01       	movw	r26, r24
     780:	cb 01       	movw	r24, r22
     782:	8f 83       	std	Y+7, r24	; 0x07
     784:	98 87       	std	Y+8, r25	; 0x08
     786:	a9 87       	std	Y+9, r26	; 0x09
     788:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     78a:	11 e0       	ldi	r17, 0x01	; 1
     78c:	6f 81       	ldd	r22, Y+7	; 0x07
     78e:	78 85       	ldd	r23, Y+8	; 0x08
     790:	89 85       	ldd	r24, Y+9	; 0x09
     792:	9a 85       	ldd	r25, Y+10	; 0x0a
     794:	20 e0       	ldi	r18, 0x00	; 0
     796:	30 e0       	ldi	r19, 0x00	; 0
     798:	40 e8       	ldi	r20, 0x80	; 128
     79a:	5f e3       	ldi	r21, 0x3F	; 63
     79c:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <__cmpsf2>
     7a0:	88 23       	and	r24, r24
     7a2:	0c f0       	brlt	.+2      	; 0x7a6 <GET_ALL_DEVICES_VALUE_H+0x64>
     7a4:	10 e0       	ldi	r17, 0x00	; 0
     7a6:	11 23       	and	r17, r17
     7a8:	29 f0       	breq	.+10     	; 0x7b4 <GET_ALL_DEVICES_VALUE_H+0x72>
		__ticks = 1;
     7aa:	81 e0       	ldi	r24, 0x01	; 1
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	9c 87       	std	Y+12, r25	; 0x0c
     7b0:	8b 87       	std	Y+11, r24	; 0x0b
     7b2:	46 c0       	rjmp	.+140    	; 0x840 <GET_ALL_DEVICES_VALUE_H+0xfe>
	else if (__tmp > 65535)
     7b4:	11 e0       	ldi	r17, 0x01	; 1
     7b6:	6f 81       	ldd	r22, Y+7	; 0x07
     7b8:	78 85       	ldd	r23, Y+8	; 0x08
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	9a 85       	ldd	r25, Y+10	; 0x0a
     7be:	20 e0       	ldi	r18, 0x00	; 0
     7c0:	3f ef       	ldi	r19, 0xFF	; 255
     7c2:	4f e7       	ldi	r20, 0x7F	; 127
     7c4:	57 e4       	ldi	r21, 0x47	; 71
     7c6:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <__gesf2>
     7ca:	18 16       	cp	r1, r24
     7cc:	0c f0       	brlt	.+2      	; 0x7d0 <GET_ALL_DEVICES_VALUE_H+0x8e>
     7ce:	10 e0       	ldi	r17, 0x00	; 0
     7d0:	11 23       	and	r17, r17
     7d2:	61 f1       	breq	.+88     	; 0x82c <GET_ALL_DEVICES_VALUE_H+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7d4:	6b 81       	ldd	r22, Y+3	; 0x03
     7d6:	7c 81       	ldd	r23, Y+4	; 0x04
     7d8:	8d 81       	ldd	r24, Y+5	; 0x05
     7da:	9e 81       	ldd	r25, Y+6	; 0x06
     7dc:	20 e0       	ldi	r18, 0x00	; 0
     7de:	30 e0       	ldi	r19, 0x00	; 0
     7e0:	40 e2       	ldi	r20, 0x20	; 32
     7e2:	51 e4       	ldi	r21, 0x41	; 65
     7e4:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <__mulsf3>
     7e8:	dc 01       	movw	r26, r24
     7ea:	cb 01       	movw	r24, r22
     7ec:	bc 01       	movw	r22, r24
     7ee:	cd 01       	movw	r24, r26
     7f0:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <__fixunssfsi>
     7f4:	dc 01       	movw	r26, r24
     7f6:	cb 01       	movw	r24, r22
     7f8:	9c 87       	std	Y+12, r25	; 0x0c
     7fa:	8b 87       	std	Y+11, r24	; 0x0b
     7fc:	12 c0       	rjmp	.+36     	; 0x822 <GET_ALL_DEVICES_VALUE_H+0xe0>
     7fe:	80 e9       	ldi	r24, 0x90	; 144
     800:	91 e0       	ldi	r25, 0x01	; 1
     802:	9e 87       	std	Y+14, r25	; 0x0e
     804:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     806:	8d 85       	ldd	r24, Y+13	; 0x0d
     808:	9e 85       	ldd	r25, Y+14	; 0x0e
     80a:	8c 01       	movw	r16, r24
     80c:	c8 01       	movw	r24, r16
     80e:	01 97       	sbiw	r24, 0x01	; 1
     810:	f1 f7       	brne	.-4      	; 0x80e <GET_ALL_DEVICES_VALUE_H+0xcc>
     812:	8c 01       	movw	r16, r24
     814:	1e 87       	std	Y+14, r17	; 0x0e
     816:	0d 87       	std	Y+13, r16	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     818:	8b 85       	ldd	r24, Y+11	; 0x0b
     81a:	9c 85       	ldd	r25, Y+12	; 0x0c
     81c:	01 97       	sbiw	r24, 0x01	; 1
     81e:	9c 87       	std	Y+12, r25	; 0x0c
     820:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     822:	8b 85       	ldd	r24, Y+11	; 0x0b
     824:	9c 85       	ldd	r25, Y+12	; 0x0c
     826:	00 97       	sbiw	r24, 0x00	; 0
     828:	51 f7       	brne	.-44     	; 0x7fe <GET_ALL_DEVICES_VALUE_H+0xbc>
     82a:	17 c0       	rjmp	.+46     	; 0x85a <GET_ALL_DEVICES_VALUE_H+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     82c:	6f 81       	ldd	r22, Y+7	; 0x07
     82e:	78 85       	ldd	r23, Y+8	; 0x08
     830:	89 85       	ldd	r24, Y+9	; 0x09
     832:	9a 85       	ldd	r25, Y+10	; 0x0a
     834:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <__fixunssfsi>
     838:	dc 01       	movw	r26, r24
     83a:	cb 01       	movw	r24, r22
     83c:	9c 87       	std	Y+12, r25	; 0x0c
     83e:	8b 87       	std	Y+11, r24	; 0x0b
     840:	8b 85       	ldd	r24, Y+11	; 0x0b
     842:	9c 85       	ldd	r25, Y+12	; 0x0c
     844:	98 8b       	std	Y+16, r25	; 0x10
     846:	8f 87       	std	Y+15, r24	; 0x0f
     848:	8f 85       	ldd	r24, Y+15	; 0x0f
     84a:	98 89       	ldd	r25, Y+16	; 0x10
     84c:	8c 01       	movw	r16, r24
     84e:	c8 01       	movw	r24, r16
     850:	01 97       	sbiw	r24, 0x01	; 1
     852:	f1 f7       	brne	.-4      	; 0x850 <GET_ALL_DEVICES_VALUE_H+0x10e>
     854:	8c 01       	movw	r16, r24
     856:	18 8b       	std	Y+16, r17	; 0x10
     858:	0f 87       	std	Y+15, r16	; 0x0f
	_delay_ms(100);
	
	uint8_t boardState[2];
	
	ComposeMessageToBuffer(MESSAGE_STATUS_ID, 0, POWER_MODULE);
     85a:	84 e0       	ldi	r24, 0x04	; 4
     85c:	60 e0       	ldi	r22, 0x00	; 0
     85e:	42 e0       	ldi	r20, 0x02	; 2
     860:	0e 94 0a 02 	call	0x414	; 0x414 <ComposeMessageToBuffer>
	nrf24_initRF_SAFE(POWER_BOARD_RF, TRANSMIT);	// CONNECTION TO MODULE: GENERAL RF CHANNEL 112
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	61 e0       	ldi	r22, 0x01	; 1
     868:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <nrf24_initRF_SAFE>
	nrf24_send(command_buffer);
     86c:	80 91 52 01 	lds	r24, 0x0152
     870:	90 91 53 01 	lds	r25, 0x0153
     874:	0e 94 4a 09 	call	0x1294	; 0x1294 <nrf24_send>
	while(nrf24_isSending());
     878:	00 00       	nop
     87a:	0e 94 77 09 	call	0x12ee	; 0x12ee <nrf24_isSending>
     87e:	88 23       	and	r24, r24
     880:	e1 f7       	brne	.-8      	; 0x87a <GET_ALL_DEVICES_VALUE_H+0x138>

	uint8_t messageStatus = nrf24_lastMessageStatus();
     882:	0e 94 a1 09 	call	0x1342	; 0x1342 <nrf24_lastMessageStatus>
     886:	89 83       	std	Y+1, r24	; 0x01
	if(messageStatus == NRF24_TRANSMISSON_OK) { boardState[0] = 0xFF; }
     888:	89 81       	ldd	r24, Y+1	; 0x01
     88a:	88 23       	and	r24, r24
     88c:	19 f4       	brne	.+6      	; 0x894 <GET_ALL_DEVICES_VALUE_H+0x152>
     88e:	8f ef       	ldi	r24, 0xFF	; 255
     890:	8f 8f       	std	Y+31, r24	; 0x1f
     892:	04 c0       	rjmp	.+8      	; 0x89c <GET_ALL_DEVICES_VALUE_H+0x15a>
	else if(messageStatus == NRF24_MESSAGE_LOST) { boardState[0]= 0x00; }
     894:	89 81       	ldd	r24, Y+1	; 0x01
     896:	81 30       	cpi	r24, 0x01	; 1
     898:	09 f4       	brne	.+2      	; 0x89c <GET_ALL_DEVICES_VALUE_H+0x15a>
     89a:	1f 8e       	std	Y+31, r1	; 0x1f
     89c:	80 e0       	ldi	r24, 0x00	; 0
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	a8 e4       	ldi	r26, 0x48	; 72
     8a2:	b2 e4       	ldi	r27, 0x42	; 66
     8a4:	89 8b       	std	Y+17, r24	; 0x11
     8a6:	9a 8b       	std	Y+18, r25	; 0x12
     8a8:	ab 8b       	std	Y+19, r26	; 0x13
     8aa:	bc 8b       	std	Y+20, r27	; 0x14
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     8ac:	69 89       	ldd	r22, Y+17	; 0x11
     8ae:	7a 89       	ldd	r23, Y+18	; 0x12
     8b0:	8b 89       	ldd	r24, Y+19	; 0x13
     8b2:	9c 89       	ldd	r25, Y+20	; 0x14
     8b4:	20 e0       	ldi	r18, 0x00	; 0
     8b6:	30 e0       	ldi	r19, 0x00	; 0
     8b8:	4a e7       	ldi	r20, 0x7A	; 122
     8ba:	55 e4       	ldi	r21, 0x45	; 69
     8bc:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <__mulsf3>
     8c0:	dc 01       	movw	r26, r24
     8c2:	cb 01       	movw	r24, r22
     8c4:	8d 8b       	std	Y+21, r24	; 0x15
     8c6:	9e 8b       	std	Y+22, r25	; 0x16
     8c8:	af 8b       	std	Y+23, r26	; 0x17
     8ca:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     8cc:	11 e0       	ldi	r17, 0x01	; 1
     8ce:	6d 89       	ldd	r22, Y+21	; 0x15
     8d0:	7e 89       	ldd	r23, Y+22	; 0x16
     8d2:	8f 89       	ldd	r24, Y+23	; 0x17
     8d4:	98 8d       	ldd	r25, Y+24	; 0x18
     8d6:	20 e0       	ldi	r18, 0x00	; 0
     8d8:	30 e0       	ldi	r19, 0x00	; 0
     8da:	40 e8       	ldi	r20, 0x80	; 128
     8dc:	5f e3       	ldi	r21, 0x3F	; 63
     8de:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <__cmpsf2>
     8e2:	88 23       	and	r24, r24
     8e4:	0c f0       	brlt	.+2      	; 0x8e8 <GET_ALL_DEVICES_VALUE_H+0x1a6>
     8e6:	10 e0       	ldi	r17, 0x00	; 0
     8e8:	11 23       	and	r17, r17
     8ea:	29 f0       	breq	.+10     	; 0x8f6 <GET_ALL_DEVICES_VALUE_H+0x1b4>
		__ticks = 1;
     8ec:	81 e0       	ldi	r24, 0x01	; 1
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	9a 8f       	std	Y+26, r25	; 0x1a
     8f2:	89 8f       	std	Y+25, r24	; 0x19
     8f4:	46 c0       	rjmp	.+140    	; 0x982 <__stack+0x83>
	else if (__tmp > 65535)
     8f6:	11 e0       	ldi	r17, 0x01	; 1
     8f8:	6d 89       	ldd	r22, Y+21	; 0x15
     8fa:	7e 89       	ldd	r23, Y+22	; 0x16
     8fc:	8f 89       	ldd	r24, Y+23	; 0x17
     8fe:	98 8d       	ldd	r25, Y+24	; 0x18
     900:	20 e0       	ldi	r18, 0x00	; 0
     902:	3f ef       	ldi	r19, 0xFF	; 255
     904:	4f e7       	ldi	r20, 0x7F	; 127
     906:	57 e4       	ldi	r21, 0x47	; 71
     908:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <__gesf2>
     90c:	18 16       	cp	r1, r24
     90e:	0c f0       	brlt	.+2      	; 0x912 <__stack+0x13>
     910:	10 e0       	ldi	r17, 0x00	; 0
     912:	11 23       	and	r17, r17
     914:	61 f1       	breq	.+88     	; 0x96e <__stack+0x6f>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     916:	69 89       	ldd	r22, Y+17	; 0x11
     918:	7a 89       	ldd	r23, Y+18	; 0x12
     91a:	8b 89       	ldd	r24, Y+19	; 0x13
     91c:	9c 89       	ldd	r25, Y+20	; 0x14
     91e:	20 e0       	ldi	r18, 0x00	; 0
     920:	30 e0       	ldi	r19, 0x00	; 0
     922:	40 e2       	ldi	r20, 0x20	; 32
     924:	51 e4       	ldi	r21, 0x41	; 65
     926:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <__mulsf3>
     92a:	dc 01       	movw	r26, r24
     92c:	cb 01       	movw	r24, r22
     92e:	bc 01       	movw	r22, r24
     930:	cd 01       	movw	r24, r26
     932:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <__fixunssfsi>
     936:	dc 01       	movw	r26, r24
     938:	cb 01       	movw	r24, r22
     93a:	9a 8f       	std	Y+26, r25	; 0x1a
     93c:	89 8f       	std	Y+25, r24	; 0x19
     93e:	12 c0       	rjmp	.+36     	; 0x964 <__stack+0x65>
     940:	80 e9       	ldi	r24, 0x90	; 144
     942:	91 e0       	ldi	r25, 0x01	; 1
     944:	9c 8f       	std	Y+28, r25	; 0x1c
     946:	8b 8f       	std	Y+27, r24	; 0x1b
     948:	8b 8d       	ldd	r24, Y+27	; 0x1b
     94a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     94c:	8c 01       	movw	r16, r24
     94e:	c8 01       	movw	r24, r16
     950:	01 97       	sbiw	r24, 0x01	; 1
     952:	f1 f7       	brne	.-4      	; 0x950 <__stack+0x51>
     954:	8c 01       	movw	r16, r24
     956:	1c 8f       	std	Y+28, r17	; 0x1c
     958:	0b 8f       	std	Y+27, r16	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     95a:	89 8d       	ldd	r24, Y+25	; 0x19
     95c:	9a 8d       	ldd	r25, Y+26	; 0x1a
     95e:	01 97       	sbiw	r24, 0x01	; 1
     960:	9a 8f       	std	Y+26, r25	; 0x1a
     962:	89 8f       	std	Y+25, r24	; 0x19
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     964:	89 8d       	ldd	r24, Y+25	; 0x19
     966:	9a 8d       	ldd	r25, Y+26	; 0x1a
     968:	00 97       	sbiw	r24, 0x00	; 0
     96a:	51 f7       	brne	.-44     	; 0x940 <__stack+0x41>
     96c:	17 c0       	rjmp	.+46     	; 0x99c <__stack+0x9d>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     96e:	6d 89       	ldd	r22, Y+21	; 0x15
     970:	7e 89       	ldd	r23, Y+22	; 0x16
     972:	8f 89       	ldd	r24, Y+23	; 0x17
     974:	98 8d       	ldd	r25, Y+24	; 0x18
     976:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <__fixunssfsi>
     97a:	dc 01       	movw	r26, r24
     97c:	cb 01       	movw	r24, r22
     97e:	9a 8f       	std	Y+26, r25	; 0x1a
     980:	89 8f       	std	Y+25, r24	; 0x19
     982:	89 8d       	ldd	r24, Y+25	; 0x19
     984:	9a 8d       	ldd	r25, Y+26	; 0x1a
     986:	9e 8f       	std	Y+30, r25	; 0x1e
     988:	8d 8f       	std	Y+29, r24	; 0x1d
     98a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     98c:	9e 8d       	ldd	r25, Y+30	; 0x1e
     98e:	8c 01       	movw	r16, r24
     990:	c8 01       	movw	r24, r16
     992:	01 97       	sbiw	r24, 0x01	; 1
     994:	f1 f7       	brne	.-4      	; 0x992 <__stack+0x93>
     996:	8c 01       	movw	r16, r24
     998:	1e 8f       	std	Y+30, r17	; 0x1e
     99a:	0d 8f       	std	Y+29, r16	; 0x1d
		
	_delay_ms(50);
	
	ComposeMessageToBuffer(MESSAGE_STATUS_ID, 0, MOTOR_MODULE);
     99c:	84 e0       	ldi	r24, 0x04	; 4
     99e:	60 e0       	ldi	r22, 0x00	; 0
     9a0:	43 e0       	ldi	r20, 0x03	; 3
     9a2:	0e 94 0a 02 	call	0x414	; 0x414 <ComposeMessageToBuffer>
	nrf24_initRF_SAFE(MOTORIZED_BOARD_RF, TRANSMIT);	// CONNECTION TO MODULE: GENERAL RF CHANNEL 112
     9a6:	82 e0       	ldi	r24, 0x02	; 2
     9a8:	61 e0       	ldi	r22, 0x01	; 1
     9aa:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <nrf24_initRF_SAFE>
	nrf24_send(command_buffer);
     9ae:	80 91 52 01 	lds	r24, 0x0152
     9b2:	90 91 53 01 	lds	r25, 0x0153
     9b6:	0e 94 4a 09 	call	0x1294	; 0x1294 <nrf24_send>
	while(nrf24_isSending());
     9ba:	00 00       	nop
     9bc:	0e 94 77 09 	call	0x12ee	; 0x12ee <nrf24_isSending>
     9c0:	88 23       	and	r24, r24
     9c2:	e1 f7       	brne	.-8      	; 0x9bc <__stack+0xbd>

	uint8_t messageStatusSecond = nrf24_lastMessageStatus();
     9c4:	0e 94 a1 09 	call	0x1342	; 0x1342 <nrf24_lastMessageStatus>
     9c8:	8a 83       	std	Y+2, r24	; 0x02
	if(messageStatusSecond == NRF24_TRANSMISSON_OK) { boardState[1] = 0xFF; }
     9ca:	8a 81       	ldd	r24, Y+2	; 0x02
     9cc:	88 23       	and	r24, r24
     9ce:	19 f4       	brne	.+6      	; 0x9d6 <__stack+0xd7>
     9d0:	8f ef       	ldi	r24, 0xFF	; 255
     9d2:	88 a3       	std	Y+32, r24	; 0x20
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__stack+0xdf>
	else if(messageStatusSecond == NRF24_MESSAGE_LOST) { boardState[1]= 0x00; }
     9d6:	8a 81       	ldd	r24, Y+2	; 0x02
     9d8:	81 30       	cpi	r24, 0x01	; 1
     9da:	09 f4       	brne	.+2      	; 0x9de <__stack+0xdf>
     9dc:	18 a2       	std	Y+32, r1	; 0x20
		
		
	writeParameterValue(0, &boardState[0], 1);
     9de:	9e 01       	movw	r18, r28
     9e0:	21 5e       	subi	r18, 0xE1	; 225
     9e2:	3f 4f       	sbci	r19, 0xFF	; 255
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	b9 01       	movw	r22, r18
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	0e 94 3a 03 	call	0x674	; 0x674 <writeParameterValue>
	writeParameterValue(1, &boardState[1], 1);
     9ee:	ce 01       	movw	r24, r28
     9f0:	4f 96       	adiw	r24, 0x1f	; 31
     9f2:	9c 01       	movw	r18, r24
     9f4:	2f 5f       	subi	r18, 0xFF	; 255
     9f6:	3f 4f       	sbci	r19, 0xFF	; 255
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	b9 01       	movw	r22, r18
     9fc:	41 e0       	ldi	r20, 0x01	; 1
     9fe:	0e 94 3a 03 	call	0x674	; 0x674 <writeParameterValue>
	ComposeMessageToBuffer(UPDATE_ALL_DEVICES_VALUE_ID, 2, PHONE_MODULE);  // PHONE_MODULE should be lastTransmitterModuleID
     a02:	80 e0       	ldi	r24, 0x00	; 0
     a04:	62 e0       	ldi	r22, 0x02	; 2
     a06:	40 e0       	ldi	r20, 0x00	; 0
     a08:	0e 94 0a 02 	call	0x414	; 0x414 <ComposeMessageToBuffer>
	transmitMessageSync(command_buffer, 32);
     a0c:	80 91 52 01 	lds	r24, 0x0152
     a10:	90 91 53 01 	lds	r25, 0x0153
     a14:	60 e2       	ldi	r22, 0x20	; 32
     a16:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <transmitMessageSync>
}
     a1a:	a0 96       	adiw	r28, 0x20	; 32
     a1c:	0f b6       	in	r0, 0x3f	; 63
     a1e:	f8 94       	cli
     a20:	de bf       	out	0x3e, r29	; 62
     a22:	0f be       	out	0x3f, r0	; 63
     a24:	cd bf       	out	0x3d, r28	; 61
     a26:	cf 91       	pop	r28
     a28:	df 91       	pop	r29
     a2a:	1f 91       	pop	r17
     a2c:	0f 91       	pop	r16
     a2e:	08 95       	ret

00000a30 <GET_DEVICE_VALUE_H>:

void GET_DEVICE_VALUE_H() {
     a30:	0f 93       	push	r16
     a32:	1f 93       	push	r17
     a34:	df 93       	push	r29
     a36:	cf 93       	push	r28
     a38:	cd b7       	in	r28, 0x3d	; 61
     a3a:	de b7       	in	r29, 0x3e	; 62
     a3c:	62 97       	sbiw	r28, 0x12	; 18
     a3e:	0f b6       	in	r0, 0x3f	; 63
     a40:	f8 94       	cli
     a42:	de bf       	out	0x3e, r29	; 62
     a44:	0f be       	out	0x3f, r0	; 63
     a46:	cd bf       	out	0x3d, r28	; 61
     a48:	80 e0       	ldi	r24, 0x00	; 0
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	a8 ec       	ldi	r26, 0xC8	; 200
     a4e:	b2 e4       	ldi	r27, 0x42	; 66
     a50:	8b 83       	std	Y+3, r24	; 0x03
     a52:	9c 83       	std	Y+4, r25	; 0x04
     a54:	ad 83       	std	Y+5, r26	; 0x05
     a56:	be 83       	std	Y+6, r27	; 0x06
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     a58:	6b 81       	ldd	r22, Y+3	; 0x03
     a5a:	7c 81       	ldd	r23, Y+4	; 0x04
     a5c:	8d 81       	ldd	r24, Y+5	; 0x05
     a5e:	9e 81       	ldd	r25, Y+6	; 0x06
     a60:	20 e0       	ldi	r18, 0x00	; 0
     a62:	30 e0       	ldi	r19, 0x00	; 0
     a64:	4a e7       	ldi	r20, 0x7A	; 122
     a66:	55 e4       	ldi	r21, 0x45	; 69
     a68:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <__mulsf3>
     a6c:	dc 01       	movw	r26, r24
     a6e:	cb 01       	movw	r24, r22
     a70:	8f 83       	std	Y+7, r24	; 0x07
     a72:	98 87       	std	Y+8, r25	; 0x08
     a74:	a9 87       	std	Y+9, r26	; 0x09
     a76:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     a78:	11 e0       	ldi	r17, 0x01	; 1
     a7a:	6f 81       	ldd	r22, Y+7	; 0x07
     a7c:	78 85       	ldd	r23, Y+8	; 0x08
     a7e:	89 85       	ldd	r24, Y+9	; 0x09
     a80:	9a 85       	ldd	r25, Y+10	; 0x0a
     a82:	20 e0       	ldi	r18, 0x00	; 0
     a84:	30 e0       	ldi	r19, 0x00	; 0
     a86:	40 e8       	ldi	r20, 0x80	; 128
     a88:	5f e3       	ldi	r21, 0x3F	; 63
     a8a:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <__cmpsf2>
     a8e:	88 23       	and	r24, r24
     a90:	0c f0       	brlt	.+2      	; 0xa94 <GET_DEVICE_VALUE_H+0x64>
     a92:	10 e0       	ldi	r17, 0x00	; 0
     a94:	11 23       	and	r17, r17
     a96:	29 f0       	breq	.+10     	; 0xaa2 <GET_DEVICE_VALUE_H+0x72>
		__ticks = 1;
     a98:	81 e0       	ldi	r24, 0x01	; 1
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	9c 87       	std	Y+12, r25	; 0x0c
     a9e:	8b 87       	std	Y+11, r24	; 0x0b
     aa0:	46 c0       	rjmp	.+140    	; 0xb2e <GET_DEVICE_VALUE_H+0xfe>
	else if (__tmp > 65535)
     aa2:	11 e0       	ldi	r17, 0x01	; 1
     aa4:	6f 81       	ldd	r22, Y+7	; 0x07
     aa6:	78 85       	ldd	r23, Y+8	; 0x08
     aa8:	89 85       	ldd	r24, Y+9	; 0x09
     aaa:	9a 85       	ldd	r25, Y+10	; 0x0a
     aac:	20 e0       	ldi	r18, 0x00	; 0
     aae:	3f ef       	ldi	r19, 0xFF	; 255
     ab0:	4f e7       	ldi	r20, 0x7F	; 127
     ab2:	57 e4       	ldi	r21, 0x47	; 71
     ab4:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <__gesf2>
     ab8:	18 16       	cp	r1, r24
     aba:	0c f0       	brlt	.+2      	; 0xabe <GET_DEVICE_VALUE_H+0x8e>
     abc:	10 e0       	ldi	r17, 0x00	; 0
     abe:	11 23       	and	r17, r17
     ac0:	61 f1       	breq	.+88     	; 0xb1a <GET_DEVICE_VALUE_H+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ac2:	6b 81       	ldd	r22, Y+3	; 0x03
     ac4:	7c 81       	ldd	r23, Y+4	; 0x04
     ac6:	8d 81       	ldd	r24, Y+5	; 0x05
     ac8:	9e 81       	ldd	r25, Y+6	; 0x06
     aca:	20 e0       	ldi	r18, 0x00	; 0
     acc:	30 e0       	ldi	r19, 0x00	; 0
     ace:	40 e2       	ldi	r20, 0x20	; 32
     ad0:	51 e4       	ldi	r21, 0x41	; 65
     ad2:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <__mulsf3>
     ad6:	dc 01       	movw	r26, r24
     ad8:	cb 01       	movw	r24, r22
     ada:	bc 01       	movw	r22, r24
     adc:	cd 01       	movw	r24, r26
     ade:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <__fixunssfsi>
     ae2:	dc 01       	movw	r26, r24
     ae4:	cb 01       	movw	r24, r22
     ae6:	9c 87       	std	Y+12, r25	; 0x0c
     ae8:	8b 87       	std	Y+11, r24	; 0x0b
     aea:	12 c0       	rjmp	.+36     	; 0xb10 <GET_DEVICE_VALUE_H+0xe0>
     aec:	80 e9       	ldi	r24, 0x90	; 144
     aee:	91 e0       	ldi	r25, 0x01	; 1
     af0:	9e 87       	std	Y+14, r25	; 0x0e
     af2:	8d 87       	std	Y+13, r24	; 0x0d
     af4:	8d 85       	ldd	r24, Y+13	; 0x0d
     af6:	9e 85       	ldd	r25, Y+14	; 0x0e
     af8:	8c 01       	movw	r16, r24
     afa:	c8 01       	movw	r24, r16
     afc:	01 97       	sbiw	r24, 0x01	; 1
     afe:	f1 f7       	brne	.-4      	; 0xafc <GET_DEVICE_VALUE_H+0xcc>
     b00:	8c 01       	movw	r16, r24
     b02:	1e 87       	std	Y+14, r17	; 0x0e
     b04:	0d 87       	std	Y+13, r16	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b06:	8b 85       	ldd	r24, Y+11	; 0x0b
     b08:	9c 85       	ldd	r25, Y+12	; 0x0c
     b0a:	01 97       	sbiw	r24, 0x01	; 1
     b0c:	9c 87       	std	Y+12, r25	; 0x0c
     b0e:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b10:	8b 85       	ldd	r24, Y+11	; 0x0b
     b12:	9c 85       	ldd	r25, Y+12	; 0x0c
     b14:	00 97       	sbiw	r24, 0x00	; 0
     b16:	51 f7       	brne	.-44     	; 0xaec <GET_DEVICE_VALUE_H+0xbc>
     b18:	17 c0       	rjmp	.+46     	; 0xb48 <GET_DEVICE_VALUE_H+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b1a:	6f 81       	ldd	r22, Y+7	; 0x07
     b1c:	78 85       	ldd	r23, Y+8	; 0x08
     b1e:	89 85       	ldd	r24, Y+9	; 0x09
     b20:	9a 85       	ldd	r25, Y+10	; 0x0a
     b22:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <__fixunssfsi>
     b26:	dc 01       	movw	r26, r24
     b28:	cb 01       	movw	r24, r22
     b2a:	9c 87       	std	Y+12, r25	; 0x0c
     b2c:	8b 87       	std	Y+11, r24	; 0x0b
     b2e:	8b 85       	ldd	r24, Y+11	; 0x0b
     b30:	9c 85       	ldd	r25, Y+12	; 0x0c
     b32:	98 8b       	std	Y+16, r25	; 0x10
     b34:	8f 87       	std	Y+15, r24	; 0x0f
     b36:	8f 85       	ldd	r24, Y+15	; 0x0f
     b38:	98 89       	ldd	r25, Y+16	; 0x10
     b3a:	8c 01       	movw	r16, r24
     b3c:	f8 01       	movw	r30, r16
     b3e:	31 97       	sbiw	r30, 0x01	; 1
     b40:	f1 f7       	brne	.-4      	; 0xb3e <GET_DEVICE_VALUE_H+0x10e>
     b42:	8f 01       	movw	r16, r30
     b44:	18 8b       	std	Y+16, r17	; 0x10
     b46:	0f 87       	std	Y+15, r16	; 0x0f
	_delay_ms(100);
	uint8_t deviceIndex = *((uint8_t*)parameter[0].startingPointer);
     b48:	80 91 28 01 	lds	r24, 0x0128
     b4c:	90 91 29 01 	lds	r25, 0x0129
     b50:	fc 01       	movw	r30, r24
     b52:	80 81       	ld	r24, Z
     b54:	89 8b       	std	Y+17, r24	; 0x11
	uint8_t deviceValue;
	
	switch(deviceIndex){
     b56:	89 89       	ldd	r24, Y+17	; 0x11
     b58:	88 2f       	mov	r24, r24
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	00 97       	sbiw	r24, 0x00	; 0
     b5e:	21 f0       	breq	.+8      	; 0xb68 <GET_DEVICE_VALUE_H+0x138>
     b60:	81 30       	cpi	r24, 0x01	; 1
     b62:	91 05       	cpc	r25, r1
     b64:	19 f1       	breq	.+70     	; 0xbac <GET_DEVICE_VALUE_H+0x17c>
     b66:	47 c0       	rjmp	.+142    	; 0xbf6 <GET_DEVICE_VALUE_H+0x1c6>
		case 0:
			ComposeMessageToBuffer(MESSAGE_STATUS_ID, 0, POWER_MODULE);
     b68:	84 e0       	ldi	r24, 0x04	; 4
     b6a:	60 e0       	ldi	r22, 0x00	; 0
     b6c:	42 e0       	ldi	r20, 0x02	; 2
     b6e:	0e 94 0a 02 	call	0x414	; 0x414 <ComposeMessageToBuffer>
			nrf24_initRF_SAFE(POWER_BOARD_RF, TRANSMIT);	// CONNECTION TO MODULE: GENERAL RF CHANNEL 112
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	61 e0       	ldi	r22, 0x01	; 1
     b76:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <nrf24_initRF_SAFE>
			nrf24_send(command_buffer);
     b7a:	80 91 52 01 	lds	r24, 0x0152
     b7e:	90 91 53 01 	lds	r25, 0x0153
     b82:	0e 94 4a 09 	call	0x1294	; 0x1294 <nrf24_send>
			while(nrf24_isSending());
     b86:	00 00       	nop
     b88:	0e 94 77 09 	call	0x12ee	; 0x12ee <nrf24_isSending>
     b8c:	88 23       	and	r24, r24
     b8e:	e1 f7       	brne	.-8      	; 0xb88 <GET_DEVICE_VALUE_H+0x158>

			uint8_t messageStatus = nrf24_lastMessageStatus();
     b90:	0e 94 a1 09 	call	0x1342	; 0x1342 <nrf24_lastMessageStatus>
     b94:	89 83       	std	Y+1, r24	; 0x01
			if(messageStatus == NRF24_TRANSMISSON_OK) { deviceValue = 0xFF; }
     b96:	89 81       	ldd	r24, Y+1	; 0x01
     b98:	88 23       	and	r24, r24
     b9a:	19 f4       	brne	.+6      	; 0xba2 <GET_DEVICE_VALUE_H+0x172>
     b9c:	8f ef       	ldi	r24, 0xFF	; 255
     b9e:	8a 8b       	std	Y+18, r24	; 0x12
			else if(messageStatus == NRF24_MESSAGE_LOST) { deviceValue= 0x00; }
			break;
     ba0:	2a c0       	rjmp	.+84     	; 0xbf6 <GET_DEVICE_VALUE_H+0x1c6>
			nrf24_send(command_buffer);
			while(nrf24_isSending());

			uint8_t messageStatus = nrf24_lastMessageStatus();
			if(messageStatus == NRF24_TRANSMISSON_OK) { deviceValue = 0xFF; }
			else if(messageStatus == NRF24_MESSAGE_LOST) { deviceValue= 0x00; }
     ba2:	89 81       	ldd	r24, Y+1	; 0x01
     ba4:	81 30       	cpi	r24, 0x01	; 1
     ba6:	21 f5       	brne	.+72     	; 0xbf0 <GET_DEVICE_VALUE_H+0x1c0>
     ba8:	1a 8a       	std	Y+18, r1	; 0x12
			break;
     baa:	25 c0       	rjmp	.+74     	; 0xbf6 <GET_DEVICE_VALUE_H+0x1c6>
		case 1:
			ComposeMessageToBuffer(MESSAGE_STATUS_ID, 0, MOTOR_MODULE);
     bac:	84 e0       	ldi	r24, 0x04	; 4
     bae:	60 e0       	ldi	r22, 0x00	; 0
     bb0:	43 e0       	ldi	r20, 0x03	; 3
     bb2:	0e 94 0a 02 	call	0x414	; 0x414 <ComposeMessageToBuffer>
			nrf24_initRF_SAFE(MOTORIZED_BOARD_RF, TRANSMIT);	// CONNECTION TO MODULE: GENERAL RF CHANNEL 112
     bb6:	82 e0       	ldi	r24, 0x02	; 2
     bb8:	61 e0       	ldi	r22, 0x01	; 1
     bba:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <nrf24_initRF_SAFE>
			nrf24_send(command_buffer);
     bbe:	80 91 52 01 	lds	r24, 0x0152
     bc2:	90 91 53 01 	lds	r25, 0x0153
     bc6:	0e 94 4a 09 	call	0x1294	; 0x1294 <nrf24_send>
			while(nrf24_isSending());
     bca:	00 00       	nop
     bcc:	0e 94 77 09 	call	0x12ee	; 0x12ee <nrf24_isSending>
     bd0:	88 23       	and	r24, r24
     bd2:	e1 f7       	brne	.-8      	; 0xbcc <GET_DEVICE_VALUE_H+0x19c>

			uint8_t messageStatusSecond = nrf24_lastMessageStatus();
     bd4:	0e 94 a1 09 	call	0x1342	; 0x1342 <nrf24_lastMessageStatus>
     bd8:	8a 83       	std	Y+2, r24	; 0x02
			if(messageStatusSecond == NRF24_TRANSMISSON_OK) { deviceValue = 0xFF; }
     bda:	8a 81       	ldd	r24, Y+2	; 0x02
     bdc:	88 23       	and	r24, r24
     bde:	19 f4       	brne	.+6      	; 0xbe6 <GET_DEVICE_VALUE_H+0x1b6>
     be0:	8f ef       	ldi	r24, 0xFF	; 255
     be2:	8a 8b       	std	Y+18, r24	; 0x12
			else if(messageStatusSecond == NRF24_MESSAGE_LOST) { deviceValue= 0x00; }
			break;
     be4:	08 c0       	rjmp	.+16     	; 0xbf6 <GET_DEVICE_VALUE_H+0x1c6>
			nrf24_send(command_buffer);
			while(nrf24_isSending());

			uint8_t messageStatusSecond = nrf24_lastMessageStatus();
			if(messageStatusSecond == NRF24_TRANSMISSON_OK) { deviceValue = 0xFF; }
			else if(messageStatusSecond == NRF24_MESSAGE_LOST) { deviceValue= 0x00; }
     be6:	8a 81       	ldd	r24, Y+2	; 0x02
     be8:	81 30       	cpi	r24, 0x01	; 1
     bea:	21 f4       	brne	.+8      	; 0xbf4 <GET_DEVICE_VALUE_H+0x1c4>
     bec:	1a 8a       	std	Y+18, r1	; 0x12
			break;
     bee:	03 c0       	rjmp	.+6      	; 0xbf6 <GET_DEVICE_VALUE_H+0x1c6>
			while(nrf24_isSending());

			uint8_t messageStatus = nrf24_lastMessageStatus();
			if(messageStatus == NRF24_TRANSMISSON_OK) { deviceValue = 0xFF; }
			else if(messageStatus == NRF24_MESSAGE_LOST) { deviceValue= 0x00; }
			break;
     bf0:	00 00       	nop
     bf2:	01 c0       	rjmp	.+2      	; 0xbf6 <GET_DEVICE_VALUE_H+0x1c6>
			while(nrf24_isSending());

			uint8_t messageStatusSecond = nrf24_lastMessageStatus();
			if(messageStatusSecond == NRF24_TRANSMISSON_OK) { deviceValue = 0xFF; }
			else if(messageStatusSecond == NRF24_MESSAGE_LOST) { deviceValue= 0x00; }
			break;
     bf4:	00 00       	nop
	}
	
	writeParameterValue(0, &deviceIndex, 1);
     bf6:	9e 01       	movw	r18, r28
     bf8:	2f 5e       	subi	r18, 0xEF	; 239
     bfa:	3f 4f       	sbci	r19, 0xFF	; 255
     bfc:	80 e0       	ldi	r24, 0x00	; 0
     bfe:	b9 01       	movw	r22, r18
     c00:	41 e0       	ldi	r20, 0x01	; 1
     c02:	0e 94 3a 03 	call	0x674	; 0x674 <writeParameterValue>
	writeParameterValue(1, &deviceValue, 2);
     c06:	9e 01       	movw	r18, r28
     c08:	2e 5e       	subi	r18, 0xEE	; 238
     c0a:	3f 4f       	sbci	r19, 0xFF	; 255
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	b9 01       	movw	r22, r18
     c10:	42 e0       	ldi	r20, 0x02	; 2
     c12:	0e 94 3a 03 	call	0x674	; 0x674 <writeParameterValue>
	
	ComposeMessageToBuffer(UPDATE_DEVICE_VALUE_ID, 2, PHONE_MODULE);  // PHONE_MODULE should be lastTransmitterModuleID
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	62 e0       	ldi	r22, 0x02	; 2
     c1a:	40 e0       	ldi	r20, 0x00	; 0
     c1c:	0e 94 0a 02 	call	0x414	; 0x414 <ComposeMessageToBuffer>
	
	transmitMessageSync(command_buffer, 32);
     c20:	80 91 52 01 	lds	r24, 0x0152
     c24:	90 91 53 01 	lds	r25, 0x0153
     c28:	60 e2       	ldi	r22, 0x20	; 32
     c2a:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <transmitMessageSync>
}
     c2e:	62 96       	adiw	r28, 0x12	; 18
     c30:	0f b6       	in	r0, 0x3f	; 63
     c32:	f8 94       	cli
     c34:	de bf       	out	0x3e, r29	; 62
     c36:	0f be       	out	0x3f, r0	; 63
     c38:	cd bf       	out	0x3d, r28	; 61
     c3a:	cf 91       	pop	r28
     c3c:	df 91       	pop	r29
     c3e:	1f 91       	pop	r17
     c40:	0f 91       	pop	r16
     c42:	08 95       	ret

00000c44 <MESSAGE_STATUS_H>:
     c44:	df 93       	push	r29
     c46:	cf 93       	push	r28
     c48:	cd b7       	in	r28, 0x3d	; 61
     c4a:	de b7       	in	r29, 0x3e	; 62
     c4c:	cf 91       	pop	r28
     c4e:	df 91       	pop	r29
     c50:	08 95       	ret

00000c52 <crc_update>:
#include <stdbool.h>



crc_t crc_update(crc_t crc, const void *data, size_t data_len)
{
     c52:	df 93       	push	r29
     c54:	cf 93       	push	r28
     c56:	cd b7       	in	r28, 0x3d	; 61
     c58:	de b7       	in	r29, 0x3e	; 62
     c5a:	2b 97       	sbiw	r28, 0x0b	; 11
     c5c:	0f b6       	in	r0, 0x3f	; 63
     c5e:	f8 94       	cli
     c60:	de bf       	out	0x3e, r29	; 62
     c62:	0f be       	out	0x3f, r0	; 63
     c64:	cd bf       	out	0x3d, r28	; 61
     c66:	8f 83       	std	Y+7, r24	; 0x07
     c68:	79 87       	std	Y+9, r23	; 0x09
     c6a:	68 87       	std	Y+8, r22	; 0x08
     c6c:	5b 87       	std	Y+11, r21	; 0x0b
     c6e:	4a 87       	std	Y+10, r20	; 0x0a
    const unsigned char *d = (const unsigned char *)data;
     c70:	88 85       	ldd	r24, Y+8	; 0x08
     c72:	99 85       	ldd	r25, Y+9	; 0x09
     c74:	9a 83       	std	Y+2, r25	; 0x02
     c76:	89 83       	std	Y+1, r24	; 0x01
    unsigned int i;
    bool bit;
    unsigned char c;

    while (data_len--) {
     c78:	3c c0       	rjmp	.+120    	; 0xcf2 <crc_update+0xa0>
        c = *d++;
     c7a:	89 81       	ldd	r24, Y+1	; 0x01
     c7c:	9a 81       	ldd	r25, Y+2	; 0x02
     c7e:	fc 01       	movw	r30, r24
     c80:	80 81       	ld	r24, Z
     c82:	8e 83       	std	Y+6, r24	; 0x06
     c84:	89 81       	ldd	r24, Y+1	; 0x01
     c86:	9a 81       	ldd	r25, Y+2	; 0x02
     c88:	01 96       	adiw	r24, 0x01	; 1
     c8a:	9a 83       	std	Y+2, r25	; 0x02
     c8c:	89 83       	std	Y+1, r24	; 0x01
        for (i = 0x80; i > 0; i >>= 1) {
     c8e:	80 e8       	ldi	r24, 0x80	; 128
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	9c 83       	std	Y+4, r25	; 0x04
     c94:	8b 83       	std	Y+3, r24	; 0x03
     c96:	29 c0       	rjmp	.+82     	; 0xcea <crc_update+0x98>
            bit = crc & 0x80;
     c98:	8f 81       	ldd	r24, Y+7	; 0x07
     c9a:	88 2f       	mov	r24, r24
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	80 78       	andi	r24, 0x80	; 128
     ca0:	90 70       	andi	r25, 0x00	; 0
     ca2:	21 e0       	ldi	r18, 0x01	; 1
     ca4:	00 97       	sbiw	r24, 0x00	; 0
     ca6:	09 f4       	brne	.+2      	; 0xcaa <crc_update+0x58>
     ca8:	20 e0       	ldi	r18, 0x00	; 0
     caa:	2d 83       	std	Y+5, r18	; 0x05
            if (c & i) {
     cac:	8e 81       	ldd	r24, Y+6	; 0x06
     cae:	28 2f       	mov	r18, r24
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	8b 81       	ldd	r24, Y+3	; 0x03
     cb4:	9c 81       	ldd	r25, Y+4	; 0x04
     cb6:	82 23       	and	r24, r18
     cb8:	93 23       	and	r25, r19
     cba:	00 97       	sbiw	r24, 0x00	; 0
     cbc:	31 f0       	breq	.+12     	; 0xcca <crc_update+0x78>
                bit = !bit;
     cbe:	9d 81       	ldd	r25, Y+5	; 0x05
     cc0:	81 e0       	ldi	r24, 0x01	; 1
     cc2:	89 27       	eor	r24, r25
     cc4:	88 2f       	mov	r24, r24
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	8d 83       	std	Y+5, r24	; 0x05
            }
            crc <<= 1;
     cca:	8f 81       	ldd	r24, Y+7	; 0x07
     ccc:	88 0f       	add	r24, r24
     cce:	8f 83       	std	Y+7, r24	; 0x07
            if (bit) {
     cd0:	8d 81       	ldd	r24, Y+5	; 0x05
     cd2:	88 23       	and	r24, r24
     cd4:	21 f0       	breq	.+8      	; 0xcde <crc_update+0x8c>
                crc ^= 0x07;
     cd6:	9f 81       	ldd	r25, Y+7	; 0x07
     cd8:	87 e0       	ldi	r24, 0x07	; 7
     cda:	89 27       	eor	r24, r25
     cdc:	8f 83       	std	Y+7, r24	; 0x07
    bool bit;
    unsigned char c;

    while (data_len--) {
        c = *d++;
        for (i = 0x80; i > 0; i >>= 1) {
     cde:	8b 81       	ldd	r24, Y+3	; 0x03
     ce0:	9c 81       	ldd	r25, Y+4	; 0x04
     ce2:	96 95       	lsr	r25
     ce4:	87 95       	ror	r24
     ce6:	9c 83       	std	Y+4, r25	; 0x04
     ce8:	8b 83       	std	Y+3, r24	; 0x03
     cea:	8b 81       	ldd	r24, Y+3	; 0x03
     cec:	9c 81       	ldd	r25, Y+4	; 0x04
     cee:	00 97       	sbiw	r24, 0x00	; 0
     cf0:	99 f6       	brne	.-90     	; 0xc98 <crc_update+0x46>
    const unsigned char *d = (const unsigned char *)data;
    unsigned int i;
    bool bit;
    unsigned char c;

    while (data_len--) {
     cf2:	21 e0       	ldi	r18, 0x01	; 1
     cf4:	8a 85       	ldd	r24, Y+10	; 0x0a
     cf6:	9b 85       	ldd	r25, Y+11	; 0x0b
     cf8:	00 97       	sbiw	r24, 0x00	; 0
     cfa:	09 f4       	brne	.+2      	; 0xcfe <crc_update+0xac>
     cfc:	20 e0       	ldi	r18, 0x00	; 0
     cfe:	8a 85       	ldd	r24, Y+10	; 0x0a
     d00:	9b 85       	ldd	r25, Y+11	; 0x0b
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	9b 87       	std	Y+11, r25	; 0x0b
     d06:	8a 87       	std	Y+10, r24	; 0x0a
     d08:	22 23       	and	r18, r18
     d0a:	09 f0       	breq	.+2      	; 0xd0e <crc_update+0xbc>
     d0c:	b6 cf       	rjmp	.-148    	; 0xc7a <crc_update+0x28>
                crc ^= 0x07;
            }
        }
        crc &= 0xff;
    }
    return crc & 0xff;
     d0e:	8f 81       	ldd	r24, Y+7	; 0x07
}
     d10:	2b 96       	adiw	r28, 0x0b	; 11
     d12:	0f b6       	in	r0, 0x3f	; 63
     d14:	f8 94       	cli
     d16:	de bf       	out	0x3e, r29	; 62
     d18:	0f be       	out	0x3f, r0	; 63
     d1a:	cd bf       	out	0x3d, r28	; 61
     d1c:	cf 91       	pop	r28
     d1e:	df 91       	pop	r29
     d20:	08 95       	ret

00000d22 <main>:

void initIO();
char messageTest[] = "UART TESTING COMMANDS! \n";
	
int main(void)
{
     d22:	df 93       	push	r29
     d24:	cf 93       	push	r28
     d26:	0f 92       	push	r0
     d28:	cd b7       	in	r28, 0x3d	; 61
     d2a:	de b7       	in	r29, 0x3e	; 62
	cli();	// Interrupts off
     d2c:	f8 94       	cli
	initIO();
     d2e:	0e 94 cd 06 	call	0xd9a	; 0xd9a <initIO>
    initBluetoothUart();
     d32:	0e 94 2e 0c 	call	0x185c	; 0x185c <initBluetoothUart>
	setupReceiveMode();
     d36:	0e 94 df 0c 	call	0x19be	; 0x19be <setupReceiveMode>
	nrf24_initRF_SAFE(POWER_BOARD_RF, RECEIVE);	// CONNECTION TO POWER BOARD AND MOTORIZED BOARD : GENERAL RF CHANNEL 11
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	60 e0       	ldi	r22, 0x00	; 0
     d3e:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <nrf24_initRF_SAFE>
	sei();	// Interrupts on
     d42:	78 94       	sei
     d44:	01 c0       	rjmp	.+2      	; 0xd48 <main+0x26>
			sei();
		}
		
		if (nrf24_checkAvailability()==false) { nrf24_initRF_SAFE(POWER_BOARD_RF, RECEIVE); }

    }
     d46:	00 00       	nop
	setupReceiveMode();
	nrf24_initRF_SAFE(POWER_BOARD_RF, RECEIVE);	// CONNECTION TO POWER BOARD AND MOTORIZED BOARD : GENERAL RF CHANNEL 11
	sei();	// Interrupts on
    while (1) 
    {
		if (commandAvailable) {
     d48:	80 91 64 01 	lds	r24, 0x0164
     d4c:	88 23       	and	r24, r24
     d4e:	29 f0       	breq	.+10     	; 0xd5a <main+0x38>
			cli();
     d50:	f8 94       	cli
			processReceivedLine();
     d52:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <processReceivedLine>
			setupReceiveMode();
     d56:	0e 94 df 0c 	call	0x19be	; 0x19be <setupReceiveMode>
			
		}
		
		 // Disable UART
		
		if(nrf24_dataReady())
     d5a:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <nrf24_dataReady>
     d5e:	88 23       	and	r24, r24
     d60:	81 f0       	breq	.+32     	; 0xd82 <main+0x60>
		{
			cli();
     d62:	f8 94       	cli
			nrf24_getData(command_buffer);
     d64:	80 91 52 01 	lds	r24, 0x0152
     d68:	90 91 53 01 	lds	r25, 0x0153
     d6c:	0e 94 28 09 	call	0x1250	; 0x1250 <nrf24_getData>
			CommandStatus status = DecomposeMessageFromBuffer();
     d70:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <DecomposeMessageFromBuffer>
     d74:	89 83       	std	Y+1, r24	; 0x01
			if (status==SUCCESFUL_DECOMPOSITION) { RetransmissionToPhone();  }
     d76:	89 81       	ldd	r24, Y+1	; 0x01
     d78:	88 23       	and	r24, r24
     d7a:	11 f4       	brne	.+4      	; 0xd80 <main+0x5e>
     d7c:	0e 94 2c 03 	call	0x658	; 0x658 <RetransmissionToPhone>
			sei();
     d80:	78 94       	sei
		}
		
		if (nrf24_checkAvailability()==false) { nrf24_initRF_SAFE(POWER_BOARD_RF, RECEIVE); }
     d82:	0e 94 80 07 	call	0xf00	; 0xf00 <nrf24_checkAvailability>
     d86:	98 2f       	mov	r25, r24
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	89 27       	eor	r24, r25
     d8c:	88 23       	and	r24, r24
     d8e:	d9 f2       	breq	.-74     	; 0xd46 <main+0x24>
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	60 e0       	ldi	r22, 0x00	; 0
     d94:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <nrf24_initRF_SAFE>

    }
     d98:	d7 cf       	rjmp	.-82     	; 0xd48 <main+0x26>

00000d9a <initIO>:
}


void initIO(){
     d9a:	df 93       	push	r29
     d9c:	cf 93       	push	r28
     d9e:	cd b7       	in	r28, 0x3d	; 61
     da0:	de b7       	in	r29, 0x3e	; 62
			CSN	 : PC1						|	OUTPUT
			MISO : PD0 (MSPIM MISO ATMEGA)	|	INPUT
			MOSI : PD1 (MSPIM MOSI ATMEGA)	|	OUTPUT
			SCK	 : PD4 (MSPIM XCK)			|	OUTPUT
	*/ 
	DDRD = 0b11111110;
     da2:	8a e2       	ldi	r24, 0x2A	; 42
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	2e ef       	ldi	r18, 0xFE	; 254
     da8:	fc 01       	movw	r30, r24
     daa:	20 83       	st	Z, r18
	DDRB = 0b00101001;
     dac:	84 e2       	ldi	r24, 0x24	; 36
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	29 e2       	ldi	r18, 0x29	; 41
     db2:	fc 01       	movw	r30, r24
     db4:	20 83       	st	Z, r18
	DDRC = 0b11011111;
     db6:	87 e2       	ldi	r24, 0x27	; 39
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	2f ed       	ldi	r18, 0xDF	; 223
     dbc:	fc 01       	movw	r30, r24
     dbe:	20 83       	st	Z, r18
}
     dc0:	cf 91       	pop	r28
     dc2:	df 91       	pop	r29
     dc4:	08 95       	ret

00000dc6 <nrf24_init>:

const uint8_t GENERAL_RF_CHANNEL = 112;


void nrf24_init()
{
     dc6:	df 93       	push	r29
     dc8:	cf 93       	push	r28
     dca:	cd b7       	in	r28, 0x3d	; 61
     dcc:	de b7       	in	r29, 0x3e	; 62
	nrf24_setupPins();
     dce:	0e 94 1b 0b 	call	0x1636	; 0x1636 <nrf24_setupPins>
	nrf24_ce_digitalWrite(LOW);
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	0e 94 4f 0b 	call	0x169e	; 0x169e <nrf24_ce_digitalWrite>
	nrf24_csn_digitalWrite(HIGH);
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	0e 94 6f 0b 	call	0x16de	; 0x16de <nrf24_csn_digitalWrite>
}
     dde:	cf 91       	pop	r28
     de0:	df 91       	pop	r29
     de2:	08 95       	ret

00000de4 <nrf24_config>:

void nrf24_config(uint8_t channel, uint8_t pay_length)
{
     de4:	df 93       	push	r29
     de6:	cf 93       	push	r28
     de8:	00 d0       	rcall	.+0      	; 0xdea <nrf24_config+0x6>
     dea:	cd b7       	in	r28, 0x3d	; 61
     dec:	de b7       	in	r29, 0x3e	; 62
     dee:	89 83       	std	Y+1, r24	; 0x01
     df0:	6a 83       	std	Y+2, r22	; 0x02
	/* Use static payload length ... */
	payload_len = pay_length;
     df2:	8a 81       	ldd	r24, Y+2	; 0x02
     df4:	80 93 5e 01 	sts	0x015E, r24
	selectedChannel = channel;
     df8:	89 81       	ldd	r24, Y+1	; 0x01
     dfa:	80 93 5f 01 	sts	0x015F, r24

	// Set RF channel
	nrf24_configRegister(RF_CH,channel);
     dfe:	85 e0       	ldi	r24, 0x05	; 5
     e00:	69 81       	ldd	r22, Y+1	; 0x01
     e02:	0e 94 9e 0a 	call	0x153c	; 0x153c <nrf24_configRegister>

	// Set length of incoming payload
	nrf24_configRegister(RX_PW_P0, 0x00); // Auto-ACK pipe ...
     e06:	81 e1       	ldi	r24, 0x11	; 17
     e08:	60 e0       	ldi	r22, 0x00	; 0
     e0a:	0e 94 9e 0a 	call	0x153c	; 0x153c <nrf24_configRegister>
	nrf24_configRegister(RX_PW_P1, payload_len); // Data payload pipe
     e0e:	90 91 5e 01 	lds	r25, 0x015E
     e12:	82 e1       	ldi	r24, 0x12	; 18
     e14:	69 2f       	mov	r22, r25
     e16:	0e 94 9e 0a 	call	0x153c	; 0x153c <nrf24_configRegister>
	nrf24_configRegister(RX_PW_P2, 0x00); // Pipe not used
     e1a:	83 e1       	ldi	r24, 0x13	; 19
     e1c:	60 e0       	ldi	r22, 0x00	; 0
     e1e:	0e 94 9e 0a 	call	0x153c	; 0x153c <nrf24_configRegister>
	nrf24_configRegister(RX_PW_P3, 0x00); // Pipe not used
     e22:	84 e1       	ldi	r24, 0x14	; 20
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	0e 94 9e 0a 	call	0x153c	; 0x153c <nrf24_configRegister>
	nrf24_configRegister(RX_PW_P4, 0x00); // Pipe not used
     e2a:	85 e1       	ldi	r24, 0x15	; 21
     e2c:	60 e0       	ldi	r22, 0x00	; 0
     e2e:	0e 94 9e 0a 	call	0x153c	; 0x153c <nrf24_configRegister>
	nrf24_configRegister(RX_PW_P5, 0x00); // Pipe not used
     e32:	86 e1       	ldi	r24, 0x16	; 22
     e34:	60 e0       	ldi	r22, 0x00	; 0
     e36:	0e 94 9e 0a 	call	0x153c	; 0x153c <nrf24_configRegister>

	// 1 Mbps, TX gain: 0dbm
	nrf24_configRegister(RF_SETUP, (0<<RF_DR)|((0x03)<<RF_PWR));
     e3a:	86 e0       	ldi	r24, 0x06	; 6
     e3c:	66 e0       	ldi	r22, 0x06	; 6
     e3e:	0e 94 9e 0a 	call	0x153c	; 0x153c <nrf24_configRegister>

	// CRC enable, 1 byte CRC length
	nrf24_configRegister(CONFIG,nrf24_CONFIG);
     e42:	80 e0       	ldi	r24, 0x00	; 0
     e44:	68 e0       	ldi	r22, 0x08	; 8
     e46:	0e 94 9e 0a 	call	0x153c	; 0x153c <nrf24_configRegister>

	// Auto Acknowledgment
	nrf24_configRegister(EN_AA,(1<<ENAA_P0)|(1<<ENAA_P1)|(0<<ENAA_P2)|(0<<ENAA_P3)|(0<<ENAA_P4)|(0<<ENAA_P5));
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	63 e0       	ldi	r22, 0x03	; 3
     e4e:	0e 94 9e 0a 	call	0x153c	; 0x153c <nrf24_configRegister>

	// Enable RX addresses
	nrf24_configRegister(EN_RXADDR,(1<<ERX_P0)|(1<<ERX_P1)|(0<<ERX_P2)|(0<<ERX_P3)|(0<<ERX_P4)|(0<<ERX_P5));
     e52:	82 e0       	ldi	r24, 0x02	; 2
     e54:	63 e0       	ldi	r22, 0x03	; 3
     e56:	0e 94 9e 0a 	call	0x153c	; 0x153c <nrf24_configRegister>

	// Auto retransmit delay: 1000 us and Up to 15 retransmit trials
	nrf24_configRegister(SETUP_RETR,(0x04<<ARD)|(0x0F<<ARC));
     e5a:	84 e0       	ldi	r24, 0x04	; 4
     e5c:	6f e4       	ldi	r22, 0x4F	; 79
     e5e:	0e 94 9e 0a 	call	0x153c	; 0x153c <nrf24_configRegister>

	// Dynamic length configurations: No dynamic length
	nrf24_configRegister(DYNPD,(0<<DPL_P0)|(0<<DPL_P1)|(0<<DPL_P2)|(0<<DPL_P3)|(0<<DPL_P4)|(0<<DPL_P5));
     e62:	8c e1       	ldi	r24, 0x1C	; 28
     e64:	60 e0       	ldi	r22, 0x00	; 0
     e66:	0e 94 9e 0a 	call	0x153c	; 0x153c <nrf24_configRegister>

}
     e6a:	0f 90       	pop	r0
     e6c:	0f 90       	pop	r0
     e6e:	cf 91       	pop	r28
     e70:	df 91       	pop	r29
     e72:	08 95       	ret

00000e74 <nrf24_checkConfig>:



bool nrf24_checkConfig(){
     e74:	df 93       	push	r29
     e76:	cf 93       	push	r28
     e78:	cd b7       	in	r28, 0x3d	; 61
     e7a:	de b7       	in	r29, 0x3e	; 62
	// Check all registers
	if (nrf24_checkRegister(RF_CH, selectedChannel,1)==false) return false;
     e7c:	90 91 5f 01 	lds	r25, 0x015F
     e80:	85 e0       	ldi	r24, 0x05	; 5
     e82:	69 2f       	mov	r22, r25
     e84:	41 e0       	ldi	r20, 0x01	; 1
     e86:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <nrf24_checkRegister>
     e8a:	98 2f       	mov	r25, r24
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	89 27       	eor	r24, r25
     e90:	88 23       	and	r24, r24
     e92:	11 f0       	breq	.+4      	; 0xe98 <nrf24_checkConfig+0x24>
     e94:	80 e0       	ldi	r24, 0x00	; 0
     e96:	31 c0       	rjmp	.+98     	; 0xefa <nrf24_checkConfig+0x86>
	if (nrf24_checkRegister(RF_SETUP, (0<<RF_DR)|((0x03)<<RF_PWR),1)==false) return false;
     e98:	86 e0       	ldi	r24, 0x06	; 6
     e9a:	66 e0       	ldi	r22, 0x06	; 6
     e9c:	41 e0       	ldi	r20, 0x01	; 1
     e9e:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <nrf24_checkRegister>
     ea2:	98 2f       	mov	r25, r24
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	89 27       	eor	r24, r25
     ea8:	88 23       	and	r24, r24
     eaa:	11 f0       	breq	.+4      	; 0xeb0 <nrf24_checkConfig+0x3c>
     eac:	80 e0       	ldi	r24, 0x00	; 0
     eae:	25 c0       	rjmp	.+74     	; 0xefa <nrf24_checkConfig+0x86>
	if (nrf24_checkRegister(CONFIG,nrf24_CONFIG,1)==false) return false;
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	68 e0       	ldi	r22, 0x08	; 8
     eb4:	41 e0       	ldi	r20, 0x01	; 1
     eb6:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <nrf24_checkRegister>
     eba:	98 2f       	mov	r25, r24
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	89 27       	eor	r24, r25
     ec0:	88 23       	and	r24, r24
     ec2:	11 f0       	breq	.+4      	; 0xec8 <nrf24_checkConfig+0x54>
     ec4:	80 e0       	ldi	r24, 0x00	; 0
     ec6:	19 c0       	rjmp	.+50     	; 0xefa <nrf24_checkConfig+0x86>
	if (nrf24_checkRegister(SETUP_RETR,(0x04<<ARD)|(0x0F<<ARC),1)==false) return false;
     ec8:	84 e0       	ldi	r24, 0x04	; 4
     eca:	6f e4       	ldi	r22, 0x4F	; 79
     ecc:	41 e0       	ldi	r20, 0x01	; 1
     ece:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <nrf24_checkRegister>
     ed2:	98 2f       	mov	r25, r24
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	89 27       	eor	r24, r25
     ed8:	88 23       	and	r24, r24
     eda:	11 f0       	breq	.+4      	; 0xee0 <nrf24_checkConfig+0x6c>
     edc:	80 e0       	ldi	r24, 0x00	; 0
     ede:	0d c0       	rjmp	.+26     	; 0xefa <nrf24_checkConfig+0x86>
	if (nrf24_checkRegister(DYNPD,(0<<DPL_P0)|(0<<DPL_P1)|(0<<DPL_P2)|(0<<DPL_P3)|(0<<DPL_P4)|(0<<DPL_P5),1)==false) return false;
     ee0:	8c e1       	ldi	r24, 0x1C	; 28
     ee2:	60 e0       	ldi	r22, 0x00	; 0
     ee4:	41 e0       	ldi	r20, 0x01	; 1
     ee6:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <nrf24_checkRegister>
     eea:	98 2f       	mov	r25, r24
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	89 27       	eor	r24, r25
     ef0:	88 23       	and	r24, r24
     ef2:	11 f0       	breq	.+4      	; 0xef8 <nrf24_checkConfig+0x84>
     ef4:	80 e0       	ldi	r24, 0x00	; 0
     ef6:	01 c0       	rjmp	.+2      	; 0xefa <nrf24_checkConfig+0x86>
	
	return true;
     ef8:	81 e0       	ldi	r24, 0x01	; 1
}
     efa:	cf 91       	pop	r28
     efc:	df 91       	pop	r29
     efe:	08 95       	ret

00000f00 <nrf24_checkAvailability>:

bool nrf24_checkAvailability(){
     f00:	df 93       	push	r29
     f02:	cf 93       	push	r28
     f04:	cd b7       	in	r28, 0x3d	; 61
     f06:	de b7       	in	r29, 0x3e	; 62
	if (nrf24_checkRegister(RF_CH, selectedChannel,1)==true) { return true; } else { return false;}
     f08:	90 91 5f 01 	lds	r25, 0x015F
     f0c:	85 e0       	ldi	r24, 0x05	; 5
     f0e:	69 2f       	mov	r22, r25
     f10:	41 e0       	ldi	r20, 0x01	; 1
     f12:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <nrf24_checkRegister>
     f16:	88 23       	and	r24, r24
     f18:	11 f0       	breq	.+4      	; 0xf1e <nrf24_checkAvailability+0x1e>
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	01 c0       	rjmp	.+2      	; 0xf20 <nrf24_checkAvailability+0x20>
     f1e:	80 e0       	ldi	r24, 0x00	; 0
}
     f20:	cf 91       	pop	r28
     f22:	df 91       	pop	r29
     f24:	08 95       	ret

00000f26 <faultyRF_Alarm>:




void faultyRF_Alarm(){
     f26:	0f 93       	push	r16
     f28:	1f 93       	push	r17
     f2a:	df 93       	push	r29
     f2c:	cf 93       	push	r28
     f2e:	cd b7       	in	r28, 0x3d	; 61
     f30:	de b7       	in	r29, 0x3e	; 62
     f32:	6d 97       	sbiw	r28, 0x1d	; 29
     f34:	0f b6       	in	r0, 0x3f	; 63
     f36:	f8 94       	cli
     f38:	de bf       	out	0x3e, r29	; 62
     f3a:	0f be       	out	0x3f, r0	; 63
     f3c:	cd bf       	out	0x3d, r28	; 61
	CLEAR_FAULTY_RF_LED;
     f3e:	8b e2       	ldi	r24, 0x2B	; 43
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	2b e2       	ldi	r18, 0x2B	; 43
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	f9 01       	movw	r30, r18
     f48:	20 81       	ld	r18, Z
     f4a:	2f 77       	andi	r18, 0x7F	; 127
     f4c:	fc 01       	movw	r30, r24
     f4e:	20 83       	st	Z, r18
	for (uint8_t x = 0; x < 6; x++)
     f50:	19 82       	std	Y+1, r1	; 0x01
     f52:	8d c0       	rjmp	.+282    	; 0x106e <faultyRF_Alarm+0x148>
	{
		FLIP_FAULTY_RF_LED;
     f54:	8b e2       	ldi	r24, 0x2B	; 43
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	2b e2       	ldi	r18, 0x2B	; 43
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	f9 01       	movw	r30, r18
     f5e:	30 81       	ld	r19, Z
     f60:	20 e8       	ldi	r18, 0x80	; 128
     f62:	23 27       	eor	r18, r19
     f64:	fc 01       	movw	r30, r24
     f66:	20 83       	st	Z, r18
     f68:	80 e0       	ldi	r24, 0x00	; 0
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	aa ef       	ldi	r26, 0xFA	; 250
     f6e:	b2 e4       	ldi	r27, 0x42	; 66
     f70:	8a 83       	std	Y+2, r24	; 0x02
     f72:	9b 83       	std	Y+3, r25	; 0x03
     f74:	ac 83       	std	Y+4, r26	; 0x04
     f76:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     f78:	6a 81       	ldd	r22, Y+2	; 0x02
     f7a:	7b 81       	ldd	r23, Y+3	; 0x03
     f7c:	8c 81       	ldd	r24, Y+4	; 0x04
     f7e:	9d 81       	ldd	r25, Y+5	; 0x05
     f80:	20 e0       	ldi	r18, 0x00	; 0
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	4a e7       	ldi	r20, 0x7A	; 122
     f86:	55 e4       	ldi	r21, 0x45	; 69
     f88:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <__mulsf3>
     f8c:	dc 01       	movw	r26, r24
     f8e:	cb 01       	movw	r24, r22
     f90:	8e 83       	std	Y+6, r24	; 0x06
     f92:	9f 83       	std	Y+7, r25	; 0x07
     f94:	a8 87       	std	Y+8, r26	; 0x08
     f96:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     f98:	11 e0       	ldi	r17, 0x01	; 1
     f9a:	6e 81       	ldd	r22, Y+6	; 0x06
     f9c:	7f 81       	ldd	r23, Y+7	; 0x07
     f9e:	88 85       	ldd	r24, Y+8	; 0x08
     fa0:	99 85       	ldd	r25, Y+9	; 0x09
     fa2:	20 e0       	ldi	r18, 0x00	; 0
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	40 e8       	ldi	r20, 0x80	; 128
     fa8:	5f e3       	ldi	r21, 0x3F	; 63
     faa:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <__cmpsf2>
     fae:	88 23       	and	r24, r24
     fb0:	0c f0       	brlt	.+2      	; 0xfb4 <faultyRF_Alarm+0x8e>
     fb2:	10 e0       	ldi	r17, 0x00	; 0
     fb4:	11 23       	and	r17, r17
     fb6:	29 f0       	breq	.+10     	; 0xfc2 <faultyRF_Alarm+0x9c>
		__ticks = 1;
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	9b 87       	std	Y+11, r25	; 0x0b
     fbe:	8a 87       	std	Y+10, r24	; 0x0a
     fc0:	46 c0       	rjmp	.+140    	; 0x104e <faultyRF_Alarm+0x128>
	else if (__tmp > 65535)
     fc2:	11 e0       	ldi	r17, 0x01	; 1
     fc4:	6e 81       	ldd	r22, Y+6	; 0x06
     fc6:	7f 81       	ldd	r23, Y+7	; 0x07
     fc8:	88 85       	ldd	r24, Y+8	; 0x08
     fca:	99 85       	ldd	r25, Y+9	; 0x09
     fcc:	20 e0       	ldi	r18, 0x00	; 0
     fce:	3f ef       	ldi	r19, 0xFF	; 255
     fd0:	4f e7       	ldi	r20, 0x7F	; 127
     fd2:	57 e4       	ldi	r21, 0x47	; 71
     fd4:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <__gesf2>
     fd8:	18 16       	cp	r1, r24
     fda:	0c f0       	brlt	.+2      	; 0xfde <faultyRF_Alarm+0xb8>
     fdc:	10 e0       	ldi	r17, 0x00	; 0
     fde:	11 23       	and	r17, r17
     fe0:	61 f1       	breq	.+88     	; 0x103a <faultyRF_Alarm+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fe2:	6a 81       	ldd	r22, Y+2	; 0x02
     fe4:	7b 81       	ldd	r23, Y+3	; 0x03
     fe6:	8c 81       	ldd	r24, Y+4	; 0x04
     fe8:	9d 81       	ldd	r25, Y+5	; 0x05
     fea:	20 e0       	ldi	r18, 0x00	; 0
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	40 e2       	ldi	r20, 0x20	; 32
     ff0:	51 e4       	ldi	r21, 0x41	; 65
     ff2:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <__mulsf3>
     ff6:	dc 01       	movw	r26, r24
     ff8:	cb 01       	movw	r24, r22
     ffa:	bc 01       	movw	r22, r24
     ffc:	cd 01       	movw	r24, r26
     ffe:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <__fixunssfsi>
    1002:	dc 01       	movw	r26, r24
    1004:	cb 01       	movw	r24, r22
    1006:	9b 87       	std	Y+11, r25	; 0x0b
    1008:	8a 87       	std	Y+10, r24	; 0x0a
    100a:	12 c0       	rjmp	.+36     	; 0x1030 <faultyRF_Alarm+0x10a>
    100c:	80 e9       	ldi	r24, 0x90	; 144
    100e:	91 e0       	ldi	r25, 0x01	; 1
    1010:	9d 87       	std	Y+13, r25	; 0x0d
    1012:	8c 87       	std	Y+12, r24	; 0x0c
    1014:	8c 85       	ldd	r24, Y+12	; 0x0c
    1016:	9d 85       	ldd	r25, Y+13	; 0x0d
    1018:	8c 01       	movw	r16, r24
    101a:	c8 01       	movw	r24, r16
    101c:	01 97       	sbiw	r24, 0x01	; 1
    101e:	f1 f7       	brne	.-4      	; 0x101c <faultyRF_Alarm+0xf6>
    1020:	8c 01       	movw	r16, r24
    1022:	1d 87       	std	Y+13, r17	; 0x0d
    1024:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1026:	8a 85       	ldd	r24, Y+10	; 0x0a
    1028:	9b 85       	ldd	r25, Y+11	; 0x0b
    102a:	01 97       	sbiw	r24, 0x01	; 1
    102c:	9b 87       	std	Y+11, r25	; 0x0b
    102e:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1030:	8a 85       	ldd	r24, Y+10	; 0x0a
    1032:	9b 85       	ldd	r25, Y+11	; 0x0b
    1034:	00 97       	sbiw	r24, 0x00	; 0
    1036:	51 f7       	brne	.-44     	; 0x100c <faultyRF_Alarm+0xe6>
    1038:	17 c0       	rjmp	.+46     	; 0x1068 <faultyRF_Alarm+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    103a:	6e 81       	ldd	r22, Y+6	; 0x06
    103c:	7f 81       	ldd	r23, Y+7	; 0x07
    103e:	88 85       	ldd	r24, Y+8	; 0x08
    1040:	99 85       	ldd	r25, Y+9	; 0x09
    1042:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <__fixunssfsi>
    1046:	dc 01       	movw	r26, r24
    1048:	cb 01       	movw	r24, r22
    104a:	9b 87       	std	Y+11, r25	; 0x0b
    104c:	8a 87       	std	Y+10, r24	; 0x0a
    104e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1050:	9b 85       	ldd	r25, Y+11	; 0x0b
    1052:	9f 87       	std	Y+15, r25	; 0x0f
    1054:	8e 87       	std	Y+14, r24	; 0x0e
    1056:	8e 85       	ldd	r24, Y+14	; 0x0e
    1058:	9f 85       	ldd	r25, Y+15	; 0x0f
    105a:	8c 01       	movw	r16, r24
    105c:	f8 01       	movw	r30, r16
    105e:	31 97       	sbiw	r30, 0x01	; 1
    1060:	f1 f7       	brne	.-4      	; 0x105e <faultyRF_Alarm+0x138>
    1062:	8f 01       	movw	r16, r30
    1064:	1f 87       	std	Y+15, r17	; 0x0f
    1066:	0e 87       	std	Y+14, r16	; 0x0e



void faultyRF_Alarm(){
	CLEAR_FAULTY_RF_LED;
	for (uint8_t x = 0; x < 6; x++)
    1068:	89 81       	ldd	r24, Y+1	; 0x01
    106a:	8f 5f       	subi	r24, 0xFF	; 255
    106c:	89 83       	std	Y+1, r24	; 0x01
    106e:	89 81       	ldd	r24, Y+1	; 0x01
    1070:	86 30       	cpi	r24, 0x06	; 6
    1072:	08 f4       	brcc	.+2      	; 0x1076 <faultyRF_Alarm+0x150>
    1074:	6f cf       	rjmp	.-290    	; 0xf54 <faultyRF_Alarm+0x2e>
    1076:	80 e0       	ldi	r24, 0x00	; 0
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	aa e7       	ldi	r26, 0x7A	; 122
    107c:	b3 e4       	ldi	r27, 0x43	; 67
    107e:	88 8b       	std	Y+16, r24	; 0x10
    1080:	99 8b       	std	Y+17, r25	; 0x11
    1082:	aa 8b       	std	Y+18, r26	; 0x12
    1084:	bb 8b       	std	Y+19, r27	; 0x13
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    1086:	68 89       	ldd	r22, Y+16	; 0x10
    1088:	79 89       	ldd	r23, Y+17	; 0x11
    108a:	8a 89       	ldd	r24, Y+18	; 0x12
    108c:	9b 89       	ldd	r25, Y+19	; 0x13
    108e:	20 e0       	ldi	r18, 0x00	; 0
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	4a e7       	ldi	r20, 0x7A	; 122
    1094:	55 e4       	ldi	r21, 0x45	; 69
    1096:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <__mulsf3>
    109a:	dc 01       	movw	r26, r24
    109c:	cb 01       	movw	r24, r22
    109e:	8c 8b       	std	Y+20, r24	; 0x14
    10a0:	9d 8b       	std	Y+21, r25	; 0x15
    10a2:	ae 8b       	std	Y+22, r26	; 0x16
    10a4:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
    10a6:	11 e0       	ldi	r17, 0x01	; 1
    10a8:	6c 89       	ldd	r22, Y+20	; 0x14
    10aa:	7d 89       	ldd	r23, Y+21	; 0x15
    10ac:	8e 89       	ldd	r24, Y+22	; 0x16
    10ae:	9f 89       	ldd	r25, Y+23	; 0x17
    10b0:	20 e0       	ldi	r18, 0x00	; 0
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	40 e8       	ldi	r20, 0x80	; 128
    10b6:	5f e3       	ldi	r21, 0x3F	; 63
    10b8:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <__cmpsf2>
    10bc:	88 23       	and	r24, r24
    10be:	0c f0       	brlt	.+2      	; 0x10c2 <faultyRF_Alarm+0x19c>
    10c0:	10 e0       	ldi	r17, 0x00	; 0
    10c2:	11 23       	and	r17, r17
    10c4:	29 f0       	breq	.+10     	; 0x10d0 <faultyRF_Alarm+0x1aa>
		__ticks = 1;
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	99 8f       	std	Y+25, r25	; 0x19
    10cc:	88 8f       	std	Y+24, r24	; 0x18
    10ce:	46 c0       	rjmp	.+140    	; 0x115c <faultyRF_Alarm+0x236>
	else if (__tmp > 65535)
    10d0:	11 e0       	ldi	r17, 0x01	; 1
    10d2:	6c 89       	ldd	r22, Y+20	; 0x14
    10d4:	7d 89       	ldd	r23, Y+21	; 0x15
    10d6:	8e 89       	ldd	r24, Y+22	; 0x16
    10d8:	9f 89       	ldd	r25, Y+23	; 0x17
    10da:	20 e0       	ldi	r18, 0x00	; 0
    10dc:	3f ef       	ldi	r19, 0xFF	; 255
    10de:	4f e7       	ldi	r20, 0x7F	; 127
    10e0:	57 e4       	ldi	r21, 0x47	; 71
    10e2:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <__gesf2>
    10e6:	18 16       	cp	r1, r24
    10e8:	0c f0       	brlt	.+2      	; 0x10ec <faultyRF_Alarm+0x1c6>
    10ea:	10 e0       	ldi	r17, 0x00	; 0
    10ec:	11 23       	and	r17, r17
    10ee:	61 f1       	breq	.+88     	; 0x1148 <faultyRF_Alarm+0x222>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10f0:	68 89       	ldd	r22, Y+16	; 0x10
    10f2:	79 89       	ldd	r23, Y+17	; 0x11
    10f4:	8a 89       	ldd	r24, Y+18	; 0x12
    10f6:	9b 89       	ldd	r25, Y+19	; 0x13
    10f8:	20 e0       	ldi	r18, 0x00	; 0
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	40 e2       	ldi	r20, 0x20	; 32
    10fe:	51 e4       	ldi	r21, 0x41	; 65
    1100:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <__mulsf3>
    1104:	dc 01       	movw	r26, r24
    1106:	cb 01       	movw	r24, r22
    1108:	bc 01       	movw	r22, r24
    110a:	cd 01       	movw	r24, r26
    110c:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <__fixunssfsi>
    1110:	dc 01       	movw	r26, r24
    1112:	cb 01       	movw	r24, r22
    1114:	99 8f       	std	Y+25, r25	; 0x19
    1116:	88 8f       	std	Y+24, r24	; 0x18
    1118:	12 c0       	rjmp	.+36     	; 0x113e <faultyRF_Alarm+0x218>
    111a:	80 e9       	ldi	r24, 0x90	; 144
    111c:	91 e0       	ldi	r25, 0x01	; 1
    111e:	9b 8f       	std	Y+27, r25	; 0x1b
    1120:	8a 8f       	std	Y+26, r24	; 0x1a
    1122:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1124:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1126:	8c 01       	movw	r16, r24
    1128:	c8 01       	movw	r24, r16
    112a:	01 97       	sbiw	r24, 0x01	; 1
    112c:	f1 f7       	brne	.-4      	; 0x112a <faultyRF_Alarm+0x204>
    112e:	8c 01       	movw	r16, r24
    1130:	1b 8f       	std	Y+27, r17	; 0x1b
    1132:	0a 8f       	std	Y+26, r16	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1134:	88 8d       	ldd	r24, Y+24	; 0x18
    1136:	99 8d       	ldd	r25, Y+25	; 0x19
    1138:	01 97       	sbiw	r24, 0x01	; 1
    113a:	99 8f       	std	Y+25, r25	; 0x19
    113c:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    113e:	88 8d       	ldd	r24, Y+24	; 0x18
    1140:	99 8d       	ldd	r25, Y+25	; 0x19
    1142:	00 97       	sbiw	r24, 0x00	; 0
    1144:	51 f7       	brne	.-44     	; 0x111a <faultyRF_Alarm+0x1f4>
    1146:	17 c0       	rjmp	.+46     	; 0x1176 <faultyRF_Alarm+0x250>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1148:	6c 89       	ldd	r22, Y+20	; 0x14
    114a:	7d 89       	ldd	r23, Y+21	; 0x15
    114c:	8e 89       	ldd	r24, Y+22	; 0x16
    114e:	9f 89       	ldd	r25, Y+23	; 0x17
    1150:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <__fixunssfsi>
    1154:	dc 01       	movw	r26, r24
    1156:	cb 01       	movw	r24, r22
    1158:	99 8f       	std	Y+25, r25	; 0x19
    115a:	88 8f       	std	Y+24, r24	; 0x18
    115c:	88 8d       	ldd	r24, Y+24	; 0x18
    115e:	99 8d       	ldd	r25, Y+25	; 0x19
    1160:	9d 8f       	std	Y+29, r25	; 0x1d
    1162:	8c 8f       	std	Y+28, r24	; 0x1c
    1164:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1166:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1168:	8c 01       	movw	r16, r24
    116a:	f8 01       	movw	r30, r16
    116c:	31 97       	sbiw	r30, 0x01	; 1
    116e:	f1 f7       	brne	.-4      	; 0x116c <faultyRF_Alarm+0x246>
    1170:	8f 01       	movw	r16, r30
    1172:	1d 8f       	std	Y+29, r17	; 0x1d
    1174:	0c 8f       	std	Y+28, r16	; 0x1c
	{
		FLIP_FAULTY_RF_LED;
		_delay_ms(125);
	}
	_delay_ms(250);
}
    1176:	6d 96       	adiw	r28, 0x1d	; 29
    1178:	0f b6       	in	r0, 0x3f	; 63
    117a:	f8 94       	cli
    117c:	de bf       	out	0x3e, r29	; 62
    117e:	0f be       	out	0x3f, r0	; 63
    1180:	cd bf       	out	0x3d, r28	; 61
    1182:	cf 91       	pop	r28
    1184:	df 91       	pop	r29
    1186:	1f 91       	pop	r17
    1188:	0f 91       	pop	r16
    118a:	08 95       	ret

0000118c <nrf24_rx_address>:



/* Set the RX address */
void nrf24_rx_address(uint8_t * adr)
{
    118c:	df 93       	push	r29
    118e:	cf 93       	push	r28
    1190:	00 d0       	rcall	.+0      	; 0x1192 <nrf24_rx_address+0x6>
    1192:	cd b7       	in	r28, 0x3d	; 61
    1194:	de b7       	in	r29, 0x3e	; 62
    1196:	9a 83       	std	Y+2, r25	; 0x02
    1198:	89 83       	std	Y+1, r24	; 0x01
	nrf24_ce_digitalWrite(LOW);
    119a:	80 e0       	ldi	r24, 0x00	; 0
    119c:	0e 94 4f 0b 	call	0x169e	; 0x169e <nrf24_ce_digitalWrite>
	nrf24_writeRegister(RX_ADDR_P1,adr,nrf24_ADDR_LEN);
    11a0:	29 81       	ldd	r18, Y+1	; 0x01
    11a2:	3a 81       	ldd	r19, Y+2	; 0x02
    11a4:	8b e0       	ldi	r24, 0x0B	; 11
    11a6:	b9 01       	movw	r22, r18
    11a8:	45 e0       	ldi	r20, 0x05	; 5
    11aa:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <nrf24_writeRegister>
	nrf24_ce_digitalWrite(HIGH);
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	0e 94 4f 0b 	call	0x169e	; 0x169e <nrf24_ce_digitalWrite>
}
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	cf 91       	pop	r28
    11ba:	df 91       	pop	r29
    11bc:	08 95       	ret

000011be <nrf24_tx_address>:
	return payload_len;
}

/* Set the TX address */
void nrf24_tx_address(uint8_t* adr)
{
    11be:	df 93       	push	r29
    11c0:	cf 93       	push	r28
    11c2:	00 d0       	rcall	.+0      	; 0x11c4 <nrf24_tx_address+0x6>
    11c4:	cd b7       	in	r28, 0x3d	; 61
    11c6:	de b7       	in	r29, 0x3e	; 62
    11c8:	9a 83       	std	Y+2, r25	; 0x02
    11ca:	89 83       	std	Y+1, r24	; 0x01
	/* RX_ADDR_P0 must be set to the sending addr for auto ack to work. */
	nrf24_writeRegister(RX_ADDR_P0,adr,nrf24_ADDR_LEN);
    11cc:	29 81       	ldd	r18, Y+1	; 0x01
    11ce:	3a 81       	ldd	r19, Y+2	; 0x02
    11d0:	8a e0       	ldi	r24, 0x0A	; 10
    11d2:	b9 01       	movw	r22, r18
    11d4:	45 e0       	ldi	r20, 0x05	; 5
    11d6:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <nrf24_writeRegister>
	nrf24_writeRegister(TX_ADDR,adr,nrf24_ADDR_LEN);
    11da:	29 81       	ldd	r18, Y+1	; 0x01
    11dc:	3a 81       	ldd	r19, Y+2	; 0x02
    11de:	80 e1       	ldi	r24, 0x10	; 16
    11e0:	b9 01       	movw	r22, r18
    11e2:	45 e0       	ldi	r20, 0x05	; 5
    11e4:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <nrf24_writeRegister>
}
    11e8:	0f 90       	pop	r0
    11ea:	0f 90       	pop	r0
    11ec:	cf 91       	pop	r28
    11ee:	df 91       	pop	r29
    11f0:	08 95       	ret

000011f2 <nrf24_dataReady>:

/* Checks if data is available for reading */
/* Returns 1 if data is ready ... */
uint8_t nrf24_dataReady()
{
    11f2:	df 93       	push	r29
    11f4:	cf 93       	push	r28
    11f6:	0f 92       	push	r0
    11f8:	cd b7       	in	r28, 0x3d	; 61
    11fa:	de b7       	in	r29, 0x3e	; 62
	// See note in getData() function - just checking RX_DR isn't good enough
	uint8_t status = nrf24_getStatus();
    11fc:	0e 94 8d 09 	call	0x131a	; 0x131a <nrf24_getStatus>
    1200:	89 83       	std	Y+1, r24	; 0x01

	// We can short circuit on RX_DR, but if it's not set, we still need
	// to check the FIFO for any pending packets
	if ( status & (1 << RX_DR) )
    1202:	89 81       	ldd	r24, Y+1	; 0x01
    1204:	88 2f       	mov	r24, r24
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	80 74       	andi	r24, 0x40	; 64
    120a:	90 70       	andi	r25, 0x00	; 0
    120c:	00 97       	sbiw	r24, 0x00	; 0
    120e:	11 f0       	breq	.+4      	; 0x1214 <nrf24_dataReady+0x22>
	{
		return 1;
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	07 c0       	rjmp	.+14     	; 0x1222 <nrf24_dataReady+0x30>
	}

	return !nrf24_rxFifoEmpty();;
    1214:	0e 94 15 09 	call	0x122a	; 0x122a <nrf24_rxFifoEmpty>
    1218:	98 2f       	mov	r25, r24
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	99 23       	and	r25, r25
    121e:	09 f0       	breq	.+2      	; 0x1222 <nrf24_dataReady+0x30>
    1220:	80 e0       	ldi	r24, 0x00	; 0
}
    1222:	0f 90       	pop	r0
    1224:	cf 91       	pop	r28
    1226:	df 91       	pop	r29
    1228:	08 95       	ret

0000122a <nrf24_rxFifoEmpty>:

/* Checks if receive FIFO is empty or not */
uint8_t nrf24_rxFifoEmpty()
{
    122a:	df 93       	push	r29
    122c:	cf 93       	push	r28
    122e:	0f 92       	push	r0
    1230:	cd b7       	in	r28, 0x3d	; 61
    1232:	de b7       	in	r29, 0x3e	; 62
	uint8_t fifoStatus;

	nrf24_readRegister(FIFO_STATUS,&fifoStatus,1);
    1234:	87 e1       	ldi	r24, 0x17	; 23
    1236:	9e 01       	movw	r18, r28
    1238:	2f 5f       	subi	r18, 0xFF	; 255
    123a:	3f 4f       	sbci	r19, 0xFF	; 255
    123c:	b9 01       	movw	r22, r18
    123e:	41 e0       	ldi	r20, 0x01	; 1
    1240:	0e 94 b8 0a 	call	0x1570	; 0x1570 <nrf24_readRegister>
	
	return (fifoStatus & (1 << RX_EMPTY));
    1244:	89 81       	ldd	r24, Y+1	; 0x01
    1246:	81 70       	andi	r24, 0x01	; 1
}
    1248:	0f 90       	pop	r0
    124a:	cf 91       	pop	r28
    124c:	df 91       	pop	r29
    124e:	08 95       	ret

00001250 <nrf24_getData>:
	return status;
}

/* Reads payload bytes into data array */
void nrf24_getData(uint8_t* data)
{
    1250:	df 93       	push	r29
    1252:	cf 93       	push	r28
    1254:	00 d0       	rcall	.+0      	; 0x1256 <nrf24_getData+0x6>
    1256:	cd b7       	in	r28, 0x3d	; 61
    1258:	de b7       	in	r29, 0x3e	; 62
    125a:	9a 83       	std	Y+2, r25	; 0x02
    125c:	89 83       	std	Y+1, r24	; 0x01
	/* Pull down chip select */
	nrf24_csn_digitalWrite(LOW);
    125e:	80 e0       	ldi	r24, 0x00	; 0
    1260:	0e 94 6f 0b 	call	0x16de	; 0x16de <nrf24_csn_digitalWrite>

	/* Send cmd to read rx payload */
	spi_transfer( R_RX_PAYLOAD );
    1264:	81 e6       	ldi	r24, 0x61	; 97
    1266:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <spi_transfer>
	
	/* Read payload */
	nrf24_transferSync(data,data,payload_len);
    126a:	40 91 5e 01 	lds	r20, 0x015E
    126e:	89 81       	ldd	r24, Y+1	; 0x01
    1270:	9a 81       	ldd	r25, Y+2	; 0x02
    1272:	29 81       	ldd	r18, Y+1	; 0x01
    1274:	3a 81       	ldd	r19, Y+2	; 0x02
    1276:	b9 01       	movw	r22, r18
    1278:	0e 94 43 0a 	call	0x1486	; 0x1486 <nrf24_transferSync>
	
	/* Pull up chip select */
	nrf24_csn_digitalWrite(HIGH);
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	0e 94 6f 0b 	call	0x16de	; 0x16de <nrf24_csn_digitalWrite>

	/* Reset status register */
	nrf24_configRegister(STATUS,(1<<RX_DR));
    1282:	87 e0       	ldi	r24, 0x07	; 7
    1284:	60 e4       	ldi	r22, 0x40	; 64
    1286:	0e 94 9e 0a 	call	0x153c	; 0x153c <nrf24_configRegister>
}
    128a:	0f 90       	pop	r0
    128c:	0f 90       	pop	r0
    128e:	cf 91       	pop	r28
    1290:	df 91       	pop	r29
    1292:	08 95       	ret

00001294 <nrf24_send>:
}

// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
void nrf24_send(uint8_t* value)
{
    1294:	df 93       	push	r29
    1296:	cf 93       	push	r28
    1298:	00 d0       	rcall	.+0      	; 0x129a <nrf24_send+0x6>
    129a:	cd b7       	in	r28, 0x3d	; 61
    129c:	de b7       	in	r29, 0x3e	; 62
    129e:	9a 83       	std	Y+2, r25	; 0x02
    12a0:	89 83       	std	Y+1, r24	; 0x01
	/* Go to Standby-I first */
	nrf24_ce_digitalWrite(LOW);
    12a2:	80 e0       	ldi	r24, 0x00	; 0
    12a4:	0e 94 4f 0b 	call	0x169e	; 0x169e <nrf24_ce_digitalWrite>
	
	/* Set to transmitter mode , Power up if needed */
	nrf24_powerUpTx();
    12a8:	0e 94 de 09 	call	0x13bc	; 0x13bc <nrf24_powerUpTx>

	/* Do we really need to flush TX fifo each time ? */
	#if 1
	/* Pull down chip select */
	nrf24_csn_digitalWrite(LOW);
    12ac:	80 e0       	ldi	r24, 0x00	; 0
    12ae:	0e 94 6f 0b 	call	0x16de	; 0x16de <nrf24_csn_digitalWrite>

	/* Write cmd to flush transmit FIFO */
	spi_transfer(FLUSH_TX);
    12b2:	81 ee       	ldi	r24, 0xE1	; 225
    12b4:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <spi_transfer>

	/* Pull up chip select */
	nrf24_csn_digitalWrite(HIGH);
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	0e 94 6f 0b 	call	0x16de	; 0x16de <nrf24_csn_digitalWrite>
	#endif

	/* Pull down chip select */
	nrf24_csn_digitalWrite(LOW);
    12be:	80 e0       	ldi	r24, 0x00	; 0
    12c0:	0e 94 6f 0b 	call	0x16de	; 0x16de <nrf24_csn_digitalWrite>

	/* Write cmd to write payload */
	spi_transfer(W_TX_PAYLOAD);
    12c4:	80 ea       	ldi	r24, 0xA0	; 160
    12c6:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <spi_transfer>

	/* Write payload */
	nrf24_transmitSync(value,payload_len);
    12ca:	20 91 5e 01 	lds	r18, 0x015E
    12ce:	89 81       	ldd	r24, Y+1	; 0x01
    12d0:	9a 81       	ldd	r25, Y+2	; 0x02
    12d2:	62 2f       	mov	r22, r18
    12d4:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <nrf24_transmitSync>

	/* Pull up chip select */
	nrf24_csn_digitalWrite(HIGH);
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	0e 94 6f 0b 	call	0x16de	; 0x16de <nrf24_csn_digitalWrite>

	/* Start the transmission */
	nrf24_ce_digitalWrite(HIGH);
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	0e 94 4f 0b 	call	0x169e	; 0x169e <nrf24_ce_digitalWrite>
}
    12e4:	0f 90       	pop	r0
    12e6:	0f 90       	pop	r0
    12e8:	cf 91       	pop	r28
    12ea:	df 91       	pop	r29
    12ec:	08 95       	ret

000012ee <nrf24_isSending>:

uint8_t nrf24_isSending()
{
    12ee:	df 93       	push	r29
    12f0:	cf 93       	push	r28
    12f2:	0f 92       	push	r0
    12f4:	cd b7       	in	r28, 0x3d	; 61
    12f6:	de b7       	in	r29, 0x3e	; 62
	uint8_t status;

	/* read the current status */
	status = nrf24_getStatus();
    12f8:	0e 94 8d 09 	call	0x131a	; 0x131a <nrf24_getStatus>
    12fc:	89 83       	std	Y+1, r24	; 0x01
	
	/* if sending successful (TX_DS) or max retries exceded (MAX_RT). */
	if((status & ((1 << TX_DS)  | (1 << MAX_RT))))
    12fe:	89 81       	ldd	r24, Y+1	; 0x01
    1300:	88 2f       	mov	r24, r24
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	80 73       	andi	r24, 0x30	; 48
    1306:	90 70       	andi	r25, 0x00	; 0
    1308:	00 97       	sbiw	r24, 0x00	; 0
    130a:	11 f0       	breq	.+4      	; 0x1310 <nrf24_isSending+0x22>
	{
		return 0; /* false */
    130c:	80 e0       	ldi	r24, 0x00	; 0
    130e:	01 c0       	rjmp	.+2      	; 0x1312 <nrf24_isSending+0x24>
	}

	return 1; /* true */
    1310:	81 e0       	ldi	r24, 0x01	; 1

}
    1312:	0f 90       	pop	r0
    1314:	cf 91       	pop	r28
    1316:	df 91       	pop	r29
    1318:	08 95       	ret

0000131a <nrf24_getStatus>:

uint8_t nrf24_getStatus()
{
    131a:	df 93       	push	r29
    131c:	cf 93       	push	r28
    131e:	0f 92       	push	r0
    1320:	cd b7       	in	r28, 0x3d	; 61
    1322:	de b7       	in	r29, 0x3e	; 62
	uint8_t rv;
	nrf24_csn_digitalWrite(LOW);
    1324:	80 e0       	ldi	r24, 0x00	; 0
    1326:	0e 94 6f 0b 	call	0x16de	; 0x16de <nrf24_csn_digitalWrite>
	rv = spi_transfer(NOP);
    132a:	8f ef       	ldi	r24, 0xFF	; 255
    132c:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <spi_transfer>
    1330:	89 83       	std	Y+1, r24	; 0x01
	nrf24_csn_digitalWrite(HIGH);
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	0e 94 6f 0b 	call	0x16de	; 0x16de <nrf24_csn_digitalWrite>
	return rv;
    1338:	89 81       	ldd	r24, Y+1	; 0x01
}
    133a:	0f 90       	pop	r0
    133c:	cf 91       	pop	r28
    133e:	df 91       	pop	r29
    1340:	08 95       	ret

00001342 <nrf24_lastMessageStatus>:

uint8_t nrf24_lastMessageStatus()
{
    1342:	df 93       	push	r29
    1344:	cf 93       	push	r28
    1346:	0f 92       	push	r0
    1348:	cd b7       	in	r28, 0x3d	; 61
    134a:	de b7       	in	r29, 0x3e	; 62
	uint8_t rv;

	rv = nrf24_getStatus();
    134c:	0e 94 8d 09 	call	0x131a	; 0x131a <nrf24_getStatus>
    1350:	89 83       	std	Y+1, r24	; 0x01

	/* Transmission went OK */
	if((rv & ((1 << TX_DS))))
    1352:	89 81       	ldd	r24, Y+1	; 0x01
    1354:	88 2f       	mov	r24, r24
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	80 72       	andi	r24, 0x20	; 32
    135a:	90 70       	andi	r25, 0x00	; 0
    135c:	00 97       	sbiw	r24, 0x00	; 0
    135e:	11 f0       	breq	.+4      	; 0x1364 <nrf24_lastMessageStatus+0x22>
	{
		return NRF24_TRANSMISSON_OK;
    1360:	80 e0       	ldi	r24, 0x00	; 0
    1362:	0a c0       	rjmp	.+20     	; 0x1378 <nrf24_lastMessageStatus+0x36>
	}
	/* Maximum retransmission count is reached */
	/* Last message probably went missing ... */
	else if((rv & ((1 << MAX_RT))))
    1364:	89 81       	ldd	r24, Y+1	; 0x01
    1366:	88 2f       	mov	r24, r24
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	80 71       	andi	r24, 0x10	; 16
    136c:	90 70       	andi	r25, 0x00	; 0
    136e:	00 97       	sbiw	r24, 0x00	; 0
    1370:	11 f0       	breq	.+4      	; 0x1376 <nrf24_lastMessageStatus+0x34>
	{
		return NRF24_MESSAGE_LOST;
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	01 c0       	rjmp	.+2      	; 0x1378 <nrf24_lastMessageStatus+0x36>
	}
	/* Probably still sending ... */
	else
	{
		return 0xFF;
    1376:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    1378:	0f 90       	pop	r0
    137a:	cf 91       	pop	r28
    137c:	df 91       	pop	r29
    137e:	08 95       	ret

00001380 <nrf24_powerUpRx>:

void nrf24_powerUpRx()
{
    1380:	df 93       	push	r29
    1382:	cf 93       	push	r28
    1384:	cd b7       	in	r28, 0x3d	; 61
    1386:	de b7       	in	r29, 0x3e	; 62
	nrf24_csn_digitalWrite(LOW);
    1388:	80 e0       	ldi	r24, 0x00	; 0
    138a:	0e 94 6f 0b 	call	0x16de	; 0x16de <nrf24_csn_digitalWrite>
	spi_transfer(FLUSH_RX);
    138e:	82 ee       	ldi	r24, 0xE2	; 226
    1390:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <spi_transfer>
	nrf24_csn_digitalWrite(HIGH);
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	0e 94 6f 0b 	call	0x16de	; 0x16de <nrf24_csn_digitalWrite>

	nrf24_configRegister(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT));
    139a:	87 e0       	ldi	r24, 0x07	; 7
    139c:	60 e7       	ldi	r22, 0x70	; 112
    139e:	0e 94 9e 0a 	call	0x153c	; 0x153c <nrf24_configRegister>

	nrf24_ce_digitalWrite(LOW);
    13a2:	80 e0       	ldi	r24, 0x00	; 0
    13a4:	0e 94 4f 0b 	call	0x169e	; 0x169e <nrf24_ce_digitalWrite>
	nrf24_configRegister(CONFIG,nrf24_CONFIG|((1<<PWR_UP)|(1<<PRIM_RX)));
    13a8:	80 e0       	ldi	r24, 0x00	; 0
    13aa:	6b e0       	ldi	r22, 0x0B	; 11
    13ac:	0e 94 9e 0a 	call	0x153c	; 0x153c <nrf24_configRegister>
	nrf24_ce_digitalWrite(HIGH);
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	0e 94 4f 0b 	call	0x169e	; 0x169e <nrf24_ce_digitalWrite>
}
    13b6:	cf 91       	pop	r28
    13b8:	df 91       	pop	r29
    13ba:	08 95       	ret

000013bc <nrf24_powerUpTx>:

void nrf24_powerUpTx()
{
    13bc:	df 93       	push	r29
    13be:	cf 93       	push	r28
    13c0:	cd b7       	in	r28, 0x3d	; 61
    13c2:	de b7       	in	r29, 0x3e	; 62
	nrf24_configRegister(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT));
    13c4:	87 e0       	ldi	r24, 0x07	; 7
    13c6:	60 e7       	ldi	r22, 0x70	; 112
    13c8:	0e 94 9e 0a 	call	0x153c	; 0x153c <nrf24_configRegister>

	nrf24_configRegister(CONFIG,nrf24_CONFIG|((1<<PWR_UP)|(0<<PRIM_RX)));
    13cc:	80 e0       	ldi	r24, 0x00	; 0
    13ce:	6a e0       	ldi	r22, 0x0A	; 10
    13d0:	0e 94 9e 0a 	call	0x153c	; 0x153c <nrf24_configRegister>
}
    13d4:	cf 91       	pop	r28
    13d6:	df 91       	pop	r29
    13d8:	08 95       	ret

000013da <nrf24_powerDown>:

void nrf24_powerDown()
{
    13da:	df 93       	push	r29
    13dc:	cf 93       	push	r28
    13de:	cd b7       	in	r28, 0x3d	; 61
    13e0:	de b7       	in	r29, 0x3e	; 62
	nrf24_ce_digitalWrite(LOW);
    13e2:	80 e0       	ldi	r24, 0x00	; 0
    13e4:	0e 94 4f 0b 	call	0x169e	; 0x169e <nrf24_ce_digitalWrite>
	nrf24_configRegister(CONFIG,nrf24_CONFIG);
    13e8:	80 e0       	ldi	r24, 0x00	; 0
    13ea:	68 e0       	ldi	r22, 0x08	; 8
    13ec:	0e 94 9e 0a 	call	0x153c	; 0x153c <nrf24_configRegister>
}
    13f0:	cf 91       	pop	r28
    13f2:	df 91       	pop	r29
    13f4:	08 95       	ret

000013f6 <spi_transfer>:

uint8_t spi_transfer(uint8_t tx)
{
    13f6:	df 93       	push	r29
    13f8:	cf 93       	push	r28
    13fa:	00 d0       	rcall	.+0      	; 0x13fc <spi_transfer+0x6>
    13fc:	0f 92       	push	r0
    13fe:	cd b7       	in	r28, 0x3d	; 61
    1400:	de b7       	in	r29, 0x3e	; 62
    1402:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t i = 0;
    1404:	19 82       	std	Y+1, r1	; 0x01
	uint8_t rx = 0;
    1406:	1a 82       	std	Y+2, r1	; 0x02

	nrf24_sck_digitalWrite(LOW);
    1408:	80 e0       	ldi	r24, 0x00	; 0
    140a:	0e 94 8f 0b 	call	0x171e	; 0x171e <nrf24_sck_digitalWrite>

	for(i=0;i<8;i++)
    140e:	19 82       	std	Y+1, r1	; 0x01
    1410:	30 c0       	rjmp	.+96     	; 0x1472 <spi_transfer+0x7c>
	{

		if(tx & (1<<(7-i)))
    1412:	8b 81       	ldd	r24, Y+3	; 0x03
    1414:	88 2f       	mov	r24, r24
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	29 81       	ldd	r18, Y+1	; 0x01
    141a:	22 2f       	mov	r18, r18
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	47 e0       	ldi	r20, 0x07	; 7
    1420:	50 e0       	ldi	r21, 0x00	; 0
    1422:	ba 01       	movw	r22, r20
    1424:	62 1b       	sub	r22, r18
    1426:	73 0b       	sbc	r23, r19
    1428:	9b 01       	movw	r18, r22
    142a:	02 2e       	mov	r0, r18
    142c:	02 c0       	rjmp	.+4      	; 0x1432 <spi_transfer+0x3c>
    142e:	95 95       	asr	r25
    1430:	87 95       	ror	r24
    1432:	0a 94       	dec	r0
    1434:	e2 f7       	brpl	.-8      	; 0x142e <spi_transfer+0x38>
    1436:	81 70       	andi	r24, 0x01	; 1
    1438:	90 70       	andi	r25, 0x00	; 0
    143a:	88 23       	and	r24, r24
    143c:	21 f0       	breq	.+8      	; 0x1446 <spi_transfer+0x50>
		{
			nrf24_mosi_digitalWrite(HIGH);
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	0e 94 af 0b 	call	0x175e	; 0x175e <nrf24_mosi_digitalWrite>
    1444:	03 c0       	rjmp	.+6      	; 0x144c <spi_transfer+0x56>
		}
		else
		{
			nrf24_mosi_digitalWrite(LOW);
    1446:	80 e0       	ldi	r24, 0x00	; 0
    1448:	0e 94 af 0b 	call	0x175e	; 0x175e <nrf24_mosi_digitalWrite>
		}

		nrf24_sck_digitalWrite(HIGH);
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	0e 94 8f 0b 	call	0x171e	; 0x171e <nrf24_sck_digitalWrite>

		rx = rx << 1;
    1452:	8a 81       	ldd	r24, Y+2	; 0x02
    1454:	88 0f       	add	r24, r24
    1456:	8a 83       	std	Y+2, r24	; 0x02
		if(nrf24_miso_digitalRead())
    1458:	0e 94 cf 0b 	call	0x179e	; 0x179e <nrf24_miso_digitalRead>
    145c:	88 23       	and	r24, r24
    145e:	19 f0       	breq	.+6      	; 0x1466 <spi_transfer+0x70>
		{
			rx |= 0x01;
    1460:	8a 81       	ldd	r24, Y+2	; 0x02
    1462:	81 60       	ori	r24, 0x01	; 1
    1464:	8a 83       	std	Y+2, r24	; 0x02
		}

		nrf24_sck_digitalWrite(LOW);
    1466:	80 e0       	ldi	r24, 0x00	; 0
    1468:	0e 94 8f 0b 	call	0x171e	; 0x171e <nrf24_sck_digitalWrite>
	uint8_t i = 0;
	uint8_t rx = 0;

	nrf24_sck_digitalWrite(LOW);

	for(i=0;i<8;i++)
    146c:	89 81       	ldd	r24, Y+1	; 0x01
    146e:	8f 5f       	subi	r24, 0xFF	; 255
    1470:	89 83       	std	Y+1, r24	; 0x01
    1472:	89 81       	ldd	r24, Y+1	; 0x01
    1474:	88 30       	cpi	r24, 0x08	; 8
    1476:	68 f2       	brcs	.-102    	; 0x1412 <spi_transfer+0x1c>

		nrf24_sck_digitalWrite(LOW);

	}

	return rx;
    1478:	8a 81       	ldd	r24, Y+2	; 0x02
}
    147a:	0f 90       	pop	r0
    147c:	0f 90       	pop	r0
    147e:	0f 90       	pop	r0
    1480:	cf 91       	pop	r28
    1482:	df 91       	pop	r29
    1484:	08 95       	ret

00001486 <nrf24_transferSync>:

/* send and receive multiple bytes over SPI */
void nrf24_transferSync(uint8_t* dataout,uint8_t* datain,uint8_t len)
{
    1486:	0f 93       	push	r16
    1488:	1f 93       	push	r17
    148a:	df 93       	push	r29
    148c:	cf 93       	push	r28
    148e:	00 d0       	rcall	.+0      	; 0x1490 <nrf24_transferSync+0xa>
    1490:	00 d0       	rcall	.+0      	; 0x1492 <nrf24_transferSync+0xc>
    1492:	00 d0       	rcall	.+0      	; 0x1494 <nrf24_transferSync+0xe>
    1494:	cd b7       	in	r28, 0x3d	; 61
    1496:	de b7       	in	r29, 0x3e	; 62
    1498:	9b 83       	std	Y+3, r25	; 0x03
    149a:	8a 83       	std	Y+2, r24	; 0x02
    149c:	7d 83       	std	Y+5, r23	; 0x05
    149e:	6c 83       	std	Y+4, r22	; 0x04
    14a0:	4e 83       	std	Y+6, r20	; 0x06
	uint8_t i;

	for(i=0;i<len;i++)
    14a2:	19 82       	std	Y+1, r1	; 0x01
    14a4:	18 c0       	rjmp	.+48     	; 0x14d6 <nrf24_transferSync+0x50>
	{
		datain[i] = spi_transfer(dataout[i]);
    14a6:	89 81       	ldd	r24, Y+1	; 0x01
    14a8:	88 2f       	mov	r24, r24
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	2c 81       	ldd	r18, Y+4	; 0x04
    14ae:	3d 81       	ldd	r19, Y+5	; 0x05
    14b0:	89 01       	movw	r16, r18
    14b2:	08 0f       	add	r16, r24
    14b4:	19 1f       	adc	r17, r25
    14b6:	89 81       	ldd	r24, Y+1	; 0x01
    14b8:	88 2f       	mov	r24, r24
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	2a 81       	ldd	r18, Y+2	; 0x02
    14be:	3b 81       	ldd	r19, Y+3	; 0x03
    14c0:	82 0f       	add	r24, r18
    14c2:	93 1f       	adc	r25, r19
    14c4:	fc 01       	movw	r30, r24
    14c6:	80 81       	ld	r24, Z
    14c8:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <spi_transfer>
    14cc:	f8 01       	movw	r30, r16
    14ce:	80 83       	st	Z, r24
/* send and receive multiple bytes over SPI */
void nrf24_transferSync(uint8_t* dataout,uint8_t* datain,uint8_t len)
{
	uint8_t i;

	for(i=0;i<len;i++)
    14d0:	89 81       	ldd	r24, Y+1	; 0x01
    14d2:	8f 5f       	subi	r24, 0xFF	; 255
    14d4:	89 83       	std	Y+1, r24	; 0x01
    14d6:	99 81       	ldd	r25, Y+1	; 0x01
    14d8:	8e 81       	ldd	r24, Y+6	; 0x06
    14da:	98 17       	cp	r25, r24
    14dc:	20 f3       	brcs	.-56     	; 0x14a6 <nrf24_transferSync+0x20>
	{
		datain[i] = spi_transfer(dataout[i]);
	}

}
    14de:	26 96       	adiw	r28, 0x06	; 6
    14e0:	0f b6       	in	r0, 0x3f	; 63
    14e2:	f8 94       	cli
    14e4:	de bf       	out	0x3e, r29	; 62
    14e6:	0f be       	out	0x3f, r0	; 63
    14e8:	cd bf       	out	0x3d, r28	; 61
    14ea:	cf 91       	pop	r28
    14ec:	df 91       	pop	r29
    14ee:	1f 91       	pop	r17
    14f0:	0f 91       	pop	r16
    14f2:	08 95       	ret

000014f4 <nrf24_transmitSync>:

/* send multiple bytes over SPI */
void nrf24_transmitSync(uint8_t* dataout,uint8_t len)
{
    14f4:	df 93       	push	r29
    14f6:	cf 93       	push	r28
    14f8:	00 d0       	rcall	.+0      	; 0x14fa <nrf24_transmitSync+0x6>
    14fa:	00 d0       	rcall	.+0      	; 0x14fc <nrf24_transmitSync+0x8>
    14fc:	cd b7       	in	r28, 0x3d	; 61
    14fe:	de b7       	in	r29, 0x3e	; 62
    1500:	9b 83       	std	Y+3, r25	; 0x03
    1502:	8a 83       	std	Y+2, r24	; 0x02
    1504:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t i;
	
	for(i=0;i<len;i++)
    1506:	19 82       	std	Y+1, r1	; 0x01
    1508:	0e c0       	rjmp	.+28     	; 0x1526 <nrf24_transmitSync+0x32>
	{
		spi_transfer(dataout[i]);
    150a:	89 81       	ldd	r24, Y+1	; 0x01
    150c:	88 2f       	mov	r24, r24
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	2a 81       	ldd	r18, Y+2	; 0x02
    1512:	3b 81       	ldd	r19, Y+3	; 0x03
    1514:	82 0f       	add	r24, r18
    1516:	93 1f       	adc	r25, r19
    1518:	fc 01       	movw	r30, r24
    151a:	80 81       	ld	r24, Z
    151c:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <spi_transfer>
/* send multiple bytes over SPI */
void nrf24_transmitSync(uint8_t* dataout,uint8_t len)
{
	uint8_t i;
	
	for(i=0;i<len;i++)
    1520:	89 81       	ldd	r24, Y+1	; 0x01
    1522:	8f 5f       	subi	r24, 0xFF	; 255
    1524:	89 83       	std	Y+1, r24	; 0x01
    1526:	99 81       	ldd	r25, Y+1	; 0x01
    1528:	8c 81       	ldd	r24, Y+4	; 0x04
    152a:	98 17       	cp	r25, r24
    152c:	70 f3       	brcs	.-36     	; 0x150a <nrf24_transmitSync+0x16>
	{
		spi_transfer(dataout[i]);
	}

}
    152e:	0f 90       	pop	r0
    1530:	0f 90       	pop	r0
    1532:	0f 90       	pop	r0
    1534:	0f 90       	pop	r0
    1536:	cf 91       	pop	r28
    1538:	df 91       	pop	r29
    153a:	08 95       	ret

0000153c <nrf24_configRegister>:

/* Clocks only one byte into the given nrf24 register */
void nrf24_configRegister(uint8_t reg, uint8_t value)
{
    153c:	df 93       	push	r29
    153e:	cf 93       	push	r28
    1540:	00 d0       	rcall	.+0      	; 0x1542 <nrf24_configRegister+0x6>
    1542:	cd b7       	in	r28, 0x3d	; 61
    1544:	de b7       	in	r29, 0x3e	; 62
    1546:	89 83       	std	Y+1, r24	; 0x01
    1548:	6a 83       	std	Y+2, r22	; 0x02
	nrf24_csn_digitalWrite(LOW);
    154a:	80 e0       	ldi	r24, 0x00	; 0
    154c:	0e 94 6f 0b 	call	0x16de	; 0x16de <nrf24_csn_digitalWrite>
	spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
    1550:	89 81       	ldd	r24, Y+1	; 0x01
    1552:	8f 71       	andi	r24, 0x1F	; 31
    1554:	80 62       	ori	r24, 0x20	; 32
    1556:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <spi_transfer>
	spi_transfer(value);
    155a:	8a 81       	ldd	r24, Y+2	; 0x02
    155c:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <spi_transfer>
	nrf24_csn_digitalWrite(HIGH);
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	0e 94 6f 0b 	call	0x16de	; 0x16de <nrf24_csn_digitalWrite>
}
    1566:	0f 90       	pop	r0
    1568:	0f 90       	pop	r0
    156a:	cf 91       	pop	r28
    156c:	df 91       	pop	r29
    156e:	08 95       	ret

00001570 <nrf24_readRegister>:

/* Read single register from nrf24 */
void nrf24_readRegister(uint8_t reg, uint8_t* value, uint8_t len)
{
    1570:	df 93       	push	r29
    1572:	cf 93       	push	r28
    1574:	00 d0       	rcall	.+0      	; 0x1576 <nrf24_readRegister+0x6>
    1576:	00 d0       	rcall	.+0      	; 0x1578 <nrf24_readRegister+0x8>
    1578:	cd b7       	in	r28, 0x3d	; 61
    157a:	de b7       	in	r29, 0x3e	; 62
    157c:	89 83       	std	Y+1, r24	; 0x01
    157e:	7b 83       	std	Y+3, r23	; 0x03
    1580:	6a 83       	std	Y+2, r22	; 0x02
    1582:	4c 83       	std	Y+4, r20	; 0x04
	nrf24_csn_digitalWrite(LOW);
    1584:	80 e0       	ldi	r24, 0x00	; 0
    1586:	0e 94 6f 0b 	call	0x16de	; 0x16de <nrf24_csn_digitalWrite>
	spi_transfer(R_REGISTER | (REGISTER_MASK & reg));
    158a:	89 81       	ldd	r24, Y+1	; 0x01
    158c:	8f 71       	andi	r24, 0x1F	; 31
    158e:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <spi_transfer>
	nrf24_transferSync(value,value,len);
    1592:	8a 81       	ldd	r24, Y+2	; 0x02
    1594:	9b 81       	ldd	r25, Y+3	; 0x03
    1596:	2a 81       	ldd	r18, Y+2	; 0x02
    1598:	3b 81       	ldd	r19, Y+3	; 0x03
    159a:	b9 01       	movw	r22, r18
    159c:	4c 81       	ldd	r20, Y+4	; 0x04
    159e:	0e 94 43 0a 	call	0x1486	; 0x1486 <nrf24_transferSync>
	nrf24_csn_digitalWrite(HIGH);
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	0e 94 6f 0b 	call	0x16de	; 0x16de <nrf24_csn_digitalWrite>
}
    15a8:	0f 90       	pop	r0
    15aa:	0f 90       	pop	r0
    15ac:	0f 90       	pop	r0
    15ae:	0f 90       	pop	r0
    15b0:	cf 91       	pop	r28
    15b2:	df 91       	pop	r29
    15b4:	08 95       	ret

000015b6 <nrf24_writeRegister>:

/* Write to a single register of nrf24 */
void nrf24_writeRegister(uint8_t reg, uint8_t* value, uint8_t len)
{
    15b6:	df 93       	push	r29
    15b8:	cf 93       	push	r28
    15ba:	00 d0       	rcall	.+0      	; 0x15bc <nrf24_writeRegister+0x6>
    15bc:	00 d0       	rcall	.+0      	; 0x15be <nrf24_writeRegister+0x8>
    15be:	cd b7       	in	r28, 0x3d	; 61
    15c0:	de b7       	in	r29, 0x3e	; 62
    15c2:	89 83       	std	Y+1, r24	; 0x01
    15c4:	7b 83       	std	Y+3, r23	; 0x03
    15c6:	6a 83       	std	Y+2, r22	; 0x02
    15c8:	4c 83       	std	Y+4, r20	; 0x04
	nrf24_csn_digitalWrite(LOW);
    15ca:	80 e0       	ldi	r24, 0x00	; 0
    15cc:	0e 94 6f 0b 	call	0x16de	; 0x16de <nrf24_csn_digitalWrite>
	spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
    15d0:	89 81       	ldd	r24, Y+1	; 0x01
    15d2:	8f 71       	andi	r24, 0x1F	; 31
    15d4:	80 62       	ori	r24, 0x20	; 32
    15d6:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <spi_transfer>
	nrf24_transmitSync(value,len);
    15da:	8a 81       	ldd	r24, Y+2	; 0x02
    15dc:	9b 81       	ldd	r25, Y+3	; 0x03
    15de:	6c 81       	ldd	r22, Y+4	; 0x04
    15e0:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <nrf24_transmitSync>
	nrf24_csn_digitalWrite(HIGH);
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	0e 94 6f 0b 	call	0x16de	; 0x16de <nrf24_csn_digitalWrite>
}
    15ea:	0f 90       	pop	r0
    15ec:	0f 90       	pop	r0
    15ee:	0f 90       	pop	r0
    15f0:	0f 90       	pop	r0
    15f2:	cf 91       	pop	r28
    15f4:	df 91       	pop	r29
    15f6:	08 95       	ret

000015f8 <nrf24_checkRegister>:

/* Check single register from nrf24 */
bool nrf24_checkRegister(uint8_t reg, uint8_t desiredValue, uint8_t len)
{
    15f8:	df 93       	push	r29
    15fa:	cf 93       	push	r28
    15fc:	00 d0       	rcall	.+0      	; 0x15fe <nrf24_checkRegister+0x6>
    15fe:	00 d0       	rcall	.+0      	; 0x1600 <nrf24_checkRegister+0x8>
    1600:	cd b7       	in	r28, 0x3d	; 61
    1602:	de b7       	in	r29, 0x3e	; 62
    1604:	8a 83       	std	Y+2, r24	; 0x02
    1606:	6b 83       	std	Y+3, r22	; 0x03
    1608:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t registerValue;
	nrf24_readRegister(reg,&registerValue,len);
    160a:	8a 81       	ldd	r24, Y+2	; 0x02
    160c:	9e 01       	movw	r18, r28
    160e:	2f 5f       	subi	r18, 0xFF	; 255
    1610:	3f 4f       	sbci	r19, 0xFF	; 255
    1612:	b9 01       	movw	r22, r18
    1614:	4c 81       	ldd	r20, Y+4	; 0x04
    1616:	0e 94 b8 0a 	call	0x1570	; 0x1570 <nrf24_readRegister>
	if (registerValue==desiredValue) { return true; } else { return false; }
    161a:	99 81       	ldd	r25, Y+1	; 0x01
    161c:	8b 81       	ldd	r24, Y+3	; 0x03
    161e:	98 17       	cp	r25, r24
    1620:	11 f4       	brne	.+4      	; 0x1626 <nrf24_checkRegister+0x2e>
    1622:	81 e0       	ldi	r24, 0x01	; 1
    1624:	01 c0       	rjmp	.+2      	; 0x1628 <nrf24_checkRegister+0x30>
    1626:	80 e0       	ldi	r24, 0x00	; 0
}
    1628:	0f 90       	pop	r0
    162a:	0f 90       	pop	r0
    162c:	0f 90       	pop	r0
    162e:	0f 90       	pop	r0
    1630:	cf 91       	pop	r28
    1632:	df 91       	pop	r29
    1634:	08 95       	ret

00001636 <nrf24_setupPins>:
#define check_bit(reg,bit) (reg&(1<<bit))

/* ------------------------------------------------------------------------- */

void nrf24_setupPins()
{
    1636:	df 93       	push	r29
    1638:	cf 93       	push	r28
    163a:	cd b7       	in	r28, 0x3d	; 61
    163c:	de b7       	in	r29, 0x3e	; 62
	set_bit(RF_DDR,0); // CE output
    163e:	87 e2       	ldi	r24, 0x27	; 39
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	27 e2       	ldi	r18, 0x27	; 39
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	f9 01       	movw	r30, r18
    1648:	20 81       	ld	r18, Z
    164a:	21 60       	ori	r18, 0x01	; 1
    164c:	fc 01       	movw	r30, r24
    164e:	20 83       	st	Z, r18
	set_bit(RF_DDR,1); // CSN output
    1650:	87 e2       	ldi	r24, 0x27	; 39
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	27 e2       	ldi	r18, 0x27	; 39
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	f9 01       	movw	r30, r18
    165a:	20 81       	ld	r18, Z
    165c:	22 60       	ori	r18, 0x02	; 2
    165e:	fc 01       	movw	r30, r24
    1660:	20 83       	st	Z, r18
	set_bit(RF_DDR,2); // SCK output
    1662:	87 e2       	ldi	r24, 0x27	; 39
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	27 e2       	ldi	r18, 0x27	; 39
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	f9 01       	movw	r30, r18
    166c:	20 81       	ld	r18, Z
    166e:	24 60       	ori	r18, 0x04	; 4
    1670:	fc 01       	movw	r30, r24
    1672:	20 83       	st	Z, r18
	set_bit(RF_DDR,3); // MOSI output
    1674:	87 e2       	ldi	r24, 0x27	; 39
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	27 e2       	ldi	r18, 0x27	; 39
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	f9 01       	movw	r30, r18
    167e:	20 81       	ld	r18, Z
    1680:	28 60       	ori	r18, 0x08	; 8
    1682:	fc 01       	movw	r30, r24
    1684:	20 83       	st	Z, r18
	clr_bit(RF_DDR,4); // MISO input
    1686:	87 e2       	ldi	r24, 0x27	; 39
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	27 e2       	ldi	r18, 0x27	; 39
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	f9 01       	movw	r30, r18
    1690:	20 81       	ld	r18, Z
    1692:	2f 7e       	andi	r18, 0xEF	; 239
    1694:	fc 01       	movw	r30, r24
    1696:	20 83       	st	Z, r18
}
    1698:	cf 91       	pop	r28
    169a:	df 91       	pop	r29
    169c:	08 95       	ret

0000169e <nrf24_ce_digitalWrite>:
/* ------------------------------------------------------------------------- */
void nrf24_ce_digitalWrite(uint8_t state)
{
    169e:	df 93       	push	r29
    16a0:	cf 93       	push	r28
    16a2:	0f 92       	push	r0
    16a4:	cd b7       	in	r28, 0x3d	; 61
    16a6:	de b7       	in	r29, 0x3e	; 62
    16a8:	89 83       	std	Y+1, r24	; 0x01
	if(state)
    16aa:	89 81       	ldd	r24, Y+1	; 0x01
    16ac:	88 23       	and	r24, r24
    16ae:	51 f0       	breq	.+20     	; 0x16c4 <nrf24_ce_digitalWrite+0x26>
	{
		set_bit(RF_PORT,0);
    16b0:	88 e2       	ldi	r24, 0x28	; 40
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	28 e2       	ldi	r18, 0x28	; 40
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	f9 01       	movw	r30, r18
    16ba:	20 81       	ld	r18, Z
    16bc:	21 60       	ori	r18, 0x01	; 1
    16be:	fc 01       	movw	r30, r24
    16c0:	20 83       	st	Z, r18
    16c2:	09 c0       	rjmp	.+18     	; 0x16d6 <nrf24_ce_digitalWrite+0x38>
	}
	else
	{
		clr_bit(RF_PORT,0);
    16c4:	88 e2       	ldi	r24, 0x28	; 40
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	28 e2       	ldi	r18, 0x28	; 40
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	f9 01       	movw	r30, r18
    16ce:	20 81       	ld	r18, Z
    16d0:	2e 7f       	andi	r18, 0xFE	; 254
    16d2:	fc 01       	movw	r30, r24
    16d4:	20 83       	st	Z, r18
	}
}
    16d6:	0f 90       	pop	r0
    16d8:	cf 91       	pop	r28
    16da:	df 91       	pop	r29
    16dc:	08 95       	ret

000016de <nrf24_csn_digitalWrite>:
/* ------------------------------------------------------------------------- */
void nrf24_csn_digitalWrite(uint8_t state)
{
    16de:	df 93       	push	r29
    16e0:	cf 93       	push	r28
    16e2:	0f 92       	push	r0
    16e4:	cd b7       	in	r28, 0x3d	; 61
    16e6:	de b7       	in	r29, 0x3e	; 62
    16e8:	89 83       	std	Y+1, r24	; 0x01
	if(state)
    16ea:	89 81       	ldd	r24, Y+1	; 0x01
    16ec:	88 23       	and	r24, r24
    16ee:	51 f0       	breq	.+20     	; 0x1704 <nrf24_csn_digitalWrite+0x26>
	{
		set_bit(RF_PORT,1);
    16f0:	88 e2       	ldi	r24, 0x28	; 40
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	28 e2       	ldi	r18, 0x28	; 40
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	f9 01       	movw	r30, r18
    16fa:	20 81       	ld	r18, Z
    16fc:	22 60       	ori	r18, 0x02	; 2
    16fe:	fc 01       	movw	r30, r24
    1700:	20 83       	st	Z, r18
    1702:	09 c0       	rjmp	.+18     	; 0x1716 <nrf24_csn_digitalWrite+0x38>
	}
	else
	{
		clr_bit(RF_PORT,1);
    1704:	88 e2       	ldi	r24, 0x28	; 40
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	28 e2       	ldi	r18, 0x28	; 40
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	f9 01       	movw	r30, r18
    170e:	20 81       	ld	r18, Z
    1710:	2d 7f       	andi	r18, 0xFD	; 253
    1712:	fc 01       	movw	r30, r24
    1714:	20 83       	st	Z, r18
	}
}
    1716:	0f 90       	pop	r0
    1718:	cf 91       	pop	r28
    171a:	df 91       	pop	r29
    171c:	08 95       	ret

0000171e <nrf24_sck_digitalWrite>:
/* ------------------------------------------------------------------------- */
void nrf24_sck_digitalWrite(uint8_t state)
{
    171e:	df 93       	push	r29
    1720:	cf 93       	push	r28
    1722:	0f 92       	push	r0
    1724:	cd b7       	in	r28, 0x3d	; 61
    1726:	de b7       	in	r29, 0x3e	; 62
    1728:	89 83       	std	Y+1, r24	; 0x01
	if(state)
    172a:	89 81       	ldd	r24, Y+1	; 0x01
    172c:	88 23       	and	r24, r24
    172e:	51 f0       	breq	.+20     	; 0x1744 <nrf24_sck_digitalWrite+0x26>
	{
		set_bit(RF_PORT,2);
    1730:	88 e2       	ldi	r24, 0x28	; 40
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	28 e2       	ldi	r18, 0x28	; 40
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	f9 01       	movw	r30, r18
    173a:	20 81       	ld	r18, Z
    173c:	24 60       	ori	r18, 0x04	; 4
    173e:	fc 01       	movw	r30, r24
    1740:	20 83       	st	Z, r18
    1742:	09 c0       	rjmp	.+18     	; 0x1756 <nrf24_sck_digitalWrite+0x38>
	}
	else
	{
		clr_bit(RF_PORT,2);
    1744:	88 e2       	ldi	r24, 0x28	; 40
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	28 e2       	ldi	r18, 0x28	; 40
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	f9 01       	movw	r30, r18
    174e:	20 81       	ld	r18, Z
    1750:	2b 7f       	andi	r18, 0xFB	; 251
    1752:	fc 01       	movw	r30, r24
    1754:	20 83       	st	Z, r18
	}
}
    1756:	0f 90       	pop	r0
    1758:	cf 91       	pop	r28
    175a:	df 91       	pop	r29
    175c:	08 95       	ret

0000175e <nrf24_mosi_digitalWrite>:
/* ------------------------------------------------------------------------- */
void nrf24_mosi_digitalWrite(uint8_t state)
{
    175e:	df 93       	push	r29
    1760:	cf 93       	push	r28
    1762:	0f 92       	push	r0
    1764:	cd b7       	in	r28, 0x3d	; 61
    1766:	de b7       	in	r29, 0x3e	; 62
    1768:	89 83       	std	Y+1, r24	; 0x01
	if(state)
    176a:	89 81       	ldd	r24, Y+1	; 0x01
    176c:	88 23       	and	r24, r24
    176e:	51 f0       	breq	.+20     	; 0x1784 <nrf24_mosi_digitalWrite+0x26>
	{
		set_bit(RF_PORT,3);
    1770:	88 e2       	ldi	r24, 0x28	; 40
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	28 e2       	ldi	r18, 0x28	; 40
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	f9 01       	movw	r30, r18
    177a:	20 81       	ld	r18, Z
    177c:	28 60       	ori	r18, 0x08	; 8
    177e:	fc 01       	movw	r30, r24
    1780:	20 83       	st	Z, r18
    1782:	09 c0       	rjmp	.+18     	; 0x1796 <nrf24_mosi_digitalWrite+0x38>
	}
	else
	{
		clr_bit(RF_PORT,3);
    1784:	88 e2       	ldi	r24, 0x28	; 40
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	28 e2       	ldi	r18, 0x28	; 40
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	f9 01       	movw	r30, r18
    178e:	20 81       	ld	r18, Z
    1790:	27 7f       	andi	r18, 0xF7	; 247
    1792:	fc 01       	movw	r30, r24
    1794:	20 83       	st	Z, r18
	}
}
    1796:	0f 90       	pop	r0
    1798:	cf 91       	pop	r28
    179a:	df 91       	pop	r29
    179c:	08 95       	ret

0000179e <nrf24_miso_digitalRead>:
/* ------------------------------------------------------------------------- */
uint8_t nrf24_miso_digitalRead()
{
    179e:	df 93       	push	r29
    17a0:	cf 93       	push	r28
    17a2:	cd b7       	in	r28, 0x3d	; 61
    17a4:	de b7       	in	r29, 0x3e	; 62
	return check_bit(RF_PIN,4);
    17a6:	86 e2       	ldi	r24, 0x26	; 38
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	fc 01       	movw	r30, r24
    17ac:	80 81       	ld	r24, Z
    17ae:	80 71       	andi	r24, 0x10	; 16
}
    17b0:	cf 91       	pop	r28
    17b2:	df 91       	pop	r29
    17b4:	08 95       	ret

000017b6 <nrf24_initRF_SAFE>:
/* ------------------------------------------------------------------------- */

void nrf24_initRF_SAFE(uint8_t boardIndex,TransmissionMode initMode){
    17b6:	df 93       	push	r29
    17b8:	cf 93       	push	r28
    17ba:	00 d0       	rcall	.+0      	; 0x17bc <nrf24_initRF_SAFE+0x6>
    17bc:	0f 92       	push	r0
    17be:	cd b7       	in	r28, 0x3d	; 61
    17c0:	de b7       	in	r29, 0x3e	; 62
    17c2:	8a 83       	std	Y+2, r24	; 0x02
    17c4:	6b 83       	std	Y+3, r22	; 0x03

	initliazeMemory();
    17c6:	0e 94 66 00 	call	0xcc	; 0xcc <initliazeMemory>
	bool successfulRfInit = false;
    17ca:	19 82       	std	Y+1, r1	; 0x01
	
	while(successfulRfInit==false){
    17cc:	12 c0       	rjmp	.+36     	; 0x17f2 <nrf24_initRF_SAFE+0x3c>
		nrf24_powerDown();
    17ce:	0e 94 ed 09 	call	0x13da	; 0x13da <nrf24_powerDown>
		nrf24_init();
    17d2:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <nrf24_init>
		nrf24_config(GENERAL_RF_CHANNEL,32);
    17d6:	80 91 27 01 	lds	r24, 0x0127
    17da:	60 e2       	ldi	r22, 0x20	; 32
    17dc:	0e 94 f2 06 	call	0xde4	; 0xde4 <nrf24_config>
		if (nrf24_checkConfig()) { successfulRfInit = true; } else { faultyRF_Alarm(); }
    17e0:	0e 94 3a 07 	call	0xe74	; 0xe74 <nrf24_checkConfig>
    17e4:	88 23       	and	r24, r24
    17e6:	19 f0       	breq	.+6      	; 0x17ee <nrf24_initRF_SAFE+0x38>
    17e8:	81 e0       	ldi	r24, 0x01	; 1
    17ea:	89 83       	std	Y+1, r24	; 0x01
    17ec:	02 c0       	rjmp	.+4      	; 0x17f2 <nrf24_initRF_SAFE+0x3c>
    17ee:	0e 94 93 07 	call	0xf26	; 0xf26 <faultyRF_Alarm>
void nrf24_initRF_SAFE(uint8_t boardIndex,TransmissionMode initMode){

	initliazeMemory();
	bool successfulRfInit = false;
	
	while(successfulRfInit==false){
    17f2:	99 81       	ldd	r25, Y+1	; 0x01
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	89 27       	eor	r24, r25
    17f8:	88 23       	and	r24, r24
    17fa:	49 f7       	brne	.-46     	; 0x17ce <nrf24_initRF_SAFE+0x18>
		if (nrf24_checkConfig()) { successfulRfInit = true; } else { faultyRF_Alarm(); }
	}
	
	
	
	if (initMode==RECEIVE){
    17fc:	8b 81       	ldd	r24, Y+3	; 0x03
    17fe:	88 23       	and	r24, r24
    1800:	99 f4       	brne	.+38     	; 0x1828 <nrf24_initRF_SAFE+0x72>
		nrf24_tx_address(CURRENT_BOARD_ADDRESS);
    1802:	80 91 1b 01 	lds	r24, 0x011B
    1806:	90 91 1c 01 	lds	r25, 0x011C
    180a:	0e 94 df 08 	call	0x11be	; 0x11be <nrf24_tx_address>
		nrf24_rx_address(BOARD_ADDRESS[boardIndex]);
    180e:	8a 81       	ldd	r24, Y+2	; 0x02
    1810:	88 2f       	mov	r24, r24
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	88 0f       	add	r24, r24
    1816:	99 1f       	adc	r25, r25
    1818:	8b 5e       	subi	r24, 0xEB	; 235
    181a:	9e 4f       	sbci	r25, 0xFE	; 254
    181c:	fc 01       	movw	r30, r24
    181e:	80 81       	ld	r24, Z
    1820:	91 81       	ldd	r25, Z+1	; 0x01
    1822:	0e 94 c6 08 	call	0x118c	; 0x118c <nrf24_rx_address>
    1826:	12 c0       	rjmp	.+36     	; 0x184c <nrf24_initRF_SAFE+0x96>
		}else{
		nrf24_tx_address(BOARD_ADDRESS[boardIndex]);
    1828:	8a 81       	ldd	r24, Y+2	; 0x02
    182a:	88 2f       	mov	r24, r24
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	88 0f       	add	r24, r24
    1830:	99 1f       	adc	r25, r25
    1832:	8b 5e       	subi	r24, 0xEB	; 235
    1834:	9e 4f       	sbci	r25, 0xFE	; 254
    1836:	fc 01       	movw	r30, r24
    1838:	80 81       	ld	r24, Z
    183a:	91 81       	ldd	r25, Z+1	; 0x01
    183c:	0e 94 df 08 	call	0x11be	; 0x11be <nrf24_tx_address>
		nrf24_rx_address(CURRENT_BOARD_ADDRESS);
    1840:	80 91 1b 01 	lds	r24, 0x011B
    1844:	90 91 1c 01 	lds	r25, 0x011C
    1848:	0e 94 c6 08 	call	0x118c	; 0x118c <nrf24_rx_address>
	}
	
	
	nrf24_powerUpRx();
    184c:	0e 94 c0 09 	call	0x1380	; 0x1380 <nrf24_powerUpRx>
    1850:	0f 90       	pop	r0
    1852:	0f 90       	pop	r0
    1854:	0f 90       	pop	r0
    1856:	cf 91       	pop	r28
    1858:	df 91       	pop	r29
    185a:	08 95       	ret

0000185c <initBluetoothUart>:

uint8_t* uartBufferPos;
uint8_t* uartTxMessageEnd;
bool commandAvailable;

void initBluetoothUart(){
    185c:	df 93       	push	r29
    185e:	cf 93       	push	r28
    1860:	cd b7       	in	r28, 0x3d	; 61
    1862:	de b7       	in	r29, 0x3e	; 62
	// UART Initialization : 8-bit : No parity bit : 1 stop bit
	UBRR0H = (BRC >> 8); UBRR0L =  BRC;             // UART BAUDRATE
    1864:	85 ec       	ldi	r24, 0xC5	; 197
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	fc 01       	movw	r30, r24
    186a:	10 82       	st	Z, r1
    186c:	84 ec       	ldi	r24, 0xC4	; 196
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	2f ec       	ldi	r18, 0xCF	; 207
    1872:	fc 01       	movw	r30, r24
    1874:	20 83       	st	Z, r18
	UCSR0A |= (1 << U2X0);                          // DOUBLE UART SPEED
    1876:	80 ec       	ldi	r24, 0xC0	; 192
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	20 ec       	ldi	r18, 0xC0	; 192
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	f9 01       	movw	r30, r18
    1880:	20 81       	ld	r18, Z
    1882:	22 60       	ori	r18, 0x02	; 2
    1884:	fc 01       	movw	r30, r24
    1886:	20 83       	st	Z, r18
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);        // 8-BIT CHARACTER SIZE
    1888:	82 ec       	ldi	r24, 0xC2	; 194
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	22 ec       	ldi	r18, 0xC2	; 194
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	f9 01       	movw	r30, r18
    1892:	20 81       	ld	r18, Z
    1894:	26 60       	ori	r18, 0x06	; 6
    1896:	fc 01       	movw	r30, r24
    1898:	20 83       	st	Z, r18
	
	// Setup UART buffer
	initliazeMemory();
    189a:	0e 94 66 00 	call	0xcc	; 0xcc <initliazeMemory>
	uartBufferPos = command_buffer;
    189e:	80 91 52 01 	lds	r24, 0x0152
    18a2:	90 91 53 01 	lds	r25, 0x0153
    18a6:	90 93 61 01 	sts	0x0161, r25
    18aa:	80 93 60 01 	sts	0x0160, r24
}
    18ae:	cf 91       	pop	r28
    18b0:	df 91       	pop	r29
    18b2:	08 95       	ret

000018b4 <transmitMessageSync>:
	
	uartBufferPos++;
	UDR0 = *(command_buffer);
}

void transmitMessageSync(uint8_t* message, uint8_t length){
    18b4:	df 93       	push	r29
    18b6:	cf 93       	push	r28
    18b8:	00 d0       	rcall	.+0      	; 0x18ba <transmitMessageSync+0x6>
    18ba:	0f 92       	push	r0
    18bc:	cd b7       	in	r28, 0x3d	; 61
    18be:	de b7       	in	r29, 0x3e	; 62
    18c0:	9a 83       	std	Y+2, r25	; 0x02
    18c2:	89 83       	std	Y+1, r24	; 0x01
    18c4:	6b 83       	std	Y+3, r22	; 0x03
	while (!(UCSR0A & (1<<UDRE0)));
    18c6:	00 00       	nop
    18c8:	80 ec       	ldi	r24, 0xC0	; 192
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	fc 01       	movw	r30, r24
    18ce:	80 81       	ld	r24, Z
    18d0:	88 2f       	mov	r24, r24
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	80 72       	andi	r24, 0x20	; 32
    18d6:	90 70       	andi	r25, 0x00	; 0
    18d8:	00 97       	sbiw	r24, 0x00	; 0
    18da:	b1 f3       	breq	.-20     	; 0x18c8 <transmitMessageSync+0x14>
	uartBufferPos = command_buffer;
    18dc:	80 91 52 01 	lds	r24, 0x0152
    18e0:	90 91 53 01 	lds	r25, 0x0153
    18e4:	90 93 61 01 	sts	0x0161, r25
    18e8:	80 93 60 01 	sts	0x0160, r24
	uartTxMessageEnd = (command_buffer+length);
    18ec:	20 91 52 01 	lds	r18, 0x0152
    18f0:	30 91 53 01 	lds	r19, 0x0153
    18f4:	8b 81       	ldd	r24, Y+3	; 0x03
    18f6:	88 2f       	mov	r24, r24
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	82 0f       	add	r24, r18
    18fc:	93 1f       	adc	r25, r19
    18fe:	90 93 63 01 	sts	0x0163, r25
    1902:	80 93 62 01 	sts	0x0162, r24
	memcpy(command_buffer, message, length);
    1906:	80 91 52 01 	lds	r24, 0x0152
    190a:	90 91 53 01 	lds	r25, 0x0153
    190e:	2b 81       	ldd	r18, Y+3	; 0x03
    1910:	22 2f       	mov	r18, r18
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	49 81       	ldd	r20, Y+1	; 0x01
    1916:	5a 81       	ldd	r21, Y+2	; 0x02
    1918:	ba 01       	movw	r22, r20
    191a:	a9 01       	movw	r20, r18
    191c:	0e 94 c1 11 	call	0x2382	; 0x2382 <memcpy>
	UCSR0A |= (1<<TXC0) | (1<<RXC0);
    1920:	80 ec       	ldi	r24, 0xC0	; 192
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	20 ec       	ldi	r18, 0xC0	; 192
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	f9 01       	movw	r30, r18
    192a:	20 81       	ld	r18, Z
    192c:	20 6c       	ori	r18, 0xC0	; 192
    192e:	fc 01       	movw	r30, r24
    1930:	20 83       	st	Z, r18
	UCSR0B |= (1<<TXEN0) | (1<<TXCIE0);
    1932:	81 ec       	ldi	r24, 0xC1	; 193
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	21 ec       	ldi	r18, 0xC1	; 193
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	f9 01       	movw	r30, r18
    193c:	20 81       	ld	r18, Z
    193e:	28 64       	ori	r18, 0x48	; 72
    1940:	fc 01       	movw	r30, r24
    1942:	20 83       	st	Z, r18
	UCSR0B &=~(1<<RXEN0) &~(1<<RXCIE0);
    1944:	81 ec       	ldi	r24, 0xC1	; 193
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	21 ec       	ldi	r18, 0xC1	; 193
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	f9 01       	movw	r30, r18
    194e:	20 81       	ld	r18, Z
    1950:	2f 76       	andi	r18, 0x6F	; 111
    1952:	fc 01       	movw	r30, r24
    1954:	20 83       	st	Z, r18
	sei();
    1956:	78 94       	sei
	
	uartBufferPos++;
    1958:	80 91 60 01 	lds	r24, 0x0160
    195c:	90 91 61 01 	lds	r25, 0x0161
    1960:	01 96       	adiw	r24, 0x01	; 1
    1962:	90 93 61 01 	sts	0x0161, r25
    1966:	80 93 60 01 	sts	0x0160, r24
	UDR0 = *(command_buffer);
    196a:	86 ec       	ldi	r24, 0xC6	; 198
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	20 91 52 01 	lds	r18, 0x0152
    1972:	30 91 53 01 	lds	r19, 0x0153
    1976:	f9 01       	movw	r30, r18
    1978:	20 81       	ld	r18, Z
    197a:	fc 01       	movw	r30, r24
    197c:	20 83       	st	Z, r18

	while (transmissionState());
    197e:	00 00       	nop
    1980:	0e 94 ca 0c 	call	0x1994	; 0x1994 <transmissionState>
    1984:	88 23       	and	r24, r24
    1986:	e1 f7       	brne	.-8      	; 0x1980 <transmitMessageSync+0xcc>

}
    1988:	0f 90       	pop	r0
    198a:	0f 90       	pop	r0
    198c:	0f 90       	pop	r0
    198e:	cf 91       	pop	r28
    1990:	df 91       	pop	r29
    1992:	08 95       	ret

00001994 <transmissionState>:

bool transmissionState(){
    1994:	df 93       	push	r29
    1996:	cf 93       	push	r28
    1998:	cd b7       	in	r28, 0x3d	; 61
    199a:	de b7       	in	r29, 0x3e	; 62
	// True : Currently transmitting | False : Transmission finished
	if (uartBufferPos!=uartTxMessageEnd) 
    199c:	20 91 60 01 	lds	r18, 0x0160
    19a0:	30 91 61 01 	lds	r19, 0x0161
    19a4:	80 91 62 01 	lds	r24, 0x0162
    19a8:	90 91 63 01 	lds	r25, 0x0163
    19ac:	28 17       	cp	r18, r24
    19ae:	39 07       	cpc	r19, r25
    19b0:	11 f0       	breq	.+4      	; 0x19b6 <transmissionState+0x22>
	{
		return true;
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	01 c0       	rjmp	.+2      	; 0x19b8 <transmissionState+0x24>
	}
	else 
	{ 
		return false; 
    19b6:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    19b8:	cf 91       	pop	r28
    19ba:	df 91       	pop	r29
    19bc:	08 95       	ret

000019be <setupReceiveMode>:


void setupReceiveMode(){
    19be:	df 93       	push	r29
    19c0:	cf 93       	push	r28
    19c2:	cd b7       	in	r28, 0x3d	; 61
    19c4:	de b7       	in	r29, 0x3e	; 62
	while (!(UCSR0A & (1<<UDRE0)));
    19c6:	00 00       	nop
    19c8:	80 ec       	ldi	r24, 0xC0	; 192
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	fc 01       	movw	r30, r24
    19ce:	80 81       	ld	r24, Z
    19d0:	88 2f       	mov	r24, r24
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	80 72       	andi	r24, 0x20	; 32
    19d6:	90 70       	andi	r25, 0x00	; 0
    19d8:	00 97       	sbiw	r24, 0x00	; 0
    19da:	b1 f3       	breq	.-20     	; 0x19c8 <setupReceiveMode+0xa>
	uartBufferPos = command_buffer;
    19dc:	80 91 52 01 	lds	r24, 0x0152
    19e0:	90 91 53 01 	lds	r25, 0x0153
    19e4:	90 93 61 01 	sts	0x0161, r25
    19e8:	80 93 60 01 	sts	0x0160, r24
	
	UCSR0A |= (1<<RXC0) | (1<<TXC0);
    19ec:	80 ec       	ldi	r24, 0xC0	; 192
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	20 ec       	ldi	r18, 0xC0	; 192
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	f9 01       	movw	r30, r18
    19f6:	20 81       	ld	r18, Z
    19f8:	20 6c       	ori	r18, 0xC0	; 192
    19fa:	fc 01       	movw	r30, r24
    19fc:	20 83       	st	Z, r18
	UCSR0B &=~(1<<TXEN0) &~(1<<TXCIE0);
    19fe:	81 ec       	ldi	r24, 0xC1	; 193
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	21 ec       	ldi	r18, 0xC1	; 193
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	f9 01       	movw	r30, r18
    1a08:	20 81       	ld	r18, Z
    1a0a:	27 7b       	andi	r18, 0xB7	; 183
    1a0c:	fc 01       	movw	r30, r24
    1a0e:	20 83       	st	Z, r18
	UCSR0B |= (1<<RXEN0) | (1<<RXCIE0);
    1a10:	81 ec       	ldi	r24, 0xC1	; 193
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	21 ec       	ldi	r18, 0xC1	; 193
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	f9 01       	movw	r30, r18
    1a1a:	20 81       	ld	r18, Z
    1a1c:	20 69       	ori	r18, 0x90	; 144
    1a1e:	fc 01       	movw	r30, r24
    1a20:	20 83       	st	Z, r18
	sei();
    1a22:	78 94       	sei
}
    1a24:	cf 91       	pop	r28
    1a26:	df 91       	pop	r29
    1a28:	08 95       	ret

00001a2a <processReceivedLine>:
		RF_TIME_OUT++; _delay_ms(2);
	}
	return false;
}

void processReceivedLine(){
    1a2a:	df 93       	push	r29
    1a2c:	cf 93       	push	r28
    1a2e:	00 d0       	rcall	.+0      	; 0x1a30 <processReceivedLine+0x6>
    1a30:	00 d0       	rcall	.+0      	; 0x1a32 <processReceivedLine+0x8>
    1a32:	0f 92       	push	r0
    1a34:	cd b7       	in	r28, 0x3d	; 61
    1a36:	de b7       	in	r29, 0x3e	; 62
	commandAvailable = false;
    1a38:	10 92 64 01 	sts	0x0164, r1
	
	CommandStatus status = DecomposeMessageFromBuffer();	
    1a3c:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <DecomposeMessageFromBuffer>
    1a40:	89 83       	std	Y+1, r24	; 0x01
	if(status==SUCCESFUL_DECOMPOSITION) {
    1a42:	89 81       	ldd	r24, Y+1	; 0x01
    1a44:	88 23       	and	r24, r24
    1a46:	09 f0       	breq	.+2      	; 0x1a4a <processReceivedLine+0x20>
    1a48:	43 c0       	rjmp	.+134    	; 0x1ad0 <processReceivedLine+0xa6>
		if (lastTargetModuleID==MAIN_MODULE){
    1a4a:	80 91 55 01 	lds	r24, 0x0155
    1a4e:	81 30       	cpi	r24, 0x01	; 1
    1a50:	19 f4       	brne	.+6      	; 0x1a58 <processReceivedLine+0x2e>
			//Executed by main module
			HandleAvailableCommand();
    1a52:	0e 94 f7 02 	call	0x5ee	; 0x5ee <HandleAvailableCommand>
    1a56:	3c c0       	rjmp	.+120    	; 0x1ad0 <processReceivedLine+0xa6>
		} else {
			//Retransmitted to other module
			
			RF_TransmissionStatus RF_Status = RetransmissionToModule();
    1a58:	0e 94 04 03 	call	0x608	; 0x608 <RetransmissionToModule>
    1a5c:	8a 83       	std	Y+2, r24	; 0x02
			//Catch module reply
			
			//bool didModuleRelpy = catchModuleReply();
			
			// Send RF STATUS
			switch (RF_Status) {
    1a5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a60:	88 2f       	mov	r24, r24
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	81 30       	cpi	r24, 0x01	; 1
    1a66:	91 05       	cpc	r25, r1
    1a68:	31 f0       	breq	.+12     	; 0x1a76 <processReceivedLine+0x4c>
    1a6a:	82 30       	cpi	r24, 0x02	; 2
    1a6c:	91 05       	cpc	r25, r1
    1a6e:	71 f0       	breq	.+28     	; 0x1a8c <processReceivedLine+0x62>
    1a70:	00 97       	sbiw	r24, 0x00	; 0
    1a72:	b9 f0       	breq	.+46     	; 0x1aa2 <processReceivedLine+0x78>
    1a74:	21 c0       	rjmp	.+66     	; 0x1ab8 <processReceivedLine+0x8e>
				case RF_UNREACHEABLE_MODULE:
				writeParameterValue(0, &(uint8_t){RETRANSMISSION_FAILED}, 1);
    1a76:	88 e0       	ldi	r24, 0x08	; 8
    1a78:	8d 83       	std	Y+5, r24	; 0x05
    1a7a:	9e 01       	movw	r18, r28
    1a7c:	2b 5f       	subi	r18, 0xFB	; 251
    1a7e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a80:	80 e0       	ldi	r24, 0x00	; 0
    1a82:	b9 01       	movw	r22, r18
    1a84:	41 e0       	ldi	r20, 0x01	; 1
    1a86:	0e 94 3a 03 	call	0x674	; 0x674 <writeParameterValue>
				break;
    1a8a:	16 c0       	rjmp	.+44     	; 0x1ab8 <processReceivedLine+0x8e>
				case RF_ACKNOWLEDGE_FAILED:
				writeParameterValue(0, &(uint8_t){RETRANSMISSION_FAILED}, 1);
    1a8c:	88 e0       	ldi	r24, 0x08	; 8
    1a8e:	8c 83       	std	Y+4, r24	; 0x04
    1a90:	9e 01       	movw	r18, r28
    1a92:	2c 5f       	subi	r18, 0xFC	; 252
    1a94:	3f 4f       	sbci	r19, 0xFF	; 255
    1a96:	80 e0       	ldi	r24, 0x00	; 0
    1a98:	b9 01       	movw	r22, r18
    1a9a:	41 e0       	ldi	r20, 0x01	; 1
    1a9c:	0e 94 3a 03 	call	0x674	; 0x674 <writeParameterValue>
				break;
    1aa0:	0b c0       	rjmp	.+22     	; 0x1ab8 <processReceivedLine+0x8e>
				case RF_SUCCESFUL_TRANSMISSION:
				writeParameterValue(0, &(uint8_t){SUCCESFUL_RETRANSMISSION}, 1);
    1aa2:	89 e0       	ldi	r24, 0x09	; 9
    1aa4:	8b 83       	std	Y+3, r24	; 0x03
    1aa6:	9e 01       	movw	r18, r28
    1aa8:	2d 5f       	subi	r18, 0xFD	; 253
    1aaa:	3f 4f       	sbci	r19, 0xFF	; 255
    1aac:	80 e0       	ldi	r24, 0x00	; 0
    1aae:	b9 01       	movw	r22, r18
    1ab0:	41 e0       	ldi	r20, 0x01	; 1
    1ab2:	0e 94 3a 03 	call	0x674	; 0x674 <writeParameterValue>
				break;
    1ab6:	00 00       	nop
			}
			ComposeMessageToBuffer(MESSAGE_STATUS_ID, 1, PHONE_MODULE);
    1ab8:	84 e0       	ldi	r24, 0x04	; 4
    1aba:	61 e0       	ldi	r22, 0x01	; 1
    1abc:	40 e0       	ldi	r20, 0x00	; 0
    1abe:	0e 94 0a 02 	call	0x414	; 0x414 <ComposeMessageToBuffer>
			transmitMessageSync(command_buffer, 32);
    1ac2:	80 91 52 01 	lds	r24, 0x0152
    1ac6:	90 91 53 01 	lds	r25, 0x0153
    1aca:	60 e2       	ldi	r22, 0x20	; 32
    1acc:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <transmitMessageSync>
		} 
	}else {
}
	
	
}
    1ad0:	0f 90       	pop	r0
    1ad2:	0f 90       	pop	r0
    1ad4:	0f 90       	pop	r0
    1ad6:	0f 90       	pop	r0
    1ad8:	0f 90       	pop	r0
    1ada:	cf 91       	pop	r28
    1adc:	df 91       	pop	r29
    1ade:	08 95       	ret

00001ae0 <disableUART>:

void disableUART(){
    1ae0:	df 93       	push	r29
    1ae2:	cf 93       	push	r28
    1ae4:	cd b7       	in	r28, 0x3d	; 61
    1ae6:	de b7       	in	r29, 0x3e	; 62
	UCSR0B &=~(1<<TXEN0) &~(1<<TXCIE0);
    1ae8:	81 ec       	ldi	r24, 0xC1	; 193
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	21 ec       	ldi	r18, 0xC1	; 193
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	f9 01       	movw	r30, r18
    1af2:	20 81       	ld	r18, Z
    1af4:	27 7b       	andi	r18, 0xB7	; 183
    1af6:	fc 01       	movw	r30, r24
    1af8:	20 83       	st	Z, r18
	UCSR0B &=~(1<<RXEN0) &~(1<<RXCIE0);
    1afa:	81 ec       	ldi	r24, 0xC1	; 193
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	21 ec       	ldi	r18, 0xC1	; 193
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	f9 01       	movw	r30, r18
    1b04:	20 81       	ld	r18, Z
    1b06:	2f 76       	andi	r18, 0x6F	; 111
    1b08:	fc 01       	movw	r30, r24
    1b0a:	20 83       	st	Z, r18
}
    1b0c:	cf 91       	pop	r28
    1b0e:	df 91       	pop	r29
    1b10:	08 95       	ret

00001b12 <__vector_20>:

ISR(USART_TX_vect){
    1b12:	1f 92       	push	r1
    1b14:	0f 92       	push	r0
    1b16:	0f b6       	in	r0, 0x3f	; 63
    1b18:	0f 92       	push	r0
    1b1a:	11 24       	eor	r1, r1
    1b1c:	2f 93       	push	r18
    1b1e:	3f 93       	push	r19
    1b20:	8f 93       	push	r24
    1b22:	9f 93       	push	r25
    1b24:	ef 93       	push	r30
    1b26:	ff 93       	push	r31
    1b28:	df 93       	push	r29
    1b2a:	cf 93       	push	r28
    1b2c:	cd b7       	in	r28, 0x3d	; 61
    1b2e:	de b7       	in	r29, 0x3e	; 62
	if (uartBufferPos!=uartTxMessageEnd){
    1b30:	20 91 60 01 	lds	r18, 0x0160
    1b34:	30 91 61 01 	lds	r19, 0x0161
    1b38:	80 91 62 01 	lds	r24, 0x0162
    1b3c:	90 91 63 01 	lds	r25, 0x0163
    1b40:	28 17       	cp	r18, r24
    1b42:	39 07       	cpc	r19, r25
    1b44:	99 f0       	breq	.+38     	; 0x1b6c <__vector_20+0x5a>
		UDR0 = *uartBufferPos;
    1b46:	86 ec       	ldi	r24, 0xC6	; 198
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	20 91 60 01 	lds	r18, 0x0160
    1b4e:	30 91 61 01 	lds	r19, 0x0161
    1b52:	f9 01       	movw	r30, r18
    1b54:	20 81       	ld	r18, Z
    1b56:	fc 01       	movw	r30, r24
    1b58:	20 83       	st	Z, r18
		uartBufferPos++;
    1b5a:	80 91 60 01 	lds	r24, 0x0160
    1b5e:	90 91 61 01 	lds	r25, 0x0161
    1b62:	01 96       	adiw	r24, 0x01	; 1
    1b64:	90 93 61 01 	sts	0x0161, r25
    1b68:	80 93 60 01 	sts	0x0160, r24
	}
}
    1b6c:	cf 91       	pop	r28
    1b6e:	df 91       	pop	r29
    1b70:	ff 91       	pop	r31
    1b72:	ef 91       	pop	r30
    1b74:	9f 91       	pop	r25
    1b76:	8f 91       	pop	r24
    1b78:	3f 91       	pop	r19
    1b7a:	2f 91       	pop	r18
    1b7c:	0f 90       	pop	r0
    1b7e:	0f be       	out	0x3f, r0	; 63
    1b80:	0f 90       	pop	r0
    1b82:	1f 90       	pop	r1
    1b84:	18 95       	reti

00001b86 <__vector_18>:

ISR(USART_RX_vect){
    1b86:	1f 92       	push	r1
    1b88:	0f 92       	push	r0
    1b8a:	0f b6       	in	r0, 0x3f	; 63
    1b8c:	0f 92       	push	r0
    1b8e:	11 24       	eor	r1, r1
    1b90:	2f 93       	push	r18
    1b92:	3f 93       	push	r19
    1b94:	4f 93       	push	r20
    1b96:	5f 93       	push	r21
    1b98:	6f 93       	push	r22
    1b9a:	7f 93       	push	r23
    1b9c:	8f 93       	push	r24
    1b9e:	9f 93       	push	r25
    1ba0:	af 93       	push	r26
    1ba2:	bf 93       	push	r27
    1ba4:	ef 93       	push	r30
    1ba6:	ff 93       	push	r31
    1ba8:	df 93       	push	r29
    1baa:	cf 93       	push	r28
    1bac:	00 d0       	rcall	.+0      	; 0x1bae <__vector_18+0x28>
    1bae:	00 d0       	rcall	.+0      	; 0x1bb0 <__vector_18+0x2a>
    1bb0:	cd b7       	in	r28, 0x3d	; 61
    1bb2:	de b7       	in	r29, 0x3e	; 62
	if(uartBufferPos!=(command_buffer+uartBufferSize)) {
    1bb4:	80 91 52 01 	lds	r24, 0x0152
    1bb8:	90 91 53 01 	lds	r25, 0x0153
    1bbc:	9c 01       	movw	r18, r24
    1bbe:	20 5e       	subi	r18, 0xE0	; 224
    1bc0:	3f 4f       	sbci	r19, 0xFF	; 255
    1bc2:	80 91 60 01 	lds	r24, 0x0160
    1bc6:	90 91 61 01 	lds	r25, 0x0161
    1bca:	28 17       	cp	r18, r24
    1bcc:	39 07       	cpc	r19, r25
    1bce:	09 f4       	brne	.+2      	; 0x1bd2 <__vector_18+0x4c>
    1bd0:	82 c0       	rjmp	.+260    	; 0x1cd6 <__vector_18+0x150>
		*uartBufferPos=UDR0;
    1bd2:	80 91 60 01 	lds	r24, 0x0160
    1bd6:	90 91 61 01 	lds	r25, 0x0161
    1bda:	26 ec       	ldi	r18, 0xC6	; 198
    1bdc:	30 e0       	ldi	r19, 0x00	; 0
    1bde:	f9 01       	movw	r30, r18
    1be0:	20 81       	ld	r18, Z
    1be2:	fc 01       	movw	r30, r24
    1be4:	20 83       	st	Z, r18
		if ((*uartBufferPos==ETB)&&(DecomposeMessageFromBuffer()==SUCCESFUL_DECOMPOSITION)) {
    1be6:	80 91 60 01 	lds	r24, 0x0160
    1bea:	90 91 61 01 	lds	r25, 0x0161
    1bee:	fc 01       	movw	r30, r24
    1bf0:	80 81       	ld	r24, Z
    1bf2:	87 31       	cpi	r24, 0x17	; 23
    1bf4:	51 f4       	brne	.+20     	; 0x1c0a <__vector_18+0x84>
    1bf6:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <DecomposeMessageFromBuffer>
    1bfa:	88 23       	and	r24, r24
    1bfc:	31 f4       	brne	.+12     	; 0x1c0a <__vector_18+0x84>
			disableUART(); commandAvailable = true; 
    1bfe:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <disableUART>
    1c02:	81 e0       	ldi	r24, 0x01	; 1
    1c04:	80 93 64 01 	sts	0x0164, r24
    1c08:	78 c0       	rjmp	.+240    	; 0x1cfa <__vector_18+0x174>
		}
		else if(*uartBufferPos==uartCarriageReturnChar) {
    1c0a:	80 91 60 01 	lds	r24, 0x0160
    1c0e:	90 91 61 01 	lds	r25, 0x0161
    1c12:	fc 01       	movw	r30, r24
    1c14:	80 81       	ld	r24, Z
    1c16:	8f 37       	cpi	r24, 0x7F	; 127
    1c18:	09 f0       	breq	.+2      	; 0x1c1c <__vector_18+0x96>
    1c1a:	53 c0       	rjmp	.+166    	; 0x1cc2 <__vector_18+0x13c>
			
			bool hasToReturnCarriage = true;
    1c1c:	81 e0       	ldi	r24, 0x01	; 1
    1c1e:	89 83       	std	Y+1, r24	; 0x01
			uint8_t* savedUartBufferPos = uartBufferPos+1;
    1c20:	80 91 60 01 	lds	r24, 0x0160
    1c24:	90 91 61 01 	lds	r25, 0x0161
    1c28:	01 96       	adiw	r24, 0x01	; 1
    1c2a:	9c 83       	std	Y+4, r25	; 0x04
    1c2c:	8b 83       	std	Y+3, r24	; 0x03
			
			for (uint8_t x = 1; x < 4; x++) {
    1c2e:	81 e0       	ldi	r24, 0x01	; 1
    1c30:	8a 83       	std	Y+2, r24	; 0x02
    1c32:	31 c0       	rjmp	.+98     	; 0x1c96 <__vector_18+0x110>
				if ((uartBufferPos-x)<command_buffer) uartBufferPos = command_buffer+(uartBufferSize-1);
    1c34:	20 91 60 01 	lds	r18, 0x0160
    1c38:	30 91 61 01 	lds	r19, 0x0161
    1c3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3e:	88 2f       	mov	r24, r24
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	90 95       	com	r25
    1c44:	81 95       	neg	r24
    1c46:	9f 4f       	sbci	r25, 0xFF	; 255
    1c48:	28 0f       	add	r18, r24
    1c4a:	39 1f       	adc	r19, r25
    1c4c:	80 91 52 01 	lds	r24, 0x0152
    1c50:	90 91 53 01 	lds	r25, 0x0153
    1c54:	28 17       	cp	r18, r24
    1c56:	39 07       	cpc	r19, r25
    1c58:	48 f4       	brcc	.+18     	; 0x1c6c <__vector_18+0xe6>
    1c5a:	80 91 52 01 	lds	r24, 0x0152
    1c5e:	90 91 53 01 	lds	r25, 0x0153
    1c62:	4f 96       	adiw	r24, 0x1f	; 31
    1c64:	90 93 61 01 	sts	0x0161, r25
    1c68:	80 93 60 01 	sts	0x0160, r24
				if (*(uartBufferPos-x)!=uartCarriageReturnChar) { hasToReturnCarriage = false; break; } 
    1c6c:	20 91 60 01 	lds	r18, 0x0160
    1c70:	30 91 61 01 	lds	r19, 0x0161
    1c74:	8a 81       	ldd	r24, Y+2	; 0x02
    1c76:	88 2f       	mov	r24, r24
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	90 95       	com	r25
    1c7c:	81 95       	neg	r24
    1c7e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c80:	82 0f       	add	r24, r18
    1c82:	93 1f       	adc	r25, r19
    1c84:	fc 01       	movw	r30, r24
    1c86:	80 81       	ld	r24, Z
    1c88:	8f 37       	cpi	r24, 0x7F	; 127
    1c8a:	11 f0       	breq	.+4      	; 0x1c90 <__vector_18+0x10a>
    1c8c:	19 82       	std	Y+1, r1	; 0x01
    1c8e:	06 c0       	rjmp	.+12     	; 0x1c9c <__vector_18+0x116>
		else if(*uartBufferPos==uartCarriageReturnChar) {
			
			bool hasToReturnCarriage = true;
			uint8_t* savedUartBufferPos = uartBufferPos+1;
			
			for (uint8_t x = 1; x < 4; x++) {
    1c90:	8a 81       	ldd	r24, Y+2	; 0x02
    1c92:	8f 5f       	subi	r24, 0xFF	; 255
    1c94:	8a 83       	std	Y+2, r24	; 0x02
    1c96:	8a 81       	ldd	r24, Y+2	; 0x02
    1c98:	84 30       	cpi	r24, 0x04	; 4
    1c9a:	60 f2       	brcs	.-104    	; 0x1c34 <__vector_18+0xae>
				if ((uartBufferPos-x)<command_buffer) uartBufferPos = command_buffer+(uartBufferSize-1);
				if (*(uartBufferPos-x)!=uartCarriageReturnChar) { hasToReturnCarriage = false; break; } 
			} 
			if (hasToReturnCarriage) {
    1c9c:	89 81       	ldd	r24, Y+1	; 0x01
    1c9e:	88 23       	and	r24, r24
    1ca0:	49 f0       	breq	.+18     	; 0x1cb4 <__vector_18+0x12e>
				 uartBufferPos = command_buffer;
    1ca2:	80 91 52 01 	lds	r24, 0x0152
    1ca6:	90 91 53 01 	lds	r25, 0x0153
    1caa:	90 93 61 01 	sts	0x0161, r25
    1cae:	80 93 60 01 	sts	0x0160, r24
			} else { 
				uartBufferPos = savedUartBufferPos; 
			}
				
		} else {
			uartBufferPos++;
    1cb2:	23 c0       	rjmp	.+70     	; 0x1cfa <__vector_18+0x174>
			} 
			if (hasToReturnCarriage) {
				 uartBufferPos = command_buffer;
				 
			} else { 
				uartBufferPos = savedUartBufferPos; 
    1cb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb8:	90 93 61 01 	sts	0x0161, r25
    1cbc:	80 93 60 01 	sts	0x0160, r24
			}
				
		} else {
			uartBufferPos++;
    1cc0:	1c c0       	rjmp	.+56     	; 0x1cfa <__vector_18+0x174>
    1cc2:	80 91 60 01 	lds	r24, 0x0160
    1cc6:	90 91 61 01 	lds	r25, 0x0161
    1cca:	01 96       	adiw	r24, 0x01	; 1
    1ccc:	90 93 61 01 	sts	0x0161, r25
    1cd0:	80 93 60 01 	sts	0x0160, r24
    1cd4:	12 c0       	rjmp	.+36     	; 0x1cfa <__vector_18+0x174>
		} 
		
	} else {
		uartBufferPos = command_buffer;
    1cd6:	80 91 52 01 	lds	r24, 0x0152
    1cda:	90 91 53 01 	lds	r25, 0x0153
    1cde:	90 93 61 01 	sts	0x0161, r25
    1ce2:	80 93 60 01 	sts	0x0160, r24
		*uartBufferPos=UDR0;
    1ce6:	80 91 60 01 	lds	r24, 0x0160
    1cea:	90 91 61 01 	lds	r25, 0x0161
    1cee:	26 ec       	ldi	r18, 0xC6	; 198
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	f9 01       	movw	r30, r18
    1cf4:	20 81       	ld	r18, Z
    1cf6:	fc 01       	movw	r30, r24
    1cf8:	20 83       	st	Z, r18
	}
    1cfa:	24 96       	adiw	r28, 0x04	; 4
    1cfc:	de bf       	out	0x3e, r29	; 62
    1cfe:	cd bf       	out	0x3d, r28	; 61
    1d00:	cf 91       	pop	r28
    1d02:	df 91       	pop	r29
    1d04:	ff 91       	pop	r31
    1d06:	ef 91       	pop	r30
    1d08:	bf 91       	pop	r27
    1d0a:	af 91       	pop	r26
    1d0c:	9f 91       	pop	r25
    1d0e:	8f 91       	pop	r24
    1d10:	7f 91       	pop	r23
    1d12:	6f 91       	pop	r22
    1d14:	5f 91       	pop	r21
    1d16:	4f 91       	pop	r20
    1d18:	3f 91       	pop	r19
    1d1a:	2f 91       	pop	r18
    1d1c:	0f 90       	pop	r0
    1d1e:	0f be       	out	0x3f, r0	; 63
    1d20:	0f 90       	pop	r0
    1d22:	1f 90       	pop	r1
    1d24:	18 95       	reti

00001d26 <__cmpsf2>:
    1d26:	2f d0       	rcall	.+94     	; 0x1d86 <__fp_cmp>
    1d28:	08 f4       	brcc	.+2      	; 0x1d2c <__cmpsf2+0x6>
    1d2a:	81 e0       	ldi	r24, 0x01	; 1
    1d2c:	08 95       	ret

00001d2e <__fixunssfsi>:
    1d2e:	57 d0       	rcall	.+174    	; 0x1dde <__fp_splitA>
    1d30:	88 f0       	brcs	.+34     	; 0x1d54 <__fixunssfsi+0x26>
    1d32:	9f 57       	subi	r25, 0x7F	; 127
    1d34:	90 f0       	brcs	.+36     	; 0x1d5a <__fixunssfsi+0x2c>
    1d36:	b9 2f       	mov	r27, r25
    1d38:	99 27       	eor	r25, r25
    1d3a:	b7 51       	subi	r27, 0x17	; 23
    1d3c:	a0 f0       	brcs	.+40     	; 0x1d66 <__fixunssfsi+0x38>
    1d3e:	d1 f0       	breq	.+52     	; 0x1d74 <__fixunssfsi+0x46>
    1d40:	66 0f       	add	r22, r22
    1d42:	77 1f       	adc	r23, r23
    1d44:	88 1f       	adc	r24, r24
    1d46:	99 1f       	adc	r25, r25
    1d48:	1a f0       	brmi	.+6      	; 0x1d50 <__fixunssfsi+0x22>
    1d4a:	ba 95       	dec	r27
    1d4c:	c9 f7       	brne	.-14     	; 0x1d40 <__fixunssfsi+0x12>
    1d4e:	12 c0       	rjmp	.+36     	; 0x1d74 <__fixunssfsi+0x46>
    1d50:	b1 30       	cpi	r27, 0x01	; 1
    1d52:	81 f0       	breq	.+32     	; 0x1d74 <__fixunssfsi+0x46>
    1d54:	5e d0       	rcall	.+188    	; 0x1e12 <__fp_zero>
    1d56:	b1 e0       	ldi	r27, 0x01	; 1
    1d58:	08 95       	ret
    1d5a:	5b c0       	rjmp	.+182    	; 0x1e12 <__fp_zero>
    1d5c:	67 2f       	mov	r22, r23
    1d5e:	78 2f       	mov	r23, r24
    1d60:	88 27       	eor	r24, r24
    1d62:	b8 5f       	subi	r27, 0xF8	; 248
    1d64:	39 f0       	breq	.+14     	; 0x1d74 <__fixunssfsi+0x46>
    1d66:	b9 3f       	cpi	r27, 0xF9	; 249
    1d68:	cc f3       	brlt	.-14     	; 0x1d5c <__fixunssfsi+0x2e>
    1d6a:	86 95       	lsr	r24
    1d6c:	77 95       	ror	r23
    1d6e:	67 95       	ror	r22
    1d70:	b3 95       	inc	r27
    1d72:	d9 f7       	brne	.-10     	; 0x1d6a <__fixunssfsi+0x3c>
    1d74:	3e f4       	brtc	.+14     	; 0x1d84 <__fixunssfsi+0x56>
    1d76:	90 95       	com	r25
    1d78:	80 95       	com	r24
    1d7a:	70 95       	com	r23
    1d7c:	61 95       	neg	r22
    1d7e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d80:	8f 4f       	sbci	r24, 0xFF	; 255
    1d82:	9f 4f       	sbci	r25, 0xFF	; 255
    1d84:	08 95       	ret

00001d86 <__fp_cmp>:
    1d86:	99 0f       	add	r25, r25
    1d88:	00 08       	sbc	r0, r0
    1d8a:	55 0f       	add	r21, r21
    1d8c:	aa 0b       	sbc	r26, r26
    1d8e:	e0 e8       	ldi	r30, 0x80	; 128
    1d90:	fe ef       	ldi	r31, 0xFE	; 254
    1d92:	16 16       	cp	r1, r22
    1d94:	17 06       	cpc	r1, r23
    1d96:	e8 07       	cpc	r30, r24
    1d98:	f9 07       	cpc	r31, r25
    1d9a:	c0 f0       	brcs	.+48     	; 0x1dcc <__fp_cmp+0x46>
    1d9c:	12 16       	cp	r1, r18
    1d9e:	13 06       	cpc	r1, r19
    1da0:	e4 07       	cpc	r30, r20
    1da2:	f5 07       	cpc	r31, r21
    1da4:	98 f0       	brcs	.+38     	; 0x1dcc <__fp_cmp+0x46>
    1da6:	62 1b       	sub	r22, r18
    1da8:	73 0b       	sbc	r23, r19
    1daa:	84 0b       	sbc	r24, r20
    1dac:	95 0b       	sbc	r25, r21
    1dae:	39 f4       	brne	.+14     	; 0x1dbe <__fp_cmp+0x38>
    1db0:	0a 26       	eor	r0, r26
    1db2:	61 f0       	breq	.+24     	; 0x1dcc <__fp_cmp+0x46>
    1db4:	23 2b       	or	r18, r19
    1db6:	24 2b       	or	r18, r20
    1db8:	25 2b       	or	r18, r21
    1dba:	21 f4       	brne	.+8      	; 0x1dc4 <__fp_cmp+0x3e>
    1dbc:	08 95       	ret
    1dbe:	0a 26       	eor	r0, r26
    1dc0:	09 f4       	brne	.+2      	; 0x1dc4 <__fp_cmp+0x3e>
    1dc2:	a1 40       	sbci	r26, 0x01	; 1
    1dc4:	a6 95       	lsr	r26
    1dc6:	8f ef       	ldi	r24, 0xFF	; 255
    1dc8:	81 1d       	adc	r24, r1
    1dca:	81 1d       	adc	r24, r1
    1dcc:	08 95       	ret

00001dce <__fp_split3>:
    1dce:	57 fd       	sbrc	r21, 7
    1dd0:	90 58       	subi	r25, 0x80	; 128
    1dd2:	44 0f       	add	r20, r20
    1dd4:	55 1f       	adc	r21, r21
    1dd6:	59 f0       	breq	.+22     	; 0x1dee <__fp_splitA+0x10>
    1dd8:	5f 3f       	cpi	r21, 0xFF	; 255
    1dda:	71 f0       	breq	.+28     	; 0x1df8 <__fp_splitA+0x1a>
    1ddc:	47 95       	ror	r20

00001dde <__fp_splitA>:
    1dde:	88 0f       	add	r24, r24
    1de0:	97 fb       	bst	r25, 7
    1de2:	99 1f       	adc	r25, r25
    1de4:	61 f0       	breq	.+24     	; 0x1dfe <__fp_splitA+0x20>
    1de6:	9f 3f       	cpi	r25, 0xFF	; 255
    1de8:	79 f0       	breq	.+30     	; 0x1e08 <__fp_splitA+0x2a>
    1dea:	87 95       	ror	r24
    1dec:	08 95       	ret
    1dee:	12 16       	cp	r1, r18
    1df0:	13 06       	cpc	r1, r19
    1df2:	14 06       	cpc	r1, r20
    1df4:	55 1f       	adc	r21, r21
    1df6:	f2 cf       	rjmp	.-28     	; 0x1ddc <__fp_split3+0xe>
    1df8:	46 95       	lsr	r20
    1dfa:	f1 df       	rcall	.-30     	; 0x1dde <__fp_splitA>
    1dfc:	08 c0       	rjmp	.+16     	; 0x1e0e <__fp_splitA+0x30>
    1dfe:	16 16       	cp	r1, r22
    1e00:	17 06       	cpc	r1, r23
    1e02:	18 06       	cpc	r1, r24
    1e04:	99 1f       	adc	r25, r25
    1e06:	f1 cf       	rjmp	.-30     	; 0x1dea <__fp_splitA+0xc>
    1e08:	86 95       	lsr	r24
    1e0a:	71 05       	cpc	r23, r1
    1e0c:	61 05       	cpc	r22, r1
    1e0e:	08 94       	sec
    1e10:	08 95       	ret

00001e12 <__fp_zero>:
    1e12:	e8 94       	clt

00001e14 <__fp_szero>:
    1e14:	bb 27       	eor	r27, r27
    1e16:	66 27       	eor	r22, r22
    1e18:	77 27       	eor	r23, r23
    1e1a:	cb 01       	movw	r24, r22
    1e1c:	97 f9       	bld	r25, 7
    1e1e:	08 95       	ret

00001e20 <__gesf2>:
    1e20:	b2 df       	rcall	.-156    	; 0x1d86 <__fp_cmp>
    1e22:	08 f4       	brcc	.+2      	; 0x1e26 <__gesf2+0x6>
    1e24:	8f ef       	ldi	r24, 0xFF	; 255
    1e26:	08 95       	ret

00001e28 <__mulsf3>:
    1e28:	0b d0       	rcall	.+22     	; 0x1e40 <__mulsf3x>
    1e2a:	78 c0       	rjmp	.+240    	; 0x1f1c <__fp_round>
    1e2c:	69 d0       	rcall	.+210    	; 0x1f00 <__fp_pscA>
    1e2e:	28 f0       	brcs	.+10     	; 0x1e3a <__mulsf3+0x12>
    1e30:	6e d0       	rcall	.+220    	; 0x1f0e <__fp_pscB>
    1e32:	18 f0       	brcs	.+6      	; 0x1e3a <__mulsf3+0x12>
    1e34:	95 23       	and	r25, r21
    1e36:	09 f0       	breq	.+2      	; 0x1e3a <__mulsf3+0x12>
    1e38:	5a c0       	rjmp	.+180    	; 0x1eee <__fp_inf>
    1e3a:	5f c0       	rjmp	.+190    	; 0x1efa <__fp_nan>
    1e3c:	11 24       	eor	r1, r1
    1e3e:	ea cf       	rjmp	.-44     	; 0x1e14 <__fp_szero>

00001e40 <__mulsf3x>:
    1e40:	c6 df       	rcall	.-116    	; 0x1dce <__fp_split3>
    1e42:	a0 f3       	brcs	.-24     	; 0x1e2c <__mulsf3+0x4>

00001e44 <__mulsf3_pse>:
    1e44:	95 9f       	mul	r25, r21
    1e46:	d1 f3       	breq	.-12     	; 0x1e3c <__mulsf3+0x14>
    1e48:	95 0f       	add	r25, r21
    1e4a:	50 e0       	ldi	r21, 0x00	; 0
    1e4c:	55 1f       	adc	r21, r21
    1e4e:	62 9f       	mul	r22, r18
    1e50:	f0 01       	movw	r30, r0
    1e52:	72 9f       	mul	r23, r18
    1e54:	bb 27       	eor	r27, r27
    1e56:	f0 0d       	add	r31, r0
    1e58:	b1 1d       	adc	r27, r1
    1e5a:	63 9f       	mul	r22, r19
    1e5c:	aa 27       	eor	r26, r26
    1e5e:	f0 0d       	add	r31, r0
    1e60:	b1 1d       	adc	r27, r1
    1e62:	aa 1f       	adc	r26, r26
    1e64:	64 9f       	mul	r22, r20
    1e66:	66 27       	eor	r22, r22
    1e68:	b0 0d       	add	r27, r0
    1e6a:	a1 1d       	adc	r26, r1
    1e6c:	66 1f       	adc	r22, r22
    1e6e:	82 9f       	mul	r24, r18
    1e70:	22 27       	eor	r18, r18
    1e72:	b0 0d       	add	r27, r0
    1e74:	a1 1d       	adc	r26, r1
    1e76:	62 1f       	adc	r22, r18
    1e78:	73 9f       	mul	r23, r19
    1e7a:	b0 0d       	add	r27, r0
    1e7c:	a1 1d       	adc	r26, r1
    1e7e:	62 1f       	adc	r22, r18
    1e80:	83 9f       	mul	r24, r19
    1e82:	a0 0d       	add	r26, r0
    1e84:	61 1d       	adc	r22, r1
    1e86:	22 1f       	adc	r18, r18
    1e88:	74 9f       	mul	r23, r20
    1e8a:	33 27       	eor	r19, r19
    1e8c:	a0 0d       	add	r26, r0
    1e8e:	61 1d       	adc	r22, r1
    1e90:	23 1f       	adc	r18, r19
    1e92:	84 9f       	mul	r24, r20
    1e94:	60 0d       	add	r22, r0
    1e96:	21 1d       	adc	r18, r1
    1e98:	82 2f       	mov	r24, r18
    1e9a:	76 2f       	mov	r23, r22
    1e9c:	6a 2f       	mov	r22, r26
    1e9e:	11 24       	eor	r1, r1
    1ea0:	9f 57       	subi	r25, 0x7F	; 127
    1ea2:	50 40       	sbci	r21, 0x00	; 0
    1ea4:	8a f0       	brmi	.+34     	; 0x1ec8 <__mulsf3_pse+0x84>
    1ea6:	e1 f0       	breq	.+56     	; 0x1ee0 <__mulsf3_pse+0x9c>
    1ea8:	88 23       	and	r24, r24
    1eaa:	4a f0       	brmi	.+18     	; 0x1ebe <__mulsf3_pse+0x7a>
    1eac:	ee 0f       	add	r30, r30
    1eae:	ff 1f       	adc	r31, r31
    1eb0:	bb 1f       	adc	r27, r27
    1eb2:	66 1f       	adc	r22, r22
    1eb4:	77 1f       	adc	r23, r23
    1eb6:	88 1f       	adc	r24, r24
    1eb8:	91 50       	subi	r25, 0x01	; 1
    1eba:	50 40       	sbci	r21, 0x00	; 0
    1ebc:	a9 f7       	brne	.-22     	; 0x1ea8 <__mulsf3_pse+0x64>
    1ebe:	9e 3f       	cpi	r25, 0xFE	; 254
    1ec0:	51 05       	cpc	r21, r1
    1ec2:	70 f0       	brcs	.+28     	; 0x1ee0 <__mulsf3_pse+0x9c>
    1ec4:	14 c0       	rjmp	.+40     	; 0x1eee <__fp_inf>
    1ec6:	a6 cf       	rjmp	.-180    	; 0x1e14 <__fp_szero>
    1ec8:	5f 3f       	cpi	r21, 0xFF	; 255
    1eca:	ec f3       	brlt	.-6      	; 0x1ec6 <__mulsf3_pse+0x82>
    1ecc:	98 3e       	cpi	r25, 0xE8	; 232
    1ece:	dc f3       	brlt	.-10     	; 0x1ec6 <__mulsf3_pse+0x82>
    1ed0:	86 95       	lsr	r24
    1ed2:	77 95       	ror	r23
    1ed4:	67 95       	ror	r22
    1ed6:	b7 95       	ror	r27
    1ed8:	f7 95       	ror	r31
    1eda:	e7 95       	ror	r30
    1edc:	9f 5f       	subi	r25, 0xFF	; 255
    1ede:	c1 f7       	brne	.-16     	; 0x1ed0 <__mulsf3_pse+0x8c>
    1ee0:	fe 2b       	or	r31, r30
    1ee2:	88 0f       	add	r24, r24
    1ee4:	91 1d       	adc	r25, r1
    1ee6:	96 95       	lsr	r25
    1ee8:	87 95       	ror	r24
    1eea:	97 f9       	bld	r25, 7
    1eec:	08 95       	ret

00001eee <__fp_inf>:
    1eee:	97 f9       	bld	r25, 7
    1ef0:	9f 67       	ori	r25, 0x7F	; 127
    1ef2:	80 e8       	ldi	r24, 0x80	; 128
    1ef4:	70 e0       	ldi	r23, 0x00	; 0
    1ef6:	60 e0       	ldi	r22, 0x00	; 0
    1ef8:	08 95       	ret

00001efa <__fp_nan>:
    1efa:	9f ef       	ldi	r25, 0xFF	; 255
    1efc:	80 ec       	ldi	r24, 0xC0	; 192
    1efe:	08 95       	ret

00001f00 <__fp_pscA>:
    1f00:	00 24       	eor	r0, r0
    1f02:	0a 94       	dec	r0
    1f04:	16 16       	cp	r1, r22
    1f06:	17 06       	cpc	r1, r23
    1f08:	18 06       	cpc	r1, r24
    1f0a:	09 06       	cpc	r0, r25
    1f0c:	08 95       	ret

00001f0e <__fp_pscB>:
    1f0e:	00 24       	eor	r0, r0
    1f10:	0a 94       	dec	r0
    1f12:	12 16       	cp	r1, r18
    1f14:	13 06       	cpc	r1, r19
    1f16:	14 06       	cpc	r1, r20
    1f18:	05 06       	cpc	r0, r21
    1f1a:	08 95       	ret

00001f1c <__fp_round>:
    1f1c:	09 2e       	mov	r0, r25
    1f1e:	03 94       	inc	r0
    1f20:	00 0c       	add	r0, r0
    1f22:	11 f4       	brne	.+4      	; 0x1f28 <__fp_round+0xc>
    1f24:	88 23       	and	r24, r24
    1f26:	52 f0       	brmi	.+20     	; 0x1f3c <__fp_round+0x20>
    1f28:	bb 0f       	add	r27, r27
    1f2a:	40 f4       	brcc	.+16     	; 0x1f3c <__fp_round+0x20>
    1f2c:	bf 2b       	or	r27, r31
    1f2e:	11 f4       	brne	.+4      	; 0x1f34 <__fp_round+0x18>
    1f30:	60 ff       	sbrs	r22, 0
    1f32:	04 c0       	rjmp	.+8      	; 0x1f3c <__fp_round+0x20>
    1f34:	6f 5f       	subi	r22, 0xFF	; 255
    1f36:	7f 4f       	sbci	r23, 0xFF	; 255
    1f38:	8f 4f       	sbci	r24, 0xFF	; 255
    1f3a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f3c:	08 95       	ret

00001f3e <calloc>:
    1f3e:	ef 92       	push	r14
    1f40:	ff 92       	push	r15
    1f42:	0f 93       	push	r16
    1f44:	1f 93       	push	r17
    1f46:	cf 93       	push	r28
    1f48:	df 93       	push	r29
    1f4a:	68 9f       	mul	r22, r24
    1f4c:	80 01       	movw	r16, r0
    1f4e:	69 9f       	mul	r22, r25
    1f50:	10 0d       	add	r17, r0
    1f52:	78 9f       	mul	r23, r24
    1f54:	10 0d       	add	r17, r0
    1f56:	11 24       	eor	r1, r1
    1f58:	c8 01       	movw	r24, r16
    1f5a:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <malloc>
    1f5e:	e8 2e       	mov	r14, r24
    1f60:	e7 01       	movw	r28, r14
    1f62:	7e 01       	movw	r14, r28
    1f64:	f9 2e       	mov	r15, r25
    1f66:	e7 01       	movw	r28, r14
    1f68:	20 97       	sbiw	r28, 0x00	; 0
    1f6a:	31 f0       	breq	.+12     	; 0x1f78 <calloc+0x3a>
    1f6c:	8e 2d       	mov	r24, r14
    1f6e:	60 e0       	ldi	r22, 0x00	; 0
    1f70:	70 e0       	ldi	r23, 0x00	; 0
    1f72:	a8 01       	movw	r20, r16
    1f74:	0e 94 ca 11 	call	0x2394	; 0x2394 <memset>
    1f78:	7e 01       	movw	r14, r28
    1f7a:	ce 01       	movw	r24, r28
    1f7c:	cd b7       	in	r28, 0x3d	; 61
    1f7e:	de b7       	in	r29, 0x3e	; 62
    1f80:	e6 e0       	ldi	r30, 0x06	; 6
    1f82:	0c 94 f9 11 	jmp	0x23f2	; 0x23f2 <__epilogue_restores__+0x18>

00001f86 <malloc>:
    1f86:	cf 93       	push	r28
    1f88:	df 93       	push	r29
    1f8a:	82 30       	cpi	r24, 0x02	; 2
    1f8c:	91 05       	cpc	r25, r1
    1f8e:	10 f4       	brcc	.+4      	; 0x1f94 <malloc+0xe>
    1f90:	82 e0       	ldi	r24, 0x02	; 2
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	e0 91 67 01 	lds	r30, 0x0167
    1f98:	f0 91 68 01 	lds	r31, 0x0168
    1f9c:	40 e0       	ldi	r20, 0x00	; 0
    1f9e:	50 e0       	ldi	r21, 0x00	; 0
    1fa0:	20 e0       	ldi	r18, 0x00	; 0
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	26 c0       	rjmp	.+76     	; 0x1ff2 <malloc+0x6c>
    1fa6:	60 81       	ld	r22, Z
    1fa8:	71 81       	ldd	r23, Z+1	; 0x01
    1faa:	68 17       	cp	r22, r24
    1fac:	79 07       	cpc	r23, r25
    1fae:	e0 f0       	brcs	.+56     	; 0x1fe8 <malloc+0x62>
    1fb0:	68 17       	cp	r22, r24
    1fb2:	79 07       	cpc	r23, r25
    1fb4:	81 f4       	brne	.+32     	; 0x1fd6 <malloc+0x50>
    1fb6:	82 81       	ldd	r24, Z+2	; 0x02
    1fb8:	93 81       	ldd	r25, Z+3	; 0x03
    1fba:	21 15       	cp	r18, r1
    1fbc:	31 05       	cpc	r19, r1
    1fbe:	31 f0       	breq	.+12     	; 0x1fcc <malloc+0x46>
    1fc0:	d9 01       	movw	r26, r18
    1fc2:	13 96       	adiw	r26, 0x03	; 3
    1fc4:	9c 93       	st	X, r25
    1fc6:	8e 93       	st	-X, r24
    1fc8:	12 97       	sbiw	r26, 0x02	; 2
    1fca:	2b c0       	rjmp	.+86     	; 0x2022 <malloc+0x9c>
    1fcc:	90 93 68 01 	sts	0x0168, r25
    1fd0:	80 93 67 01 	sts	0x0167, r24
    1fd4:	26 c0       	rjmp	.+76     	; 0x2022 <malloc+0x9c>
    1fd6:	41 15       	cp	r20, r1
    1fd8:	51 05       	cpc	r21, r1
    1fda:	19 f0       	breq	.+6      	; 0x1fe2 <malloc+0x5c>
    1fdc:	64 17       	cp	r22, r20
    1fde:	75 07       	cpc	r23, r21
    1fe0:	18 f4       	brcc	.+6      	; 0x1fe8 <malloc+0x62>
    1fe2:	ab 01       	movw	r20, r22
    1fe4:	e9 01       	movw	r28, r18
    1fe6:	df 01       	movw	r26, r30
    1fe8:	9f 01       	movw	r18, r30
    1fea:	72 81       	ldd	r23, Z+2	; 0x02
    1fec:	63 81       	ldd	r22, Z+3	; 0x03
    1fee:	e7 2f       	mov	r30, r23
    1ff0:	f6 2f       	mov	r31, r22
    1ff2:	30 97       	sbiw	r30, 0x00	; 0
    1ff4:	c1 f6       	brne	.-80     	; 0x1fa6 <malloc+0x20>
    1ff6:	41 15       	cp	r20, r1
    1ff8:	51 05       	cpc	r21, r1
    1ffa:	01 f1       	breq	.+64     	; 0x203c <malloc+0xb6>
    1ffc:	48 1b       	sub	r20, r24
    1ffe:	59 0b       	sbc	r21, r25
    2000:	44 30       	cpi	r20, 0x04	; 4
    2002:	51 05       	cpc	r21, r1
    2004:	80 f4       	brcc	.+32     	; 0x2026 <malloc+0xa0>
    2006:	12 96       	adiw	r26, 0x02	; 2
    2008:	8d 91       	ld	r24, X+
    200a:	9c 91       	ld	r25, X
    200c:	13 97       	sbiw	r26, 0x03	; 3
    200e:	20 97       	sbiw	r28, 0x00	; 0
    2010:	19 f0       	breq	.+6      	; 0x2018 <malloc+0x92>
    2012:	9b 83       	std	Y+3, r25	; 0x03
    2014:	8a 83       	std	Y+2, r24	; 0x02
    2016:	04 c0       	rjmp	.+8      	; 0x2020 <malloc+0x9a>
    2018:	90 93 68 01 	sts	0x0168, r25
    201c:	80 93 67 01 	sts	0x0167, r24
    2020:	fd 01       	movw	r30, r26
    2022:	32 96       	adiw	r30, 0x02	; 2
    2024:	46 c0       	rjmp	.+140    	; 0x20b2 <malloc+0x12c>
    2026:	fd 01       	movw	r30, r26
    2028:	e4 0f       	add	r30, r20
    202a:	f5 1f       	adc	r31, r21
    202c:	81 93       	st	Z+, r24
    202e:	91 93       	st	Z+, r25
    2030:	42 50       	subi	r20, 0x02	; 2
    2032:	50 40       	sbci	r21, 0x00	; 0
    2034:	11 96       	adiw	r26, 0x01	; 1
    2036:	5c 93       	st	X, r21
    2038:	4e 93       	st	-X, r20
    203a:	3b c0       	rjmp	.+118    	; 0x20b2 <malloc+0x12c>
    203c:	20 91 65 01 	lds	r18, 0x0165
    2040:	30 91 66 01 	lds	r19, 0x0166
    2044:	21 15       	cp	r18, r1
    2046:	31 05       	cpc	r19, r1
    2048:	41 f4       	brne	.+16     	; 0x205a <malloc+0xd4>
    204a:	20 91 02 01 	lds	r18, 0x0102
    204e:	30 91 03 01 	lds	r19, 0x0103
    2052:	30 93 66 01 	sts	0x0166, r19
    2056:	20 93 65 01 	sts	0x0165, r18
    205a:	20 91 04 01 	lds	r18, 0x0104
    205e:	30 91 05 01 	lds	r19, 0x0105
    2062:	21 15       	cp	r18, r1
    2064:	31 05       	cpc	r19, r1
    2066:	41 f4       	brne	.+16     	; 0x2078 <malloc+0xf2>
    2068:	2d b7       	in	r18, 0x3d	; 61
    206a:	3e b7       	in	r19, 0x3e	; 62
    206c:	40 91 00 01 	lds	r20, 0x0100
    2070:	50 91 01 01 	lds	r21, 0x0101
    2074:	24 1b       	sub	r18, r20
    2076:	35 0b       	sbc	r19, r21
    2078:	e0 91 65 01 	lds	r30, 0x0165
    207c:	f0 91 66 01 	lds	r31, 0x0166
    2080:	e2 17       	cp	r30, r18
    2082:	f3 07       	cpc	r31, r19
    2084:	a0 f4       	brcc	.+40     	; 0x20ae <malloc+0x128>
    2086:	2e 1b       	sub	r18, r30
    2088:	3f 0b       	sbc	r19, r31
    208a:	28 17       	cp	r18, r24
    208c:	39 07       	cpc	r19, r25
    208e:	78 f0       	brcs	.+30     	; 0x20ae <malloc+0x128>
    2090:	ac 01       	movw	r20, r24
    2092:	4e 5f       	subi	r20, 0xFE	; 254
    2094:	5f 4f       	sbci	r21, 0xFF	; 255
    2096:	24 17       	cp	r18, r20
    2098:	35 07       	cpc	r19, r21
    209a:	48 f0       	brcs	.+18     	; 0x20ae <malloc+0x128>
    209c:	4e 0f       	add	r20, r30
    209e:	5f 1f       	adc	r21, r31
    20a0:	50 93 66 01 	sts	0x0166, r21
    20a4:	40 93 65 01 	sts	0x0165, r20
    20a8:	81 93       	st	Z+, r24
    20aa:	91 93       	st	Z+, r25
    20ac:	02 c0       	rjmp	.+4      	; 0x20b2 <malloc+0x12c>
    20ae:	e0 e0       	ldi	r30, 0x00	; 0
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	cf 01       	movw	r24, r30
    20b4:	df 91       	pop	r29
    20b6:	cf 91       	pop	r28
    20b8:	08 95       	ret

000020ba <free>:
    20ba:	cf 93       	push	r28
    20bc:	df 93       	push	r29
    20be:	00 97       	sbiw	r24, 0x00	; 0
    20c0:	09 f4       	brne	.+2      	; 0x20c4 <free+0xa>
    20c2:	91 c0       	rjmp	.+290    	; 0x21e6 <free+0x12c>
    20c4:	fc 01       	movw	r30, r24
    20c6:	32 97       	sbiw	r30, 0x02	; 2
    20c8:	13 82       	std	Z+3, r1	; 0x03
    20ca:	12 82       	std	Z+2, r1	; 0x02
    20cc:	60 91 67 01 	lds	r22, 0x0167
    20d0:	70 91 68 01 	lds	r23, 0x0168
    20d4:	61 15       	cp	r22, r1
    20d6:	71 05       	cpc	r23, r1
    20d8:	81 f4       	brne	.+32     	; 0x20fa <free+0x40>
    20da:	20 81       	ld	r18, Z
    20dc:	31 81       	ldd	r19, Z+1	; 0x01
    20de:	28 0f       	add	r18, r24
    20e0:	39 1f       	adc	r19, r25
    20e2:	80 91 65 01 	lds	r24, 0x0165
    20e6:	90 91 66 01 	lds	r25, 0x0166
    20ea:	82 17       	cp	r24, r18
    20ec:	93 07       	cpc	r25, r19
    20ee:	99 f5       	brne	.+102    	; 0x2156 <free+0x9c>
    20f0:	f0 93 66 01 	sts	0x0166, r31
    20f4:	e0 93 65 01 	sts	0x0165, r30
    20f8:	76 c0       	rjmp	.+236    	; 0x21e6 <free+0x12c>
    20fa:	db 01       	movw	r26, r22
    20fc:	80 e0       	ldi	r24, 0x00	; 0
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	02 c0       	rjmp	.+4      	; 0x2106 <free+0x4c>
    2102:	cd 01       	movw	r24, r26
    2104:	d9 01       	movw	r26, r18
    2106:	ae 17       	cp	r26, r30
    2108:	bf 07       	cpc	r27, r31
    210a:	48 f4       	brcc	.+18     	; 0x211e <free+0x64>
    210c:	12 96       	adiw	r26, 0x02	; 2
    210e:	2d 91       	ld	r18, X+
    2110:	3c 91       	ld	r19, X
    2112:	13 97       	sbiw	r26, 0x03	; 3
    2114:	21 15       	cp	r18, r1
    2116:	31 05       	cpc	r19, r1
    2118:	a1 f7       	brne	.-24     	; 0x2102 <free+0x48>
    211a:	cd 01       	movw	r24, r26
    211c:	21 c0       	rjmp	.+66     	; 0x2160 <free+0xa6>
    211e:	b3 83       	std	Z+3, r27	; 0x03
    2120:	a2 83       	std	Z+2, r26	; 0x02
    2122:	ef 01       	movw	r28, r30
    2124:	49 91       	ld	r20, Y+
    2126:	59 91       	ld	r21, Y+
    2128:	9e 01       	movw	r18, r28
    212a:	24 0f       	add	r18, r20
    212c:	35 1f       	adc	r19, r21
    212e:	a2 17       	cp	r26, r18
    2130:	b3 07       	cpc	r27, r19
    2132:	79 f4       	brne	.+30     	; 0x2152 <free+0x98>
    2134:	2d 91       	ld	r18, X+
    2136:	3c 91       	ld	r19, X
    2138:	11 97       	sbiw	r26, 0x01	; 1
    213a:	24 0f       	add	r18, r20
    213c:	35 1f       	adc	r19, r21
    213e:	2e 5f       	subi	r18, 0xFE	; 254
    2140:	3f 4f       	sbci	r19, 0xFF	; 255
    2142:	31 83       	std	Z+1, r19	; 0x01
    2144:	20 83       	st	Z, r18
    2146:	12 96       	adiw	r26, 0x02	; 2
    2148:	2d 91       	ld	r18, X+
    214a:	3c 91       	ld	r19, X
    214c:	13 97       	sbiw	r26, 0x03	; 3
    214e:	33 83       	std	Z+3, r19	; 0x03
    2150:	22 83       	std	Z+2, r18	; 0x02
    2152:	00 97       	sbiw	r24, 0x00	; 0
    2154:	29 f4       	brne	.+10     	; 0x2160 <free+0xa6>
    2156:	f0 93 68 01 	sts	0x0168, r31
    215a:	e0 93 67 01 	sts	0x0167, r30
    215e:	43 c0       	rjmp	.+134    	; 0x21e6 <free+0x12c>
    2160:	dc 01       	movw	r26, r24
    2162:	13 96       	adiw	r26, 0x03	; 3
    2164:	fc 93       	st	X, r31
    2166:	ee 93       	st	-X, r30
    2168:	12 97       	sbiw	r26, 0x02	; 2
    216a:	4d 91       	ld	r20, X+
    216c:	5d 91       	ld	r21, X+
    216e:	a4 0f       	add	r26, r20
    2170:	b5 1f       	adc	r27, r21
    2172:	ea 17       	cp	r30, r26
    2174:	fb 07       	cpc	r31, r27
    2176:	69 f4       	brne	.+26     	; 0x2192 <free+0xd8>
    2178:	20 81       	ld	r18, Z
    217a:	31 81       	ldd	r19, Z+1	; 0x01
    217c:	24 0f       	add	r18, r20
    217e:	35 1f       	adc	r19, r21
    2180:	2e 5f       	subi	r18, 0xFE	; 254
    2182:	3f 4f       	sbci	r19, 0xFF	; 255
    2184:	ec 01       	movw	r28, r24
    2186:	39 83       	std	Y+1, r19	; 0x01
    2188:	28 83       	st	Y, r18
    218a:	22 81       	ldd	r18, Z+2	; 0x02
    218c:	33 81       	ldd	r19, Z+3	; 0x03
    218e:	3b 83       	std	Y+3, r19	; 0x03
    2190:	2a 83       	std	Y+2, r18	; 0x02
    2192:	e0 e0       	ldi	r30, 0x00	; 0
    2194:	f0 e0       	ldi	r31, 0x00	; 0
    2196:	02 c0       	rjmp	.+4      	; 0x219c <free+0xe2>
    2198:	fb 01       	movw	r30, r22
    219a:	bc 01       	movw	r22, r24
    219c:	db 01       	movw	r26, r22
    219e:	12 96       	adiw	r26, 0x02	; 2
    21a0:	8d 91       	ld	r24, X+
    21a2:	9c 91       	ld	r25, X
    21a4:	13 97       	sbiw	r26, 0x03	; 3
    21a6:	00 97       	sbiw	r24, 0x00	; 0
    21a8:	b9 f7       	brne	.-18     	; 0x2198 <free+0xde>
    21aa:	9b 01       	movw	r18, r22
    21ac:	2e 5f       	subi	r18, 0xFE	; 254
    21ae:	3f 4f       	sbci	r19, 0xFF	; 255
    21b0:	8d 91       	ld	r24, X+
    21b2:	9c 91       	ld	r25, X
    21b4:	11 97       	sbiw	r26, 0x01	; 1
    21b6:	82 0f       	add	r24, r18
    21b8:	93 1f       	adc	r25, r19
    21ba:	40 91 65 01 	lds	r20, 0x0165
    21be:	50 91 66 01 	lds	r21, 0x0166
    21c2:	48 17       	cp	r20, r24
    21c4:	59 07       	cpc	r21, r25
    21c6:	79 f4       	brne	.+30     	; 0x21e6 <free+0x12c>
    21c8:	30 97       	sbiw	r30, 0x00	; 0
    21ca:	29 f4       	brne	.+10     	; 0x21d6 <free+0x11c>
    21cc:	10 92 68 01 	sts	0x0168, r1
    21d0:	10 92 67 01 	sts	0x0167, r1
    21d4:	02 c0       	rjmp	.+4      	; 0x21da <free+0x120>
    21d6:	13 82       	std	Z+3, r1	; 0x03
    21d8:	12 82       	std	Z+2, r1	; 0x02
    21da:	22 50       	subi	r18, 0x02	; 2
    21dc:	30 40       	sbci	r19, 0x00	; 0
    21de:	30 93 66 01 	sts	0x0166, r19
    21e2:	20 93 65 01 	sts	0x0165, r18
    21e6:	df 91       	pop	r29
    21e8:	cf 91       	pop	r28
    21ea:	08 95       	ret

000021ec <realloc>:
    21ec:	a0 e0       	ldi	r26, 0x00	; 0
    21ee:	b0 e0       	ldi	r27, 0x00	; 0
    21f0:	ec ef       	ldi	r30, 0xFC	; 252
    21f2:	f0 e1       	ldi	r31, 0x10	; 16
    21f4:	0c 94 d7 11 	jmp	0x23ae	; 0x23ae <__prologue_saves__+0xc>
    21f8:	8c 01       	movw	r16, r24
    21fa:	cb 01       	movw	r24, r22
    21fc:	01 15       	cp	r16, r1
    21fe:	11 05       	cpc	r17, r1
    2200:	29 f4       	brne	.+10     	; 0x220c <realloc+0x20>
    2202:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <malloc>
    2206:	08 2f       	mov	r16, r24
    2208:	19 2f       	mov	r17, r25
    220a:	b5 c0       	rjmp	.+362    	; 0x2376 <realloc+0x18a>
    220c:	d8 01       	movw	r26, r16
    220e:	12 97       	sbiw	r26, 0x02	; 2
    2210:	98 01       	movw	r18, r16
    2212:	26 0f       	add	r18, r22
    2214:	37 1f       	adc	r19, r23
    2216:	2a 17       	cp	r18, r26
    2218:	3b 07       	cpc	r19, r27
    221a:	08 f4       	brcc	.+2      	; 0x221e <realloc+0x32>
    221c:	aa c0       	rjmp	.+340    	; 0x2372 <realloc+0x186>
    221e:	ed 90       	ld	r14, X+
    2220:	fc 90       	ld	r15, X
    2222:	11 97       	sbiw	r26, 0x01	; 1
    2224:	e6 16       	cp	r14, r22
    2226:	f7 06       	cpc	r15, r23
    2228:	d0 f0       	brcs	.+52     	; 0x225e <realloc+0x72>
    222a:	45 e0       	ldi	r20, 0x05	; 5
    222c:	e4 16       	cp	r14, r20
    222e:	f1 04       	cpc	r15, r1
    2230:	08 f4       	brcc	.+2      	; 0x2234 <realloc+0x48>
    2232:	a1 c0       	rjmp	.+322    	; 0x2376 <realloc+0x18a>
    2234:	a7 01       	movw	r20, r14
    2236:	44 50       	subi	r20, 0x04	; 4
    2238:	50 40       	sbci	r21, 0x00	; 0
    223a:	46 17       	cp	r20, r22
    223c:	57 07       	cpc	r21, r23
    223e:	08 f4       	brcc	.+2      	; 0x2242 <realloc+0x56>
    2240:	9a c0       	rjmp	.+308    	; 0x2376 <realloc+0x18a>
    2242:	a7 01       	movw	r20, r14
    2244:	42 50       	subi	r20, 0x02	; 2
    2246:	50 40       	sbci	r21, 0x00	; 0
    2248:	46 1b       	sub	r20, r22
    224a:	57 0b       	sbc	r21, r23
    224c:	f9 01       	movw	r30, r18
    224e:	41 93       	st	Z+, r20
    2250:	51 93       	st	Z+, r21
    2252:	6d 93       	st	X+, r22
    2254:	7c 93       	st	X, r23
    2256:	cf 01       	movw	r24, r30
    2258:	0e 94 5d 10 	call	0x20ba	; 0x20ba <free>
    225c:	8c c0       	rjmp	.+280    	; 0x2376 <realloc+0x18a>
    225e:	5b 01       	movw	r10, r22
    2260:	ae 18       	sub	r10, r14
    2262:	bf 08       	sbc	r11, r15
    2264:	48 01       	movw	r8, r16
    2266:	8e 0c       	add	r8, r14
    2268:	9f 1c       	adc	r9, r15
    226a:	e0 91 67 01 	lds	r30, 0x0167
    226e:	f0 91 68 01 	lds	r31, 0x0168
    2272:	cc 24       	eor	r12, r12
    2274:	dd 24       	eor	r13, r13
    2276:	c0 e0       	ldi	r28, 0x00	; 0
    2278:	d0 e0       	ldi	r29, 0x00	; 0
    227a:	41 c0       	rjmp	.+130    	; 0x22fe <realloc+0x112>
    227c:	e8 15       	cp	r30, r8
    227e:	f9 05       	cpc	r31, r9
    2280:	99 f5       	brne	.+102    	; 0x22e8 <realloc+0xfc>
    2282:	60 81       	ld	r22, Z
    2284:	71 81       	ldd	r23, Z+1	; 0x01
    2286:	ab 01       	movw	r20, r22
    2288:	4e 5f       	subi	r20, 0xFE	; 254
    228a:	5f 4f       	sbci	r21, 0xFF	; 255
    228c:	4a 15       	cp	r20, r10
    228e:	5b 05       	cpc	r21, r11
    2290:	58 f1       	brcs	.+86     	; 0x22e8 <realloc+0xfc>
    2292:	ab 01       	movw	r20, r22
    2294:	4a 19       	sub	r20, r10
    2296:	5b 09       	sbc	r21, r11
    2298:	cc 24       	eor	r12, r12
    229a:	dd 24       	eor	r13, r13
    229c:	68 94       	set
    229e:	c1 f8       	bld	r12, 1
    22a0:	c4 0e       	add	r12, r20
    22a2:	d5 1e       	adc	r13, r21
    22a4:	82 80       	ldd	r8, Z+2	; 0x02
    22a6:	a3 80       	ldd	r10, Z+3	; 0x03
    22a8:	e5 e0       	ldi	r30, 0x05	; 5
    22aa:	ce 16       	cp	r12, r30
    22ac:	d1 04       	cpc	r13, r1
    22ae:	48 f0       	brcs	.+18     	; 0x22c2 <realloc+0xd6>
    22b0:	f9 01       	movw	r30, r18
    22b2:	82 82       	std	Z+2, r8	; 0x02
    22b4:	a3 82       	std	Z+3, r10	; 0x03
    22b6:	51 83       	std	Z+1, r21	; 0x01
    22b8:	40 83       	st	Z, r20
    22ba:	11 96       	adiw	r26, 0x01	; 1
    22bc:	9c 93       	st	X, r25
    22be:	8e 93       	st	-X, r24
    22c0:	09 c0       	rjmp	.+18     	; 0x22d4 <realloc+0xe8>
    22c2:	c7 01       	movw	r24, r14
    22c4:	02 96       	adiw	r24, 0x02	; 2
    22c6:	86 0f       	add	r24, r22
    22c8:	97 1f       	adc	r25, r23
    22ca:	11 96       	adiw	r26, 0x01	; 1
    22cc:	9c 93       	st	X, r25
    22ce:	8e 93       	st	-X, r24
    22d0:	e8 2d       	mov	r30, r8
    22d2:	fa 2d       	mov	r31, r10
    22d4:	20 97       	sbiw	r28, 0x00	; 0
    22d6:	19 f0       	breq	.+6      	; 0x22de <realloc+0xf2>
    22d8:	fb 83       	std	Y+3, r31	; 0x03
    22da:	ea 83       	std	Y+2, r30	; 0x02
    22dc:	4c c0       	rjmp	.+152    	; 0x2376 <realloc+0x18a>
    22de:	f0 93 68 01 	sts	0x0168, r31
    22e2:	e0 93 67 01 	sts	0x0167, r30
    22e6:	47 c0       	rjmp	.+142    	; 0x2376 <realloc+0x18a>
    22e8:	40 81       	ld	r20, Z
    22ea:	51 81       	ldd	r21, Z+1	; 0x01
    22ec:	c4 16       	cp	r12, r20
    22ee:	d5 06       	cpc	r13, r21
    22f0:	08 f4       	brcc	.+2      	; 0x22f4 <realloc+0x108>
    22f2:	6a 01       	movw	r12, r20
    22f4:	ef 01       	movw	r28, r30
    22f6:	52 81       	ldd	r21, Z+2	; 0x02
    22f8:	43 81       	ldd	r20, Z+3	; 0x03
    22fa:	e5 2f       	mov	r30, r21
    22fc:	f4 2f       	mov	r31, r20
    22fe:	30 97       	sbiw	r30, 0x00	; 0
    2300:	09 f0       	breq	.+2      	; 0x2304 <realloc+0x118>
    2302:	bc cf       	rjmp	.-136    	; 0x227c <realloc+0x90>
    2304:	40 91 65 01 	lds	r20, 0x0165
    2308:	50 91 66 01 	lds	r21, 0x0166
    230c:	48 15       	cp	r20, r8
    230e:	59 05       	cpc	r21, r9
    2310:	e9 f4       	brne	.+58     	; 0x234c <realloc+0x160>
    2312:	c8 16       	cp	r12, r24
    2314:	d9 06       	cpc	r13, r25
    2316:	d0 f4       	brcc	.+52     	; 0x234c <realloc+0x160>
    2318:	40 91 04 01 	lds	r20, 0x0104
    231c:	50 91 05 01 	lds	r21, 0x0105
    2320:	41 15       	cp	r20, r1
    2322:	51 05       	cpc	r21, r1
    2324:	41 f4       	brne	.+16     	; 0x2336 <realloc+0x14a>
    2326:	4d b7       	in	r20, 0x3d	; 61
    2328:	5e b7       	in	r21, 0x3e	; 62
    232a:	60 91 00 01 	lds	r22, 0x0100
    232e:	70 91 01 01 	lds	r23, 0x0101
    2332:	46 1b       	sub	r20, r22
    2334:	57 0b       	sbc	r21, r23
    2336:	24 17       	cp	r18, r20
    2338:	35 07       	cpc	r19, r21
    233a:	d8 f4       	brcc	.+54     	; 0x2372 <realloc+0x186>
    233c:	30 93 66 01 	sts	0x0166, r19
    2340:	20 93 65 01 	sts	0x0165, r18
    2344:	11 96       	adiw	r26, 0x01	; 1
    2346:	9c 93       	st	X, r25
    2348:	8e 93       	st	-X, r24
    234a:	15 c0       	rjmp	.+42     	; 0x2376 <realloc+0x18a>
    234c:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <malloc>
    2350:	c8 2e       	mov	r12, r24
    2352:	e6 01       	movw	r28, r12
    2354:	6e 01       	movw	r12, r28
    2356:	d9 2e       	mov	r13, r25
    2358:	e6 01       	movw	r28, r12
    235a:	20 97       	sbiw	r28, 0x00	; 0
    235c:	51 f0       	breq	.+20     	; 0x2372 <realloc+0x186>
    235e:	8c 2d       	mov	r24, r12
    2360:	b8 01       	movw	r22, r16
    2362:	a7 01       	movw	r20, r14
    2364:	0e 94 c1 11 	call	0x2382	; 0x2382 <memcpy>
    2368:	c8 01       	movw	r24, r16
    236a:	0e 94 5d 10 	call	0x20ba	; 0x20ba <free>
    236e:	86 01       	movw	r16, r12
    2370:	02 c0       	rjmp	.+4      	; 0x2376 <realloc+0x18a>
    2372:	00 e0       	ldi	r16, 0x00	; 0
    2374:	10 e0       	ldi	r17, 0x00	; 0
    2376:	c8 01       	movw	r24, r16
    2378:	cd b7       	in	r28, 0x3d	; 61
    237a:	de b7       	in	r29, 0x3e	; 62
    237c:	ec e0       	ldi	r30, 0x0C	; 12
    237e:	0c 94 f3 11 	jmp	0x23e6	; 0x23e6 <__epilogue_restores__+0xc>

00002382 <memcpy>:
    2382:	fb 01       	movw	r30, r22
    2384:	dc 01       	movw	r26, r24
    2386:	02 c0       	rjmp	.+4      	; 0x238c <memcpy+0xa>
    2388:	01 90       	ld	r0, Z+
    238a:	0d 92       	st	X+, r0
    238c:	41 50       	subi	r20, 0x01	; 1
    238e:	50 40       	sbci	r21, 0x00	; 0
    2390:	d8 f7       	brcc	.-10     	; 0x2388 <memcpy+0x6>
    2392:	08 95       	ret

00002394 <memset>:
    2394:	dc 01       	movw	r26, r24
    2396:	01 c0       	rjmp	.+2      	; 0x239a <memset+0x6>
    2398:	6d 93       	st	X+, r22
    239a:	41 50       	subi	r20, 0x01	; 1
    239c:	50 40       	sbci	r21, 0x00	; 0
    239e:	e0 f7       	brcc	.-8      	; 0x2398 <memset+0x4>
    23a0:	08 95       	ret

000023a2 <__prologue_saves__>:
    23a2:	2f 92       	push	r2
    23a4:	3f 92       	push	r3
    23a6:	4f 92       	push	r4
    23a8:	5f 92       	push	r5
    23aa:	6f 92       	push	r6
    23ac:	7f 92       	push	r7
    23ae:	8f 92       	push	r8
    23b0:	9f 92       	push	r9
    23b2:	af 92       	push	r10
    23b4:	bf 92       	push	r11
    23b6:	cf 92       	push	r12
    23b8:	df 92       	push	r13
    23ba:	ef 92       	push	r14
    23bc:	ff 92       	push	r15
    23be:	0f 93       	push	r16
    23c0:	1f 93       	push	r17
    23c2:	cf 93       	push	r28
    23c4:	df 93       	push	r29
    23c6:	cd b7       	in	r28, 0x3d	; 61
    23c8:	de b7       	in	r29, 0x3e	; 62
    23ca:	ca 1b       	sub	r28, r26
    23cc:	db 0b       	sbc	r29, r27
    23ce:	0f b6       	in	r0, 0x3f	; 63
    23d0:	f8 94       	cli
    23d2:	de bf       	out	0x3e, r29	; 62
    23d4:	0f be       	out	0x3f, r0	; 63
    23d6:	cd bf       	out	0x3d, r28	; 61
    23d8:	09 94       	ijmp

000023da <__epilogue_restores__>:
    23da:	2a 88       	ldd	r2, Y+18	; 0x12
    23dc:	39 88       	ldd	r3, Y+17	; 0x11
    23de:	48 88       	ldd	r4, Y+16	; 0x10
    23e0:	5f 84       	ldd	r5, Y+15	; 0x0f
    23e2:	6e 84       	ldd	r6, Y+14	; 0x0e
    23e4:	7d 84       	ldd	r7, Y+13	; 0x0d
    23e6:	8c 84       	ldd	r8, Y+12	; 0x0c
    23e8:	9b 84       	ldd	r9, Y+11	; 0x0b
    23ea:	aa 84       	ldd	r10, Y+10	; 0x0a
    23ec:	b9 84       	ldd	r11, Y+9	; 0x09
    23ee:	c8 84       	ldd	r12, Y+8	; 0x08
    23f0:	df 80       	ldd	r13, Y+7	; 0x07
    23f2:	ee 80       	ldd	r14, Y+6	; 0x06
    23f4:	fd 80       	ldd	r15, Y+5	; 0x05
    23f6:	0c 81       	ldd	r16, Y+4	; 0x04
    23f8:	1b 81       	ldd	r17, Y+3	; 0x03
    23fa:	aa 81       	ldd	r26, Y+2	; 0x02
    23fc:	b9 81       	ldd	r27, Y+1	; 0x01
    23fe:	ce 0f       	add	r28, r30
    2400:	d1 1d       	adc	r29, r1
    2402:	0f b6       	in	r0, 0x3f	; 63
    2404:	f8 94       	cli
    2406:	de bf       	out	0x3e, r29	; 62
    2408:	0f be       	out	0x3f, r0	; 63
    240a:	cd bf       	out	0x3d, r28	; 61
    240c:	ed 01       	movw	r28, r26
    240e:	08 95       	ret

00002410 <_exit>:
    2410:	f8 94       	cli

00002412 <__stop_program>:
    2412:	ff cf       	rjmp	.-2      	; 0x2412 <__stop_program>
