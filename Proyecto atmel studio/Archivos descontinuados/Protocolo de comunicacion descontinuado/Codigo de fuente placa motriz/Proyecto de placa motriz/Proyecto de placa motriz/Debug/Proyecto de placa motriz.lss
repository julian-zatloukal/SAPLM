
Proyecto de placa motriz.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000060  00800100  00002ed0  00002f64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002ed0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800160  00800160  00002fc4  2**0
                  ALLOC
  3 .stab         00001cb0  00000000  00000000  00002fc4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000a15  00000000  00000000  00004c74  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  00005689  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000060a  00000000  00000000  00005869  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001a31  00000000  00000000  00005e73  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000662  00000000  00000000  000078a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001ebf  00000000  00000000  00007f06  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000320  00000000  00000000  00009dc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000850  00000000  00000000  0000a0e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000491  00000000  00000000  0000a938  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000168  00000000  00000000  0000adc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000001a8  00000000  00000000  0000af31  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e0 ed       	ldi	r30, 0xD0	; 208
      7c:	fe e2       	ldi	r31, 0x2E	; 46
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a0 36       	cpi	r26, 0x60	; 96
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a0 e6       	ldi	r26, 0x60	; 96
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a1 37       	cpi	r26, 0x71	; 113
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <main>
      9e:	0c 94 66 17 	jmp	0x2ecc	; 0x2ecc <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initliazeMemory>:
	{ .commandBase = "CALL_NURSE", .nParameters = 0, .handlerFunction = &CALL_NURSE_HANDLE},
	{ .commandBase = "CURTAIN_POS_CHANGE", .nParameters = 1, .handlerFunction = &CURTAIN_POS_CHANGE_HANDLE},
	{ .commandBase = "STRETCHER_POS_CHANGE", .nParameters = 1, .handlerFunction = &STRETCHER_POS_CHANGE_HANDLE}
};

bool initliazeMemory(){
      a6:	df 93       	push	r29
      a8:	cf 93       	push	r28
      aa:	cd b7       	in	r28, 0x3d	; 61
      ac:	de b7       	in	r29, 0x3e	; 62
	if(memoryInitialized) return false;
      ae:	80 91 6a 01 	lds	r24, 0x016A
      b2:	88 23       	and	r24, r24
      b4:	11 f0       	breq	.+4      	; 0xba <initliazeMemory+0x14>
      b6:	80 e0       	ldi	r24, 0x00	; 0
      b8:	46 c0       	rjmp	.+140    	; 0x146 <initliazeMemory+0xa0>
	parameter[0] = (void*)calloc(28,1);
      ba:	8c e1       	ldi	r24, 0x1C	; 28
      bc:	90 e0       	ldi	r25, 0x00	; 0
      be:	61 e0       	ldi	r22, 0x01	; 1
      c0:	70 e0       	ldi	r23, 0x00	; 0
      c2:	0e 94 82 15 	call	0x2b04	; 0x2b04 <calloc>
      c6:	90 93 63 01 	sts	0x0163, r25
      ca:	80 93 62 01 	sts	0x0162, r24
	parameter[1] = (void*)calloc(28,1);
      ce:	8c e1       	ldi	r24, 0x1C	; 28
      d0:	90 e0       	ldi	r25, 0x00	; 0
      d2:	61 e0       	ldi	r22, 0x01	; 1
      d4:	70 e0       	ldi	r23, 0x00	; 0
      d6:	0e 94 82 15 	call	0x2b04	; 0x2b04 <calloc>
      da:	90 93 65 01 	sts	0x0165, r25
      de:	80 93 64 01 	sts	0x0164, r24
	parameter[2] = (void*)calloc(28,1);
      e2:	8c e1       	ldi	r24, 0x1C	; 28
      e4:	90 e0       	ldi	r25, 0x00	; 0
      e6:	61 e0       	ldi	r22, 0x01	; 1
      e8:	70 e0       	ldi	r23, 0x00	; 0
      ea:	0e 94 82 15 	call	0x2b04	; 0x2b04 <calloc>
      ee:	90 93 67 01 	sts	0x0167, r25
      f2:	80 93 66 01 	sts	0x0166, r24
	command_buffer = (uint8_t*)calloc(32,1);
      f6:	80 e2       	ldi	r24, 0x20	; 32
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	61 e0       	ldi	r22, 0x01	; 1
      fc:	70 e0       	ldi	r23, 0x00	; 0
      fe:	0e 94 82 15 	call	0x2b04	; 0x2b04 <calloc>
     102:	90 93 69 01 	sts	0x0169, r25
     106:	80 93 68 01 	sts	0x0168, r24
	if(parameter[0]==nullptr||parameter[1]==nullptr||parameter[2]==nullptr||command_buffer==nullptr) return false;
     10a:	80 91 62 01 	lds	r24, 0x0162
     10e:	90 91 63 01 	lds	r25, 0x0163
     112:	00 97       	sbiw	r24, 0x00	; 0
     114:	91 f0       	breq	.+36     	; 0x13a <initliazeMemory+0x94>
     116:	80 91 64 01 	lds	r24, 0x0164
     11a:	90 91 65 01 	lds	r25, 0x0165
     11e:	00 97       	sbiw	r24, 0x00	; 0
     120:	61 f0       	breq	.+24     	; 0x13a <initliazeMemory+0x94>
     122:	80 91 66 01 	lds	r24, 0x0166
     126:	90 91 67 01 	lds	r25, 0x0167
     12a:	00 97       	sbiw	r24, 0x00	; 0
     12c:	31 f0       	breq	.+12     	; 0x13a <initliazeMemory+0x94>
     12e:	80 91 68 01 	lds	r24, 0x0168
     132:	90 91 69 01 	lds	r25, 0x0169
     136:	00 97       	sbiw	r24, 0x00	; 0
     138:	11 f4       	brne	.+4      	; 0x13e <initliazeMemory+0x98>
     13a:	80 e0       	ldi	r24, 0x00	; 0
     13c:	04 c0       	rjmp	.+8      	; 0x146 <initliazeMemory+0xa0>
	memoryInitialized = true;
     13e:	81 e0       	ldi	r24, 0x01	; 1
     140:	80 93 6a 01 	sts	0x016A, r24
	return true;
     144:	81 e0       	ldi	r24, 0x01	; 1
}
     146:	cf 91       	pop	r28
     148:	df 91       	pop	r29
     14a:	08 95       	ret

0000014c <decomposeCommand>:
		}
	}
	*startParamPTR='\0';
}

bool decomposeCommand(void* input_buffer, commandType* commandT, void** outputParameter){
     14c:	0f 93       	push	r16
     14e:	1f 93       	push	r17
     150:	df 93       	push	r29
     152:	cf 93       	push	r28
     154:	cd b7       	in	r28, 0x3d	; 61
     156:	de b7       	in	r29, 0x3e	; 62
     158:	60 97       	sbiw	r28, 0x10	; 16
     15a:	0f b6       	in	r0, 0x3f	; 63
     15c:	f8 94       	cli
     15e:	de bf       	out	0x3e, r29	; 62
     160:	0f be       	out	0x3f, r0	; 63
     162:	cd bf       	out	0x3d, r28	; 61
     164:	9c 87       	std	Y+12, r25	; 0x0c
     166:	8b 87       	std	Y+11, r24	; 0x0b
     168:	7e 87       	std	Y+14, r23	; 0x0e
     16a:	6d 87       	std	Y+13, r22	; 0x0d
     16c:	58 8b       	std	Y+16, r21	; 0x10
     16e:	4f 87       	std	Y+15, r20	; 0x0f
	
	for (uint8_t index = 0; index < AVAILABLE_COMMANDS; index++){
     170:	19 82       	std	Y+1, r1	; 0x01
     172:	4e c0       	rjmp	.+156    	; 0x210 <decomposeCommand+0xc4>
		if (memmem(input_buffer, COMMAND_BUFFER_SIZE, availableCommand[index].commandBase, strlen(availableCommand[index].commandBase))!=nullptr) 
     174:	89 81       	ldd	r24, Y+1	; 0x01
     176:	28 2f       	mov	r18, r24
     178:	30 e0       	ldi	r19, 0x00	; 0
     17a:	c9 01       	movw	r24, r18
     17c:	88 0f       	add	r24, r24
     17e:	99 1f       	adc	r25, r25
     180:	88 0f       	add	r24, r24
     182:	99 1f       	adc	r25, r25
     184:	82 0f       	add	r24, r18
     186:	93 1f       	adc	r25, r19
     188:	8f 5a       	subi	r24, 0xAF	; 175
     18a:	9e 4f       	sbci	r25, 0xFE	; 254
     18c:	fc 01       	movw	r30, r24
     18e:	00 81       	ld	r16, Z
     190:	11 81       	ldd	r17, Z+1	; 0x01
     192:	89 81       	ldd	r24, Y+1	; 0x01
     194:	28 2f       	mov	r18, r24
     196:	30 e0       	ldi	r19, 0x00	; 0
     198:	c9 01       	movw	r24, r18
     19a:	88 0f       	add	r24, r24
     19c:	99 1f       	adc	r25, r25
     19e:	88 0f       	add	r24, r24
     1a0:	99 1f       	adc	r25, r25
     1a2:	82 0f       	add	r24, r18
     1a4:	93 1f       	adc	r25, r19
     1a6:	8f 5a       	subi	r24, 0xAF	; 175
     1a8:	9e 4f       	sbci	r25, 0xFE	; 254
     1aa:	fc 01       	movw	r30, r24
     1ac:	80 81       	ld	r24, Z
     1ae:	91 81       	ldd	r25, Z+1	; 0x01
     1b0:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <strlen>
     1b4:	9c 01       	movw	r18, r24
     1b6:	8b 85       	ldd	r24, Y+11	; 0x0b
     1b8:	9c 85       	ldd	r25, Y+12	; 0x0c
     1ba:	60 e2       	ldi	r22, 0x20	; 32
     1bc:	70 e0       	ldi	r23, 0x00	; 0
     1be:	a8 01       	movw	r20, r16
     1c0:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <memmem>
     1c4:	00 97       	sbiw	r24, 0x00	; 0
     1c6:	e1 f0       	breq	.+56     	; 0x200 <decomposeCommand+0xb4>
		{ 
			*commandT = availableCommand[index]; break; 
     1c8:	89 81       	ldd	r24, Y+1	; 0x01
     1ca:	28 2f       	mov	r18, r24
     1cc:	30 e0       	ldi	r19, 0x00	; 0
     1ce:	4d 85       	ldd	r20, Y+13	; 0x0d
     1d0:	5e 85       	ldd	r21, Y+14	; 0x0e
     1d2:	c9 01       	movw	r24, r18
     1d4:	88 0f       	add	r24, r24
     1d6:	99 1f       	adc	r25, r25
     1d8:	88 0f       	add	r24, r24
     1da:	99 1f       	adc	r25, r25
     1dc:	82 0f       	add	r24, r18
     1de:	93 1f       	adc	r25, r19
     1e0:	9c 01       	movw	r18, r24
     1e2:	2f 5a       	subi	r18, 0xAF	; 175
     1e4:	3e 4f       	sbci	r19, 0xFE	; 254
     1e6:	ca 01       	movw	r24, r20
     1e8:	45 e0       	ldi	r20, 0x05	; 5
     1ea:	f9 01       	movw	r30, r18
     1ec:	00 80       	ld	r0, Z
     1ee:	2f 5f       	subi	r18, 0xFF	; 255
     1f0:	3f 4f       	sbci	r19, 0xFF	; 255
     1f2:	fc 01       	movw	r30, r24
     1f4:	00 82       	st	Z, r0
     1f6:	01 96       	adiw	r24, 0x01	; 1
     1f8:	41 50       	subi	r20, 0x01	; 1
     1fa:	44 23       	and	r20, r20
     1fc:	b1 f7       	brne	.-20     	; 0x1ea <decomposeCommand+0x9e>
     1fe:	0c c0       	rjmp	.+24     	; 0x218 <decomposeCommand+0xcc>
		}
		else if (index==(AVAILABLE_COMMANDS-1)) { return false;}
     200:	89 81       	ldd	r24, Y+1	; 0x01
     202:	82 30       	cpi	r24, 0x02	; 2
     204:	11 f4       	brne	.+4      	; 0x20a <decomposeCommand+0xbe>
     206:	80 e0       	ldi	r24, 0x00	; 0
     208:	77 c0       	rjmp	.+238    	; 0x2f8 <decomposeCommand+0x1ac>
	*startParamPTR='\0';
}

bool decomposeCommand(void* input_buffer, commandType* commandT, void** outputParameter){
	
	for (uint8_t index = 0; index < AVAILABLE_COMMANDS; index++){
     20a:	89 81       	ldd	r24, Y+1	; 0x01
     20c:	8f 5f       	subi	r24, 0xFF	; 255
     20e:	89 83       	std	Y+1, r24	; 0x01
     210:	89 81       	ldd	r24, Y+1	; 0x01
     212:	83 30       	cpi	r24, 0x03	; 3
     214:	08 f4       	brcc	.+2      	; 0x218 <decomposeCommand+0xcc>
     216:	ae cf       	rjmp	.-164    	; 0x174 <decomposeCommand+0x28>
			*commandT = availableCommand[index]; break; 
		}
		else if (index==(AVAILABLE_COMMANDS-1)) { return false;}
	}
	
	for (uint8_t x = 0; x < commandT->nParameters; x++){
     218:	1a 82       	std	Y+2, r1	; 0x02
     21a:	63 c0       	rjmp	.+198    	; 0x2e2 <decomposeCommand+0x196>
		uint8_t* startNumPTR = memchr(input_buffer, '[', COMMAND_BUFFER_SIZE);
     21c:	8b 85       	ldd	r24, Y+11	; 0x0b
     21e:	9c 85       	ldd	r25, Y+12	; 0x0c
     220:	6b e5       	ldi	r22, 0x5B	; 91
     222:	70 e0       	ldi	r23, 0x00	; 0
     224:	40 e2       	ldi	r20, 0x20	; 32
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	0e 94 f7 16 	call	0x2dee	; 0x2dee <memchr>
     22c:	9c 83       	std	Y+4, r25	; 0x04
     22e:	8b 83       	std	Y+3, r24	; 0x03
		uint8_t* endNumPTR = memchr(input_buffer, ']', COMMAND_BUFFER_SIZE);
     230:	8b 85       	ldd	r24, Y+11	; 0x0b
     232:	9c 85       	ldd	r25, Y+12	; 0x0c
     234:	6d e5       	ldi	r22, 0x5D	; 93
     236:	70 e0       	ldi	r23, 0x00	; 0
     238:	40 e2       	ldi	r20, 0x20	; 32
     23a:	50 e0       	ldi	r21, 0x00	; 0
     23c:	0e 94 f7 16 	call	0x2dee	; 0x2dee <memchr>
     240:	9e 83       	std	Y+6, r25	; 0x06
     242:	8d 83       	std	Y+5, r24	; 0x05
		if (startNumPTR==nullptr||endNumPTR==nullptr) { if(x==0) return false; break; }
     244:	8b 81       	ldd	r24, Y+3	; 0x03
     246:	9c 81       	ldd	r25, Y+4	; 0x04
     248:	00 97       	sbiw	r24, 0x00	; 0
     24a:	21 f0       	breq	.+8      	; 0x254 <decomposeCommand+0x108>
     24c:	8d 81       	ldd	r24, Y+5	; 0x05
     24e:	9e 81       	ldd	r25, Y+6	; 0x06
     250:	00 97       	sbiw	r24, 0x00	; 0
     252:	31 f4       	brne	.+12     	; 0x260 <decomposeCommand+0x114>
     254:	8a 81       	ldd	r24, Y+2	; 0x02
     256:	88 23       	and	r24, r24
     258:	09 f0       	breq	.+2      	; 0x25c <decomposeCommand+0x110>
     25a:	4c c0       	rjmp	.+152    	; 0x2f4 <decomposeCommand+0x1a8>
     25c:	80 e0       	ldi	r24, 0x00	; 0
     25e:	4c c0       	rjmp	.+152    	; 0x2f8 <decomposeCommand+0x1ac>
		(*startNumPTR) = 0x20;
     260:	8b 81       	ldd	r24, Y+3	; 0x03
     262:	9c 81       	ldd	r25, Y+4	; 0x04
     264:	20 e2       	ldi	r18, 0x20	; 32
     266:	fc 01       	movw	r30, r24
     268:	20 83       	st	Z, r18
		(*endNumPTR) = 0x20;
     26a:	8d 81       	ldd	r24, Y+5	; 0x05
     26c:	9e 81       	ldd	r25, Y+6	; 0x06
     26e:	20 e2       	ldi	r18, 0x20	; 32
     270:	fc 01       	movw	r30, r24
     272:	20 83       	st	Z, r18
		startNumPTR++;
     274:	8b 81       	ldd	r24, Y+3	; 0x03
     276:	9c 81       	ldd	r25, Y+4	; 0x04
     278:	01 96       	adiw	r24, 0x01	; 1
     27a:	9c 83       	std	Y+4, r25	; 0x04
     27c:	8b 83       	std	Y+3, r24	; 0x03
		uint32_t bytes = ((endNumPTR)) - ((startNumPTR));
     27e:	2d 81       	ldd	r18, Y+5	; 0x05
     280:	3e 81       	ldd	r19, Y+6	; 0x06
     282:	8b 81       	ldd	r24, Y+3	; 0x03
     284:	9c 81       	ldd	r25, Y+4	; 0x04
     286:	a9 01       	movw	r20, r18
     288:	48 1b       	sub	r20, r24
     28a:	59 0b       	sbc	r21, r25
     28c:	ca 01       	movw	r24, r20
     28e:	aa 27       	eor	r26, r26
     290:	97 fd       	sbrc	r25, 7
     292:	a0 95       	com	r26
     294:	ba 2f       	mov	r27, r26
     296:	8f 83       	std	Y+7, r24	; 0x07
     298:	98 87       	std	Y+8, r25	; 0x08
     29a:	a9 87       	std	Y+9, r26	; 0x09
     29c:	ba 87       	std	Y+10, r27	; 0x0a
		if (bytes>PARAMETER_BUFFER_SIZE) return false;
     29e:	8f 81       	ldd	r24, Y+7	; 0x07
     2a0:	98 85       	ldd	r25, Y+8	; 0x08
     2a2:	a9 85       	ldd	r26, Y+9	; 0x09
     2a4:	ba 85       	ldd	r27, Y+10	; 0x0a
     2a6:	8d 31       	cpi	r24, 0x1D	; 29
     2a8:	91 05       	cpc	r25, r1
     2aa:	a1 05       	cpc	r26, r1
     2ac:	b1 05       	cpc	r27, r1
     2ae:	10 f0       	brcs	.+4      	; 0x2b4 <decomposeCommand+0x168>
     2b0:	80 e0       	ldi	r24, 0x00	; 0
     2b2:	22 c0       	rjmp	.+68     	; 0x2f8 <decomposeCommand+0x1ac>
		memcpy(outputParameter[x], startNumPTR, bytes);
     2b4:	8a 81       	ldd	r24, Y+2	; 0x02
     2b6:	88 2f       	mov	r24, r24
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	88 0f       	add	r24, r24
     2bc:	99 1f       	adc	r25, r25
     2be:	2f 85       	ldd	r18, Y+15	; 0x0f
     2c0:	38 89       	ldd	r19, Y+16	; 0x10
     2c2:	82 0f       	add	r24, r18
     2c4:	93 1f       	adc	r25, r19
     2c6:	fc 01       	movw	r30, r24
     2c8:	80 81       	ld	r24, Z
     2ca:	91 81       	ldd	r25, Z+1	; 0x01
     2cc:	2f 81       	ldd	r18, Y+7	; 0x07
     2ce:	38 85       	ldd	r19, Y+8	; 0x08
     2d0:	4b 81       	ldd	r20, Y+3	; 0x03
     2d2:	5c 81       	ldd	r21, Y+4	; 0x04
     2d4:	ba 01       	movw	r22, r20
     2d6:	a9 01       	movw	r20, r18
     2d8:	0e 94 04 17 	call	0x2e08	; 0x2e08 <memcpy>
			*commandT = availableCommand[index]; break; 
		}
		else if (index==(AVAILABLE_COMMANDS-1)) { return false;}
	}
	
	for (uint8_t x = 0; x < commandT->nParameters; x++){
     2dc:	8a 81       	ldd	r24, Y+2	; 0x02
     2de:	8f 5f       	subi	r24, 0xFF	; 255
     2e0:	8a 83       	std	Y+2, r24	; 0x02
     2e2:	8d 85       	ldd	r24, Y+13	; 0x0d
     2e4:	9e 85       	ldd	r25, Y+14	; 0x0e
     2e6:	fc 01       	movw	r30, r24
     2e8:	92 81       	ldd	r25, Z+2	; 0x02
     2ea:	8a 81       	ldd	r24, Y+2	; 0x02
     2ec:	89 17       	cp	r24, r25
     2ee:	08 f4       	brcc	.+2      	; 0x2f2 <decomposeCommand+0x1a6>
     2f0:	95 cf       	rjmp	.-214    	; 0x21c <decomposeCommand+0xd0>
     2f2:	01 c0       	rjmp	.+2      	; 0x2f6 <decomposeCommand+0x1aa>
		uint8_t* startNumPTR = memchr(input_buffer, '[', COMMAND_BUFFER_SIZE);
		uint8_t* endNumPTR = memchr(input_buffer, ']', COMMAND_BUFFER_SIZE);
		if (startNumPTR==nullptr||endNumPTR==nullptr) { if(x==0) return false; break; }
     2f4:	00 00       	nop
		uint32_t bytes = ((endNumPTR)) - ((startNumPTR));
		if (bytes>PARAMETER_BUFFER_SIZE) return false;
		memcpy(outputParameter[x], startNumPTR, bytes);
	}

	return true;
     2f6:	81 e0       	ldi	r24, 0x01	; 1
}
     2f8:	60 96       	adiw	r28, 0x10	; 16
     2fa:	0f b6       	in	r0, 0x3f	; 63
     2fc:	f8 94       	cli
     2fe:	de bf       	out	0x3e, r29	; 62
     300:	0f be       	out	0x3f, r0	; 63
     302:	cd bf       	out	0x3d, r28	; 61
     304:	cf 91       	pop	r28
     306:	df 91       	pop	r29
     308:	1f 91       	pop	r17
     30a:	0f 91       	pop	r16
     30c:	08 95       	ret

0000030e <CURTAIN_POS_CHANGE_HANDLE>:
uint8_t currentCurtainPosition = 0;
uint8_t currentStretcherPosition = 0;

#define MOTOR_SPEED_MS 1
	
void CURTAIN_POS_CHANGE_HANDLE(){
     30e:	0f 93       	push	r16
     310:	1f 93       	push	r17
     312:	df 93       	push	r29
     314:	cf 93       	push	r28
     316:	cd b7       	in	r28, 0x3d	; 61
     318:	de b7       	in	r29, 0x3e	; 62
     31a:	c7 57       	subi	r28, 0x77	; 119
     31c:	d0 40       	sbci	r29, 0x00	; 0
     31e:	0f b6       	in	r0, 0x3f	; 63
     320:	f8 94       	cli
     322:	de bf       	out	0x3e, r29	; 62
     324:	0f be       	out	0x3f, r0	; 63
     326:	cd bf       	out	0x3d, r28	; 61
	bit_set(PORTB, BIT(1));
     328:	85 e2       	ldi	r24, 0x25	; 37
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	25 e2       	ldi	r18, 0x25	; 37
     32e:	30 e0       	ldi	r19, 0x00	; 0
     330:	f9 01       	movw	r30, r18
     332:	20 81       	ld	r18, Z
     334:	22 60       	ori	r18, 0x02	; 2
     336:	fc 01       	movw	r30, r24
     338:	20 83       	st	Z, r18
	bit_set(PORTB, BIT(2));
     33a:	85 e2       	ldi	r24, 0x25	; 37
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	25 e2       	ldi	r18, 0x25	; 37
     340:	30 e0       	ldi	r19, 0x00	; 0
     342:	f9 01       	movw	r30, r18
     344:	20 81       	ld	r18, Z
     346:	24 60       	ori	r18, 0x04	; 4
     348:	fc 01       	movw	r30, r24
     34a:	20 83       	st	Z, r18
	
	uint8_t positionToMove =  atoi(parameter[0]);
     34c:	80 91 62 01 	lds	r24, 0x0162
     350:	90 91 63 01 	lds	r25, 0x0163
     354:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <atoi>
     358:	8d 83       	std	Y+5, r24	; 0x05
	if (positionToMove<8) {
     35a:	8d 81       	ldd	r24, Y+5	; 0x05
     35c:	88 30       	cpi	r24, 0x08	; 8
     35e:	08 f0       	brcs	.+2      	; 0x362 <CURTAIN_POS_CHANGE_HANDLE+0x54>
     360:	c3 c5       	rjmp	.+2950   	; 0xee8 <__stack+0x5e9>
		uint16_t degreesToMove = abs(positionToMove-currentCurtainPosition)*175;
     362:	8d 81       	ldd	r24, Y+5	; 0x05
     364:	28 2f       	mov	r18, r24
     366:	30 e0       	ldi	r19, 0x00	; 0
     368:	80 91 60 01 	lds	r24, 0x0160
     36c:	88 2f       	mov	r24, r24
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	a9 01       	movw	r20, r18
     372:	48 1b       	sub	r20, r24
     374:	59 0b       	sbc	r21, r25
     376:	ca 01       	movw	r24, r20
     378:	99 23       	and	r25, r25
     37a:	1c f4       	brge	.+6      	; 0x382 <CURTAIN_POS_CHANGE_HANDLE+0x74>
     37c:	90 95       	com	r25
     37e:	81 95       	neg	r24
     380:	9f 4f       	sbci	r25, 0xFF	; 255
     382:	ac 01       	movw	r20, r24
     384:	2f ea       	ldi	r18, 0xAF	; 175
     386:	30 e0       	ldi	r19, 0x00	; 0
     388:	42 9f       	mul	r20, r18
     38a:	c0 01       	movw	r24, r0
     38c:	43 9f       	mul	r20, r19
     38e:	90 0d       	add	r25, r0
     390:	52 9f       	mul	r21, r18
     392:	90 0d       	add	r25, r0
     394:	11 24       	eor	r1, r1
     396:	9f 83       	std	Y+7, r25	; 0x07
     398:	8e 83       	std	Y+6, r24	; 0x06
	
		if((positionToMove-currentCurtainPosition)>0){
     39a:	8d 81       	ldd	r24, Y+5	; 0x05
     39c:	28 2f       	mov	r18, r24
     39e:	30 e0       	ldi	r19, 0x00	; 0
     3a0:	80 91 60 01 	lds	r24, 0x0160
     3a4:	88 2f       	mov	r24, r24
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	f9 01       	movw	r30, r18
     3aa:	e8 1b       	sub	r30, r24
     3ac:	f9 0b       	sbc	r31, r25
     3ae:	cf 01       	movw	r24, r30
     3b0:	18 16       	cp	r1, r24
     3b2:	19 06       	cpc	r1, r25
     3b4:	0c f0       	brlt	.+2      	; 0x3b8 <CURTAIN_POS_CHANGE_HANDLE+0xaa>
     3b6:	25 c2       	rjmp	.+1098   	; 0x802 <CURTAIN_POS_CHANGE_HANDLE+0x4f4>
			for (uint16_t x = 0; x < degreesToMove;x++){
     3b8:	1a 82       	std	Y+2, r1	; 0x02
     3ba:	19 82       	std	Y+1, r1	; 0x01
     3bc:	19 c2       	rjmp	.+1074   	; 0x7f0 <CURTAIN_POS_CHANGE_HANDLE+0x4e2>
				PORTD = 0b00000011;
     3be:	8b e2       	ldi	r24, 0x2B	; 43
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	23 e0       	ldi	r18, 0x03	; 3
     3c4:	fc 01       	movw	r30, r24
     3c6:	20 83       	st	Z, r18
     3c8:	80 e0       	ldi	r24, 0x00	; 0
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	a0 e8       	ldi	r26, 0x80	; 128
     3ce:	bf e3       	ldi	r27, 0x3F	; 63
     3d0:	88 87       	std	Y+8, r24	; 0x08
     3d2:	99 87       	std	Y+9, r25	; 0x09
     3d4:	aa 87       	std	Y+10, r26	; 0x0a
     3d6:	bb 87       	std	Y+11, r27	; 0x0b
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     3d8:	68 85       	ldd	r22, Y+8	; 0x08
     3da:	79 85       	ldd	r23, Y+9	; 0x09
     3dc:	8a 85       	ldd	r24, Y+10	; 0x0a
     3de:	9b 85       	ldd	r25, Y+11	; 0x0b
     3e0:	20 e0       	ldi	r18, 0x00	; 0
     3e2:	30 e0       	ldi	r19, 0x00	; 0
     3e4:	4a e7       	ldi	r20, 0x7A	; 122
     3e6:	55 e4       	ldi	r21, 0x45	; 69
     3e8:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__mulsf3>
     3ec:	dc 01       	movw	r26, r24
     3ee:	cb 01       	movw	r24, r22
     3f0:	8c 87       	std	Y+12, r24	; 0x0c
     3f2:	9d 87       	std	Y+13, r25	; 0x0d
     3f4:	ae 87       	std	Y+14, r26	; 0x0e
     3f6:	bf 87       	std	Y+15, r27	; 0x0f
	if (__tmp < 1.0)
     3f8:	11 e0       	ldi	r17, 0x01	; 1
     3fa:	6c 85       	ldd	r22, Y+12	; 0x0c
     3fc:	7d 85       	ldd	r23, Y+13	; 0x0d
     3fe:	8e 85       	ldd	r24, Y+14	; 0x0e
     400:	9f 85       	ldd	r25, Y+15	; 0x0f
     402:	20 e0       	ldi	r18, 0x00	; 0
     404:	30 e0       	ldi	r19, 0x00	; 0
     406:	40 e8       	ldi	r20, 0x80	; 128
     408:	5f e3       	ldi	r21, 0x3F	; 63
     40a:	0e 94 76 14 	call	0x28ec	; 0x28ec <__cmpsf2>
     40e:	88 23       	and	r24, r24
     410:	0c f0       	brlt	.+2      	; 0x414 <CURTAIN_POS_CHANGE_HANDLE+0x106>
     412:	10 e0       	ldi	r17, 0x00	; 0
     414:	11 23       	and	r17, r17
     416:	29 f0       	breq	.+10     	; 0x422 <CURTAIN_POS_CHANGE_HANDLE+0x114>
		__ticks = 1;
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	99 8b       	std	Y+17, r25	; 0x11
     41e:	88 8b       	std	Y+16, r24	; 0x10
     420:	46 c0       	rjmp	.+140    	; 0x4ae <CURTAIN_POS_CHANGE_HANDLE+0x1a0>
	else if (__tmp > 65535)
     422:	11 e0       	ldi	r17, 0x01	; 1
     424:	6c 85       	ldd	r22, Y+12	; 0x0c
     426:	7d 85       	ldd	r23, Y+13	; 0x0d
     428:	8e 85       	ldd	r24, Y+14	; 0x0e
     42a:	9f 85       	ldd	r25, Y+15	; 0x0f
     42c:	20 e0       	ldi	r18, 0x00	; 0
     42e:	3f ef       	ldi	r19, 0xFF	; 255
     430:	4f e7       	ldi	r20, 0x7F	; 127
     432:	57 e4       	ldi	r21, 0x47	; 71
     434:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__gesf2>
     438:	18 16       	cp	r1, r24
     43a:	0c f0       	brlt	.+2      	; 0x43e <CURTAIN_POS_CHANGE_HANDLE+0x130>
     43c:	10 e0       	ldi	r17, 0x00	; 0
     43e:	11 23       	and	r17, r17
     440:	61 f1       	breq	.+88     	; 0x49a <CURTAIN_POS_CHANGE_HANDLE+0x18c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     442:	68 85       	ldd	r22, Y+8	; 0x08
     444:	79 85       	ldd	r23, Y+9	; 0x09
     446:	8a 85       	ldd	r24, Y+10	; 0x0a
     448:	9b 85       	ldd	r25, Y+11	; 0x0b
     44a:	20 e0       	ldi	r18, 0x00	; 0
     44c:	30 e0       	ldi	r19, 0x00	; 0
     44e:	40 e2       	ldi	r20, 0x20	; 32
     450:	51 e4       	ldi	r21, 0x41	; 65
     452:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__mulsf3>
     456:	dc 01       	movw	r26, r24
     458:	cb 01       	movw	r24, r22
     45a:	bc 01       	movw	r22, r24
     45c:	cd 01       	movw	r24, r26
     45e:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <__fixunssfsi>
     462:	dc 01       	movw	r26, r24
     464:	cb 01       	movw	r24, r22
     466:	99 8b       	std	Y+17, r25	; 0x11
     468:	88 8b       	std	Y+16, r24	; 0x10
     46a:	12 c0       	rjmp	.+36     	; 0x490 <CURTAIN_POS_CHANGE_HANDLE+0x182>
     46c:	80 e9       	ldi	r24, 0x90	; 144
     46e:	91 e0       	ldi	r25, 0x01	; 1
     470:	9b 8b       	std	Y+19, r25	; 0x13
     472:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     474:	8a 89       	ldd	r24, Y+18	; 0x12
     476:	9b 89       	ldd	r25, Y+19	; 0x13
     478:	8c 01       	movw	r16, r24
     47a:	c8 01       	movw	r24, r16
     47c:	01 97       	sbiw	r24, 0x01	; 1
     47e:	f1 f7       	brne	.-4      	; 0x47c <CURTAIN_POS_CHANGE_HANDLE+0x16e>
     480:	8c 01       	movw	r16, r24
     482:	1b 8b       	std	Y+19, r17	; 0x13
     484:	0a 8b       	std	Y+18, r16	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     486:	88 89       	ldd	r24, Y+16	; 0x10
     488:	99 89       	ldd	r25, Y+17	; 0x11
     48a:	01 97       	sbiw	r24, 0x01	; 1
     48c:	99 8b       	std	Y+17, r25	; 0x11
     48e:	88 8b       	std	Y+16, r24	; 0x10
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     490:	88 89       	ldd	r24, Y+16	; 0x10
     492:	99 89       	ldd	r25, Y+17	; 0x11
     494:	00 97       	sbiw	r24, 0x00	; 0
     496:	51 f7       	brne	.-44     	; 0x46c <CURTAIN_POS_CHANGE_HANDLE+0x15e>
     498:	17 c0       	rjmp	.+46     	; 0x4c8 <CURTAIN_POS_CHANGE_HANDLE+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     49a:	6c 85       	ldd	r22, Y+12	; 0x0c
     49c:	7d 85       	ldd	r23, Y+13	; 0x0d
     49e:	8e 85       	ldd	r24, Y+14	; 0x0e
     4a0:	9f 85       	ldd	r25, Y+15	; 0x0f
     4a2:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <__fixunssfsi>
     4a6:	dc 01       	movw	r26, r24
     4a8:	cb 01       	movw	r24, r22
     4aa:	99 8b       	std	Y+17, r25	; 0x11
     4ac:	88 8b       	std	Y+16, r24	; 0x10
     4ae:	88 89       	ldd	r24, Y+16	; 0x10
     4b0:	99 89       	ldd	r25, Y+17	; 0x11
     4b2:	9d 8b       	std	Y+21, r25	; 0x15
     4b4:	8c 8b       	std	Y+20, r24	; 0x14
     4b6:	8c 89       	ldd	r24, Y+20	; 0x14
     4b8:	9d 89       	ldd	r25, Y+21	; 0x15
     4ba:	8c 01       	movw	r16, r24
     4bc:	f8 01       	movw	r30, r16
     4be:	31 97       	sbiw	r30, 0x01	; 1
     4c0:	f1 f7       	brne	.-4      	; 0x4be <CURTAIN_POS_CHANGE_HANDLE+0x1b0>
     4c2:	8f 01       	movw	r16, r30
     4c4:	1d 8b       	std	Y+21, r17	; 0x15
     4c6:	0c 8b       	std	Y+20, r16	; 0x14
				_delay_ms(MOTOR_SPEED_MS);
				PORTD = 0b00000110;
     4c8:	8b e2       	ldi	r24, 0x2B	; 43
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	26 e0       	ldi	r18, 0x06	; 6
     4ce:	fc 01       	movw	r30, r24
     4d0:	20 83       	st	Z, r18
     4d2:	80 e0       	ldi	r24, 0x00	; 0
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	a0 e8       	ldi	r26, 0x80	; 128
     4d8:	bf e3       	ldi	r27, 0x3F	; 63
     4da:	8e 8b       	std	Y+22, r24	; 0x16
     4dc:	9f 8b       	std	Y+23, r25	; 0x17
     4de:	a8 8f       	std	Y+24, r26	; 0x18
     4e0:	b9 8f       	std	Y+25, r27	; 0x19
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     4e2:	6e 89       	ldd	r22, Y+22	; 0x16
     4e4:	7f 89       	ldd	r23, Y+23	; 0x17
     4e6:	88 8d       	ldd	r24, Y+24	; 0x18
     4e8:	99 8d       	ldd	r25, Y+25	; 0x19
     4ea:	20 e0       	ldi	r18, 0x00	; 0
     4ec:	30 e0       	ldi	r19, 0x00	; 0
     4ee:	4a e7       	ldi	r20, 0x7A	; 122
     4f0:	55 e4       	ldi	r21, 0x45	; 69
     4f2:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__mulsf3>
     4f6:	dc 01       	movw	r26, r24
     4f8:	cb 01       	movw	r24, r22
     4fa:	8a 8f       	std	Y+26, r24	; 0x1a
     4fc:	9b 8f       	std	Y+27, r25	; 0x1b
     4fe:	ac 8f       	std	Y+28, r26	; 0x1c
     500:	bd 8f       	std	Y+29, r27	; 0x1d
	if (__tmp < 1.0)
     502:	11 e0       	ldi	r17, 0x01	; 1
     504:	6a 8d       	ldd	r22, Y+26	; 0x1a
     506:	7b 8d       	ldd	r23, Y+27	; 0x1b
     508:	8c 8d       	ldd	r24, Y+28	; 0x1c
     50a:	9d 8d       	ldd	r25, Y+29	; 0x1d
     50c:	20 e0       	ldi	r18, 0x00	; 0
     50e:	30 e0       	ldi	r19, 0x00	; 0
     510:	40 e8       	ldi	r20, 0x80	; 128
     512:	5f e3       	ldi	r21, 0x3F	; 63
     514:	0e 94 76 14 	call	0x28ec	; 0x28ec <__cmpsf2>
     518:	88 23       	and	r24, r24
     51a:	0c f0       	brlt	.+2      	; 0x51e <CURTAIN_POS_CHANGE_HANDLE+0x210>
     51c:	10 e0       	ldi	r17, 0x00	; 0
     51e:	11 23       	and	r17, r17
     520:	29 f0       	breq	.+10     	; 0x52c <CURTAIN_POS_CHANGE_HANDLE+0x21e>
		__ticks = 1;
     522:	81 e0       	ldi	r24, 0x01	; 1
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	9f 8f       	std	Y+31, r25	; 0x1f
     528:	8e 8f       	std	Y+30, r24	; 0x1e
     52a:	46 c0       	rjmp	.+140    	; 0x5b8 <CURTAIN_POS_CHANGE_HANDLE+0x2aa>
	else if (__tmp > 65535)
     52c:	11 e0       	ldi	r17, 0x01	; 1
     52e:	6a 8d       	ldd	r22, Y+26	; 0x1a
     530:	7b 8d       	ldd	r23, Y+27	; 0x1b
     532:	8c 8d       	ldd	r24, Y+28	; 0x1c
     534:	9d 8d       	ldd	r25, Y+29	; 0x1d
     536:	20 e0       	ldi	r18, 0x00	; 0
     538:	3f ef       	ldi	r19, 0xFF	; 255
     53a:	4f e7       	ldi	r20, 0x7F	; 127
     53c:	57 e4       	ldi	r21, 0x47	; 71
     53e:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__gesf2>
     542:	18 16       	cp	r1, r24
     544:	0c f0       	brlt	.+2      	; 0x548 <CURTAIN_POS_CHANGE_HANDLE+0x23a>
     546:	10 e0       	ldi	r17, 0x00	; 0
     548:	11 23       	and	r17, r17
     54a:	61 f1       	breq	.+88     	; 0x5a4 <CURTAIN_POS_CHANGE_HANDLE+0x296>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     54c:	6e 89       	ldd	r22, Y+22	; 0x16
     54e:	7f 89       	ldd	r23, Y+23	; 0x17
     550:	88 8d       	ldd	r24, Y+24	; 0x18
     552:	99 8d       	ldd	r25, Y+25	; 0x19
     554:	20 e0       	ldi	r18, 0x00	; 0
     556:	30 e0       	ldi	r19, 0x00	; 0
     558:	40 e2       	ldi	r20, 0x20	; 32
     55a:	51 e4       	ldi	r21, 0x41	; 65
     55c:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__mulsf3>
     560:	dc 01       	movw	r26, r24
     562:	cb 01       	movw	r24, r22
     564:	bc 01       	movw	r22, r24
     566:	cd 01       	movw	r24, r26
     568:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <__fixunssfsi>
     56c:	dc 01       	movw	r26, r24
     56e:	cb 01       	movw	r24, r22
     570:	9f 8f       	std	Y+31, r25	; 0x1f
     572:	8e 8f       	std	Y+30, r24	; 0x1e
     574:	12 c0       	rjmp	.+36     	; 0x59a <CURTAIN_POS_CHANGE_HANDLE+0x28c>
     576:	80 e9       	ldi	r24, 0x90	; 144
     578:	91 e0       	ldi	r25, 0x01	; 1
     57a:	99 a3       	std	Y+33, r25	; 0x21
     57c:	88 a3       	std	Y+32, r24	; 0x20
     57e:	88 a1       	ldd	r24, Y+32	; 0x20
     580:	99 a1       	ldd	r25, Y+33	; 0x21
     582:	8c 01       	movw	r16, r24
     584:	c8 01       	movw	r24, r16
     586:	01 97       	sbiw	r24, 0x01	; 1
     588:	f1 f7       	brne	.-4      	; 0x586 <CURTAIN_POS_CHANGE_HANDLE+0x278>
     58a:	8c 01       	movw	r16, r24
     58c:	19 a3       	std	Y+33, r17	; 0x21
     58e:	08 a3       	std	Y+32, r16	; 0x20
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     590:	8e 8d       	ldd	r24, Y+30	; 0x1e
     592:	9f 8d       	ldd	r25, Y+31	; 0x1f
     594:	01 97       	sbiw	r24, 0x01	; 1
     596:	9f 8f       	std	Y+31, r25	; 0x1f
     598:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     59a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     59c:	9f 8d       	ldd	r25, Y+31	; 0x1f
     59e:	00 97       	sbiw	r24, 0x00	; 0
     5a0:	51 f7       	brne	.-44     	; 0x576 <CURTAIN_POS_CHANGE_HANDLE+0x268>
     5a2:	17 c0       	rjmp	.+46     	; 0x5d2 <CURTAIN_POS_CHANGE_HANDLE+0x2c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5a4:	6a 8d       	ldd	r22, Y+26	; 0x1a
     5a6:	7b 8d       	ldd	r23, Y+27	; 0x1b
     5a8:	8c 8d       	ldd	r24, Y+28	; 0x1c
     5aa:	9d 8d       	ldd	r25, Y+29	; 0x1d
     5ac:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <__fixunssfsi>
     5b0:	dc 01       	movw	r26, r24
     5b2:	cb 01       	movw	r24, r22
     5b4:	9f 8f       	std	Y+31, r25	; 0x1f
     5b6:	8e 8f       	std	Y+30, r24	; 0x1e
     5b8:	8e 8d       	ldd	r24, Y+30	; 0x1e
     5ba:	9f 8d       	ldd	r25, Y+31	; 0x1f
     5bc:	9b a3       	std	Y+35, r25	; 0x23
     5be:	8a a3       	std	Y+34, r24	; 0x22
     5c0:	8a a1       	ldd	r24, Y+34	; 0x22
     5c2:	9b a1       	ldd	r25, Y+35	; 0x23
     5c4:	8c 01       	movw	r16, r24
     5c6:	f8 01       	movw	r30, r16
     5c8:	31 97       	sbiw	r30, 0x01	; 1
     5ca:	f1 f7       	brne	.-4      	; 0x5c8 <CURTAIN_POS_CHANGE_HANDLE+0x2ba>
     5cc:	8f 01       	movw	r16, r30
     5ce:	1b a3       	std	Y+35, r17	; 0x23
     5d0:	0a a3       	std	Y+34, r16	; 0x22
				_delay_ms(MOTOR_SPEED_MS);
				PORTD = 0b00001100;
     5d2:	8b e2       	ldi	r24, 0x2B	; 43
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	2c e0       	ldi	r18, 0x0C	; 12
     5d8:	fc 01       	movw	r30, r24
     5da:	20 83       	st	Z, r18
     5dc:	80 e0       	ldi	r24, 0x00	; 0
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	a0 e8       	ldi	r26, 0x80	; 128
     5e2:	bf e3       	ldi	r27, 0x3F	; 63
     5e4:	8c a3       	std	Y+36, r24	; 0x24
     5e6:	9d a3       	std	Y+37, r25	; 0x25
     5e8:	ae a3       	std	Y+38, r26	; 0x26
     5ea:	bf a3       	std	Y+39, r27	; 0x27
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     5ec:	6c a1       	ldd	r22, Y+36	; 0x24
     5ee:	7d a1       	ldd	r23, Y+37	; 0x25
     5f0:	8e a1       	ldd	r24, Y+38	; 0x26
     5f2:	9f a1       	ldd	r25, Y+39	; 0x27
     5f4:	20 e0       	ldi	r18, 0x00	; 0
     5f6:	30 e0       	ldi	r19, 0x00	; 0
     5f8:	4a e7       	ldi	r20, 0x7A	; 122
     5fa:	55 e4       	ldi	r21, 0x45	; 69
     5fc:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__mulsf3>
     600:	dc 01       	movw	r26, r24
     602:	cb 01       	movw	r24, r22
     604:	88 a7       	std	Y+40, r24	; 0x28
     606:	99 a7       	std	Y+41, r25	; 0x29
     608:	aa a7       	std	Y+42, r26	; 0x2a
     60a:	bb a7       	std	Y+43, r27	; 0x2b
	if (__tmp < 1.0)
     60c:	11 e0       	ldi	r17, 0x01	; 1
     60e:	68 a5       	ldd	r22, Y+40	; 0x28
     610:	79 a5       	ldd	r23, Y+41	; 0x29
     612:	8a a5       	ldd	r24, Y+42	; 0x2a
     614:	9b a5       	ldd	r25, Y+43	; 0x2b
     616:	20 e0       	ldi	r18, 0x00	; 0
     618:	30 e0       	ldi	r19, 0x00	; 0
     61a:	40 e8       	ldi	r20, 0x80	; 128
     61c:	5f e3       	ldi	r21, 0x3F	; 63
     61e:	0e 94 76 14 	call	0x28ec	; 0x28ec <__cmpsf2>
     622:	88 23       	and	r24, r24
     624:	0c f0       	brlt	.+2      	; 0x628 <CURTAIN_POS_CHANGE_HANDLE+0x31a>
     626:	10 e0       	ldi	r17, 0x00	; 0
     628:	11 23       	and	r17, r17
     62a:	29 f0       	breq	.+10     	; 0x636 <CURTAIN_POS_CHANGE_HANDLE+0x328>
		__ticks = 1;
     62c:	81 e0       	ldi	r24, 0x01	; 1
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	9d a7       	std	Y+45, r25	; 0x2d
     632:	8c a7       	std	Y+44, r24	; 0x2c
     634:	46 c0       	rjmp	.+140    	; 0x6c2 <CURTAIN_POS_CHANGE_HANDLE+0x3b4>
	else if (__tmp > 65535)
     636:	11 e0       	ldi	r17, 0x01	; 1
     638:	68 a5       	ldd	r22, Y+40	; 0x28
     63a:	79 a5       	ldd	r23, Y+41	; 0x29
     63c:	8a a5       	ldd	r24, Y+42	; 0x2a
     63e:	9b a5       	ldd	r25, Y+43	; 0x2b
     640:	20 e0       	ldi	r18, 0x00	; 0
     642:	3f ef       	ldi	r19, 0xFF	; 255
     644:	4f e7       	ldi	r20, 0x7F	; 127
     646:	57 e4       	ldi	r21, 0x47	; 71
     648:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__gesf2>
     64c:	18 16       	cp	r1, r24
     64e:	0c f0       	brlt	.+2      	; 0x652 <CURTAIN_POS_CHANGE_HANDLE+0x344>
     650:	10 e0       	ldi	r17, 0x00	; 0
     652:	11 23       	and	r17, r17
     654:	61 f1       	breq	.+88     	; 0x6ae <CURTAIN_POS_CHANGE_HANDLE+0x3a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     656:	6c a1       	ldd	r22, Y+36	; 0x24
     658:	7d a1       	ldd	r23, Y+37	; 0x25
     65a:	8e a1       	ldd	r24, Y+38	; 0x26
     65c:	9f a1       	ldd	r25, Y+39	; 0x27
     65e:	20 e0       	ldi	r18, 0x00	; 0
     660:	30 e0       	ldi	r19, 0x00	; 0
     662:	40 e2       	ldi	r20, 0x20	; 32
     664:	51 e4       	ldi	r21, 0x41	; 65
     666:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__mulsf3>
     66a:	dc 01       	movw	r26, r24
     66c:	cb 01       	movw	r24, r22
     66e:	bc 01       	movw	r22, r24
     670:	cd 01       	movw	r24, r26
     672:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <__fixunssfsi>
     676:	dc 01       	movw	r26, r24
     678:	cb 01       	movw	r24, r22
     67a:	9d a7       	std	Y+45, r25	; 0x2d
     67c:	8c a7       	std	Y+44, r24	; 0x2c
     67e:	12 c0       	rjmp	.+36     	; 0x6a4 <CURTAIN_POS_CHANGE_HANDLE+0x396>
     680:	80 e9       	ldi	r24, 0x90	; 144
     682:	91 e0       	ldi	r25, 0x01	; 1
     684:	9f a7       	std	Y+47, r25	; 0x2f
     686:	8e a7       	std	Y+46, r24	; 0x2e
     688:	8e a5       	ldd	r24, Y+46	; 0x2e
     68a:	9f a5       	ldd	r25, Y+47	; 0x2f
     68c:	8c 01       	movw	r16, r24
     68e:	c8 01       	movw	r24, r16
     690:	01 97       	sbiw	r24, 0x01	; 1
     692:	f1 f7       	brne	.-4      	; 0x690 <CURTAIN_POS_CHANGE_HANDLE+0x382>
     694:	8c 01       	movw	r16, r24
     696:	1f a7       	std	Y+47, r17	; 0x2f
     698:	0e a7       	std	Y+46, r16	; 0x2e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     69a:	8c a5       	ldd	r24, Y+44	; 0x2c
     69c:	9d a5       	ldd	r25, Y+45	; 0x2d
     69e:	01 97       	sbiw	r24, 0x01	; 1
     6a0:	9d a7       	std	Y+45, r25	; 0x2d
     6a2:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6a4:	8c a5       	ldd	r24, Y+44	; 0x2c
     6a6:	9d a5       	ldd	r25, Y+45	; 0x2d
     6a8:	00 97       	sbiw	r24, 0x00	; 0
     6aa:	51 f7       	brne	.-44     	; 0x680 <CURTAIN_POS_CHANGE_HANDLE+0x372>
     6ac:	17 c0       	rjmp	.+46     	; 0x6dc <CURTAIN_POS_CHANGE_HANDLE+0x3ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6ae:	68 a5       	ldd	r22, Y+40	; 0x28
     6b0:	79 a5       	ldd	r23, Y+41	; 0x29
     6b2:	8a a5       	ldd	r24, Y+42	; 0x2a
     6b4:	9b a5       	ldd	r25, Y+43	; 0x2b
     6b6:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <__fixunssfsi>
     6ba:	dc 01       	movw	r26, r24
     6bc:	cb 01       	movw	r24, r22
     6be:	9d a7       	std	Y+45, r25	; 0x2d
     6c0:	8c a7       	std	Y+44, r24	; 0x2c
     6c2:	8c a5       	ldd	r24, Y+44	; 0x2c
     6c4:	9d a5       	ldd	r25, Y+45	; 0x2d
     6c6:	99 ab       	std	Y+49, r25	; 0x31
     6c8:	88 ab       	std	Y+48, r24	; 0x30
     6ca:	88 a9       	ldd	r24, Y+48	; 0x30
     6cc:	99 a9       	ldd	r25, Y+49	; 0x31
     6ce:	8c 01       	movw	r16, r24
     6d0:	f8 01       	movw	r30, r16
     6d2:	31 97       	sbiw	r30, 0x01	; 1
     6d4:	f1 f7       	brne	.-4      	; 0x6d2 <CURTAIN_POS_CHANGE_HANDLE+0x3c4>
     6d6:	8f 01       	movw	r16, r30
     6d8:	19 ab       	std	Y+49, r17	; 0x31
     6da:	08 ab       	std	Y+48, r16	; 0x30
				_delay_ms(MOTOR_SPEED_MS);
				PORTD = 0b00001001;
     6dc:	8b e2       	ldi	r24, 0x2B	; 43
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	29 e0       	ldi	r18, 0x09	; 9
     6e2:	fc 01       	movw	r30, r24
     6e4:	20 83       	st	Z, r18
     6e6:	80 e0       	ldi	r24, 0x00	; 0
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	a0 e8       	ldi	r26, 0x80	; 128
     6ec:	bf e3       	ldi	r27, 0x3F	; 63
     6ee:	8a ab       	std	Y+50, r24	; 0x32
     6f0:	9b ab       	std	Y+51, r25	; 0x33
     6f2:	ac ab       	std	Y+52, r26	; 0x34
     6f4:	bd ab       	std	Y+53, r27	; 0x35
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     6f6:	6a a9       	ldd	r22, Y+50	; 0x32
     6f8:	7b a9       	ldd	r23, Y+51	; 0x33
     6fa:	8c a9       	ldd	r24, Y+52	; 0x34
     6fc:	9d a9       	ldd	r25, Y+53	; 0x35
     6fe:	20 e0       	ldi	r18, 0x00	; 0
     700:	30 e0       	ldi	r19, 0x00	; 0
     702:	4a e7       	ldi	r20, 0x7A	; 122
     704:	55 e4       	ldi	r21, 0x45	; 69
     706:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__mulsf3>
     70a:	dc 01       	movw	r26, r24
     70c:	cb 01       	movw	r24, r22
     70e:	8e ab       	std	Y+54, r24	; 0x36
     710:	9f ab       	std	Y+55, r25	; 0x37
     712:	a8 af       	std	Y+56, r26	; 0x38
     714:	b9 af       	std	Y+57, r27	; 0x39
	if (__tmp < 1.0)
     716:	11 e0       	ldi	r17, 0x01	; 1
     718:	6e a9       	ldd	r22, Y+54	; 0x36
     71a:	7f a9       	ldd	r23, Y+55	; 0x37
     71c:	88 ad       	ldd	r24, Y+56	; 0x38
     71e:	99 ad       	ldd	r25, Y+57	; 0x39
     720:	20 e0       	ldi	r18, 0x00	; 0
     722:	30 e0       	ldi	r19, 0x00	; 0
     724:	40 e8       	ldi	r20, 0x80	; 128
     726:	5f e3       	ldi	r21, 0x3F	; 63
     728:	0e 94 76 14 	call	0x28ec	; 0x28ec <__cmpsf2>
     72c:	88 23       	and	r24, r24
     72e:	0c f0       	brlt	.+2      	; 0x732 <CURTAIN_POS_CHANGE_HANDLE+0x424>
     730:	10 e0       	ldi	r17, 0x00	; 0
     732:	11 23       	and	r17, r17
     734:	29 f0       	breq	.+10     	; 0x740 <CURTAIN_POS_CHANGE_HANDLE+0x432>
		__ticks = 1;
     736:	81 e0       	ldi	r24, 0x01	; 1
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	9b af       	std	Y+59, r25	; 0x3b
     73c:	8a af       	std	Y+58, r24	; 0x3a
     73e:	46 c0       	rjmp	.+140    	; 0x7cc <CURTAIN_POS_CHANGE_HANDLE+0x4be>
	else if (__tmp > 65535)
     740:	11 e0       	ldi	r17, 0x01	; 1
     742:	6e a9       	ldd	r22, Y+54	; 0x36
     744:	7f a9       	ldd	r23, Y+55	; 0x37
     746:	88 ad       	ldd	r24, Y+56	; 0x38
     748:	99 ad       	ldd	r25, Y+57	; 0x39
     74a:	20 e0       	ldi	r18, 0x00	; 0
     74c:	3f ef       	ldi	r19, 0xFF	; 255
     74e:	4f e7       	ldi	r20, 0x7F	; 127
     750:	57 e4       	ldi	r21, 0x47	; 71
     752:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__gesf2>
     756:	18 16       	cp	r1, r24
     758:	0c f0       	brlt	.+2      	; 0x75c <CURTAIN_POS_CHANGE_HANDLE+0x44e>
     75a:	10 e0       	ldi	r17, 0x00	; 0
     75c:	11 23       	and	r17, r17
     75e:	61 f1       	breq	.+88     	; 0x7b8 <CURTAIN_POS_CHANGE_HANDLE+0x4aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     760:	6a a9       	ldd	r22, Y+50	; 0x32
     762:	7b a9       	ldd	r23, Y+51	; 0x33
     764:	8c a9       	ldd	r24, Y+52	; 0x34
     766:	9d a9       	ldd	r25, Y+53	; 0x35
     768:	20 e0       	ldi	r18, 0x00	; 0
     76a:	30 e0       	ldi	r19, 0x00	; 0
     76c:	40 e2       	ldi	r20, 0x20	; 32
     76e:	51 e4       	ldi	r21, 0x41	; 65
     770:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__mulsf3>
     774:	dc 01       	movw	r26, r24
     776:	cb 01       	movw	r24, r22
     778:	bc 01       	movw	r22, r24
     77a:	cd 01       	movw	r24, r26
     77c:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <__fixunssfsi>
     780:	dc 01       	movw	r26, r24
     782:	cb 01       	movw	r24, r22
     784:	9b af       	std	Y+59, r25	; 0x3b
     786:	8a af       	std	Y+58, r24	; 0x3a
     788:	12 c0       	rjmp	.+36     	; 0x7ae <CURTAIN_POS_CHANGE_HANDLE+0x4a0>
     78a:	80 e9       	ldi	r24, 0x90	; 144
     78c:	91 e0       	ldi	r25, 0x01	; 1
     78e:	9d af       	std	Y+61, r25	; 0x3d
     790:	8c af       	std	Y+60, r24	; 0x3c
     792:	8c ad       	ldd	r24, Y+60	; 0x3c
     794:	9d ad       	ldd	r25, Y+61	; 0x3d
     796:	8c 01       	movw	r16, r24
     798:	c8 01       	movw	r24, r16
     79a:	01 97       	sbiw	r24, 0x01	; 1
     79c:	f1 f7       	brne	.-4      	; 0x79a <CURTAIN_POS_CHANGE_HANDLE+0x48c>
     79e:	8c 01       	movw	r16, r24
     7a0:	1d af       	std	Y+61, r17	; 0x3d
     7a2:	0c af       	std	Y+60, r16	; 0x3c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7a4:	8a ad       	ldd	r24, Y+58	; 0x3a
     7a6:	9b ad       	ldd	r25, Y+59	; 0x3b
     7a8:	01 97       	sbiw	r24, 0x01	; 1
     7aa:	9b af       	std	Y+59, r25	; 0x3b
     7ac:	8a af       	std	Y+58, r24	; 0x3a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7ae:	8a ad       	ldd	r24, Y+58	; 0x3a
     7b0:	9b ad       	ldd	r25, Y+59	; 0x3b
     7b2:	00 97       	sbiw	r24, 0x00	; 0
     7b4:	51 f7       	brne	.-44     	; 0x78a <CURTAIN_POS_CHANGE_HANDLE+0x47c>
     7b6:	17 c0       	rjmp	.+46     	; 0x7e6 <CURTAIN_POS_CHANGE_HANDLE+0x4d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7b8:	6e a9       	ldd	r22, Y+54	; 0x36
     7ba:	7f a9       	ldd	r23, Y+55	; 0x37
     7bc:	88 ad       	ldd	r24, Y+56	; 0x38
     7be:	99 ad       	ldd	r25, Y+57	; 0x39
     7c0:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <__fixunssfsi>
     7c4:	dc 01       	movw	r26, r24
     7c6:	cb 01       	movw	r24, r22
     7c8:	9b af       	std	Y+59, r25	; 0x3b
     7ca:	8a af       	std	Y+58, r24	; 0x3a
     7cc:	8a ad       	ldd	r24, Y+58	; 0x3a
     7ce:	9b ad       	ldd	r25, Y+59	; 0x3b
     7d0:	9f af       	std	Y+63, r25	; 0x3f
     7d2:	8e af       	std	Y+62, r24	; 0x3e
     7d4:	8e ad       	ldd	r24, Y+62	; 0x3e
     7d6:	9f ad       	ldd	r25, Y+63	; 0x3f
     7d8:	8c 01       	movw	r16, r24
     7da:	f8 01       	movw	r30, r16
     7dc:	31 97       	sbiw	r30, 0x01	; 1
     7de:	f1 f7       	brne	.-4      	; 0x7dc <CURTAIN_POS_CHANGE_HANDLE+0x4ce>
     7e0:	8f 01       	movw	r16, r30
     7e2:	1f af       	std	Y+63, r17	; 0x3f
     7e4:	0e af       	std	Y+62, r16	; 0x3e
	uint8_t positionToMove =  atoi(parameter[0]);
	if (positionToMove<8) {
		uint16_t degreesToMove = abs(positionToMove-currentCurtainPosition)*175;
	
		if((positionToMove-currentCurtainPosition)>0){
			for (uint16_t x = 0; x < degreesToMove;x++){
     7e6:	89 81       	ldd	r24, Y+1	; 0x01
     7e8:	9a 81       	ldd	r25, Y+2	; 0x02
     7ea:	01 96       	adiw	r24, 0x01	; 1
     7ec:	9a 83       	std	Y+2, r25	; 0x02
     7ee:	89 83       	std	Y+1, r24	; 0x01
     7f0:	29 81       	ldd	r18, Y+1	; 0x01
     7f2:	3a 81       	ldd	r19, Y+2	; 0x02
     7f4:	8e 81       	ldd	r24, Y+6	; 0x06
     7f6:	9f 81       	ldd	r25, Y+7	; 0x07
     7f8:	28 17       	cp	r18, r24
     7fa:	39 07       	cpc	r19, r25
     7fc:	08 f4       	brcc	.+2      	; 0x800 <CURTAIN_POS_CHANGE_HANDLE+0x4f2>
     7fe:	df cd       	rjmp	.-1090   	; 0x3be <CURTAIN_POS_CHANGE_HANDLE+0xb0>
     800:	6c c3       	rjmp	.+1752   	; 0xeda <__stack+0x5db>
				_delay_ms(MOTOR_SPEED_MS);
				PORTD = 0b00001001;
				_delay_ms(MOTOR_SPEED_MS);
			}
		}else{
			for (uint16_t x = 0; x < degreesToMove;x++){
     802:	1c 82       	std	Y+4, r1	; 0x04
     804:	1b 82       	std	Y+3, r1	; 0x03
     806:	61 c3       	rjmp	.+1730   	; 0xeca <__stack+0x5cb>
				PORTD = 0b00001100;
     808:	8b e2       	ldi	r24, 0x2B	; 43
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	2c e0       	ldi	r18, 0x0C	; 12
     80e:	fc 01       	movw	r30, r24
     810:	20 83       	st	Z, r18
     812:	9e 01       	movw	r18, r28
     814:	20 5c       	subi	r18, 0xC0	; 192
     816:	3f 4f       	sbci	r19, 0xFF	; 255
     818:	80 e0       	ldi	r24, 0x00	; 0
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	a0 e8       	ldi	r26, 0x80	; 128
     81e:	bf e3       	ldi	r27, 0x3F	; 63
     820:	f9 01       	movw	r30, r18
     822:	80 83       	st	Z, r24
     824:	91 83       	std	Z+1, r25	; 0x01
     826:	a2 83       	std	Z+2, r26	; 0x02
     828:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     82a:	8e 01       	movw	r16, r28
     82c:	0c 5b       	subi	r16, 0xBC	; 188
     82e:	1f 4f       	sbci	r17, 0xFF	; 255
     830:	ce 01       	movw	r24, r28
     832:	80 5c       	subi	r24, 0xC0	; 192
     834:	9f 4f       	sbci	r25, 0xFF	; 255
     836:	fc 01       	movw	r30, r24
     838:	60 81       	ld	r22, Z
     83a:	71 81       	ldd	r23, Z+1	; 0x01
     83c:	82 81       	ldd	r24, Z+2	; 0x02
     83e:	93 81       	ldd	r25, Z+3	; 0x03
     840:	20 e0       	ldi	r18, 0x00	; 0
     842:	30 e0       	ldi	r19, 0x00	; 0
     844:	4a e7       	ldi	r20, 0x7A	; 122
     846:	55 e4       	ldi	r21, 0x45	; 69
     848:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__mulsf3>
     84c:	dc 01       	movw	r26, r24
     84e:	cb 01       	movw	r24, r22
     850:	f8 01       	movw	r30, r16
     852:	80 83       	st	Z, r24
     854:	91 83       	std	Z+1, r25	; 0x01
     856:	a2 83       	std	Z+2, r26	; 0x02
     858:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     85a:	ce 01       	movw	r24, r28
     85c:	8c 5b       	subi	r24, 0xBC	; 188
     85e:	9f 4f       	sbci	r25, 0xFF	; 255
     860:	11 e0       	ldi	r17, 0x01	; 1
     862:	fc 01       	movw	r30, r24
     864:	60 81       	ld	r22, Z
     866:	71 81       	ldd	r23, Z+1	; 0x01
     868:	82 81       	ldd	r24, Z+2	; 0x02
     86a:	93 81       	ldd	r25, Z+3	; 0x03
     86c:	20 e0       	ldi	r18, 0x00	; 0
     86e:	30 e0       	ldi	r19, 0x00	; 0
     870:	40 e8       	ldi	r20, 0x80	; 128
     872:	5f e3       	ldi	r21, 0x3F	; 63
     874:	0e 94 76 14 	call	0x28ec	; 0x28ec <__cmpsf2>
     878:	88 23       	and	r24, r24
     87a:	0c f0       	brlt	.+2      	; 0x87e <CURTAIN_POS_CHANGE_HANDLE+0x570>
     87c:	10 e0       	ldi	r17, 0x00	; 0
     87e:	11 23       	and	r17, r17
     880:	49 f0       	breq	.+18     	; 0x894 <CURTAIN_POS_CHANGE_HANDLE+0x586>
		__ticks = 1;
     882:	ce 01       	movw	r24, r28
     884:	88 5b       	subi	r24, 0xB8	; 184
     886:	9f 4f       	sbci	r25, 0xFF	; 255
     888:	21 e0       	ldi	r18, 0x01	; 1
     88a:	30 e0       	ldi	r19, 0x00	; 0
     88c:	fc 01       	movw	r30, r24
     88e:	31 83       	std	Z+1, r19	; 0x01
     890:	20 83       	st	Z, r18
     892:	74 c0       	rjmp	.+232    	; 0x97c <__stack+0x7d>
	else if (__tmp > 65535)
     894:	ce 01       	movw	r24, r28
     896:	8c 5b       	subi	r24, 0xBC	; 188
     898:	9f 4f       	sbci	r25, 0xFF	; 255
     89a:	11 e0       	ldi	r17, 0x01	; 1
     89c:	fc 01       	movw	r30, r24
     89e:	60 81       	ld	r22, Z
     8a0:	71 81       	ldd	r23, Z+1	; 0x01
     8a2:	82 81       	ldd	r24, Z+2	; 0x02
     8a4:	93 81       	ldd	r25, Z+3	; 0x03
     8a6:	20 e0       	ldi	r18, 0x00	; 0
     8a8:	3f ef       	ldi	r19, 0xFF	; 255
     8aa:	4f e7       	ldi	r20, 0x7F	; 127
     8ac:	57 e4       	ldi	r21, 0x47	; 71
     8ae:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__gesf2>
     8b2:	18 16       	cp	r1, r24
     8b4:	0c f0       	brlt	.+2      	; 0x8b8 <CURTAIN_POS_CHANGE_HANDLE+0x5aa>
     8b6:	10 e0       	ldi	r17, 0x00	; 0
     8b8:	11 23       	and	r17, r17
     8ba:	09 f4       	brne	.+2      	; 0x8be <CURTAIN_POS_CHANGE_HANDLE+0x5b0>
     8bc:	4d c0       	rjmp	.+154    	; 0x958 <__stack+0x59>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8be:	ce 01       	movw	r24, r28
     8c0:	80 5c       	subi	r24, 0xC0	; 192
     8c2:	9f 4f       	sbci	r25, 0xFF	; 255
     8c4:	fc 01       	movw	r30, r24
     8c6:	60 81       	ld	r22, Z
     8c8:	71 81       	ldd	r23, Z+1	; 0x01
     8ca:	82 81       	ldd	r24, Z+2	; 0x02
     8cc:	93 81       	ldd	r25, Z+3	; 0x03
     8ce:	20 e0       	ldi	r18, 0x00	; 0
     8d0:	30 e0       	ldi	r19, 0x00	; 0
     8d2:	40 e2       	ldi	r20, 0x20	; 32
     8d4:	51 e4       	ldi	r21, 0x41	; 65
     8d6:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__mulsf3>
     8da:	dc 01       	movw	r26, r24
     8dc:	cb 01       	movw	r24, r22
     8de:	8e 01       	movw	r16, r28
     8e0:	08 5b       	subi	r16, 0xB8	; 184
     8e2:	1f 4f       	sbci	r17, 0xFF	; 255
     8e4:	bc 01       	movw	r22, r24
     8e6:	cd 01       	movw	r24, r26
     8e8:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <__fixunssfsi>
     8ec:	dc 01       	movw	r26, r24
     8ee:	cb 01       	movw	r24, r22
     8f0:	f8 01       	movw	r30, r16
     8f2:	91 83       	std	Z+1, r25	; 0x01
     8f4:	80 83       	st	Z, r24
     8f6:	27 c0       	rjmp	.+78     	; 0x946 <__stack+0x47>
     8f8:	ce 01       	movw	r24, r28
     8fa:	86 5b       	subi	r24, 0xB6	; 182
     8fc:	9f 4f       	sbci	r25, 0xFF	; 255
     8fe:	20 e9       	ldi	r18, 0x90	; 144
     900:	31 e0       	ldi	r19, 0x01	; 1
     902:	fc 01       	movw	r30, r24
     904:	31 83       	std	Z+1, r19	; 0x01
     906:	20 83       	st	Z, r18
     908:	ce 01       	movw	r24, r28
     90a:	86 5b       	subi	r24, 0xB6	; 182
     90c:	9f 4f       	sbci	r25, 0xFF	; 255
     90e:	fc 01       	movw	r30, r24
     910:	80 81       	ld	r24, Z
     912:	91 81       	ldd	r25, Z+1	; 0x01
     914:	8c 01       	movw	r16, r24
     916:	c8 01       	movw	r24, r16
     918:	01 97       	sbiw	r24, 0x01	; 1
     91a:	f1 f7       	brne	.-4      	; 0x918 <__stack+0x19>
     91c:	8c 01       	movw	r16, r24
     91e:	ce 01       	movw	r24, r28
     920:	86 5b       	subi	r24, 0xB6	; 182
     922:	9f 4f       	sbci	r25, 0xFF	; 255
     924:	fc 01       	movw	r30, r24
     926:	11 83       	std	Z+1, r17	; 0x01
     928:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     92a:	ce 01       	movw	r24, r28
     92c:	88 5b       	subi	r24, 0xB8	; 184
     92e:	9f 4f       	sbci	r25, 0xFF	; 255
     930:	9e 01       	movw	r18, r28
     932:	28 5b       	subi	r18, 0xB8	; 184
     934:	3f 4f       	sbci	r19, 0xFF	; 255
     936:	f9 01       	movw	r30, r18
     938:	20 81       	ld	r18, Z
     93a:	31 81       	ldd	r19, Z+1	; 0x01
     93c:	21 50       	subi	r18, 0x01	; 1
     93e:	30 40       	sbci	r19, 0x00	; 0
     940:	fc 01       	movw	r30, r24
     942:	31 83       	std	Z+1, r19	; 0x01
     944:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     946:	ce 01       	movw	r24, r28
     948:	88 5b       	subi	r24, 0xB8	; 184
     94a:	9f 4f       	sbci	r25, 0xFF	; 255
     94c:	fc 01       	movw	r30, r24
     94e:	80 81       	ld	r24, Z
     950:	91 81       	ldd	r25, Z+1	; 0x01
     952:	00 97       	sbiw	r24, 0x00	; 0
     954:	89 f6       	brne	.-94     	; 0x8f8 <CURTAIN_POS_CHANGE_HANDLE+0x5ea>
     956:	2f c0       	rjmp	.+94     	; 0x9b6 <__stack+0xb7>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     958:	8e 01       	movw	r16, r28
     95a:	08 5b       	subi	r16, 0xB8	; 184
     95c:	1f 4f       	sbci	r17, 0xFF	; 255
     95e:	ce 01       	movw	r24, r28
     960:	8c 5b       	subi	r24, 0xBC	; 188
     962:	9f 4f       	sbci	r25, 0xFF	; 255
     964:	fc 01       	movw	r30, r24
     966:	60 81       	ld	r22, Z
     968:	71 81       	ldd	r23, Z+1	; 0x01
     96a:	82 81       	ldd	r24, Z+2	; 0x02
     96c:	93 81       	ldd	r25, Z+3	; 0x03
     96e:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <__fixunssfsi>
     972:	dc 01       	movw	r26, r24
     974:	cb 01       	movw	r24, r22
     976:	f8 01       	movw	r30, r16
     978:	91 83       	std	Z+1, r25	; 0x01
     97a:	80 83       	st	Z, r24
     97c:	ce 01       	movw	r24, r28
     97e:	84 5b       	subi	r24, 0xB4	; 180
     980:	9f 4f       	sbci	r25, 0xFF	; 255
     982:	9e 01       	movw	r18, r28
     984:	28 5b       	subi	r18, 0xB8	; 184
     986:	3f 4f       	sbci	r19, 0xFF	; 255
     988:	f9 01       	movw	r30, r18
     98a:	20 81       	ld	r18, Z
     98c:	31 81       	ldd	r19, Z+1	; 0x01
     98e:	fc 01       	movw	r30, r24
     990:	31 83       	std	Z+1, r19	; 0x01
     992:	20 83       	st	Z, r18
     994:	ce 01       	movw	r24, r28
     996:	84 5b       	subi	r24, 0xB4	; 180
     998:	9f 4f       	sbci	r25, 0xFF	; 255
     99a:	fc 01       	movw	r30, r24
     99c:	80 81       	ld	r24, Z
     99e:	91 81       	ldd	r25, Z+1	; 0x01
     9a0:	8c 01       	movw	r16, r24
     9a2:	c8 01       	movw	r24, r16
     9a4:	01 97       	sbiw	r24, 0x01	; 1
     9a6:	f1 f7       	brne	.-4      	; 0x9a4 <__stack+0xa5>
     9a8:	8c 01       	movw	r16, r24
     9aa:	ce 01       	movw	r24, r28
     9ac:	84 5b       	subi	r24, 0xB4	; 180
     9ae:	9f 4f       	sbci	r25, 0xFF	; 255
     9b0:	fc 01       	movw	r30, r24
     9b2:	11 83       	std	Z+1, r17	; 0x01
     9b4:	00 83       	st	Z, r16
				_delay_ms(MOTOR_SPEED_MS);
				PORTD = 0b00000110;
     9b6:	8b e2       	ldi	r24, 0x2B	; 43
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	26 e0       	ldi	r18, 0x06	; 6
     9bc:	fc 01       	movw	r30, r24
     9be:	20 83       	st	Z, r18
     9c0:	9e 01       	movw	r18, r28
     9c2:	22 5b       	subi	r18, 0xB2	; 178
     9c4:	3f 4f       	sbci	r19, 0xFF	; 255
     9c6:	80 e0       	ldi	r24, 0x00	; 0
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	a0 e8       	ldi	r26, 0x80	; 128
     9cc:	bf e3       	ldi	r27, 0x3F	; 63
     9ce:	f9 01       	movw	r30, r18
     9d0:	80 83       	st	Z, r24
     9d2:	91 83       	std	Z+1, r25	; 0x01
     9d4:	a2 83       	std	Z+2, r26	; 0x02
     9d6:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     9d8:	8e 01       	movw	r16, r28
     9da:	0e 5a       	subi	r16, 0xAE	; 174
     9dc:	1f 4f       	sbci	r17, 0xFF	; 255
     9de:	ce 01       	movw	r24, r28
     9e0:	82 5b       	subi	r24, 0xB2	; 178
     9e2:	9f 4f       	sbci	r25, 0xFF	; 255
     9e4:	fc 01       	movw	r30, r24
     9e6:	60 81       	ld	r22, Z
     9e8:	71 81       	ldd	r23, Z+1	; 0x01
     9ea:	82 81       	ldd	r24, Z+2	; 0x02
     9ec:	93 81       	ldd	r25, Z+3	; 0x03
     9ee:	20 e0       	ldi	r18, 0x00	; 0
     9f0:	30 e0       	ldi	r19, 0x00	; 0
     9f2:	4a e7       	ldi	r20, 0x7A	; 122
     9f4:	55 e4       	ldi	r21, 0x45	; 69
     9f6:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__mulsf3>
     9fa:	dc 01       	movw	r26, r24
     9fc:	cb 01       	movw	r24, r22
     9fe:	f8 01       	movw	r30, r16
     a00:	80 83       	st	Z, r24
     a02:	91 83       	std	Z+1, r25	; 0x01
     a04:	a2 83       	std	Z+2, r26	; 0x02
     a06:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     a08:	ce 01       	movw	r24, r28
     a0a:	8e 5a       	subi	r24, 0xAE	; 174
     a0c:	9f 4f       	sbci	r25, 0xFF	; 255
     a0e:	11 e0       	ldi	r17, 0x01	; 1
     a10:	fc 01       	movw	r30, r24
     a12:	60 81       	ld	r22, Z
     a14:	71 81       	ldd	r23, Z+1	; 0x01
     a16:	82 81       	ldd	r24, Z+2	; 0x02
     a18:	93 81       	ldd	r25, Z+3	; 0x03
     a1a:	20 e0       	ldi	r18, 0x00	; 0
     a1c:	30 e0       	ldi	r19, 0x00	; 0
     a1e:	40 e8       	ldi	r20, 0x80	; 128
     a20:	5f e3       	ldi	r21, 0x3F	; 63
     a22:	0e 94 76 14 	call	0x28ec	; 0x28ec <__cmpsf2>
     a26:	88 23       	and	r24, r24
     a28:	0c f0       	brlt	.+2      	; 0xa2c <__stack+0x12d>
     a2a:	10 e0       	ldi	r17, 0x00	; 0
     a2c:	11 23       	and	r17, r17
     a2e:	49 f0       	breq	.+18     	; 0xa42 <__stack+0x143>
		__ticks = 1;
     a30:	ce 01       	movw	r24, r28
     a32:	8a 5a       	subi	r24, 0xAA	; 170
     a34:	9f 4f       	sbci	r25, 0xFF	; 255
     a36:	21 e0       	ldi	r18, 0x01	; 1
     a38:	30 e0       	ldi	r19, 0x00	; 0
     a3a:	fc 01       	movw	r30, r24
     a3c:	31 83       	std	Z+1, r19	; 0x01
     a3e:	20 83       	st	Z, r18
     a40:	74 c0       	rjmp	.+232    	; 0xb2a <__stack+0x22b>
	else if (__tmp > 65535)
     a42:	ce 01       	movw	r24, r28
     a44:	8e 5a       	subi	r24, 0xAE	; 174
     a46:	9f 4f       	sbci	r25, 0xFF	; 255
     a48:	11 e0       	ldi	r17, 0x01	; 1
     a4a:	fc 01       	movw	r30, r24
     a4c:	60 81       	ld	r22, Z
     a4e:	71 81       	ldd	r23, Z+1	; 0x01
     a50:	82 81       	ldd	r24, Z+2	; 0x02
     a52:	93 81       	ldd	r25, Z+3	; 0x03
     a54:	20 e0       	ldi	r18, 0x00	; 0
     a56:	3f ef       	ldi	r19, 0xFF	; 255
     a58:	4f e7       	ldi	r20, 0x7F	; 127
     a5a:	57 e4       	ldi	r21, 0x47	; 71
     a5c:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__gesf2>
     a60:	18 16       	cp	r1, r24
     a62:	0c f0       	brlt	.+2      	; 0xa66 <__stack+0x167>
     a64:	10 e0       	ldi	r17, 0x00	; 0
     a66:	11 23       	and	r17, r17
     a68:	09 f4       	brne	.+2      	; 0xa6c <__stack+0x16d>
     a6a:	4d c0       	rjmp	.+154    	; 0xb06 <__stack+0x207>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a6c:	ce 01       	movw	r24, r28
     a6e:	82 5b       	subi	r24, 0xB2	; 178
     a70:	9f 4f       	sbci	r25, 0xFF	; 255
     a72:	fc 01       	movw	r30, r24
     a74:	60 81       	ld	r22, Z
     a76:	71 81       	ldd	r23, Z+1	; 0x01
     a78:	82 81       	ldd	r24, Z+2	; 0x02
     a7a:	93 81       	ldd	r25, Z+3	; 0x03
     a7c:	20 e0       	ldi	r18, 0x00	; 0
     a7e:	30 e0       	ldi	r19, 0x00	; 0
     a80:	40 e2       	ldi	r20, 0x20	; 32
     a82:	51 e4       	ldi	r21, 0x41	; 65
     a84:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__mulsf3>
     a88:	dc 01       	movw	r26, r24
     a8a:	cb 01       	movw	r24, r22
     a8c:	8e 01       	movw	r16, r28
     a8e:	0a 5a       	subi	r16, 0xAA	; 170
     a90:	1f 4f       	sbci	r17, 0xFF	; 255
     a92:	bc 01       	movw	r22, r24
     a94:	cd 01       	movw	r24, r26
     a96:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <__fixunssfsi>
     a9a:	dc 01       	movw	r26, r24
     a9c:	cb 01       	movw	r24, r22
     a9e:	f8 01       	movw	r30, r16
     aa0:	91 83       	std	Z+1, r25	; 0x01
     aa2:	80 83       	st	Z, r24
     aa4:	27 c0       	rjmp	.+78     	; 0xaf4 <__stack+0x1f5>
     aa6:	ce 01       	movw	r24, r28
     aa8:	88 5a       	subi	r24, 0xA8	; 168
     aaa:	9f 4f       	sbci	r25, 0xFF	; 255
     aac:	20 e9       	ldi	r18, 0x90	; 144
     aae:	31 e0       	ldi	r19, 0x01	; 1
     ab0:	fc 01       	movw	r30, r24
     ab2:	31 83       	std	Z+1, r19	; 0x01
     ab4:	20 83       	st	Z, r18
     ab6:	ce 01       	movw	r24, r28
     ab8:	88 5a       	subi	r24, 0xA8	; 168
     aba:	9f 4f       	sbci	r25, 0xFF	; 255
     abc:	fc 01       	movw	r30, r24
     abe:	80 81       	ld	r24, Z
     ac0:	91 81       	ldd	r25, Z+1	; 0x01
     ac2:	8c 01       	movw	r16, r24
     ac4:	c8 01       	movw	r24, r16
     ac6:	01 97       	sbiw	r24, 0x01	; 1
     ac8:	f1 f7       	brne	.-4      	; 0xac6 <__stack+0x1c7>
     aca:	8c 01       	movw	r16, r24
     acc:	ce 01       	movw	r24, r28
     ace:	88 5a       	subi	r24, 0xA8	; 168
     ad0:	9f 4f       	sbci	r25, 0xFF	; 255
     ad2:	fc 01       	movw	r30, r24
     ad4:	11 83       	std	Z+1, r17	; 0x01
     ad6:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ad8:	ce 01       	movw	r24, r28
     ada:	8a 5a       	subi	r24, 0xAA	; 170
     adc:	9f 4f       	sbci	r25, 0xFF	; 255
     ade:	9e 01       	movw	r18, r28
     ae0:	2a 5a       	subi	r18, 0xAA	; 170
     ae2:	3f 4f       	sbci	r19, 0xFF	; 255
     ae4:	f9 01       	movw	r30, r18
     ae6:	20 81       	ld	r18, Z
     ae8:	31 81       	ldd	r19, Z+1	; 0x01
     aea:	21 50       	subi	r18, 0x01	; 1
     aec:	30 40       	sbci	r19, 0x00	; 0
     aee:	fc 01       	movw	r30, r24
     af0:	31 83       	std	Z+1, r19	; 0x01
     af2:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     af4:	ce 01       	movw	r24, r28
     af6:	8a 5a       	subi	r24, 0xAA	; 170
     af8:	9f 4f       	sbci	r25, 0xFF	; 255
     afa:	fc 01       	movw	r30, r24
     afc:	80 81       	ld	r24, Z
     afe:	91 81       	ldd	r25, Z+1	; 0x01
     b00:	00 97       	sbiw	r24, 0x00	; 0
     b02:	89 f6       	brne	.-94     	; 0xaa6 <__stack+0x1a7>
     b04:	2f c0       	rjmp	.+94     	; 0xb64 <__stack+0x265>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b06:	8e 01       	movw	r16, r28
     b08:	0a 5a       	subi	r16, 0xAA	; 170
     b0a:	1f 4f       	sbci	r17, 0xFF	; 255
     b0c:	ce 01       	movw	r24, r28
     b0e:	8e 5a       	subi	r24, 0xAE	; 174
     b10:	9f 4f       	sbci	r25, 0xFF	; 255
     b12:	fc 01       	movw	r30, r24
     b14:	60 81       	ld	r22, Z
     b16:	71 81       	ldd	r23, Z+1	; 0x01
     b18:	82 81       	ldd	r24, Z+2	; 0x02
     b1a:	93 81       	ldd	r25, Z+3	; 0x03
     b1c:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <__fixunssfsi>
     b20:	dc 01       	movw	r26, r24
     b22:	cb 01       	movw	r24, r22
     b24:	f8 01       	movw	r30, r16
     b26:	91 83       	std	Z+1, r25	; 0x01
     b28:	80 83       	st	Z, r24
     b2a:	ce 01       	movw	r24, r28
     b2c:	86 5a       	subi	r24, 0xA6	; 166
     b2e:	9f 4f       	sbci	r25, 0xFF	; 255
     b30:	9e 01       	movw	r18, r28
     b32:	2a 5a       	subi	r18, 0xAA	; 170
     b34:	3f 4f       	sbci	r19, 0xFF	; 255
     b36:	f9 01       	movw	r30, r18
     b38:	20 81       	ld	r18, Z
     b3a:	31 81       	ldd	r19, Z+1	; 0x01
     b3c:	fc 01       	movw	r30, r24
     b3e:	31 83       	std	Z+1, r19	; 0x01
     b40:	20 83       	st	Z, r18
     b42:	ce 01       	movw	r24, r28
     b44:	86 5a       	subi	r24, 0xA6	; 166
     b46:	9f 4f       	sbci	r25, 0xFF	; 255
     b48:	fc 01       	movw	r30, r24
     b4a:	80 81       	ld	r24, Z
     b4c:	91 81       	ldd	r25, Z+1	; 0x01
     b4e:	8c 01       	movw	r16, r24
     b50:	c8 01       	movw	r24, r16
     b52:	01 97       	sbiw	r24, 0x01	; 1
     b54:	f1 f7       	brne	.-4      	; 0xb52 <__stack+0x253>
     b56:	8c 01       	movw	r16, r24
     b58:	ce 01       	movw	r24, r28
     b5a:	86 5a       	subi	r24, 0xA6	; 166
     b5c:	9f 4f       	sbci	r25, 0xFF	; 255
     b5e:	fc 01       	movw	r30, r24
     b60:	11 83       	std	Z+1, r17	; 0x01
     b62:	00 83       	st	Z, r16
				_delay_ms(MOTOR_SPEED_MS);
				PORTD = 0b00000011;
     b64:	8b e2       	ldi	r24, 0x2B	; 43
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	23 e0       	ldi	r18, 0x03	; 3
     b6a:	fc 01       	movw	r30, r24
     b6c:	20 83       	st	Z, r18
     b6e:	9e 01       	movw	r18, r28
     b70:	24 5a       	subi	r18, 0xA4	; 164
     b72:	3f 4f       	sbci	r19, 0xFF	; 255
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	a0 e8       	ldi	r26, 0x80	; 128
     b7a:	bf e3       	ldi	r27, 0x3F	; 63
     b7c:	f9 01       	movw	r30, r18
     b7e:	80 83       	st	Z, r24
     b80:	91 83       	std	Z+1, r25	; 0x01
     b82:	a2 83       	std	Z+2, r26	; 0x02
     b84:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     b86:	8e 01       	movw	r16, r28
     b88:	00 5a       	subi	r16, 0xA0	; 160
     b8a:	1f 4f       	sbci	r17, 0xFF	; 255
     b8c:	ce 01       	movw	r24, r28
     b8e:	84 5a       	subi	r24, 0xA4	; 164
     b90:	9f 4f       	sbci	r25, 0xFF	; 255
     b92:	fc 01       	movw	r30, r24
     b94:	60 81       	ld	r22, Z
     b96:	71 81       	ldd	r23, Z+1	; 0x01
     b98:	82 81       	ldd	r24, Z+2	; 0x02
     b9a:	93 81       	ldd	r25, Z+3	; 0x03
     b9c:	20 e0       	ldi	r18, 0x00	; 0
     b9e:	30 e0       	ldi	r19, 0x00	; 0
     ba0:	4a e7       	ldi	r20, 0x7A	; 122
     ba2:	55 e4       	ldi	r21, 0x45	; 69
     ba4:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__mulsf3>
     ba8:	dc 01       	movw	r26, r24
     baa:	cb 01       	movw	r24, r22
     bac:	f8 01       	movw	r30, r16
     bae:	80 83       	st	Z, r24
     bb0:	91 83       	std	Z+1, r25	; 0x01
     bb2:	a2 83       	std	Z+2, r26	; 0x02
     bb4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     bb6:	ce 01       	movw	r24, r28
     bb8:	80 5a       	subi	r24, 0xA0	; 160
     bba:	9f 4f       	sbci	r25, 0xFF	; 255
     bbc:	11 e0       	ldi	r17, 0x01	; 1
     bbe:	fc 01       	movw	r30, r24
     bc0:	60 81       	ld	r22, Z
     bc2:	71 81       	ldd	r23, Z+1	; 0x01
     bc4:	82 81       	ldd	r24, Z+2	; 0x02
     bc6:	93 81       	ldd	r25, Z+3	; 0x03
     bc8:	20 e0       	ldi	r18, 0x00	; 0
     bca:	30 e0       	ldi	r19, 0x00	; 0
     bcc:	40 e8       	ldi	r20, 0x80	; 128
     bce:	5f e3       	ldi	r21, 0x3F	; 63
     bd0:	0e 94 76 14 	call	0x28ec	; 0x28ec <__cmpsf2>
     bd4:	88 23       	and	r24, r24
     bd6:	0c f0       	brlt	.+2      	; 0xbda <__stack+0x2db>
     bd8:	10 e0       	ldi	r17, 0x00	; 0
     bda:	11 23       	and	r17, r17
     bdc:	49 f0       	breq	.+18     	; 0xbf0 <__stack+0x2f1>
		__ticks = 1;
     bde:	ce 01       	movw	r24, r28
     be0:	8c 59       	subi	r24, 0x9C	; 156
     be2:	9f 4f       	sbci	r25, 0xFF	; 255
     be4:	21 e0       	ldi	r18, 0x01	; 1
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	fc 01       	movw	r30, r24
     bea:	31 83       	std	Z+1, r19	; 0x01
     bec:	20 83       	st	Z, r18
     bee:	74 c0       	rjmp	.+232    	; 0xcd8 <__stack+0x3d9>
	else if (__tmp > 65535)
     bf0:	ce 01       	movw	r24, r28
     bf2:	80 5a       	subi	r24, 0xA0	; 160
     bf4:	9f 4f       	sbci	r25, 0xFF	; 255
     bf6:	11 e0       	ldi	r17, 0x01	; 1
     bf8:	fc 01       	movw	r30, r24
     bfa:	60 81       	ld	r22, Z
     bfc:	71 81       	ldd	r23, Z+1	; 0x01
     bfe:	82 81       	ldd	r24, Z+2	; 0x02
     c00:	93 81       	ldd	r25, Z+3	; 0x03
     c02:	20 e0       	ldi	r18, 0x00	; 0
     c04:	3f ef       	ldi	r19, 0xFF	; 255
     c06:	4f e7       	ldi	r20, 0x7F	; 127
     c08:	57 e4       	ldi	r21, 0x47	; 71
     c0a:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__gesf2>
     c0e:	18 16       	cp	r1, r24
     c10:	0c f0       	brlt	.+2      	; 0xc14 <__stack+0x315>
     c12:	10 e0       	ldi	r17, 0x00	; 0
     c14:	11 23       	and	r17, r17
     c16:	09 f4       	brne	.+2      	; 0xc1a <__stack+0x31b>
     c18:	4d c0       	rjmp	.+154    	; 0xcb4 <__stack+0x3b5>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c1a:	ce 01       	movw	r24, r28
     c1c:	84 5a       	subi	r24, 0xA4	; 164
     c1e:	9f 4f       	sbci	r25, 0xFF	; 255
     c20:	fc 01       	movw	r30, r24
     c22:	60 81       	ld	r22, Z
     c24:	71 81       	ldd	r23, Z+1	; 0x01
     c26:	82 81       	ldd	r24, Z+2	; 0x02
     c28:	93 81       	ldd	r25, Z+3	; 0x03
     c2a:	20 e0       	ldi	r18, 0x00	; 0
     c2c:	30 e0       	ldi	r19, 0x00	; 0
     c2e:	40 e2       	ldi	r20, 0x20	; 32
     c30:	51 e4       	ldi	r21, 0x41	; 65
     c32:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__mulsf3>
     c36:	dc 01       	movw	r26, r24
     c38:	cb 01       	movw	r24, r22
     c3a:	8e 01       	movw	r16, r28
     c3c:	0c 59       	subi	r16, 0x9C	; 156
     c3e:	1f 4f       	sbci	r17, 0xFF	; 255
     c40:	bc 01       	movw	r22, r24
     c42:	cd 01       	movw	r24, r26
     c44:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <__fixunssfsi>
     c48:	dc 01       	movw	r26, r24
     c4a:	cb 01       	movw	r24, r22
     c4c:	f8 01       	movw	r30, r16
     c4e:	91 83       	std	Z+1, r25	; 0x01
     c50:	80 83       	st	Z, r24
     c52:	27 c0       	rjmp	.+78     	; 0xca2 <__stack+0x3a3>
     c54:	ce 01       	movw	r24, r28
     c56:	8a 59       	subi	r24, 0x9A	; 154
     c58:	9f 4f       	sbci	r25, 0xFF	; 255
     c5a:	20 e9       	ldi	r18, 0x90	; 144
     c5c:	31 e0       	ldi	r19, 0x01	; 1
     c5e:	fc 01       	movw	r30, r24
     c60:	31 83       	std	Z+1, r19	; 0x01
     c62:	20 83       	st	Z, r18
     c64:	ce 01       	movw	r24, r28
     c66:	8a 59       	subi	r24, 0x9A	; 154
     c68:	9f 4f       	sbci	r25, 0xFF	; 255
     c6a:	fc 01       	movw	r30, r24
     c6c:	80 81       	ld	r24, Z
     c6e:	91 81       	ldd	r25, Z+1	; 0x01
     c70:	8c 01       	movw	r16, r24
     c72:	c8 01       	movw	r24, r16
     c74:	01 97       	sbiw	r24, 0x01	; 1
     c76:	f1 f7       	brne	.-4      	; 0xc74 <__stack+0x375>
     c78:	8c 01       	movw	r16, r24
     c7a:	ce 01       	movw	r24, r28
     c7c:	8a 59       	subi	r24, 0x9A	; 154
     c7e:	9f 4f       	sbci	r25, 0xFF	; 255
     c80:	fc 01       	movw	r30, r24
     c82:	11 83       	std	Z+1, r17	; 0x01
     c84:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c86:	ce 01       	movw	r24, r28
     c88:	8c 59       	subi	r24, 0x9C	; 156
     c8a:	9f 4f       	sbci	r25, 0xFF	; 255
     c8c:	9e 01       	movw	r18, r28
     c8e:	2c 59       	subi	r18, 0x9C	; 156
     c90:	3f 4f       	sbci	r19, 0xFF	; 255
     c92:	f9 01       	movw	r30, r18
     c94:	20 81       	ld	r18, Z
     c96:	31 81       	ldd	r19, Z+1	; 0x01
     c98:	21 50       	subi	r18, 0x01	; 1
     c9a:	30 40       	sbci	r19, 0x00	; 0
     c9c:	fc 01       	movw	r30, r24
     c9e:	31 83       	std	Z+1, r19	; 0x01
     ca0:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ca2:	ce 01       	movw	r24, r28
     ca4:	8c 59       	subi	r24, 0x9C	; 156
     ca6:	9f 4f       	sbci	r25, 0xFF	; 255
     ca8:	fc 01       	movw	r30, r24
     caa:	80 81       	ld	r24, Z
     cac:	91 81       	ldd	r25, Z+1	; 0x01
     cae:	00 97       	sbiw	r24, 0x00	; 0
     cb0:	89 f6       	brne	.-94     	; 0xc54 <__stack+0x355>
     cb2:	2f c0       	rjmp	.+94     	; 0xd12 <__stack+0x413>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cb4:	8e 01       	movw	r16, r28
     cb6:	0c 59       	subi	r16, 0x9C	; 156
     cb8:	1f 4f       	sbci	r17, 0xFF	; 255
     cba:	ce 01       	movw	r24, r28
     cbc:	80 5a       	subi	r24, 0xA0	; 160
     cbe:	9f 4f       	sbci	r25, 0xFF	; 255
     cc0:	fc 01       	movw	r30, r24
     cc2:	60 81       	ld	r22, Z
     cc4:	71 81       	ldd	r23, Z+1	; 0x01
     cc6:	82 81       	ldd	r24, Z+2	; 0x02
     cc8:	93 81       	ldd	r25, Z+3	; 0x03
     cca:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <__fixunssfsi>
     cce:	dc 01       	movw	r26, r24
     cd0:	cb 01       	movw	r24, r22
     cd2:	f8 01       	movw	r30, r16
     cd4:	91 83       	std	Z+1, r25	; 0x01
     cd6:	80 83       	st	Z, r24
     cd8:	ce 01       	movw	r24, r28
     cda:	88 59       	subi	r24, 0x98	; 152
     cdc:	9f 4f       	sbci	r25, 0xFF	; 255
     cde:	9e 01       	movw	r18, r28
     ce0:	2c 59       	subi	r18, 0x9C	; 156
     ce2:	3f 4f       	sbci	r19, 0xFF	; 255
     ce4:	f9 01       	movw	r30, r18
     ce6:	20 81       	ld	r18, Z
     ce8:	31 81       	ldd	r19, Z+1	; 0x01
     cea:	fc 01       	movw	r30, r24
     cec:	31 83       	std	Z+1, r19	; 0x01
     cee:	20 83       	st	Z, r18
     cf0:	ce 01       	movw	r24, r28
     cf2:	88 59       	subi	r24, 0x98	; 152
     cf4:	9f 4f       	sbci	r25, 0xFF	; 255
     cf6:	fc 01       	movw	r30, r24
     cf8:	80 81       	ld	r24, Z
     cfa:	91 81       	ldd	r25, Z+1	; 0x01
     cfc:	8c 01       	movw	r16, r24
     cfe:	c8 01       	movw	r24, r16
     d00:	01 97       	sbiw	r24, 0x01	; 1
     d02:	f1 f7       	brne	.-4      	; 0xd00 <__stack+0x401>
     d04:	8c 01       	movw	r16, r24
     d06:	ce 01       	movw	r24, r28
     d08:	88 59       	subi	r24, 0x98	; 152
     d0a:	9f 4f       	sbci	r25, 0xFF	; 255
     d0c:	fc 01       	movw	r30, r24
     d0e:	11 83       	std	Z+1, r17	; 0x01
     d10:	00 83       	st	Z, r16
				_delay_ms(MOTOR_SPEED_MS);
				PORTD = 0b00001001;
     d12:	8b e2       	ldi	r24, 0x2B	; 43
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	29 e0       	ldi	r18, 0x09	; 9
     d18:	fc 01       	movw	r30, r24
     d1a:	20 83       	st	Z, r18
     d1c:	9e 01       	movw	r18, r28
     d1e:	26 59       	subi	r18, 0x96	; 150
     d20:	3f 4f       	sbci	r19, 0xFF	; 255
     d22:	80 e0       	ldi	r24, 0x00	; 0
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	a0 e8       	ldi	r26, 0x80	; 128
     d28:	bf e3       	ldi	r27, 0x3F	; 63
     d2a:	f9 01       	movw	r30, r18
     d2c:	80 83       	st	Z, r24
     d2e:	91 83       	std	Z+1, r25	; 0x01
     d30:	a2 83       	std	Z+2, r26	; 0x02
     d32:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     d34:	8e 01       	movw	r16, r28
     d36:	02 59       	subi	r16, 0x92	; 146
     d38:	1f 4f       	sbci	r17, 0xFF	; 255
     d3a:	ce 01       	movw	r24, r28
     d3c:	86 59       	subi	r24, 0x96	; 150
     d3e:	9f 4f       	sbci	r25, 0xFF	; 255
     d40:	fc 01       	movw	r30, r24
     d42:	60 81       	ld	r22, Z
     d44:	71 81       	ldd	r23, Z+1	; 0x01
     d46:	82 81       	ldd	r24, Z+2	; 0x02
     d48:	93 81       	ldd	r25, Z+3	; 0x03
     d4a:	20 e0       	ldi	r18, 0x00	; 0
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	4a e7       	ldi	r20, 0x7A	; 122
     d50:	55 e4       	ldi	r21, 0x45	; 69
     d52:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__mulsf3>
     d56:	dc 01       	movw	r26, r24
     d58:	cb 01       	movw	r24, r22
     d5a:	f8 01       	movw	r30, r16
     d5c:	80 83       	st	Z, r24
     d5e:	91 83       	std	Z+1, r25	; 0x01
     d60:	a2 83       	std	Z+2, r26	; 0x02
     d62:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d64:	ce 01       	movw	r24, r28
     d66:	82 59       	subi	r24, 0x92	; 146
     d68:	9f 4f       	sbci	r25, 0xFF	; 255
     d6a:	11 e0       	ldi	r17, 0x01	; 1
     d6c:	fc 01       	movw	r30, r24
     d6e:	60 81       	ld	r22, Z
     d70:	71 81       	ldd	r23, Z+1	; 0x01
     d72:	82 81       	ldd	r24, Z+2	; 0x02
     d74:	93 81       	ldd	r25, Z+3	; 0x03
     d76:	20 e0       	ldi	r18, 0x00	; 0
     d78:	30 e0       	ldi	r19, 0x00	; 0
     d7a:	40 e8       	ldi	r20, 0x80	; 128
     d7c:	5f e3       	ldi	r21, 0x3F	; 63
     d7e:	0e 94 76 14 	call	0x28ec	; 0x28ec <__cmpsf2>
     d82:	88 23       	and	r24, r24
     d84:	0c f0       	brlt	.+2      	; 0xd88 <__stack+0x489>
     d86:	10 e0       	ldi	r17, 0x00	; 0
     d88:	11 23       	and	r17, r17
     d8a:	49 f0       	breq	.+18     	; 0xd9e <__stack+0x49f>
		__ticks = 1;
     d8c:	ce 01       	movw	r24, r28
     d8e:	8e 58       	subi	r24, 0x8E	; 142
     d90:	9f 4f       	sbci	r25, 0xFF	; 255
     d92:	21 e0       	ldi	r18, 0x01	; 1
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	fc 01       	movw	r30, r24
     d98:	31 83       	std	Z+1, r19	; 0x01
     d9a:	20 83       	st	Z, r18
     d9c:	74 c0       	rjmp	.+232    	; 0xe86 <__stack+0x587>
	else if (__tmp > 65535)
     d9e:	ce 01       	movw	r24, r28
     da0:	82 59       	subi	r24, 0x92	; 146
     da2:	9f 4f       	sbci	r25, 0xFF	; 255
     da4:	11 e0       	ldi	r17, 0x01	; 1
     da6:	fc 01       	movw	r30, r24
     da8:	60 81       	ld	r22, Z
     daa:	71 81       	ldd	r23, Z+1	; 0x01
     dac:	82 81       	ldd	r24, Z+2	; 0x02
     dae:	93 81       	ldd	r25, Z+3	; 0x03
     db0:	20 e0       	ldi	r18, 0x00	; 0
     db2:	3f ef       	ldi	r19, 0xFF	; 255
     db4:	4f e7       	ldi	r20, 0x7F	; 127
     db6:	57 e4       	ldi	r21, 0x47	; 71
     db8:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__gesf2>
     dbc:	18 16       	cp	r1, r24
     dbe:	0c f0       	brlt	.+2      	; 0xdc2 <__stack+0x4c3>
     dc0:	10 e0       	ldi	r17, 0x00	; 0
     dc2:	11 23       	and	r17, r17
     dc4:	09 f4       	brne	.+2      	; 0xdc8 <__stack+0x4c9>
     dc6:	4d c0       	rjmp	.+154    	; 0xe62 <__stack+0x563>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dc8:	ce 01       	movw	r24, r28
     dca:	86 59       	subi	r24, 0x96	; 150
     dcc:	9f 4f       	sbci	r25, 0xFF	; 255
     dce:	fc 01       	movw	r30, r24
     dd0:	60 81       	ld	r22, Z
     dd2:	71 81       	ldd	r23, Z+1	; 0x01
     dd4:	82 81       	ldd	r24, Z+2	; 0x02
     dd6:	93 81       	ldd	r25, Z+3	; 0x03
     dd8:	20 e0       	ldi	r18, 0x00	; 0
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	40 e2       	ldi	r20, 0x20	; 32
     dde:	51 e4       	ldi	r21, 0x41	; 65
     de0:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__mulsf3>
     de4:	dc 01       	movw	r26, r24
     de6:	cb 01       	movw	r24, r22
     de8:	8e 01       	movw	r16, r28
     dea:	0e 58       	subi	r16, 0x8E	; 142
     dec:	1f 4f       	sbci	r17, 0xFF	; 255
     dee:	bc 01       	movw	r22, r24
     df0:	cd 01       	movw	r24, r26
     df2:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <__fixunssfsi>
     df6:	dc 01       	movw	r26, r24
     df8:	cb 01       	movw	r24, r22
     dfa:	f8 01       	movw	r30, r16
     dfc:	91 83       	std	Z+1, r25	; 0x01
     dfe:	80 83       	st	Z, r24
     e00:	27 c0       	rjmp	.+78     	; 0xe50 <__stack+0x551>
     e02:	ce 01       	movw	r24, r28
     e04:	8c 58       	subi	r24, 0x8C	; 140
     e06:	9f 4f       	sbci	r25, 0xFF	; 255
     e08:	20 e9       	ldi	r18, 0x90	; 144
     e0a:	31 e0       	ldi	r19, 0x01	; 1
     e0c:	fc 01       	movw	r30, r24
     e0e:	31 83       	std	Z+1, r19	; 0x01
     e10:	20 83       	st	Z, r18
     e12:	ce 01       	movw	r24, r28
     e14:	8c 58       	subi	r24, 0x8C	; 140
     e16:	9f 4f       	sbci	r25, 0xFF	; 255
     e18:	fc 01       	movw	r30, r24
     e1a:	80 81       	ld	r24, Z
     e1c:	91 81       	ldd	r25, Z+1	; 0x01
     e1e:	8c 01       	movw	r16, r24
     e20:	c8 01       	movw	r24, r16
     e22:	01 97       	sbiw	r24, 0x01	; 1
     e24:	f1 f7       	brne	.-4      	; 0xe22 <__stack+0x523>
     e26:	8c 01       	movw	r16, r24
     e28:	ce 01       	movw	r24, r28
     e2a:	8c 58       	subi	r24, 0x8C	; 140
     e2c:	9f 4f       	sbci	r25, 0xFF	; 255
     e2e:	fc 01       	movw	r30, r24
     e30:	11 83       	std	Z+1, r17	; 0x01
     e32:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e34:	ce 01       	movw	r24, r28
     e36:	8e 58       	subi	r24, 0x8E	; 142
     e38:	9f 4f       	sbci	r25, 0xFF	; 255
     e3a:	9e 01       	movw	r18, r28
     e3c:	2e 58       	subi	r18, 0x8E	; 142
     e3e:	3f 4f       	sbci	r19, 0xFF	; 255
     e40:	f9 01       	movw	r30, r18
     e42:	20 81       	ld	r18, Z
     e44:	31 81       	ldd	r19, Z+1	; 0x01
     e46:	21 50       	subi	r18, 0x01	; 1
     e48:	30 40       	sbci	r19, 0x00	; 0
     e4a:	fc 01       	movw	r30, r24
     e4c:	31 83       	std	Z+1, r19	; 0x01
     e4e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e50:	ce 01       	movw	r24, r28
     e52:	8e 58       	subi	r24, 0x8E	; 142
     e54:	9f 4f       	sbci	r25, 0xFF	; 255
     e56:	fc 01       	movw	r30, r24
     e58:	80 81       	ld	r24, Z
     e5a:	91 81       	ldd	r25, Z+1	; 0x01
     e5c:	00 97       	sbiw	r24, 0x00	; 0
     e5e:	89 f6       	brne	.-94     	; 0xe02 <__stack+0x503>
     e60:	2f c0       	rjmp	.+94     	; 0xec0 <__stack+0x5c1>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e62:	8e 01       	movw	r16, r28
     e64:	0e 58       	subi	r16, 0x8E	; 142
     e66:	1f 4f       	sbci	r17, 0xFF	; 255
     e68:	ce 01       	movw	r24, r28
     e6a:	82 59       	subi	r24, 0x92	; 146
     e6c:	9f 4f       	sbci	r25, 0xFF	; 255
     e6e:	fc 01       	movw	r30, r24
     e70:	60 81       	ld	r22, Z
     e72:	71 81       	ldd	r23, Z+1	; 0x01
     e74:	82 81       	ldd	r24, Z+2	; 0x02
     e76:	93 81       	ldd	r25, Z+3	; 0x03
     e78:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <__fixunssfsi>
     e7c:	dc 01       	movw	r26, r24
     e7e:	cb 01       	movw	r24, r22
     e80:	f8 01       	movw	r30, r16
     e82:	91 83       	std	Z+1, r25	; 0x01
     e84:	80 83       	st	Z, r24
     e86:	ce 01       	movw	r24, r28
     e88:	8a 58       	subi	r24, 0x8A	; 138
     e8a:	9f 4f       	sbci	r25, 0xFF	; 255
     e8c:	9e 01       	movw	r18, r28
     e8e:	2e 58       	subi	r18, 0x8E	; 142
     e90:	3f 4f       	sbci	r19, 0xFF	; 255
     e92:	f9 01       	movw	r30, r18
     e94:	20 81       	ld	r18, Z
     e96:	31 81       	ldd	r19, Z+1	; 0x01
     e98:	fc 01       	movw	r30, r24
     e9a:	31 83       	std	Z+1, r19	; 0x01
     e9c:	20 83       	st	Z, r18
     e9e:	ce 01       	movw	r24, r28
     ea0:	8a 58       	subi	r24, 0x8A	; 138
     ea2:	9f 4f       	sbci	r25, 0xFF	; 255
     ea4:	fc 01       	movw	r30, r24
     ea6:	80 81       	ld	r24, Z
     ea8:	91 81       	ldd	r25, Z+1	; 0x01
     eaa:	8c 01       	movw	r16, r24
     eac:	c8 01       	movw	r24, r16
     eae:	01 97       	sbiw	r24, 0x01	; 1
     eb0:	f1 f7       	brne	.-4      	; 0xeae <__stack+0x5af>
     eb2:	8c 01       	movw	r16, r24
     eb4:	ce 01       	movw	r24, r28
     eb6:	8a 58       	subi	r24, 0x8A	; 138
     eb8:	9f 4f       	sbci	r25, 0xFF	; 255
     eba:	fc 01       	movw	r30, r24
     ebc:	11 83       	std	Z+1, r17	; 0x01
     ebe:	00 83       	st	Z, r16
				_delay_ms(MOTOR_SPEED_MS);
				PORTD = 0b00001001;
				_delay_ms(MOTOR_SPEED_MS);
			}
		}else{
			for (uint16_t x = 0; x < degreesToMove;x++){
     ec0:	8b 81       	ldd	r24, Y+3	; 0x03
     ec2:	9c 81       	ldd	r25, Y+4	; 0x04
     ec4:	01 96       	adiw	r24, 0x01	; 1
     ec6:	9c 83       	std	Y+4, r25	; 0x04
     ec8:	8b 83       	std	Y+3, r24	; 0x03
     eca:	2b 81       	ldd	r18, Y+3	; 0x03
     ecc:	3c 81       	ldd	r19, Y+4	; 0x04
     ece:	8e 81       	ldd	r24, Y+6	; 0x06
     ed0:	9f 81       	ldd	r25, Y+7	; 0x07
     ed2:	28 17       	cp	r18, r24
     ed4:	39 07       	cpc	r19, r25
     ed6:	08 f4       	brcc	.+2      	; 0xeda <__stack+0x5db>
     ed8:	97 cc       	rjmp	.-1746   	; 0x808 <CURTAIN_POS_CHANGE_HANDLE+0x4fa>
				PORTD = 0b00001001;
				_delay_ms(MOTOR_SPEED_MS);
			}
		}
	
		PORTD = 0b00000000;
     eda:	8b e2       	ldi	r24, 0x2B	; 43
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	fc 01       	movw	r30, r24
     ee0:	10 82       	st	Z, r1
		currentCurtainPosition = positionToMove;
     ee2:	8d 81       	ldd	r24, Y+5	; 0x05
     ee4:	80 93 60 01 	sts	0x0160, r24
	}
	bit_clear(PORTB, BIT(1));
     ee8:	85 e2       	ldi	r24, 0x25	; 37
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	25 e2       	ldi	r18, 0x25	; 37
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	f9 01       	movw	r30, r18
     ef2:	20 81       	ld	r18, Z
     ef4:	2d 7f       	andi	r18, 0xFD	; 253
     ef6:	fc 01       	movw	r30, r24
     ef8:	20 83       	st	Z, r18
	bit_clear(PORTB, BIT(2));
     efa:	85 e2       	ldi	r24, 0x25	; 37
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	25 e2       	ldi	r18, 0x25	; 37
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	f9 01       	movw	r30, r18
     f04:	20 81       	ld	r18, Z
     f06:	2b 7f       	andi	r18, 0xFB	; 251
     f08:	fc 01       	movw	r30, r24
     f0a:	20 83       	st	Z, r18
}
     f0c:	c9 58       	subi	r28, 0x89	; 137
     f0e:	df 4f       	sbci	r29, 0xFF	; 255
     f10:	0f b6       	in	r0, 0x3f	; 63
     f12:	f8 94       	cli
     f14:	de bf       	out	0x3e, r29	; 62
     f16:	0f be       	out	0x3f, r0	; 63
     f18:	cd bf       	out	0x3d, r28	; 61
     f1a:	cf 91       	pop	r28
     f1c:	df 91       	pop	r29
     f1e:	1f 91       	pop	r17
     f20:	0f 91       	pop	r16
     f22:	08 95       	ret

00000f24 <STRETCHER_POS_CHANGE_HANDLE>:

void STRETCHER_POS_CHANGE_HANDLE(){
     f24:	0f 93       	push	r16
     f26:	1f 93       	push	r17
     f28:	df 93       	push	r29
     f2a:	cf 93       	push	r28
     f2c:	cd b7       	in	r28, 0x3d	; 61
     f2e:	de b7       	in	r29, 0x3e	; 62
     f30:	c7 57       	subi	r28, 0x77	; 119
     f32:	d0 40       	sbci	r29, 0x00	; 0
     f34:	0f b6       	in	r0, 0x3f	; 63
     f36:	f8 94       	cli
     f38:	de bf       	out	0x3e, r29	; 62
     f3a:	0f be       	out	0x3f, r0	; 63
     f3c:	cd bf       	out	0x3d, r28	; 61
	bit_set(PORTB, BIT(1));
     f3e:	85 e2       	ldi	r24, 0x25	; 37
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	25 e2       	ldi	r18, 0x25	; 37
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	f9 01       	movw	r30, r18
     f48:	20 81       	ld	r18, Z
     f4a:	22 60       	ori	r18, 0x02	; 2
     f4c:	fc 01       	movw	r30, r24
     f4e:	20 83       	st	Z, r18
	bit_set(PORTB, BIT(2));
     f50:	85 e2       	ldi	r24, 0x25	; 37
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	25 e2       	ldi	r18, 0x25	; 37
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	f9 01       	movw	r30, r18
     f5a:	20 81       	ld	r18, Z
     f5c:	24 60       	ori	r18, 0x04	; 4
     f5e:	fc 01       	movw	r30, r24
     f60:	20 83       	st	Z, r18
	
	uint8_t positionToMove =  atoi(parameter[0]);
     f62:	80 91 62 01 	lds	r24, 0x0162
     f66:	90 91 63 01 	lds	r25, 0x0163
     f6a:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <atoi>
     f6e:	8d 83       	std	Y+5, r24	; 0x05
	if (positionToMove<6) {
     f70:	8d 81       	ldd	r24, Y+5	; 0x05
     f72:	86 30       	cpi	r24, 0x06	; 6
     f74:	08 f0       	brcs	.+2      	; 0xf78 <STRETCHER_POS_CHANGE_HANDLE+0x54>
     f76:	c3 c5       	rjmp	.+2950   	; 0x1afe <STRETCHER_POS_CHANGE_HANDLE+0xbda>
		uint16_t degreesToMove = abs(positionToMove-currentStretcherPosition)*50;
     f78:	8d 81       	ldd	r24, Y+5	; 0x05
     f7a:	28 2f       	mov	r18, r24
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	80 91 61 01 	lds	r24, 0x0161
     f82:	88 2f       	mov	r24, r24
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	a9 01       	movw	r20, r18
     f88:	48 1b       	sub	r20, r24
     f8a:	59 0b       	sbc	r21, r25
     f8c:	ca 01       	movw	r24, r20
     f8e:	99 23       	and	r25, r25
     f90:	1c f4       	brge	.+6      	; 0xf98 <STRETCHER_POS_CHANGE_HANDLE+0x74>
     f92:	90 95       	com	r25
     f94:	81 95       	neg	r24
     f96:	9f 4f       	sbci	r25, 0xFF	; 255
     f98:	ac 01       	movw	r20, r24
     f9a:	22 e3       	ldi	r18, 0x32	; 50
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	42 9f       	mul	r20, r18
     fa0:	c0 01       	movw	r24, r0
     fa2:	43 9f       	mul	r20, r19
     fa4:	90 0d       	add	r25, r0
     fa6:	52 9f       	mul	r21, r18
     fa8:	90 0d       	add	r25, r0
     faa:	11 24       	eor	r1, r1
     fac:	9f 83       	std	Y+7, r25	; 0x07
     fae:	8e 83       	std	Y+6, r24	; 0x06
	
		if((positionToMove-currentCurtainPosition)>0){
     fb0:	8d 81       	ldd	r24, Y+5	; 0x05
     fb2:	28 2f       	mov	r18, r24
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	80 91 60 01 	lds	r24, 0x0160
     fba:	88 2f       	mov	r24, r24
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	f9 01       	movw	r30, r18
     fc0:	e8 1b       	sub	r30, r24
     fc2:	f9 0b       	sbc	r31, r25
     fc4:	cf 01       	movw	r24, r30
     fc6:	18 16       	cp	r1, r24
     fc8:	19 06       	cpc	r1, r25
     fca:	0c f0       	brlt	.+2      	; 0xfce <STRETCHER_POS_CHANGE_HANDLE+0xaa>
     fcc:	25 c2       	rjmp	.+1098   	; 0x1418 <STRETCHER_POS_CHANGE_HANDLE+0x4f4>
			for (uint16_t x = 0; x < degreesToMove;x++){
     fce:	1a 82       	std	Y+2, r1	; 0x02
     fd0:	19 82       	std	Y+1, r1	; 0x01
     fd2:	19 c2       	rjmp	.+1074   	; 0x1406 <STRETCHER_POS_CHANGE_HANDLE+0x4e2>
				PORTD = 0b00110000;
     fd4:	8b e2       	ldi	r24, 0x2B	; 43
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	20 e3       	ldi	r18, 0x30	; 48
     fda:	fc 01       	movw	r30, r24
     fdc:	20 83       	st	Z, r18
     fde:	80 e0       	ldi	r24, 0x00	; 0
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	a0 e8       	ldi	r26, 0x80	; 128
     fe4:	bf e3       	ldi	r27, 0x3F	; 63
     fe6:	88 87       	std	Y+8, r24	; 0x08
     fe8:	99 87       	std	Y+9, r25	; 0x09
     fea:	aa 87       	std	Y+10, r26	; 0x0a
     fec:	bb 87       	std	Y+11, r27	; 0x0b
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     fee:	68 85       	ldd	r22, Y+8	; 0x08
     ff0:	79 85       	ldd	r23, Y+9	; 0x09
     ff2:	8a 85       	ldd	r24, Y+10	; 0x0a
     ff4:	9b 85       	ldd	r25, Y+11	; 0x0b
     ff6:	20 e0       	ldi	r18, 0x00	; 0
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	4a e7       	ldi	r20, 0x7A	; 122
     ffc:	55 e4       	ldi	r21, 0x45	; 69
     ffe:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__mulsf3>
    1002:	dc 01       	movw	r26, r24
    1004:	cb 01       	movw	r24, r22
    1006:	8c 87       	std	Y+12, r24	; 0x0c
    1008:	9d 87       	std	Y+13, r25	; 0x0d
    100a:	ae 87       	std	Y+14, r26	; 0x0e
    100c:	bf 87       	std	Y+15, r27	; 0x0f
	if (__tmp < 1.0)
    100e:	11 e0       	ldi	r17, 0x01	; 1
    1010:	6c 85       	ldd	r22, Y+12	; 0x0c
    1012:	7d 85       	ldd	r23, Y+13	; 0x0d
    1014:	8e 85       	ldd	r24, Y+14	; 0x0e
    1016:	9f 85       	ldd	r25, Y+15	; 0x0f
    1018:	20 e0       	ldi	r18, 0x00	; 0
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	40 e8       	ldi	r20, 0x80	; 128
    101e:	5f e3       	ldi	r21, 0x3F	; 63
    1020:	0e 94 76 14 	call	0x28ec	; 0x28ec <__cmpsf2>
    1024:	88 23       	and	r24, r24
    1026:	0c f0       	brlt	.+2      	; 0x102a <STRETCHER_POS_CHANGE_HANDLE+0x106>
    1028:	10 e0       	ldi	r17, 0x00	; 0
    102a:	11 23       	and	r17, r17
    102c:	29 f0       	breq	.+10     	; 0x1038 <STRETCHER_POS_CHANGE_HANDLE+0x114>
		__ticks = 1;
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	99 8b       	std	Y+17, r25	; 0x11
    1034:	88 8b       	std	Y+16, r24	; 0x10
    1036:	46 c0       	rjmp	.+140    	; 0x10c4 <STRETCHER_POS_CHANGE_HANDLE+0x1a0>
	else if (__tmp > 65535)
    1038:	11 e0       	ldi	r17, 0x01	; 1
    103a:	6c 85       	ldd	r22, Y+12	; 0x0c
    103c:	7d 85       	ldd	r23, Y+13	; 0x0d
    103e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1040:	9f 85       	ldd	r25, Y+15	; 0x0f
    1042:	20 e0       	ldi	r18, 0x00	; 0
    1044:	3f ef       	ldi	r19, 0xFF	; 255
    1046:	4f e7       	ldi	r20, 0x7F	; 127
    1048:	57 e4       	ldi	r21, 0x47	; 71
    104a:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__gesf2>
    104e:	18 16       	cp	r1, r24
    1050:	0c f0       	brlt	.+2      	; 0x1054 <STRETCHER_POS_CHANGE_HANDLE+0x130>
    1052:	10 e0       	ldi	r17, 0x00	; 0
    1054:	11 23       	and	r17, r17
    1056:	61 f1       	breq	.+88     	; 0x10b0 <STRETCHER_POS_CHANGE_HANDLE+0x18c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1058:	68 85       	ldd	r22, Y+8	; 0x08
    105a:	79 85       	ldd	r23, Y+9	; 0x09
    105c:	8a 85       	ldd	r24, Y+10	; 0x0a
    105e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1060:	20 e0       	ldi	r18, 0x00	; 0
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	40 e2       	ldi	r20, 0x20	; 32
    1066:	51 e4       	ldi	r21, 0x41	; 65
    1068:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__mulsf3>
    106c:	dc 01       	movw	r26, r24
    106e:	cb 01       	movw	r24, r22
    1070:	bc 01       	movw	r22, r24
    1072:	cd 01       	movw	r24, r26
    1074:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <__fixunssfsi>
    1078:	dc 01       	movw	r26, r24
    107a:	cb 01       	movw	r24, r22
    107c:	99 8b       	std	Y+17, r25	; 0x11
    107e:	88 8b       	std	Y+16, r24	; 0x10
    1080:	12 c0       	rjmp	.+36     	; 0x10a6 <STRETCHER_POS_CHANGE_HANDLE+0x182>
    1082:	80 e9       	ldi	r24, 0x90	; 144
    1084:	91 e0       	ldi	r25, 0x01	; 1
    1086:	9b 8b       	std	Y+19, r25	; 0x13
    1088:	8a 8b       	std	Y+18, r24	; 0x12
    108a:	8a 89       	ldd	r24, Y+18	; 0x12
    108c:	9b 89       	ldd	r25, Y+19	; 0x13
    108e:	8c 01       	movw	r16, r24
    1090:	c8 01       	movw	r24, r16
    1092:	01 97       	sbiw	r24, 0x01	; 1
    1094:	f1 f7       	brne	.-4      	; 0x1092 <STRETCHER_POS_CHANGE_HANDLE+0x16e>
    1096:	8c 01       	movw	r16, r24
    1098:	1b 8b       	std	Y+19, r17	; 0x13
    109a:	0a 8b       	std	Y+18, r16	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    109c:	88 89       	ldd	r24, Y+16	; 0x10
    109e:	99 89       	ldd	r25, Y+17	; 0x11
    10a0:	01 97       	sbiw	r24, 0x01	; 1
    10a2:	99 8b       	std	Y+17, r25	; 0x11
    10a4:	88 8b       	std	Y+16, r24	; 0x10
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10a6:	88 89       	ldd	r24, Y+16	; 0x10
    10a8:	99 89       	ldd	r25, Y+17	; 0x11
    10aa:	00 97       	sbiw	r24, 0x00	; 0
    10ac:	51 f7       	brne	.-44     	; 0x1082 <STRETCHER_POS_CHANGE_HANDLE+0x15e>
    10ae:	17 c0       	rjmp	.+46     	; 0x10de <STRETCHER_POS_CHANGE_HANDLE+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10b0:	6c 85       	ldd	r22, Y+12	; 0x0c
    10b2:	7d 85       	ldd	r23, Y+13	; 0x0d
    10b4:	8e 85       	ldd	r24, Y+14	; 0x0e
    10b6:	9f 85       	ldd	r25, Y+15	; 0x0f
    10b8:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <__fixunssfsi>
    10bc:	dc 01       	movw	r26, r24
    10be:	cb 01       	movw	r24, r22
    10c0:	99 8b       	std	Y+17, r25	; 0x11
    10c2:	88 8b       	std	Y+16, r24	; 0x10
    10c4:	88 89       	ldd	r24, Y+16	; 0x10
    10c6:	99 89       	ldd	r25, Y+17	; 0x11
    10c8:	9d 8b       	std	Y+21, r25	; 0x15
    10ca:	8c 8b       	std	Y+20, r24	; 0x14
    10cc:	8c 89       	ldd	r24, Y+20	; 0x14
    10ce:	9d 89       	ldd	r25, Y+21	; 0x15
    10d0:	8c 01       	movw	r16, r24
    10d2:	f8 01       	movw	r30, r16
    10d4:	31 97       	sbiw	r30, 0x01	; 1
    10d6:	f1 f7       	brne	.-4      	; 0x10d4 <STRETCHER_POS_CHANGE_HANDLE+0x1b0>
    10d8:	8f 01       	movw	r16, r30
    10da:	1d 8b       	std	Y+21, r17	; 0x15
    10dc:	0c 8b       	std	Y+20, r16	; 0x14
				_delay_ms(MOTOR_SPEED_MS);
				PORTD = 0b01100000;
    10de:	8b e2       	ldi	r24, 0x2B	; 43
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	20 e6       	ldi	r18, 0x60	; 96
    10e4:	fc 01       	movw	r30, r24
    10e6:	20 83       	st	Z, r18
    10e8:	80 e0       	ldi	r24, 0x00	; 0
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	a0 e8       	ldi	r26, 0x80	; 128
    10ee:	bf e3       	ldi	r27, 0x3F	; 63
    10f0:	8e 8b       	std	Y+22, r24	; 0x16
    10f2:	9f 8b       	std	Y+23, r25	; 0x17
    10f4:	a8 8f       	std	Y+24, r26	; 0x18
    10f6:	b9 8f       	std	Y+25, r27	; 0x19
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    10f8:	6e 89       	ldd	r22, Y+22	; 0x16
    10fa:	7f 89       	ldd	r23, Y+23	; 0x17
    10fc:	88 8d       	ldd	r24, Y+24	; 0x18
    10fe:	99 8d       	ldd	r25, Y+25	; 0x19
    1100:	20 e0       	ldi	r18, 0x00	; 0
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	4a e7       	ldi	r20, 0x7A	; 122
    1106:	55 e4       	ldi	r21, 0x45	; 69
    1108:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__mulsf3>
    110c:	dc 01       	movw	r26, r24
    110e:	cb 01       	movw	r24, r22
    1110:	8a 8f       	std	Y+26, r24	; 0x1a
    1112:	9b 8f       	std	Y+27, r25	; 0x1b
    1114:	ac 8f       	std	Y+28, r26	; 0x1c
    1116:	bd 8f       	std	Y+29, r27	; 0x1d
	if (__tmp < 1.0)
    1118:	11 e0       	ldi	r17, 0x01	; 1
    111a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    111c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    111e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1120:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1122:	20 e0       	ldi	r18, 0x00	; 0
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	40 e8       	ldi	r20, 0x80	; 128
    1128:	5f e3       	ldi	r21, 0x3F	; 63
    112a:	0e 94 76 14 	call	0x28ec	; 0x28ec <__cmpsf2>
    112e:	88 23       	and	r24, r24
    1130:	0c f0       	brlt	.+2      	; 0x1134 <STRETCHER_POS_CHANGE_HANDLE+0x210>
    1132:	10 e0       	ldi	r17, 0x00	; 0
    1134:	11 23       	and	r17, r17
    1136:	29 f0       	breq	.+10     	; 0x1142 <STRETCHER_POS_CHANGE_HANDLE+0x21e>
		__ticks = 1;
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	9f 8f       	std	Y+31, r25	; 0x1f
    113e:	8e 8f       	std	Y+30, r24	; 0x1e
    1140:	46 c0       	rjmp	.+140    	; 0x11ce <STRETCHER_POS_CHANGE_HANDLE+0x2aa>
	else if (__tmp > 65535)
    1142:	11 e0       	ldi	r17, 0x01	; 1
    1144:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1146:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1148:	8c 8d       	ldd	r24, Y+28	; 0x1c
    114a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    114c:	20 e0       	ldi	r18, 0x00	; 0
    114e:	3f ef       	ldi	r19, 0xFF	; 255
    1150:	4f e7       	ldi	r20, 0x7F	; 127
    1152:	57 e4       	ldi	r21, 0x47	; 71
    1154:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__gesf2>
    1158:	18 16       	cp	r1, r24
    115a:	0c f0       	brlt	.+2      	; 0x115e <STRETCHER_POS_CHANGE_HANDLE+0x23a>
    115c:	10 e0       	ldi	r17, 0x00	; 0
    115e:	11 23       	and	r17, r17
    1160:	61 f1       	breq	.+88     	; 0x11ba <STRETCHER_POS_CHANGE_HANDLE+0x296>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1162:	6e 89       	ldd	r22, Y+22	; 0x16
    1164:	7f 89       	ldd	r23, Y+23	; 0x17
    1166:	88 8d       	ldd	r24, Y+24	; 0x18
    1168:	99 8d       	ldd	r25, Y+25	; 0x19
    116a:	20 e0       	ldi	r18, 0x00	; 0
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	40 e2       	ldi	r20, 0x20	; 32
    1170:	51 e4       	ldi	r21, 0x41	; 65
    1172:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__mulsf3>
    1176:	dc 01       	movw	r26, r24
    1178:	cb 01       	movw	r24, r22
    117a:	bc 01       	movw	r22, r24
    117c:	cd 01       	movw	r24, r26
    117e:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <__fixunssfsi>
    1182:	dc 01       	movw	r26, r24
    1184:	cb 01       	movw	r24, r22
    1186:	9f 8f       	std	Y+31, r25	; 0x1f
    1188:	8e 8f       	std	Y+30, r24	; 0x1e
    118a:	12 c0       	rjmp	.+36     	; 0x11b0 <STRETCHER_POS_CHANGE_HANDLE+0x28c>
    118c:	80 e9       	ldi	r24, 0x90	; 144
    118e:	91 e0       	ldi	r25, 0x01	; 1
    1190:	99 a3       	std	Y+33, r25	; 0x21
    1192:	88 a3       	std	Y+32, r24	; 0x20
    1194:	88 a1       	ldd	r24, Y+32	; 0x20
    1196:	99 a1       	ldd	r25, Y+33	; 0x21
    1198:	8c 01       	movw	r16, r24
    119a:	c8 01       	movw	r24, r16
    119c:	01 97       	sbiw	r24, 0x01	; 1
    119e:	f1 f7       	brne	.-4      	; 0x119c <STRETCHER_POS_CHANGE_HANDLE+0x278>
    11a0:	8c 01       	movw	r16, r24
    11a2:	19 a3       	std	Y+33, r17	; 0x21
    11a4:	08 a3       	std	Y+32, r16	; 0x20
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11a6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    11a8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    11aa:	01 97       	sbiw	r24, 0x01	; 1
    11ac:	9f 8f       	std	Y+31, r25	; 0x1f
    11ae:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11b0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    11b2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    11b4:	00 97       	sbiw	r24, 0x00	; 0
    11b6:	51 f7       	brne	.-44     	; 0x118c <STRETCHER_POS_CHANGE_HANDLE+0x268>
    11b8:	17 c0       	rjmp	.+46     	; 0x11e8 <STRETCHER_POS_CHANGE_HANDLE+0x2c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11ba:	6a 8d       	ldd	r22, Y+26	; 0x1a
    11bc:	7b 8d       	ldd	r23, Y+27	; 0x1b
    11be:	8c 8d       	ldd	r24, Y+28	; 0x1c
    11c0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    11c2:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <__fixunssfsi>
    11c6:	dc 01       	movw	r26, r24
    11c8:	cb 01       	movw	r24, r22
    11ca:	9f 8f       	std	Y+31, r25	; 0x1f
    11cc:	8e 8f       	std	Y+30, r24	; 0x1e
    11ce:	8e 8d       	ldd	r24, Y+30	; 0x1e
    11d0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    11d2:	9b a3       	std	Y+35, r25	; 0x23
    11d4:	8a a3       	std	Y+34, r24	; 0x22
    11d6:	8a a1       	ldd	r24, Y+34	; 0x22
    11d8:	9b a1       	ldd	r25, Y+35	; 0x23
    11da:	8c 01       	movw	r16, r24
    11dc:	f8 01       	movw	r30, r16
    11de:	31 97       	sbiw	r30, 0x01	; 1
    11e0:	f1 f7       	brne	.-4      	; 0x11de <STRETCHER_POS_CHANGE_HANDLE+0x2ba>
    11e2:	8f 01       	movw	r16, r30
    11e4:	1b a3       	std	Y+35, r17	; 0x23
    11e6:	0a a3       	std	Y+34, r16	; 0x22
				_delay_ms(MOTOR_SPEED_MS);
				PORTD = 0b11000000;
    11e8:	8b e2       	ldi	r24, 0x2B	; 43
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	20 ec       	ldi	r18, 0xC0	; 192
    11ee:	fc 01       	movw	r30, r24
    11f0:	20 83       	st	Z, r18
    11f2:	80 e0       	ldi	r24, 0x00	; 0
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	a0 e8       	ldi	r26, 0x80	; 128
    11f8:	bf e3       	ldi	r27, 0x3F	; 63
    11fa:	8c a3       	std	Y+36, r24	; 0x24
    11fc:	9d a3       	std	Y+37, r25	; 0x25
    11fe:	ae a3       	std	Y+38, r26	; 0x26
    1200:	bf a3       	std	Y+39, r27	; 0x27
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    1202:	6c a1       	ldd	r22, Y+36	; 0x24
    1204:	7d a1       	ldd	r23, Y+37	; 0x25
    1206:	8e a1       	ldd	r24, Y+38	; 0x26
    1208:	9f a1       	ldd	r25, Y+39	; 0x27
    120a:	20 e0       	ldi	r18, 0x00	; 0
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	4a e7       	ldi	r20, 0x7A	; 122
    1210:	55 e4       	ldi	r21, 0x45	; 69
    1212:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__mulsf3>
    1216:	dc 01       	movw	r26, r24
    1218:	cb 01       	movw	r24, r22
    121a:	88 a7       	std	Y+40, r24	; 0x28
    121c:	99 a7       	std	Y+41, r25	; 0x29
    121e:	aa a7       	std	Y+42, r26	; 0x2a
    1220:	bb a7       	std	Y+43, r27	; 0x2b
	if (__tmp < 1.0)
    1222:	11 e0       	ldi	r17, 0x01	; 1
    1224:	68 a5       	ldd	r22, Y+40	; 0x28
    1226:	79 a5       	ldd	r23, Y+41	; 0x29
    1228:	8a a5       	ldd	r24, Y+42	; 0x2a
    122a:	9b a5       	ldd	r25, Y+43	; 0x2b
    122c:	20 e0       	ldi	r18, 0x00	; 0
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	40 e8       	ldi	r20, 0x80	; 128
    1232:	5f e3       	ldi	r21, 0x3F	; 63
    1234:	0e 94 76 14 	call	0x28ec	; 0x28ec <__cmpsf2>
    1238:	88 23       	and	r24, r24
    123a:	0c f0       	brlt	.+2      	; 0x123e <STRETCHER_POS_CHANGE_HANDLE+0x31a>
    123c:	10 e0       	ldi	r17, 0x00	; 0
    123e:	11 23       	and	r17, r17
    1240:	29 f0       	breq	.+10     	; 0x124c <STRETCHER_POS_CHANGE_HANDLE+0x328>
		__ticks = 1;
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	9d a7       	std	Y+45, r25	; 0x2d
    1248:	8c a7       	std	Y+44, r24	; 0x2c
    124a:	46 c0       	rjmp	.+140    	; 0x12d8 <STRETCHER_POS_CHANGE_HANDLE+0x3b4>
	else if (__tmp > 65535)
    124c:	11 e0       	ldi	r17, 0x01	; 1
    124e:	68 a5       	ldd	r22, Y+40	; 0x28
    1250:	79 a5       	ldd	r23, Y+41	; 0x29
    1252:	8a a5       	ldd	r24, Y+42	; 0x2a
    1254:	9b a5       	ldd	r25, Y+43	; 0x2b
    1256:	20 e0       	ldi	r18, 0x00	; 0
    1258:	3f ef       	ldi	r19, 0xFF	; 255
    125a:	4f e7       	ldi	r20, 0x7F	; 127
    125c:	57 e4       	ldi	r21, 0x47	; 71
    125e:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__gesf2>
    1262:	18 16       	cp	r1, r24
    1264:	0c f0       	brlt	.+2      	; 0x1268 <STRETCHER_POS_CHANGE_HANDLE+0x344>
    1266:	10 e0       	ldi	r17, 0x00	; 0
    1268:	11 23       	and	r17, r17
    126a:	61 f1       	breq	.+88     	; 0x12c4 <STRETCHER_POS_CHANGE_HANDLE+0x3a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    126c:	6c a1       	ldd	r22, Y+36	; 0x24
    126e:	7d a1       	ldd	r23, Y+37	; 0x25
    1270:	8e a1       	ldd	r24, Y+38	; 0x26
    1272:	9f a1       	ldd	r25, Y+39	; 0x27
    1274:	20 e0       	ldi	r18, 0x00	; 0
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	40 e2       	ldi	r20, 0x20	; 32
    127a:	51 e4       	ldi	r21, 0x41	; 65
    127c:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__mulsf3>
    1280:	dc 01       	movw	r26, r24
    1282:	cb 01       	movw	r24, r22
    1284:	bc 01       	movw	r22, r24
    1286:	cd 01       	movw	r24, r26
    1288:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <__fixunssfsi>
    128c:	dc 01       	movw	r26, r24
    128e:	cb 01       	movw	r24, r22
    1290:	9d a7       	std	Y+45, r25	; 0x2d
    1292:	8c a7       	std	Y+44, r24	; 0x2c
    1294:	12 c0       	rjmp	.+36     	; 0x12ba <STRETCHER_POS_CHANGE_HANDLE+0x396>
    1296:	80 e9       	ldi	r24, 0x90	; 144
    1298:	91 e0       	ldi	r25, 0x01	; 1
    129a:	9f a7       	std	Y+47, r25	; 0x2f
    129c:	8e a7       	std	Y+46, r24	; 0x2e
    129e:	8e a5       	ldd	r24, Y+46	; 0x2e
    12a0:	9f a5       	ldd	r25, Y+47	; 0x2f
    12a2:	8c 01       	movw	r16, r24
    12a4:	c8 01       	movw	r24, r16
    12a6:	01 97       	sbiw	r24, 0x01	; 1
    12a8:	f1 f7       	brne	.-4      	; 0x12a6 <STRETCHER_POS_CHANGE_HANDLE+0x382>
    12aa:	8c 01       	movw	r16, r24
    12ac:	1f a7       	std	Y+47, r17	; 0x2f
    12ae:	0e a7       	std	Y+46, r16	; 0x2e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12b0:	8c a5       	ldd	r24, Y+44	; 0x2c
    12b2:	9d a5       	ldd	r25, Y+45	; 0x2d
    12b4:	01 97       	sbiw	r24, 0x01	; 1
    12b6:	9d a7       	std	Y+45, r25	; 0x2d
    12b8:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12ba:	8c a5       	ldd	r24, Y+44	; 0x2c
    12bc:	9d a5       	ldd	r25, Y+45	; 0x2d
    12be:	00 97       	sbiw	r24, 0x00	; 0
    12c0:	51 f7       	brne	.-44     	; 0x1296 <STRETCHER_POS_CHANGE_HANDLE+0x372>
    12c2:	17 c0       	rjmp	.+46     	; 0x12f2 <STRETCHER_POS_CHANGE_HANDLE+0x3ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12c4:	68 a5       	ldd	r22, Y+40	; 0x28
    12c6:	79 a5       	ldd	r23, Y+41	; 0x29
    12c8:	8a a5       	ldd	r24, Y+42	; 0x2a
    12ca:	9b a5       	ldd	r25, Y+43	; 0x2b
    12cc:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <__fixunssfsi>
    12d0:	dc 01       	movw	r26, r24
    12d2:	cb 01       	movw	r24, r22
    12d4:	9d a7       	std	Y+45, r25	; 0x2d
    12d6:	8c a7       	std	Y+44, r24	; 0x2c
    12d8:	8c a5       	ldd	r24, Y+44	; 0x2c
    12da:	9d a5       	ldd	r25, Y+45	; 0x2d
    12dc:	99 ab       	std	Y+49, r25	; 0x31
    12de:	88 ab       	std	Y+48, r24	; 0x30
    12e0:	88 a9       	ldd	r24, Y+48	; 0x30
    12e2:	99 a9       	ldd	r25, Y+49	; 0x31
    12e4:	8c 01       	movw	r16, r24
    12e6:	f8 01       	movw	r30, r16
    12e8:	31 97       	sbiw	r30, 0x01	; 1
    12ea:	f1 f7       	brne	.-4      	; 0x12e8 <STRETCHER_POS_CHANGE_HANDLE+0x3c4>
    12ec:	8f 01       	movw	r16, r30
    12ee:	19 ab       	std	Y+49, r17	; 0x31
    12f0:	08 ab       	std	Y+48, r16	; 0x30
				_delay_ms(MOTOR_SPEED_MS);
				PORTD = 0b10010000;
    12f2:	8b e2       	ldi	r24, 0x2B	; 43
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	20 e9       	ldi	r18, 0x90	; 144
    12f8:	fc 01       	movw	r30, r24
    12fa:	20 83       	st	Z, r18
    12fc:	80 e0       	ldi	r24, 0x00	; 0
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	a0 e8       	ldi	r26, 0x80	; 128
    1302:	bf e3       	ldi	r27, 0x3F	; 63
    1304:	8a ab       	std	Y+50, r24	; 0x32
    1306:	9b ab       	std	Y+51, r25	; 0x33
    1308:	ac ab       	std	Y+52, r26	; 0x34
    130a:	bd ab       	std	Y+53, r27	; 0x35
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    130c:	6a a9       	ldd	r22, Y+50	; 0x32
    130e:	7b a9       	ldd	r23, Y+51	; 0x33
    1310:	8c a9       	ldd	r24, Y+52	; 0x34
    1312:	9d a9       	ldd	r25, Y+53	; 0x35
    1314:	20 e0       	ldi	r18, 0x00	; 0
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	4a e7       	ldi	r20, 0x7A	; 122
    131a:	55 e4       	ldi	r21, 0x45	; 69
    131c:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__mulsf3>
    1320:	dc 01       	movw	r26, r24
    1322:	cb 01       	movw	r24, r22
    1324:	8e ab       	std	Y+54, r24	; 0x36
    1326:	9f ab       	std	Y+55, r25	; 0x37
    1328:	a8 af       	std	Y+56, r26	; 0x38
    132a:	b9 af       	std	Y+57, r27	; 0x39
	if (__tmp < 1.0)
    132c:	11 e0       	ldi	r17, 0x01	; 1
    132e:	6e a9       	ldd	r22, Y+54	; 0x36
    1330:	7f a9       	ldd	r23, Y+55	; 0x37
    1332:	88 ad       	ldd	r24, Y+56	; 0x38
    1334:	99 ad       	ldd	r25, Y+57	; 0x39
    1336:	20 e0       	ldi	r18, 0x00	; 0
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	40 e8       	ldi	r20, 0x80	; 128
    133c:	5f e3       	ldi	r21, 0x3F	; 63
    133e:	0e 94 76 14 	call	0x28ec	; 0x28ec <__cmpsf2>
    1342:	88 23       	and	r24, r24
    1344:	0c f0       	brlt	.+2      	; 0x1348 <STRETCHER_POS_CHANGE_HANDLE+0x424>
    1346:	10 e0       	ldi	r17, 0x00	; 0
    1348:	11 23       	and	r17, r17
    134a:	29 f0       	breq	.+10     	; 0x1356 <STRETCHER_POS_CHANGE_HANDLE+0x432>
		__ticks = 1;
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	9b af       	std	Y+59, r25	; 0x3b
    1352:	8a af       	std	Y+58, r24	; 0x3a
    1354:	46 c0       	rjmp	.+140    	; 0x13e2 <STRETCHER_POS_CHANGE_HANDLE+0x4be>
	else if (__tmp > 65535)
    1356:	11 e0       	ldi	r17, 0x01	; 1
    1358:	6e a9       	ldd	r22, Y+54	; 0x36
    135a:	7f a9       	ldd	r23, Y+55	; 0x37
    135c:	88 ad       	ldd	r24, Y+56	; 0x38
    135e:	99 ad       	ldd	r25, Y+57	; 0x39
    1360:	20 e0       	ldi	r18, 0x00	; 0
    1362:	3f ef       	ldi	r19, 0xFF	; 255
    1364:	4f e7       	ldi	r20, 0x7F	; 127
    1366:	57 e4       	ldi	r21, 0x47	; 71
    1368:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__gesf2>
    136c:	18 16       	cp	r1, r24
    136e:	0c f0       	brlt	.+2      	; 0x1372 <STRETCHER_POS_CHANGE_HANDLE+0x44e>
    1370:	10 e0       	ldi	r17, 0x00	; 0
    1372:	11 23       	and	r17, r17
    1374:	61 f1       	breq	.+88     	; 0x13ce <STRETCHER_POS_CHANGE_HANDLE+0x4aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1376:	6a a9       	ldd	r22, Y+50	; 0x32
    1378:	7b a9       	ldd	r23, Y+51	; 0x33
    137a:	8c a9       	ldd	r24, Y+52	; 0x34
    137c:	9d a9       	ldd	r25, Y+53	; 0x35
    137e:	20 e0       	ldi	r18, 0x00	; 0
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	40 e2       	ldi	r20, 0x20	; 32
    1384:	51 e4       	ldi	r21, 0x41	; 65
    1386:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__mulsf3>
    138a:	dc 01       	movw	r26, r24
    138c:	cb 01       	movw	r24, r22
    138e:	bc 01       	movw	r22, r24
    1390:	cd 01       	movw	r24, r26
    1392:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <__fixunssfsi>
    1396:	dc 01       	movw	r26, r24
    1398:	cb 01       	movw	r24, r22
    139a:	9b af       	std	Y+59, r25	; 0x3b
    139c:	8a af       	std	Y+58, r24	; 0x3a
    139e:	12 c0       	rjmp	.+36     	; 0x13c4 <STRETCHER_POS_CHANGE_HANDLE+0x4a0>
    13a0:	80 e9       	ldi	r24, 0x90	; 144
    13a2:	91 e0       	ldi	r25, 0x01	; 1
    13a4:	9d af       	std	Y+61, r25	; 0x3d
    13a6:	8c af       	std	Y+60, r24	; 0x3c
    13a8:	8c ad       	ldd	r24, Y+60	; 0x3c
    13aa:	9d ad       	ldd	r25, Y+61	; 0x3d
    13ac:	8c 01       	movw	r16, r24
    13ae:	c8 01       	movw	r24, r16
    13b0:	01 97       	sbiw	r24, 0x01	; 1
    13b2:	f1 f7       	brne	.-4      	; 0x13b0 <STRETCHER_POS_CHANGE_HANDLE+0x48c>
    13b4:	8c 01       	movw	r16, r24
    13b6:	1d af       	std	Y+61, r17	; 0x3d
    13b8:	0c af       	std	Y+60, r16	; 0x3c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13ba:	8a ad       	ldd	r24, Y+58	; 0x3a
    13bc:	9b ad       	ldd	r25, Y+59	; 0x3b
    13be:	01 97       	sbiw	r24, 0x01	; 1
    13c0:	9b af       	std	Y+59, r25	; 0x3b
    13c2:	8a af       	std	Y+58, r24	; 0x3a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13c4:	8a ad       	ldd	r24, Y+58	; 0x3a
    13c6:	9b ad       	ldd	r25, Y+59	; 0x3b
    13c8:	00 97       	sbiw	r24, 0x00	; 0
    13ca:	51 f7       	brne	.-44     	; 0x13a0 <STRETCHER_POS_CHANGE_HANDLE+0x47c>
    13cc:	17 c0       	rjmp	.+46     	; 0x13fc <STRETCHER_POS_CHANGE_HANDLE+0x4d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13ce:	6e a9       	ldd	r22, Y+54	; 0x36
    13d0:	7f a9       	ldd	r23, Y+55	; 0x37
    13d2:	88 ad       	ldd	r24, Y+56	; 0x38
    13d4:	99 ad       	ldd	r25, Y+57	; 0x39
    13d6:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <__fixunssfsi>
    13da:	dc 01       	movw	r26, r24
    13dc:	cb 01       	movw	r24, r22
    13de:	9b af       	std	Y+59, r25	; 0x3b
    13e0:	8a af       	std	Y+58, r24	; 0x3a
    13e2:	8a ad       	ldd	r24, Y+58	; 0x3a
    13e4:	9b ad       	ldd	r25, Y+59	; 0x3b
    13e6:	9f af       	std	Y+63, r25	; 0x3f
    13e8:	8e af       	std	Y+62, r24	; 0x3e
    13ea:	8e ad       	ldd	r24, Y+62	; 0x3e
    13ec:	9f ad       	ldd	r25, Y+63	; 0x3f
    13ee:	8c 01       	movw	r16, r24
    13f0:	f8 01       	movw	r30, r16
    13f2:	31 97       	sbiw	r30, 0x01	; 1
    13f4:	f1 f7       	brne	.-4      	; 0x13f2 <STRETCHER_POS_CHANGE_HANDLE+0x4ce>
    13f6:	8f 01       	movw	r16, r30
    13f8:	1f af       	std	Y+63, r17	; 0x3f
    13fa:	0e af       	std	Y+62, r16	; 0x3e
	uint8_t positionToMove =  atoi(parameter[0]);
	if (positionToMove<6) {
		uint16_t degreesToMove = abs(positionToMove-currentStretcherPosition)*50;
	
		if((positionToMove-currentCurtainPosition)>0){
			for (uint16_t x = 0; x < degreesToMove;x++){
    13fc:	89 81       	ldd	r24, Y+1	; 0x01
    13fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1400:	01 96       	adiw	r24, 0x01	; 1
    1402:	9a 83       	std	Y+2, r25	; 0x02
    1404:	89 83       	std	Y+1, r24	; 0x01
    1406:	29 81       	ldd	r18, Y+1	; 0x01
    1408:	3a 81       	ldd	r19, Y+2	; 0x02
    140a:	8e 81       	ldd	r24, Y+6	; 0x06
    140c:	9f 81       	ldd	r25, Y+7	; 0x07
    140e:	28 17       	cp	r18, r24
    1410:	39 07       	cpc	r19, r25
    1412:	08 f4       	brcc	.+2      	; 0x1416 <STRETCHER_POS_CHANGE_HANDLE+0x4f2>
    1414:	df cd       	rjmp	.-1090   	; 0xfd4 <STRETCHER_POS_CHANGE_HANDLE+0xb0>
    1416:	6c c3       	rjmp	.+1752   	; 0x1af0 <STRETCHER_POS_CHANGE_HANDLE+0xbcc>
				_delay_ms(MOTOR_SPEED_MS);
				PORTD = 0b10010000;
				_delay_ms(MOTOR_SPEED_MS);
			}
			}else{
			for (uint16_t x = 0; x < degreesToMove;x++){
    1418:	1c 82       	std	Y+4, r1	; 0x04
    141a:	1b 82       	std	Y+3, r1	; 0x03
    141c:	61 c3       	rjmp	.+1730   	; 0x1ae0 <STRETCHER_POS_CHANGE_HANDLE+0xbbc>
				PORTD = 0b11000000;
    141e:	8b e2       	ldi	r24, 0x2B	; 43
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	20 ec       	ldi	r18, 0xC0	; 192
    1424:	fc 01       	movw	r30, r24
    1426:	20 83       	st	Z, r18
    1428:	9e 01       	movw	r18, r28
    142a:	20 5c       	subi	r18, 0xC0	; 192
    142c:	3f 4f       	sbci	r19, 0xFF	; 255
    142e:	80 e0       	ldi	r24, 0x00	; 0
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	a0 e8       	ldi	r26, 0x80	; 128
    1434:	bf e3       	ldi	r27, 0x3F	; 63
    1436:	f9 01       	movw	r30, r18
    1438:	80 83       	st	Z, r24
    143a:	91 83       	std	Z+1, r25	; 0x01
    143c:	a2 83       	std	Z+2, r26	; 0x02
    143e:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    1440:	8e 01       	movw	r16, r28
    1442:	0c 5b       	subi	r16, 0xBC	; 188
    1444:	1f 4f       	sbci	r17, 0xFF	; 255
    1446:	ce 01       	movw	r24, r28
    1448:	80 5c       	subi	r24, 0xC0	; 192
    144a:	9f 4f       	sbci	r25, 0xFF	; 255
    144c:	fc 01       	movw	r30, r24
    144e:	60 81       	ld	r22, Z
    1450:	71 81       	ldd	r23, Z+1	; 0x01
    1452:	82 81       	ldd	r24, Z+2	; 0x02
    1454:	93 81       	ldd	r25, Z+3	; 0x03
    1456:	20 e0       	ldi	r18, 0x00	; 0
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	4a e7       	ldi	r20, 0x7A	; 122
    145c:	55 e4       	ldi	r21, 0x45	; 69
    145e:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__mulsf3>
    1462:	dc 01       	movw	r26, r24
    1464:	cb 01       	movw	r24, r22
    1466:	f8 01       	movw	r30, r16
    1468:	80 83       	st	Z, r24
    146a:	91 83       	std	Z+1, r25	; 0x01
    146c:	a2 83       	std	Z+2, r26	; 0x02
    146e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1470:	ce 01       	movw	r24, r28
    1472:	8c 5b       	subi	r24, 0xBC	; 188
    1474:	9f 4f       	sbci	r25, 0xFF	; 255
    1476:	11 e0       	ldi	r17, 0x01	; 1
    1478:	fc 01       	movw	r30, r24
    147a:	60 81       	ld	r22, Z
    147c:	71 81       	ldd	r23, Z+1	; 0x01
    147e:	82 81       	ldd	r24, Z+2	; 0x02
    1480:	93 81       	ldd	r25, Z+3	; 0x03
    1482:	20 e0       	ldi	r18, 0x00	; 0
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	40 e8       	ldi	r20, 0x80	; 128
    1488:	5f e3       	ldi	r21, 0x3F	; 63
    148a:	0e 94 76 14 	call	0x28ec	; 0x28ec <__cmpsf2>
    148e:	88 23       	and	r24, r24
    1490:	0c f0       	brlt	.+2      	; 0x1494 <STRETCHER_POS_CHANGE_HANDLE+0x570>
    1492:	10 e0       	ldi	r17, 0x00	; 0
    1494:	11 23       	and	r17, r17
    1496:	49 f0       	breq	.+18     	; 0x14aa <STRETCHER_POS_CHANGE_HANDLE+0x586>
		__ticks = 1;
    1498:	ce 01       	movw	r24, r28
    149a:	88 5b       	subi	r24, 0xB8	; 184
    149c:	9f 4f       	sbci	r25, 0xFF	; 255
    149e:	21 e0       	ldi	r18, 0x01	; 1
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	fc 01       	movw	r30, r24
    14a4:	31 83       	std	Z+1, r19	; 0x01
    14a6:	20 83       	st	Z, r18
    14a8:	74 c0       	rjmp	.+232    	; 0x1592 <STRETCHER_POS_CHANGE_HANDLE+0x66e>
	else if (__tmp > 65535)
    14aa:	ce 01       	movw	r24, r28
    14ac:	8c 5b       	subi	r24, 0xBC	; 188
    14ae:	9f 4f       	sbci	r25, 0xFF	; 255
    14b0:	11 e0       	ldi	r17, 0x01	; 1
    14b2:	fc 01       	movw	r30, r24
    14b4:	60 81       	ld	r22, Z
    14b6:	71 81       	ldd	r23, Z+1	; 0x01
    14b8:	82 81       	ldd	r24, Z+2	; 0x02
    14ba:	93 81       	ldd	r25, Z+3	; 0x03
    14bc:	20 e0       	ldi	r18, 0x00	; 0
    14be:	3f ef       	ldi	r19, 0xFF	; 255
    14c0:	4f e7       	ldi	r20, 0x7F	; 127
    14c2:	57 e4       	ldi	r21, 0x47	; 71
    14c4:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__gesf2>
    14c8:	18 16       	cp	r1, r24
    14ca:	0c f0       	brlt	.+2      	; 0x14ce <STRETCHER_POS_CHANGE_HANDLE+0x5aa>
    14cc:	10 e0       	ldi	r17, 0x00	; 0
    14ce:	11 23       	and	r17, r17
    14d0:	09 f4       	brne	.+2      	; 0x14d4 <STRETCHER_POS_CHANGE_HANDLE+0x5b0>
    14d2:	4d c0       	rjmp	.+154    	; 0x156e <STRETCHER_POS_CHANGE_HANDLE+0x64a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14d4:	ce 01       	movw	r24, r28
    14d6:	80 5c       	subi	r24, 0xC0	; 192
    14d8:	9f 4f       	sbci	r25, 0xFF	; 255
    14da:	fc 01       	movw	r30, r24
    14dc:	60 81       	ld	r22, Z
    14de:	71 81       	ldd	r23, Z+1	; 0x01
    14e0:	82 81       	ldd	r24, Z+2	; 0x02
    14e2:	93 81       	ldd	r25, Z+3	; 0x03
    14e4:	20 e0       	ldi	r18, 0x00	; 0
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	40 e2       	ldi	r20, 0x20	; 32
    14ea:	51 e4       	ldi	r21, 0x41	; 65
    14ec:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__mulsf3>
    14f0:	dc 01       	movw	r26, r24
    14f2:	cb 01       	movw	r24, r22
    14f4:	8e 01       	movw	r16, r28
    14f6:	08 5b       	subi	r16, 0xB8	; 184
    14f8:	1f 4f       	sbci	r17, 0xFF	; 255
    14fa:	bc 01       	movw	r22, r24
    14fc:	cd 01       	movw	r24, r26
    14fe:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <__fixunssfsi>
    1502:	dc 01       	movw	r26, r24
    1504:	cb 01       	movw	r24, r22
    1506:	f8 01       	movw	r30, r16
    1508:	91 83       	std	Z+1, r25	; 0x01
    150a:	80 83       	st	Z, r24
    150c:	27 c0       	rjmp	.+78     	; 0x155c <STRETCHER_POS_CHANGE_HANDLE+0x638>
    150e:	ce 01       	movw	r24, r28
    1510:	86 5b       	subi	r24, 0xB6	; 182
    1512:	9f 4f       	sbci	r25, 0xFF	; 255
    1514:	20 e9       	ldi	r18, 0x90	; 144
    1516:	31 e0       	ldi	r19, 0x01	; 1
    1518:	fc 01       	movw	r30, r24
    151a:	31 83       	std	Z+1, r19	; 0x01
    151c:	20 83       	st	Z, r18
    151e:	ce 01       	movw	r24, r28
    1520:	86 5b       	subi	r24, 0xB6	; 182
    1522:	9f 4f       	sbci	r25, 0xFF	; 255
    1524:	fc 01       	movw	r30, r24
    1526:	80 81       	ld	r24, Z
    1528:	91 81       	ldd	r25, Z+1	; 0x01
    152a:	8c 01       	movw	r16, r24
    152c:	c8 01       	movw	r24, r16
    152e:	01 97       	sbiw	r24, 0x01	; 1
    1530:	f1 f7       	brne	.-4      	; 0x152e <STRETCHER_POS_CHANGE_HANDLE+0x60a>
    1532:	8c 01       	movw	r16, r24
    1534:	ce 01       	movw	r24, r28
    1536:	86 5b       	subi	r24, 0xB6	; 182
    1538:	9f 4f       	sbci	r25, 0xFF	; 255
    153a:	fc 01       	movw	r30, r24
    153c:	11 83       	std	Z+1, r17	; 0x01
    153e:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1540:	ce 01       	movw	r24, r28
    1542:	88 5b       	subi	r24, 0xB8	; 184
    1544:	9f 4f       	sbci	r25, 0xFF	; 255
    1546:	9e 01       	movw	r18, r28
    1548:	28 5b       	subi	r18, 0xB8	; 184
    154a:	3f 4f       	sbci	r19, 0xFF	; 255
    154c:	f9 01       	movw	r30, r18
    154e:	20 81       	ld	r18, Z
    1550:	31 81       	ldd	r19, Z+1	; 0x01
    1552:	21 50       	subi	r18, 0x01	; 1
    1554:	30 40       	sbci	r19, 0x00	; 0
    1556:	fc 01       	movw	r30, r24
    1558:	31 83       	std	Z+1, r19	; 0x01
    155a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    155c:	ce 01       	movw	r24, r28
    155e:	88 5b       	subi	r24, 0xB8	; 184
    1560:	9f 4f       	sbci	r25, 0xFF	; 255
    1562:	fc 01       	movw	r30, r24
    1564:	80 81       	ld	r24, Z
    1566:	91 81       	ldd	r25, Z+1	; 0x01
    1568:	00 97       	sbiw	r24, 0x00	; 0
    156a:	89 f6       	brne	.-94     	; 0x150e <STRETCHER_POS_CHANGE_HANDLE+0x5ea>
    156c:	2f c0       	rjmp	.+94     	; 0x15cc <STRETCHER_POS_CHANGE_HANDLE+0x6a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    156e:	8e 01       	movw	r16, r28
    1570:	08 5b       	subi	r16, 0xB8	; 184
    1572:	1f 4f       	sbci	r17, 0xFF	; 255
    1574:	ce 01       	movw	r24, r28
    1576:	8c 5b       	subi	r24, 0xBC	; 188
    1578:	9f 4f       	sbci	r25, 0xFF	; 255
    157a:	fc 01       	movw	r30, r24
    157c:	60 81       	ld	r22, Z
    157e:	71 81       	ldd	r23, Z+1	; 0x01
    1580:	82 81       	ldd	r24, Z+2	; 0x02
    1582:	93 81       	ldd	r25, Z+3	; 0x03
    1584:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <__fixunssfsi>
    1588:	dc 01       	movw	r26, r24
    158a:	cb 01       	movw	r24, r22
    158c:	f8 01       	movw	r30, r16
    158e:	91 83       	std	Z+1, r25	; 0x01
    1590:	80 83       	st	Z, r24
    1592:	ce 01       	movw	r24, r28
    1594:	84 5b       	subi	r24, 0xB4	; 180
    1596:	9f 4f       	sbci	r25, 0xFF	; 255
    1598:	9e 01       	movw	r18, r28
    159a:	28 5b       	subi	r18, 0xB8	; 184
    159c:	3f 4f       	sbci	r19, 0xFF	; 255
    159e:	f9 01       	movw	r30, r18
    15a0:	20 81       	ld	r18, Z
    15a2:	31 81       	ldd	r19, Z+1	; 0x01
    15a4:	fc 01       	movw	r30, r24
    15a6:	31 83       	std	Z+1, r19	; 0x01
    15a8:	20 83       	st	Z, r18
    15aa:	ce 01       	movw	r24, r28
    15ac:	84 5b       	subi	r24, 0xB4	; 180
    15ae:	9f 4f       	sbci	r25, 0xFF	; 255
    15b0:	fc 01       	movw	r30, r24
    15b2:	80 81       	ld	r24, Z
    15b4:	91 81       	ldd	r25, Z+1	; 0x01
    15b6:	8c 01       	movw	r16, r24
    15b8:	c8 01       	movw	r24, r16
    15ba:	01 97       	sbiw	r24, 0x01	; 1
    15bc:	f1 f7       	brne	.-4      	; 0x15ba <STRETCHER_POS_CHANGE_HANDLE+0x696>
    15be:	8c 01       	movw	r16, r24
    15c0:	ce 01       	movw	r24, r28
    15c2:	84 5b       	subi	r24, 0xB4	; 180
    15c4:	9f 4f       	sbci	r25, 0xFF	; 255
    15c6:	fc 01       	movw	r30, r24
    15c8:	11 83       	std	Z+1, r17	; 0x01
    15ca:	00 83       	st	Z, r16
				_delay_ms(MOTOR_SPEED_MS);
				PORTD = 0b01100000;
    15cc:	8b e2       	ldi	r24, 0x2B	; 43
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	20 e6       	ldi	r18, 0x60	; 96
    15d2:	fc 01       	movw	r30, r24
    15d4:	20 83       	st	Z, r18
    15d6:	9e 01       	movw	r18, r28
    15d8:	22 5b       	subi	r18, 0xB2	; 178
    15da:	3f 4f       	sbci	r19, 0xFF	; 255
    15dc:	80 e0       	ldi	r24, 0x00	; 0
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	a0 e8       	ldi	r26, 0x80	; 128
    15e2:	bf e3       	ldi	r27, 0x3F	; 63
    15e4:	f9 01       	movw	r30, r18
    15e6:	80 83       	st	Z, r24
    15e8:	91 83       	std	Z+1, r25	; 0x01
    15ea:	a2 83       	std	Z+2, r26	; 0x02
    15ec:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    15ee:	8e 01       	movw	r16, r28
    15f0:	0e 5a       	subi	r16, 0xAE	; 174
    15f2:	1f 4f       	sbci	r17, 0xFF	; 255
    15f4:	ce 01       	movw	r24, r28
    15f6:	82 5b       	subi	r24, 0xB2	; 178
    15f8:	9f 4f       	sbci	r25, 0xFF	; 255
    15fa:	fc 01       	movw	r30, r24
    15fc:	60 81       	ld	r22, Z
    15fe:	71 81       	ldd	r23, Z+1	; 0x01
    1600:	82 81       	ldd	r24, Z+2	; 0x02
    1602:	93 81       	ldd	r25, Z+3	; 0x03
    1604:	20 e0       	ldi	r18, 0x00	; 0
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	4a e7       	ldi	r20, 0x7A	; 122
    160a:	55 e4       	ldi	r21, 0x45	; 69
    160c:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__mulsf3>
    1610:	dc 01       	movw	r26, r24
    1612:	cb 01       	movw	r24, r22
    1614:	f8 01       	movw	r30, r16
    1616:	80 83       	st	Z, r24
    1618:	91 83       	std	Z+1, r25	; 0x01
    161a:	a2 83       	std	Z+2, r26	; 0x02
    161c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    161e:	ce 01       	movw	r24, r28
    1620:	8e 5a       	subi	r24, 0xAE	; 174
    1622:	9f 4f       	sbci	r25, 0xFF	; 255
    1624:	11 e0       	ldi	r17, 0x01	; 1
    1626:	fc 01       	movw	r30, r24
    1628:	60 81       	ld	r22, Z
    162a:	71 81       	ldd	r23, Z+1	; 0x01
    162c:	82 81       	ldd	r24, Z+2	; 0x02
    162e:	93 81       	ldd	r25, Z+3	; 0x03
    1630:	20 e0       	ldi	r18, 0x00	; 0
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	40 e8       	ldi	r20, 0x80	; 128
    1636:	5f e3       	ldi	r21, 0x3F	; 63
    1638:	0e 94 76 14 	call	0x28ec	; 0x28ec <__cmpsf2>
    163c:	88 23       	and	r24, r24
    163e:	0c f0       	brlt	.+2      	; 0x1642 <STRETCHER_POS_CHANGE_HANDLE+0x71e>
    1640:	10 e0       	ldi	r17, 0x00	; 0
    1642:	11 23       	and	r17, r17
    1644:	49 f0       	breq	.+18     	; 0x1658 <STRETCHER_POS_CHANGE_HANDLE+0x734>
		__ticks = 1;
    1646:	ce 01       	movw	r24, r28
    1648:	8a 5a       	subi	r24, 0xAA	; 170
    164a:	9f 4f       	sbci	r25, 0xFF	; 255
    164c:	21 e0       	ldi	r18, 0x01	; 1
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	fc 01       	movw	r30, r24
    1652:	31 83       	std	Z+1, r19	; 0x01
    1654:	20 83       	st	Z, r18
    1656:	74 c0       	rjmp	.+232    	; 0x1740 <STRETCHER_POS_CHANGE_HANDLE+0x81c>
	else if (__tmp > 65535)
    1658:	ce 01       	movw	r24, r28
    165a:	8e 5a       	subi	r24, 0xAE	; 174
    165c:	9f 4f       	sbci	r25, 0xFF	; 255
    165e:	11 e0       	ldi	r17, 0x01	; 1
    1660:	fc 01       	movw	r30, r24
    1662:	60 81       	ld	r22, Z
    1664:	71 81       	ldd	r23, Z+1	; 0x01
    1666:	82 81       	ldd	r24, Z+2	; 0x02
    1668:	93 81       	ldd	r25, Z+3	; 0x03
    166a:	20 e0       	ldi	r18, 0x00	; 0
    166c:	3f ef       	ldi	r19, 0xFF	; 255
    166e:	4f e7       	ldi	r20, 0x7F	; 127
    1670:	57 e4       	ldi	r21, 0x47	; 71
    1672:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__gesf2>
    1676:	18 16       	cp	r1, r24
    1678:	0c f0       	brlt	.+2      	; 0x167c <STRETCHER_POS_CHANGE_HANDLE+0x758>
    167a:	10 e0       	ldi	r17, 0x00	; 0
    167c:	11 23       	and	r17, r17
    167e:	09 f4       	brne	.+2      	; 0x1682 <STRETCHER_POS_CHANGE_HANDLE+0x75e>
    1680:	4d c0       	rjmp	.+154    	; 0x171c <STRETCHER_POS_CHANGE_HANDLE+0x7f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1682:	ce 01       	movw	r24, r28
    1684:	82 5b       	subi	r24, 0xB2	; 178
    1686:	9f 4f       	sbci	r25, 0xFF	; 255
    1688:	fc 01       	movw	r30, r24
    168a:	60 81       	ld	r22, Z
    168c:	71 81       	ldd	r23, Z+1	; 0x01
    168e:	82 81       	ldd	r24, Z+2	; 0x02
    1690:	93 81       	ldd	r25, Z+3	; 0x03
    1692:	20 e0       	ldi	r18, 0x00	; 0
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	40 e2       	ldi	r20, 0x20	; 32
    1698:	51 e4       	ldi	r21, 0x41	; 65
    169a:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__mulsf3>
    169e:	dc 01       	movw	r26, r24
    16a0:	cb 01       	movw	r24, r22
    16a2:	8e 01       	movw	r16, r28
    16a4:	0a 5a       	subi	r16, 0xAA	; 170
    16a6:	1f 4f       	sbci	r17, 0xFF	; 255
    16a8:	bc 01       	movw	r22, r24
    16aa:	cd 01       	movw	r24, r26
    16ac:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <__fixunssfsi>
    16b0:	dc 01       	movw	r26, r24
    16b2:	cb 01       	movw	r24, r22
    16b4:	f8 01       	movw	r30, r16
    16b6:	91 83       	std	Z+1, r25	; 0x01
    16b8:	80 83       	st	Z, r24
    16ba:	27 c0       	rjmp	.+78     	; 0x170a <STRETCHER_POS_CHANGE_HANDLE+0x7e6>
    16bc:	ce 01       	movw	r24, r28
    16be:	88 5a       	subi	r24, 0xA8	; 168
    16c0:	9f 4f       	sbci	r25, 0xFF	; 255
    16c2:	20 e9       	ldi	r18, 0x90	; 144
    16c4:	31 e0       	ldi	r19, 0x01	; 1
    16c6:	fc 01       	movw	r30, r24
    16c8:	31 83       	std	Z+1, r19	; 0x01
    16ca:	20 83       	st	Z, r18
    16cc:	ce 01       	movw	r24, r28
    16ce:	88 5a       	subi	r24, 0xA8	; 168
    16d0:	9f 4f       	sbci	r25, 0xFF	; 255
    16d2:	fc 01       	movw	r30, r24
    16d4:	80 81       	ld	r24, Z
    16d6:	91 81       	ldd	r25, Z+1	; 0x01
    16d8:	8c 01       	movw	r16, r24
    16da:	c8 01       	movw	r24, r16
    16dc:	01 97       	sbiw	r24, 0x01	; 1
    16de:	f1 f7       	brne	.-4      	; 0x16dc <STRETCHER_POS_CHANGE_HANDLE+0x7b8>
    16e0:	8c 01       	movw	r16, r24
    16e2:	ce 01       	movw	r24, r28
    16e4:	88 5a       	subi	r24, 0xA8	; 168
    16e6:	9f 4f       	sbci	r25, 0xFF	; 255
    16e8:	fc 01       	movw	r30, r24
    16ea:	11 83       	std	Z+1, r17	; 0x01
    16ec:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16ee:	ce 01       	movw	r24, r28
    16f0:	8a 5a       	subi	r24, 0xAA	; 170
    16f2:	9f 4f       	sbci	r25, 0xFF	; 255
    16f4:	9e 01       	movw	r18, r28
    16f6:	2a 5a       	subi	r18, 0xAA	; 170
    16f8:	3f 4f       	sbci	r19, 0xFF	; 255
    16fa:	f9 01       	movw	r30, r18
    16fc:	20 81       	ld	r18, Z
    16fe:	31 81       	ldd	r19, Z+1	; 0x01
    1700:	21 50       	subi	r18, 0x01	; 1
    1702:	30 40       	sbci	r19, 0x00	; 0
    1704:	fc 01       	movw	r30, r24
    1706:	31 83       	std	Z+1, r19	; 0x01
    1708:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    170a:	ce 01       	movw	r24, r28
    170c:	8a 5a       	subi	r24, 0xAA	; 170
    170e:	9f 4f       	sbci	r25, 0xFF	; 255
    1710:	fc 01       	movw	r30, r24
    1712:	80 81       	ld	r24, Z
    1714:	91 81       	ldd	r25, Z+1	; 0x01
    1716:	00 97       	sbiw	r24, 0x00	; 0
    1718:	89 f6       	brne	.-94     	; 0x16bc <STRETCHER_POS_CHANGE_HANDLE+0x798>
    171a:	2f c0       	rjmp	.+94     	; 0x177a <STRETCHER_POS_CHANGE_HANDLE+0x856>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    171c:	8e 01       	movw	r16, r28
    171e:	0a 5a       	subi	r16, 0xAA	; 170
    1720:	1f 4f       	sbci	r17, 0xFF	; 255
    1722:	ce 01       	movw	r24, r28
    1724:	8e 5a       	subi	r24, 0xAE	; 174
    1726:	9f 4f       	sbci	r25, 0xFF	; 255
    1728:	fc 01       	movw	r30, r24
    172a:	60 81       	ld	r22, Z
    172c:	71 81       	ldd	r23, Z+1	; 0x01
    172e:	82 81       	ldd	r24, Z+2	; 0x02
    1730:	93 81       	ldd	r25, Z+3	; 0x03
    1732:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <__fixunssfsi>
    1736:	dc 01       	movw	r26, r24
    1738:	cb 01       	movw	r24, r22
    173a:	f8 01       	movw	r30, r16
    173c:	91 83       	std	Z+1, r25	; 0x01
    173e:	80 83       	st	Z, r24
    1740:	ce 01       	movw	r24, r28
    1742:	86 5a       	subi	r24, 0xA6	; 166
    1744:	9f 4f       	sbci	r25, 0xFF	; 255
    1746:	9e 01       	movw	r18, r28
    1748:	2a 5a       	subi	r18, 0xAA	; 170
    174a:	3f 4f       	sbci	r19, 0xFF	; 255
    174c:	f9 01       	movw	r30, r18
    174e:	20 81       	ld	r18, Z
    1750:	31 81       	ldd	r19, Z+1	; 0x01
    1752:	fc 01       	movw	r30, r24
    1754:	31 83       	std	Z+1, r19	; 0x01
    1756:	20 83       	st	Z, r18
    1758:	ce 01       	movw	r24, r28
    175a:	86 5a       	subi	r24, 0xA6	; 166
    175c:	9f 4f       	sbci	r25, 0xFF	; 255
    175e:	fc 01       	movw	r30, r24
    1760:	80 81       	ld	r24, Z
    1762:	91 81       	ldd	r25, Z+1	; 0x01
    1764:	8c 01       	movw	r16, r24
    1766:	c8 01       	movw	r24, r16
    1768:	01 97       	sbiw	r24, 0x01	; 1
    176a:	f1 f7       	brne	.-4      	; 0x1768 <STRETCHER_POS_CHANGE_HANDLE+0x844>
    176c:	8c 01       	movw	r16, r24
    176e:	ce 01       	movw	r24, r28
    1770:	86 5a       	subi	r24, 0xA6	; 166
    1772:	9f 4f       	sbci	r25, 0xFF	; 255
    1774:	fc 01       	movw	r30, r24
    1776:	11 83       	std	Z+1, r17	; 0x01
    1778:	00 83       	st	Z, r16
				_delay_ms(MOTOR_SPEED_MS);
				PORTD = 0b00110000;
    177a:	8b e2       	ldi	r24, 0x2B	; 43
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	20 e3       	ldi	r18, 0x30	; 48
    1780:	fc 01       	movw	r30, r24
    1782:	20 83       	st	Z, r18
    1784:	9e 01       	movw	r18, r28
    1786:	24 5a       	subi	r18, 0xA4	; 164
    1788:	3f 4f       	sbci	r19, 0xFF	; 255
    178a:	80 e0       	ldi	r24, 0x00	; 0
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	a0 e8       	ldi	r26, 0x80	; 128
    1790:	bf e3       	ldi	r27, 0x3F	; 63
    1792:	f9 01       	movw	r30, r18
    1794:	80 83       	st	Z, r24
    1796:	91 83       	std	Z+1, r25	; 0x01
    1798:	a2 83       	std	Z+2, r26	; 0x02
    179a:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    179c:	8e 01       	movw	r16, r28
    179e:	00 5a       	subi	r16, 0xA0	; 160
    17a0:	1f 4f       	sbci	r17, 0xFF	; 255
    17a2:	ce 01       	movw	r24, r28
    17a4:	84 5a       	subi	r24, 0xA4	; 164
    17a6:	9f 4f       	sbci	r25, 0xFF	; 255
    17a8:	fc 01       	movw	r30, r24
    17aa:	60 81       	ld	r22, Z
    17ac:	71 81       	ldd	r23, Z+1	; 0x01
    17ae:	82 81       	ldd	r24, Z+2	; 0x02
    17b0:	93 81       	ldd	r25, Z+3	; 0x03
    17b2:	20 e0       	ldi	r18, 0x00	; 0
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	4a e7       	ldi	r20, 0x7A	; 122
    17b8:	55 e4       	ldi	r21, 0x45	; 69
    17ba:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__mulsf3>
    17be:	dc 01       	movw	r26, r24
    17c0:	cb 01       	movw	r24, r22
    17c2:	f8 01       	movw	r30, r16
    17c4:	80 83       	st	Z, r24
    17c6:	91 83       	std	Z+1, r25	; 0x01
    17c8:	a2 83       	std	Z+2, r26	; 0x02
    17ca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17cc:	ce 01       	movw	r24, r28
    17ce:	80 5a       	subi	r24, 0xA0	; 160
    17d0:	9f 4f       	sbci	r25, 0xFF	; 255
    17d2:	11 e0       	ldi	r17, 0x01	; 1
    17d4:	fc 01       	movw	r30, r24
    17d6:	60 81       	ld	r22, Z
    17d8:	71 81       	ldd	r23, Z+1	; 0x01
    17da:	82 81       	ldd	r24, Z+2	; 0x02
    17dc:	93 81       	ldd	r25, Z+3	; 0x03
    17de:	20 e0       	ldi	r18, 0x00	; 0
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	40 e8       	ldi	r20, 0x80	; 128
    17e4:	5f e3       	ldi	r21, 0x3F	; 63
    17e6:	0e 94 76 14 	call	0x28ec	; 0x28ec <__cmpsf2>
    17ea:	88 23       	and	r24, r24
    17ec:	0c f0       	brlt	.+2      	; 0x17f0 <STRETCHER_POS_CHANGE_HANDLE+0x8cc>
    17ee:	10 e0       	ldi	r17, 0x00	; 0
    17f0:	11 23       	and	r17, r17
    17f2:	49 f0       	breq	.+18     	; 0x1806 <STRETCHER_POS_CHANGE_HANDLE+0x8e2>
		__ticks = 1;
    17f4:	ce 01       	movw	r24, r28
    17f6:	8c 59       	subi	r24, 0x9C	; 156
    17f8:	9f 4f       	sbci	r25, 0xFF	; 255
    17fa:	21 e0       	ldi	r18, 0x01	; 1
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	fc 01       	movw	r30, r24
    1800:	31 83       	std	Z+1, r19	; 0x01
    1802:	20 83       	st	Z, r18
    1804:	74 c0       	rjmp	.+232    	; 0x18ee <STRETCHER_POS_CHANGE_HANDLE+0x9ca>
	else if (__tmp > 65535)
    1806:	ce 01       	movw	r24, r28
    1808:	80 5a       	subi	r24, 0xA0	; 160
    180a:	9f 4f       	sbci	r25, 0xFF	; 255
    180c:	11 e0       	ldi	r17, 0x01	; 1
    180e:	fc 01       	movw	r30, r24
    1810:	60 81       	ld	r22, Z
    1812:	71 81       	ldd	r23, Z+1	; 0x01
    1814:	82 81       	ldd	r24, Z+2	; 0x02
    1816:	93 81       	ldd	r25, Z+3	; 0x03
    1818:	20 e0       	ldi	r18, 0x00	; 0
    181a:	3f ef       	ldi	r19, 0xFF	; 255
    181c:	4f e7       	ldi	r20, 0x7F	; 127
    181e:	57 e4       	ldi	r21, 0x47	; 71
    1820:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__gesf2>
    1824:	18 16       	cp	r1, r24
    1826:	0c f0       	brlt	.+2      	; 0x182a <STRETCHER_POS_CHANGE_HANDLE+0x906>
    1828:	10 e0       	ldi	r17, 0x00	; 0
    182a:	11 23       	and	r17, r17
    182c:	09 f4       	brne	.+2      	; 0x1830 <STRETCHER_POS_CHANGE_HANDLE+0x90c>
    182e:	4d c0       	rjmp	.+154    	; 0x18ca <STRETCHER_POS_CHANGE_HANDLE+0x9a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1830:	ce 01       	movw	r24, r28
    1832:	84 5a       	subi	r24, 0xA4	; 164
    1834:	9f 4f       	sbci	r25, 0xFF	; 255
    1836:	fc 01       	movw	r30, r24
    1838:	60 81       	ld	r22, Z
    183a:	71 81       	ldd	r23, Z+1	; 0x01
    183c:	82 81       	ldd	r24, Z+2	; 0x02
    183e:	93 81       	ldd	r25, Z+3	; 0x03
    1840:	20 e0       	ldi	r18, 0x00	; 0
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	40 e2       	ldi	r20, 0x20	; 32
    1846:	51 e4       	ldi	r21, 0x41	; 65
    1848:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__mulsf3>
    184c:	dc 01       	movw	r26, r24
    184e:	cb 01       	movw	r24, r22
    1850:	8e 01       	movw	r16, r28
    1852:	0c 59       	subi	r16, 0x9C	; 156
    1854:	1f 4f       	sbci	r17, 0xFF	; 255
    1856:	bc 01       	movw	r22, r24
    1858:	cd 01       	movw	r24, r26
    185a:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <__fixunssfsi>
    185e:	dc 01       	movw	r26, r24
    1860:	cb 01       	movw	r24, r22
    1862:	f8 01       	movw	r30, r16
    1864:	91 83       	std	Z+1, r25	; 0x01
    1866:	80 83       	st	Z, r24
    1868:	27 c0       	rjmp	.+78     	; 0x18b8 <STRETCHER_POS_CHANGE_HANDLE+0x994>
    186a:	ce 01       	movw	r24, r28
    186c:	8a 59       	subi	r24, 0x9A	; 154
    186e:	9f 4f       	sbci	r25, 0xFF	; 255
    1870:	20 e9       	ldi	r18, 0x90	; 144
    1872:	31 e0       	ldi	r19, 0x01	; 1
    1874:	fc 01       	movw	r30, r24
    1876:	31 83       	std	Z+1, r19	; 0x01
    1878:	20 83       	st	Z, r18
    187a:	ce 01       	movw	r24, r28
    187c:	8a 59       	subi	r24, 0x9A	; 154
    187e:	9f 4f       	sbci	r25, 0xFF	; 255
    1880:	fc 01       	movw	r30, r24
    1882:	80 81       	ld	r24, Z
    1884:	91 81       	ldd	r25, Z+1	; 0x01
    1886:	8c 01       	movw	r16, r24
    1888:	c8 01       	movw	r24, r16
    188a:	01 97       	sbiw	r24, 0x01	; 1
    188c:	f1 f7       	brne	.-4      	; 0x188a <STRETCHER_POS_CHANGE_HANDLE+0x966>
    188e:	8c 01       	movw	r16, r24
    1890:	ce 01       	movw	r24, r28
    1892:	8a 59       	subi	r24, 0x9A	; 154
    1894:	9f 4f       	sbci	r25, 0xFF	; 255
    1896:	fc 01       	movw	r30, r24
    1898:	11 83       	std	Z+1, r17	; 0x01
    189a:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    189c:	ce 01       	movw	r24, r28
    189e:	8c 59       	subi	r24, 0x9C	; 156
    18a0:	9f 4f       	sbci	r25, 0xFF	; 255
    18a2:	9e 01       	movw	r18, r28
    18a4:	2c 59       	subi	r18, 0x9C	; 156
    18a6:	3f 4f       	sbci	r19, 0xFF	; 255
    18a8:	f9 01       	movw	r30, r18
    18aa:	20 81       	ld	r18, Z
    18ac:	31 81       	ldd	r19, Z+1	; 0x01
    18ae:	21 50       	subi	r18, 0x01	; 1
    18b0:	30 40       	sbci	r19, 0x00	; 0
    18b2:	fc 01       	movw	r30, r24
    18b4:	31 83       	std	Z+1, r19	; 0x01
    18b6:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18b8:	ce 01       	movw	r24, r28
    18ba:	8c 59       	subi	r24, 0x9C	; 156
    18bc:	9f 4f       	sbci	r25, 0xFF	; 255
    18be:	fc 01       	movw	r30, r24
    18c0:	80 81       	ld	r24, Z
    18c2:	91 81       	ldd	r25, Z+1	; 0x01
    18c4:	00 97       	sbiw	r24, 0x00	; 0
    18c6:	89 f6       	brne	.-94     	; 0x186a <STRETCHER_POS_CHANGE_HANDLE+0x946>
    18c8:	2f c0       	rjmp	.+94     	; 0x1928 <STRETCHER_POS_CHANGE_HANDLE+0xa04>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18ca:	8e 01       	movw	r16, r28
    18cc:	0c 59       	subi	r16, 0x9C	; 156
    18ce:	1f 4f       	sbci	r17, 0xFF	; 255
    18d0:	ce 01       	movw	r24, r28
    18d2:	80 5a       	subi	r24, 0xA0	; 160
    18d4:	9f 4f       	sbci	r25, 0xFF	; 255
    18d6:	fc 01       	movw	r30, r24
    18d8:	60 81       	ld	r22, Z
    18da:	71 81       	ldd	r23, Z+1	; 0x01
    18dc:	82 81       	ldd	r24, Z+2	; 0x02
    18de:	93 81       	ldd	r25, Z+3	; 0x03
    18e0:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <__fixunssfsi>
    18e4:	dc 01       	movw	r26, r24
    18e6:	cb 01       	movw	r24, r22
    18e8:	f8 01       	movw	r30, r16
    18ea:	91 83       	std	Z+1, r25	; 0x01
    18ec:	80 83       	st	Z, r24
    18ee:	ce 01       	movw	r24, r28
    18f0:	88 59       	subi	r24, 0x98	; 152
    18f2:	9f 4f       	sbci	r25, 0xFF	; 255
    18f4:	9e 01       	movw	r18, r28
    18f6:	2c 59       	subi	r18, 0x9C	; 156
    18f8:	3f 4f       	sbci	r19, 0xFF	; 255
    18fa:	f9 01       	movw	r30, r18
    18fc:	20 81       	ld	r18, Z
    18fe:	31 81       	ldd	r19, Z+1	; 0x01
    1900:	fc 01       	movw	r30, r24
    1902:	31 83       	std	Z+1, r19	; 0x01
    1904:	20 83       	st	Z, r18
    1906:	ce 01       	movw	r24, r28
    1908:	88 59       	subi	r24, 0x98	; 152
    190a:	9f 4f       	sbci	r25, 0xFF	; 255
    190c:	fc 01       	movw	r30, r24
    190e:	80 81       	ld	r24, Z
    1910:	91 81       	ldd	r25, Z+1	; 0x01
    1912:	8c 01       	movw	r16, r24
    1914:	c8 01       	movw	r24, r16
    1916:	01 97       	sbiw	r24, 0x01	; 1
    1918:	f1 f7       	brne	.-4      	; 0x1916 <STRETCHER_POS_CHANGE_HANDLE+0x9f2>
    191a:	8c 01       	movw	r16, r24
    191c:	ce 01       	movw	r24, r28
    191e:	88 59       	subi	r24, 0x98	; 152
    1920:	9f 4f       	sbci	r25, 0xFF	; 255
    1922:	fc 01       	movw	r30, r24
    1924:	11 83       	std	Z+1, r17	; 0x01
    1926:	00 83       	st	Z, r16
				_delay_ms(MOTOR_SPEED_MS);
				PORTD = 0b10010000;
    1928:	8b e2       	ldi	r24, 0x2B	; 43
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	20 e9       	ldi	r18, 0x90	; 144
    192e:	fc 01       	movw	r30, r24
    1930:	20 83       	st	Z, r18
    1932:	9e 01       	movw	r18, r28
    1934:	26 59       	subi	r18, 0x96	; 150
    1936:	3f 4f       	sbci	r19, 0xFF	; 255
    1938:	80 e0       	ldi	r24, 0x00	; 0
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	a0 e8       	ldi	r26, 0x80	; 128
    193e:	bf e3       	ldi	r27, 0x3F	; 63
    1940:	f9 01       	movw	r30, r18
    1942:	80 83       	st	Z, r24
    1944:	91 83       	std	Z+1, r25	; 0x01
    1946:	a2 83       	std	Z+2, r26	; 0x02
    1948:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    194a:	8e 01       	movw	r16, r28
    194c:	02 59       	subi	r16, 0x92	; 146
    194e:	1f 4f       	sbci	r17, 0xFF	; 255
    1950:	ce 01       	movw	r24, r28
    1952:	86 59       	subi	r24, 0x96	; 150
    1954:	9f 4f       	sbci	r25, 0xFF	; 255
    1956:	fc 01       	movw	r30, r24
    1958:	60 81       	ld	r22, Z
    195a:	71 81       	ldd	r23, Z+1	; 0x01
    195c:	82 81       	ldd	r24, Z+2	; 0x02
    195e:	93 81       	ldd	r25, Z+3	; 0x03
    1960:	20 e0       	ldi	r18, 0x00	; 0
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	4a e7       	ldi	r20, 0x7A	; 122
    1966:	55 e4       	ldi	r21, 0x45	; 69
    1968:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__mulsf3>
    196c:	dc 01       	movw	r26, r24
    196e:	cb 01       	movw	r24, r22
    1970:	f8 01       	movw	r30, r16
    1972:	80 83       	st	Z, r24
    1974:	91 83       	std	Z+1, r25	; 0x01
    1976:	a2 83       	std	Z+2, r26	; 0x02
    1978:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    197a:	ce 01       	movw	r24, r28
    197c:	82 59       	subi	r24, 0x92	; 146
    197e:	9f 4f       	sbci	r25, 0xFF	; 255
    1980:	11 e0       	ldi	r17, 0x01	; 1
    1982:	fc 01       	movw	r30, r24
    1984:	60 81       	ld	r22, Z
    1986:	71 81       	ldd	r23, Z+1	; 0x01
    1988:	82 81       	ldd	r24, Z+2	; 0x02
    198a:	93 81       	ldd	r25, Z+3	; 0x03
    198c:	20 e0       	ldi	r18, 0x00	; 0
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	40 e8       	ldi	r20, 0x80	; 128
    1992:	5f e3       	ldi	r21, 0x3F	; 63
    1994:	0e 94 76 14 	call	0x28ec	; 0x28ec <__cmpsf2>
    1998:	88 23       	and	r24, r24
    199a:	0c f0       	brlt	.+2      	; 0x199e <STRETCHER_POS_CHANGE_HANDLE+0xa7a>
    199c:	10 e0       	ldi	r17, 0x00	; 0
    199e:	11 23       	and	r17, r17
    19a0:	49 f0       	breq	.+18     	; 0x19b4 <STRETCHER_POS_CHANGE_HANDLE+0xa90>
		__ticks = 1;
    19a2:	ce 01       	movw	r24, r28
    19a4:	8e 58       	subi	r24, 0x8E	; 142
    19a6:	9f 4f       	sbci	r25, 0xFF	; 255
    19a8:	21 e0       	ldi	r18, 0x01	; 1
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	fc 01       	movw	r30, r24
    19ae:	31 83       	std	Z+1, r19	; 0x01
    19b0:	20 83       	st	Z, r18
    19b2:	74 c0       	rjmp	.+232    	; 0x1a9c <STRETCHER_POS_CHANGE_HANDLE+0xb78>
	else if (__tmp > 65535)
    19b4:	ce 01       	movw	r24, r28
    19b6:	82 59       	subi	r24, 0x92	; 146
    19b8:	9f 4f       	sbci	r25, 0xFF	; 255
    19ba:	11 e0       	ldi	r17, 0x01	; 1
    19bc:	fc 01       	movw	r30, r24
    19be:	60 81       	ld	r22, Z
    19c0:	71 81       	ldd	r23, Z+1	; 0x01
    19c2:	82 81       	ldd	r24, Z+2	; 0x02
    19c4:	93 81       	ldd	r25, Z+3	; 0x03
    19c6:	20 e0       	ldi	r18, 0x00	; 0
    19c8:	3f ef       	ldi	r19, 0xFF	; 255
    19ca:	4f e7       	ldi	r20, 0x7F	; 127
    19cc:	57 e4       	ldi	r21, 0x47	; 71
    19ce:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__gesf2>
    19d2:	18 16       	cp	r1, r24
    19d4:	0c f0       	brlt	.+2      	; 0x19d8 <STRETCHER_POS_CHANGE_HANDLE+0xab4>
    19d6:	10 e0       	ldi	r17, 0x00	; 0
    19d8:	11 23       	and	r17, r17
    19da:	09 f4       	brne	.+2      	; 0x19de <STRETCHER_POS_CHANGE_HANDLE+0xaba>
    19dc:	4d c0       	rjmp	.+154    	; 0x1a78 <STRETCHER_POS_CHANGE_HANDLE+0xb54>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19de:	ce 01       	movw	r24, r28
    19e0:	86 59       	subi	r24, 0x96	; 150
    19e2:	9f 4f       	sbci	r25, 0xFF	; 255
    19e4:	fc 01       	movw	r30, r24
    19e6:	60 81       	ld	r22, Z
    19e8:	71 81       	ldd	r23, Z+1	; 0x01
    19ea:	82 81       	ldd	r24, Z+2	; 0x02
    19ec:	93 81       	ldd	r25, Z+3	; 0x03
    19ee:	20 e0       	ldi	r18, 0x00	; 0
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	40 e2       	ldi	r20, 0x20	; 32
    19f4:	51 e4       	ldi	r21, 0x41	; 65
    19f6:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__mulsf3>
    19fa:	dc 01       	movw	r26, r24
    19fc:	cb 01       	movw	r24, r22
    19fe:	8e 01       	movw	r16, r28
    1a00:	0e 58       	subi	r16, 0x8E	; 142
    1a02:	1f 4f       	sbci	r17, 0xFF	; 255
    1a04:	bc 01       	movw	r22, r24
    1a06:	cd 01       	movw	r24, r26
    1a08:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <__fixunssfsi>
    1a0c:	dc 01       	movw	r26, r24
    1a0e:	cb 01       	movw	r24, r22
    1a10:	f8 01       	movw	r30, r16
    1a12:	91 83       	std	Z+1, r25	; 0x01
    1a14:	80 83       	st	Z, r24
    1a16:	27 c0       	rjmp	.+78     	; 0x1a66 <STRETCHER_POS_CHANGE_HANDLE+0xb42>
    1a18:	ce 01       	movw	r24, r28
    1a1a:	8c 58       	subi	r24, 0x8C	; 140
    1a1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a1e:	20 e9       	ldi	r18, 0x90	; 144
    1a20:	31 e0       	ldi	r19, 0x01	; 1
    1a22:	fc 01       	movw	r30, r24
    1a24:	31 83       	std	Z+1, r19	; 0x01
    1a26:	20 83       	st	Z, r18
    1a28:	ce 01       	movw	r24, r28
    1a2a:	8c 58       	subi	r24, 0x8C	; 140
    1a2c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a2e:	fc 01       	movw	r30, r24
    1a30:	80 81       	ld	r24, Z
    1a32:	91 81       	ldd	r25, Z+1	; 0x01
    1a34:	8c 01       	movw	r16, r24
    1a36:	c8 01       	movw	r24, r16
    1a38:	01 97       	sbiw	r24, 0x01	; 1
    1a3a:	f1 f7       	brne	.-4      	; 0x1a38 <STRETCHER_POS_CHANGE_HANDLE+0xb14>
    1a3c:	8c 01       	movw	r16, r24
    1a3e:	ce 01       	movw	r24, r28
    1a40:	8c 58       	subi	r24, 0x8C	; 140
    1a42:	9f 4f       	sbci	r25, 0xFF	; 255
    1a44:	fc 01       	movw	r30, r24
    1a46:	11 83       	std	Z+1, r17	; 0x01
    1a48:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a4a:	ce 01       	movw	r24, r28
    1a4c:	8e 58       	subi	r24, 0x8E	; 142
    1a4e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a50:	9e 01       	movw	r18, r28
    1a52:	2e 58       	subi	r18, 0x8E	; 142
    1a54:	3f 4f       	sbci	r19, 0xFF	; 255
    1a56:	f9 01       	movw	r30, r18
    1a58:	20 81       	ld	r18, Z
    1a5a:	31 81       	ldd	r19, Z+1	; 0x01
    1a5c:	21 50       	subi	r18, 0x01	; 1
    1a5e:	30 40       	sbci	r19, 0x00	; 0
    1a60:	fc 01       	movw	r30, r24
    1a62:	31 83       	std	Z+1, r19	; 0x01
    1a64:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a66:	ce 01       	movw	r24, r28
    1a68:	8e 58       	subi	r24, 0x8E	; 142
    1a6a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a6c:	fc 01       	movw	r30, r24
    1a6e:	80 81       	ld	r24, Z
    1a70:	91 81       	ldd	r25, Z+1	; 0x01
    1a72:	00 97       	sbiw	r24, 0x00	; 0
    1a74:	89 f6       	brne	.-94     	; 0x1a18 <STRETCHER_POS_CHANGE_HANDLE+0xaf4>
    1a76:	2f c0       	rjmp	.+94     	; 0x1ad6 <STRETCHER_POS_CHANGE_HANDLE+0xbb2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a78:	8e 01       	movw	r16, r28
    1a7a:	0e 58       	subi	r16, 0x8E	; 142
    1a7c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a7e:	ce 01       	movw	r24, r28
    1a80:	82 59       	subi	r24, 0x92	; 146
    1a82:	9f 4f       	sbci	r25, 0xFF	; 255
    1a84:	fc 01       	movw	r30, r24
    1a86:	60 81       	ld	r22, Z
    1a88:	71 81       	ldd	r23, Z+1	; 0x01
    1a8a:	82 81       	ldd	r24, Z+2	; 0x02
    1a8c:	93 81       	ldd	r25, Z+3	; 0x03
    1a8e:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <__fixunssfsi>
    1a92:	dc 01       	movw	r26, r24
    1a94:	cb 01       	movw	r24, r22
    1a96:	f8 01       	movw	r30, r16
    1a98:	91 83       	std	Z+1, r25	; 0x01
    1a9a:	80 83       	st	Z, r24
    1a9c:	ce 01       	movw	r24, r28
    1a9e:	8a 58       	subi	r24, 0x8A	; 138
    1aa0:	9f 4f       	sbci	r25, 0xFF	; 255
    1aa2:	9e 01       	movw	r18, r28
    1aa4:	2e 58       	subi	r18, 0x8E	; 142
    1aa6:	3f 4f       	sbci	r19, 0xFF	; 255
    1aa8:	f9 01       	movw	r30, r18
    1aaa:	20 81       	ld	r18, Z
    1aac:	31 81       	ldd	r19, Z+1	; 0x01
    1aae:	fc 01       	movw	r30, r24
    1ab0:	31 83       	std	Z+1, r19	; 0x01
    1ab2:	20 83       	st	Z, r18
    1ab4:	ce 01       	movw	r24, r28
    1ab6:	8a 58       	subi	r24, 0x8A	; 138
    1ab8:	9f 4f       	sbci	r25, 0xFF	; 255
    1aba:	fc 01       	movw	r30, r24
    1abc:	80 81       	ld	r24, Z
    1abe:	91 81       	ldd	r25, Z+1	; 0x01
    1ac0:	8c 01       	movw	r16, r24
    1ac2:	c8 01       	movw	r24, r16
    1ac4:	01 97       	sbiw	r24, 0x01	; 1
    1ac6:	f1 f7       	brne	.-4      	; 0x1ac4 <STRETCHER_POS_CHANGE_HANDLE+0xba0>
    1ac8:	8c 01       	movw	r16, r24
    1aca:	ce 01       	movw	r24, r28
    1acc:	8a 58       	subi	r24, 0x8A	; 138
    1ace:	9f 4f       	sbci	r25, 0xFF	; 255
    1ad0:	fc 01       	movw	r30, r24
    1ad2:	11 83       	std	Z+1, r17	; 0x01
    1ad4:	00 83       	st	Z, r16
				_delay_ms(MOTOR_SPEED_MS);
				PORTD = 0b10010000;
				_delay_ms(MOTOR_SPEED_MS);
			}
			}else{
			for (uint16_t x = 0; x < degreesToMove;x++){
    1ad6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad8:	9c 81       	ldd	r25, Y+4	; 0x04
    1ada:	01 96       	adiw	r24, 0x01	; 1
    1adc:	9c 83       	std	Y+4, r25	; 0x04
    1ade:	8b 83       	std	Y+3, r24	; 0x03
    1ae0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ae2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ae4:	8e 81       	ldd	r24, Y+6	; 0x06
    1ae6:	9f 81       	ldd	r25, Y+7	; 0x07
    1ae8:	28 17       	cp	r18, r24
    1aea:	39 07       	cpc	r19, r25
    1aec:	08 f4       	brcc	.+2      	; 0x1af0 <STRETCHER_POS_CHANGE_HANDLE+0xbcc>
    1aee:	97 cc       	rjmp	.-1746   	; 0x141e <STRETCHER_POS_CHANGE_HANDLE+0x4fa>
				PORTD = 0b10010000;
				_delay_ms(MOTOR_SPEED_MS);
			}
		}
	
		PORTD = 0b00000000;
    1af0:	8b e2       	ldi	r24, 0x2B	; 43
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	fc 01       	movw	r30, r24
    1af6:	10 82       	st	Z, r1
		currentStretcherPosition = positionToMove;
    1af8:	8d 81       	ldd	r24, Y+5	; 0x05
    1afa:	80 93 61 01 	sts	0x0161, r24
	}
	bit_clear(PORTB, BIT(1));
    1afe:	85 e2       	ldi	r24, 0x25	; 37
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	25 e2       	ldi	r18, 0x25	; 37
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	f9 01       	movw	r30, r18
    1b08:	20 81       	ld	r18, Z
    1b0a:	2d 7f       	andi	r18, 0xFD	; 253
    1b0c:	fc 01       	movw	r30, r24
    1b0e:	20 83       	st	Z, r18
	bit_clear(PORTB, BIT(2));
    1b10:	85 e2       	ldi	r24, 0x25	; 37
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	25 e2       	ldi	r18, 0x25	; 37
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	f9 01       	movw	r30, r18
    1b1a:	20 81       	ld	r18, Z
    1b1c:	2b 7f       	andi	r18, 0xFB	; 251
    1b1e:	fc 01       	movw	r30, r24
    1b20:	20 83       	st	Z, r18
}
    1b22:	c9 58       	subi	r28, 0x89	; 137
    1b24:	df 4f       	sbci	r29, 0xFF	; 255
    1b26:	0f b6       	in	r0, 0x3f	; 63
    1b28:	f8 94       	cli
    1b2a:	de bf       	out	0x3e, r29	; 62
    1b2c:	0f be       	out	0x3f, r0	; 63
    1b2e:	cd bf       	out	0x3d, r28	; 61
    1b30:	cf 91       	pop	r28
    1b32:	df 91       	pop	r29
    1b34:	1f 91       	pop	r17
    1b36:	0f 91       	pop	r16
    1b38:	08 95       	ret

00001b3a <CALL_NURSE_HANDLE>:

void CALL_NURSE_HANDLE(){
    1b3a:	0f 93       	push	r16
    1b3c:	1f 93       	push	r17
    1b3e:	df 93       	push	r29
    1b40:	cf 93       	push	r28
    1b42:	cd b7       	in	r28, 0x3d	; 61
    1b44:	de b7       	in	r29, 0x3e	; 62
    1b46:	6d 97       	sbiw	r28, 0x1d	; 29
    1b48:	0f b6       	in	r0, 0x3f	; 63
    1b4a:	f8 94       	cli
    1b4c:	de bf       	out	0x3e, r29	; 62
    1b4e:	0f be       	out	0x3f, r0	; 63
    1b50:	cd bf       	out	0x3d, r28	; 61
	bit_clear(PORTB, BIT(1));
    1b52:	85 e2       	ldi	r24, 0x25	; 37
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	25 e2       	ldi	r18, 0x25	; 37
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	f9 01       	movw	r30, r18
    1b5c:	20 81       	ld	r18, Z
    1b5e:	2d 7f       	andi	r18, 0xFD	; 253
    1b60:	fc 01       	movw	r30, r24
    1b62:	20 83       	st	Z, r18
	bit_clear(PORTB, BIT(2));
    1b64:	85 e2       	ldi	r24, 0x25	; 37
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	25 e2       	ldi	r18, 0x25	; 37
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	f9 01       	movw	r30, r18
    1b6e:	20 81       	ld	r18, Z
    1b70:	2b 7f       	andi	r18, 0xFB	; 251
    1b72:	fc 01       	movw	r30, r24
    1b74:	20 83       	st	Z, r18
	
	for (uint8_t x = 0; x<8; x++)
    1b76:	19 82       	std	Y+1, r1	; 0x01
    1b78:	17 c1       	rjmp	.+558    	; 0x1da8 <CALL_NURSE_HANDLE+0x26e>
	{
		bit_flip(PORTB, BIT(1));
    1b7a:	85 e2       	ldi	r24, 0x25	; 37
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	25 e2       	ldi	r18, 0x25	; 37
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	f9 01       	movw	r30, r18
    1b84:	30 81       	ld	r19, Z
    1b86:	22 e0       	ldi	r18, 0x02	; 2
    1b88:	23 27       	eor	r18, r19
    1b8a:	fc 01       	movw	r30, r24
    1b8c:	20 83       	st	Z, r18
    1b8e:	80 e0       	ldi	r24, 0x00	; 0
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	aa ef       	ldi	r26, 0xFA	; 250
    1b94:	b2 e4       	ldi	r27, 0x42	; 66
    1b96:	8a 83       	std	Y+2, r24	; 0x02
    1b98:	9b 83       	std	Y+3, r25	; 0x03
    1b9a:	ac 83       	std	Y+4, r26	; 0x04
    1b9c:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    1b9e:	6a 81       	ldd	r22, Y+2	; 0x02
    1ba0:	7b 81       	ldd	r23, Y+3	; 0x03
    1ba2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ba4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ba6:	20 e0       	ldi	r18, 0x00	; 0
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	4a e7       	ldi	r20, 0x7A	; 122
    1bac:	55 e4       	ldi	r21, 0x45	; 69
    1bae:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__mulsf3>
    1bb2:	dc 01       	movw	r26, r24
    1bb4:	cb 01       	movw	r24, r22
    1bb6:	8e 83       	std	Y+6, r24	; 0x06
    1bb8:	9f 83       	std	Y+7, r25	; 0x07
    1bba:	a8 87       	std	Y+8, r26	; 0x08
    1bbc:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
    1bbe:	11 e0       	ldi	r17, 0x01	; 1
    1bc0:	6e 81       	ldd	r22, Y+6	; 0x06
    1bc2:	7f 81       	ldd	r23, Y+7	; 0x07
    1bc4:	88 85       	ldd	r24, Y+8	; 0x08
    1bc6:	99 85       	ldd	r25, Y+9	; 0x09
    1bc8:	20 e0       	ldi	r18, 0x00	; 0
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	40 e8       	ldi	r20, 0x80	; 128
    1bce:	5f e3       	ldi	r21, 0x3F	; 63
    1bd0:	0e 94 76 14 	call	0x28ec	; 0x28ec <__cmpsf2>
    1bd4:	88 23       	and	r24, r24
    1bd6:	0c f0       	brlt	.+2      	; 0x1bda <CALL_NURSE_HANDLE+0xa0>
    1bd8:	10 e0       	ldi	r17, 0x00	; 0
    1bda:	11 23       	and	r17, r17
    1bdc:	29 f0       	breq	.+10     	; 0x1be8 <CALL_NURSE_HANDLE+0xae>
		__ticks = 1;
    1bde:	81 e0       	ldi	r24, 0x01	; 1
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	9b 87       	std	Y+11, r25	; 0x0b
    1be4:	8a 87       	std	Y+10, r24	; 0x0a
    1be6:	46 c0       	rjmp	.+140    	; 0x1c74 <CALL_NURSE_HANDLE+0x13a>
	else if (__tmp > 65535)
    1be8:	11 e0       	ldi	r17, 0x01	; 1
    1bea:	6e 81       	ldd	r22, Y+6	; 0x06
    1bec:	7f 81       	ldd	r23, Y+7	; 0x07
    1bee:	88 85       	ldd	r24, Y+8	; 0x08
    1bf0:	99 85       	ldd	r25, Y+9	; 0x09
    1bf2:	20 e0       	ldi	r18, 0x00	; 0
    1bf4:	3f ef       	ldi	r19, 0xFF	; 255
    1bf6:	4f e7       	ldi	r20, 0x7F	; 127
    1bf8:	57 e4       	ldi	r21, 0x47	; 71
    1bfa:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__gesf2>
    1bfe:	18 16       	cp	r1, r24
    1c00:	0c f0       	brlt	.+2      	; 0x1c04 <CALL_NURSE_HANDLE+0xca>
    1c02:	10 e0       	ldi	r17, 0x00	; 0
    1c04:	11 23       	and	r17, r17
    1c06:	61 f1       	breq	.+88     	; 0x1c60 <CALL_NURSE_HANDLE+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c08:	6a 81       	ldd	r22, Y+2	; 0x02
    1c0a:	7b 81       	ldd	r23, Y+3	; 0x03
    1c0c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c0e:	9d 81       	ldd	r25, Y+5	; 0x05
    1c10:	20 e0       	ldi	r18, 0x00	; 0
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	40 e2       	ldi	r20, 0x20	; 32
    1c16:	51 e4       	ldi	r21, 0x41	; 65
    1c18:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__mulsf3>
    1c1c:	dc 01       	movw	r26, r24
    1c1e:	cb 01       	movw	r24, r22
    1c20:	bc 01       	movw	r22, r24
    1c22:	cd 01       	movw	r24, r26
    1c24:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <__fixunssfsi>
    1c28:	dc 01       	movw	r26, r24
    1c2a:	cb 01       	movw	r24, r22
    1c2c:	9b 87       	std	Y+11, r25	; 0x0b
    1c2e:	8a 87       	std	Y+10, r24	; 0x0a
    1c30:	12 c0       	rjmp	.+36     	; 0x1c56 <CALL_NURSE_HANDLE+0x11c>
    1c32:	80 e9       	ldi	r24, 0x90	; 144
    1c34:	91 e0       	ldi	r25, 0x01	; 1
    1c36:	9d 87       	std	Y+13, r25	; 0x0d
    1c38:	8c 87       	std	Y+12, r24	; 0x0c
    1c3a:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c3c:	9d 85       	ldd	r25, Y+13	; 0x0d
    1c3e:	8c 01       	movw	r16, r24
    1c40:	c8 01       	movw	r24, r16
    1c42:	01 97       	sbiw	r24, 0x01	; 1
    1c44:	f1 f7       	brne	.-4      	; 0x1c42 <CALL_NURSE_HANDLE+0x108>
    1c46:	8c 01       	movw	r16, r24
    1c48:	1d 87       	std	Y+13, r17	; 0x0d
    1c4a:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c4c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c4e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c50:	01 97       	sbiw	r24, 0x01	; 1
    1c52:	9b 87       	std	Y+11, r25	; 0x0b
    1c54:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c56:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c58:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c5a:	00 97       	sbiw	r24, 0x00	; 0
    1c5c:	51 f7       	brne	.-44     	; 0x1c32 <CALL_NURSE_HANDLE+0xf8>
    1c5e:	17 c0       	rjmp	.+46     	; 0x1c8e <CALL_NURSE_HANDLE+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c60:	6e 81       	ldd	r22, Y+6	; 0x06
    1c62:	7f 81       	ldd	r23, Y+7	; 0x07
    1c64:	88 85       	ldd	r24, Y+8	; 0x08
    1c66:	99 85       	ldd	r25, Y+9	; 0x09
    1c68:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <__fixunssfsi>
    1c6c:	dc 01       	movw	r26, r24
    1c6e:	cb 01       	movw	r24, r22
    1c70:	9b 87       	std	Y+11, r25	; 0x0b
    1c72:	8a 87       	std	Y+10, r24	; 0x0a
    1c74:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c76:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c78:	9f 87       	std	Y+15, r25	; 0x0f
    1c7a:	8e 87       	std	Y+14, r24	; 0x0e
    1c7c:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c7e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c80:	8c 01       	movw	r16, r24
    1c82:	f8 01       	movw	r30, r16
    1c84:	31 97       	sbiw	r30, 0x01	; 1
    1c86:	f1 f7       	brne	.-4      	; 0x1c84 <CALL_NURSE_HANDLE+0x14a>
    1c88:	8f 01       	movw	r16, r30
    1c8a:	1f 87       	std	Y+15, r17	; 0x0f
    1c8c:	0e 87       	std	Y+14, r16	; 0x0e
		_delay_ms(125);
		bit_flip(PORTB, BIT(2));
    1c8e:	85 e2       	ldi	r24, 0x25	; 37
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	25 e2       	ldi	r18, 0x25	; 37
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	f9 01       	movw	r30, r18
    1c98:	30 81       	ld	r19, Z
    1c9a:	24 e0       	ldi	r18, 0x04	; 4
    1c9c:	23 27       	eor	r18, r19
    1c9e:	fc 01       	movw	r30, r24
    1ca0:	20 83       	st	Z, r18
    1ca2:	80 e0       	ldi	r24, 0x00	; 0
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	aa ef       	ldi	r26, 0xFA	; 250
    1ca8:	b2 e4       	ldi	r27, 0x42	; 66
    1caa:	88 8b       	std	Y+16, r24	; 0x10
    1cac:	99 8b       	std	Y+17, r25	; 0x11
    1cae:	aa 8b       	std	Y+18, r26	; 0x12
    1cb0:	bb 8b       	std	Y+19, r27	; 0x13
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    1cb2:	68 89       	ldd	r22, Y+16	; 0x10
    1cb4:	79 89       	ldd	r23, Y+17	; 0x11
    1cb6:	8a 89       	ldd	r24, Y+18	; 0x12
    1cb8:	9b 89       	ldd	r25, Y+19	; 0x13
    1cba:	20 e0       	ldi	r18, 0x00	; 0
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	4a e7       	ldi	r20, 0x7A	; 122
    1cc0:	55 e4       	ldi	r21, 0x45	; 69
    1cc2:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__mulsf3>
    1cc6:	dc 01       	movw	r26, r24
    1cc8:	cb 01       	movw	r24, r22
    1cca:	8c 8b       	std	Y+20, r24	; 0x14
    1ccc:	9d 8b       	std	Y+21, r25	; 0x15
    1cce:	ae 8b       	std	Y+22, r26	; 0x16
    1cd0:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
    1cd2:	11 e0       	ldi	r17, 0x01	; 1
    1cd4:	6c 89       	ldd	r22, Y+20	; 0x14
    1cd6:	7d 89       	ldd	r23, Y+21	; 0x15
    1cd8:	8e 89       	ldd	r24, Y+22	; 0x16
    1cda:	9f 89       	ldd	r25, Y+23	; 0x17
    1cdc:	20 e0       	ldi	r18, 0x00	; 0
    1cde:	30 e0       	ldi	r19, 0x00	; 0
    1ce0:	40 e8       	ldi	r20, 0x80	; 128
    1ce2:	5f e3       	ldi	r21, 0x3F	; 63
    1ce4:	0e 94 76 14 	call	0x28ec	; 0x28ec <__cmpsf2>
    1ce8:	88 23       	and	r24, r24
    1cea:	0c f0       	brlt	.+2      	; 0x1cee <CALL_NURSE_HANDLE+0x1b4>
    1cec:	10 e0       	ldi	r17, 0x00	; 0
    1cee:	11 23       	and	r17, r17
    1cf0:	29 f0       	breq	.+10     	; 0x1cfc <CALL_NURSE_HANDLE+0x1c2>
		__ticks = 1;
    1cf2:	81 e0       	ldi	r24, 0x01	; 1
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	99 8f       	std	Y+25, r25	; 0x19
    1cf8:	88 8f       	std	Y+24, r24	; 0x18
    1cfa:	46 c0       	rjmp	.+140    	; 0x1d88 <CALL_NURSE_HANDLE+0x24e>
	else if (__tmp > 65535)
    1cfc:	11 e0       	ldi	r17, 0x01	; 1
    1cfe:	6c 89       	ldd	r22, Y+20	; 0x14
    1d00:	7d 89       	ldd	r23, Y+21	; 0x15
    1d02:	8e 89       	ldd	r24, Y+22	; 0x16
    1d04:	9f 89       	ldd	r25, Y+23	; 0x17
    1d06:	20 e0       	ldi	r18, 0x00	; 0
    1d08:	3f ef       	ldi	r19, 0xFF	; 255
    1d0a:	4f e7       	ldi	r20, 0x7F	; 127
    1d0c:	57 e4       	ldi	r21, 0x47	; 71
    1d0e:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__gesf2>
    1d12:	18 16       	cp	r1, r24
    1d14:	0c f0       	brlt	.+2      	; 0x1d18 <CALL_NURSE_HANDLE+0x1de>
    1d16:	10 e0       	ldi	r17, 0x00	; 0
    1d18:	11 23       	and	r17, r17
    1d1a:	61 f1       	breq	.+88     	; 0x1d74 <CALL_NURSE_HANDLE+0x23a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d1c:	68 89       	ldd	r22, Y+16	; 0x10
    1d1e:	79 89       	ldd	r23, Y+17	; 0x11
    1d20:	8a 89       	ldd	r24, Y+18	; 0x12
    1d22:	9b 89       	ldd	r25, Y+19	; 0x13
    1d24:	20 e0       	ldi	r18, 0x00	; 0
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	40 e2       	ldi	r20, 0x20	; 32
    1d2a:	51 e4       	ldi	r21, 0x41	; 65
    1d2c:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__mulsf3>
    1d30:	dc 01       	movw	r26, r24
    1d32:	cb 01       	movw	r24, r22
    1d34:	bc 01       	movw	r22, r24
    1d36:	cd 01       	movw	r24, r26
    1d38:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <__fixunssfsi>
    1d3c:	dc 01       	movw	r26, r24
    1d3e:	cb 01       	movw	r24, r22
    1d40:	99 8f       	std	Y+25, r25	; 0x19
    1d42:	88 8f       	std	Y+24, r24	; 0x18
    1d44:	12 c0       	rjmp	.+36     	; 0x1d6a <CALL_NURSE_HANDLE+0x230>
    1d46:	80 e9       	ldi	r24, 0x90	; 144
    1d48:	91 e0       	ldi	r25, 0x01	; 1
    1d4a:	9b 8f       	std	Y+27, r25	; 0x1b
    1d4c:	8a 8f       	std	Y+26, r24	; 0x1a
    1d4e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1d50:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1d52:	8c 01       	movw	r16, r24
    1d54:	c8 01       	movw	r24, r16
    1d56:	01 97       	sbiw	r24, 0x01	; 1
    1d58:	f1 f7       	brne	.-4      	; 0x1d56 <CALL_NURSE_HANDLE+0x21c>
    1d5a:	8c 01       	movw	r16, r24
    1d5c:	1b 8f       	std	Y+27, r17	; 0x1b
    1d5e:	0a 8f       	std	Y+26, r16	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d60:	88 8d       	ldd	r24, Y+24	; 0x18
    1d62:	99 8d       	ldd	r25, Y+25	; 0x19
    1d64:	01 97       	sbiw	r24, 0x01	; 1
    1d66:	99 8f       	std	Y+25, r25	; 0x19
    1d68:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d6a:	88 8d       	ldd	r24, Y+24	; 0x18
    1d6c:	99 8d       	ldd	r25, Y+25	; 0x19
    1d6e:	00 97       	sbiw	r24, 0x00	; 0
    1d70:	51 f7       	brne	.-44     	; 0x1d46 <CALL_NURSE_HANDLE+0x20c>
    1d72:	17 c0       	rjmp	.+46     	; 0x1da2 <CALL_NURSE_HANDLE+0x268>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d74:	6c 89       	ldd	r22, Y+20	; 0x14
    1d76:	7d 89       	ldd	r23, Y+21	; 0x15
    1d78:	8e 89       	ldd	r24, Y+22	; 0x16
    1d7a:	9f 89       	ldd	r25, Y+23	; 0x17
    1d7c:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <__fixunssfsi>
    1d80:	dc 01       	movw	r26, r24
    1d82:	cb 01       	movw	r24, r22
    1d84:	99 8f       	std	Y+25, r25	; 0x19
    1d86:	88 8f       	std	Y+24, r24	; 0x18
    1d88:	88 8d       	ldd	r24, Y+24	; 0x18
    1d8a:	99 8d       	ldd	r25, Y+25	; 0x19
    1d8c:	9d 8f       	std	Y+29, r25	; 0x1d
    1d8e:	8c 8f       	std	Y+28, r24	; 0x1c
    1d90:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1d92:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1d94:	8c 01       	movw	r16, r24
    1d96:	f8 01       	movw	r30, r16
    1d98:	31 97       	sbiw	r30, 0x01	; 1
    1d9a:	f1 f7       	brne	.-4      	; 0x1d98 <CALL_NURSE_HANDLE+0x25e>
    1d9c:	8f 01       	movw	r16, r30
    1d9e:	1d 8f       	std	Y+29, r17	; 0x1d
    1da0:	0c 8f       	std	Y+28, r16	; 0x1c

void CALL_NURSE_HANDLE(){
	bit_clear(PORTB, BIT(1));
	bit_clear(PORTB, BIT(2));
	
	for (uint8_t x = 0; x<8; x++)
    1da2:	89 81       	ldd	r24, Y+1	; 0x01
    1da4:	8f 5f       	subi	r24, 0xFF	; 255
    1da6:	89 83       	std	Y+1, r24	; 0x01
    1da8:	89 81       	ldd	r24, Y+1	; 0x01
    1daa:	88 30       	cpi	r24, 0x08	; 8
    1dac:	08 f4       	brcc	.+2      	; 0x1db0 <CALL_NURSE_HANDLE+0x276>
    1dae:	e5 ce       	rjmp	.-566    	; 0x1b7a <CALL_NURSE_HANDLE+0x40>
		_delay_ms(125);
		bit_flip(PORTB, BIT(2));
		_delay_ms(125);
	}
	
}
    1db0:	6d 96       	adiw	r28, 0x1d	; 29
    1db2:	0f b6       	in	r0, 0x3f	; 63
    1db4:	f8 94       	cli
    1db6:	de bf       	out	0x3e, r29	; 62
    1db8:	0f be       	out	0x3f, r0	; 63
    1dba:	cd bf       	out	0x3d, r28	; 61
    1dbc:	cf 91       	pop	r28
    1dbe:	df 91       	pop	r29
    1dc0:	1f 91       	pop	r17
    1dc2:	0f 91       	pop	r16
    1dc4:	08 95       	ret

00001dc6 <main>:
#include "nrf24.h"

void initIO();

int main(void)
{
    1dc6:	df 93       	push	r29
    1dc8:	cf 93       	push	r28
    1dca:	00 d0       	rcall	.+0      	; 0x1dcc <main+0x6>
    1dcc:	00 d0       	rcall	.+0      	; 0x1dce <main+0x8>
    1dce:	00 d0       	rcall	.+0      	; 0x1dd0 <main+0xa>
    1dd0:	cd b7       	in	r28, 0x3d	; 61
    1dd2:	de b7       	in	r29, 0x3e	; 62
	sei();	// Interrupts on
    1dd4:	78 94       	sei
    initIO();
    1dd6:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <initIO>
	nrf24_initRF_SAFE(MAIN_BOARD, RECEIVE);	// CONNECTION TO MAIN BOARD : GENERAL RF CHANNEL 112
    1dda:	80 e0       	ldi	r24, 0x00	; 0
    1ddc:	60 e0       	ldi	r22, 0x00	; 0
    1dde:	0e 94 23 14 	call	0x2846	; 0x2846 <nrf24_initRF_SAFE>
    1de2:	01 c0       	rjmp	.+2      	; 0x1de6 <main+0x20>
			if (success) { currentCommand.handlerFunction(); }
			bit_clear(PORTB, BIT(2));
		}
		
		if (nrf24_checkAvailability()==false) { nrf24_initRF_SAFE(MAIN_BOARD, RECEIVE); }
    }
    1de4:	00 00       	nop
    initIO();
	nrf24_initRF_SAFE(MAIN_BOARD, RECEIVE);	// CONNECTION TO MAIN BOARD : GENERAL RF CHANNEL 112
	
    while (1) 
    {
		if(nrf24_dataReady())
    1de6:	0e 94 b2 11 	call	0x2364	; 0x2364 <nrf24_dataReady>
    1dea:	88 23       	and	r24, r24
    1dec:	69 f1       	breq	.+90     	; 0x1e48 <main+0x82>
		{
			bit_set(PORTB, BIT(2));
    1dee:	85 e2       	ldi	r24, 0x25	; 37
    1df0:	90 e0       	ldi	r25, 0x00	; 0
    1df2:	25 e2       	ldi	r18, 0x25	; 37
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	f9 01       	movw	r30, r18
    1df8:	20 81       	ld	r18, Z
    1dfa:	24 60       	ori	r18, 0x04	; 4
    1dfc:	fc 01       	movw	r30, r24
    1dfe:	20 83       	st	Z, r18
			nrf24_getData(command_buffer);
    1e00:	80 91 68 01 	lds	r24, 0x0168
    1e04:	90 91 69 01 	lds	r25, 0x0169
    1e08:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <nrf24_getData>
			commandType currentCommand;
			bool success = decomposeCommand(command_buffer, &currentCommand, parameter);
    1e0c:	80 91 68 01 	lds	r24, 0x0168
    1e10:	90 91 69 01 	lds	r25, 0x0169
    1e14:	ae 01       	movw	r20, r28
    1e16:	4e 5f       	subi	r20, 0xFE	; 254
    1e18:	5f 4f       	sbci	r21, 0xFF	; 255
    1e1a:	22 e6       	ldi	r18, 0x62	; 98
    1e1c:	31 e0       	ldi	r19, 0x01	; 1
    1e1e:	ba 01       	movw	r22, r20
    1e20:	a9 01       	movw	r20, r18
    1e22:	0e 94 a6 00 	call	0x14c	; 0x14c <decomposeCommand>
    1e26:	89 83       	std	Y+1, r24	; 0x01
			if (success) { currentCommand.handlerFunction(); }
    1e28:	89 81       	ldd	r24, Y+1	; 0x01
    1e2a:	88 23       	and	r24, r24
    1e2c:	21 f0       	breq	.+8      	; 0x1e36 <main+0x70>
    1e2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e30:	9e 81       	ldd	r25, Y+6	; 0x06
    1e32:	fc 01       	movw	r30, r24
    1e34:	09 95       	icall
			bit_clear(PORTB, BIT(2));
    1e36:	85 e2       	ldi	r24, 0x25	; 37
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	25 e2       	ldi	r18, 0x25	; 37
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	f9 01       	movw	r30, r18
    1e40:	20 81       	ld	r18, Z
    1e42:	2b 7f       	andi	r18, 0xFB	; 251
    1e44:	fc 01       	movw	r30, r24
    1e46:	20 83       	st	Z, r18
		}
		
		if (nrf24_checkAvailability()==false) { nrf24_initRF_SAFE(MAIN_BOARD, RECEIVE); }
    1e48:	0e 94 39 10 	call	0x2072	; 0x2072 <nrf24_checkAvailability>
    1e4c:	98 2f       	mov	r25, r24
    1e4e:	81 e0       	ldi	r24, 0x01	; 1
    1e50:	89 27       	eor	r24, r25
    1e52:	88 23       	and	r24, r24
    1e54:	39 f2       	breq	.-114    	; 0x1de4 <main+0x1e>
    1e56:	80 e0       	ldi	r24, 0x00	; 0
    1e58:	60 e0       	ldi	r22, 0x00	; 0
    1e5a:	0e 94 23 14 	call	0x2846	; 0x2846 <nrf24_initRF_SAFE>
    }
    1e5e:	c3 cf       	rjmp	.-122    	; 0x1de6 <main+0x20>

00001e60 <initIO>:
}


void initIO(){
    1e60:	df 93       	push	r29
    1e62:	cf 93       	push	r28
    1e64:	cd b7       	in	r28, 0x3d	; 61
    1e66:	de b7       	in	r29, 0x3e	; 62
			CSN	 : PC1						|	OUTPUT
			MISO : PD0 (MSPIM MISO ATMEGA)	|	INPUT
			MOSI : PD1 (MSPIM MOSI ATMEGA)	|	OUTPUT
			SCK	 : PD4 (MSPIM XCK)			|	OUTPUT
	*/ 
	DDRD = 0b11111111;
    1e68:	8a e2       	ldi	r24, 0x2A	; 42
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	2f ef       	ldi	r18, 0xFF	; 255
    1e6e:	fc 01       	movw	r30, r24
    1e70:	20 83       	st	Z, r18
	DDRB = 0b00101111;
    1e72:	84 e2       	ldi	r24, 0x24	; 36
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	2f e2       	ldi	r18, 0x2F	; 47
    1e78:	fc 01       	movw	r30, r24
    1e7a:	20 83       	st	Z, r18
	DDRC = 0b11011111;
    1e7c:	87 e2       	ldi	r24, 0x27	; 39
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	2f ed       	ldi	r18, 0xDF	; 223
    1e82:	fc 01       	movw	r30, r24
    1e84:	20 83       	st	Z, r18
}
    1e86:	cf 91       	pop	r28
    1e88:	df 91       	pop	r29
    1e8a:	08 95       	ret

00001e8c <nrf24_init>:
uint8_t GENERAL_RF_CHANNEL = 112;



void nrf24_init() 
{
    1e8c:	df 93       	push	r29
    1e8e:	cf 93       	push	r28
    1e90:	cd b7       	in	r28, 0x3d	; 61
    1e92:	de b7       	in	r29, 0x3e	; 62
    nrf24_setupPins();
    1e94:	0e 94 63 13 	call	0x26c6	; 0x26c6 <nrf24_setupPins>
    nrf24_ce_digitalWrite(LOW);
    1e98:	80 e0       	ldi	r24, 0x00	; 0
    1e9a:	0e 94 97 13 	call	0x272e	; 0x272e <nrf24_ce_digitalWrite>
    nrf24_csn_digitalWrite(HIGH);    
    1e9e:	81 e0       	ldi	r24, 0x01	; 1
    1ea0:	0e 94 b7 13 	call	0x276e	; 0x276e <nrf24_csn_digitalWrite>
}
    1ea4:	cf 91       	pop	r28
    1ea6:	df 91       	pop	r29
    1ea8:	08 95       	ret

00001eaa <nrf24_config>:

void nrf24_config(uint8_t channel, uint8_t pay_length)
{
    1eaa:	df 93       	push	r29
    1eac:	cf 93       	push	r28
    1eae:	00 d0       	rcall	.+0      	; 0x1eb0 <nrf24_config+0x6>
    1eb0:	cd b7       	in	r28, 0x3d	; 61
    1eb2:	de b7       	in	r29, 0x3e	; 62
    1eb4:	89 83       	std	Y+1, r24	; 0x01
    1eb6:	6a 83       	std	Y+2, r22	; 0x02
	/* Use static payload length ... */
	payload_len = pay_length;
    1eb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eba:	80 93 6b 01 	sts	0x016B, r24
	selectedChannel = channel;
    1ebe:	89 81       	ldd	r24, Y+1	; 0x01
    1ec0:	80 93 6c 01 	sts	0x016C, r24
	// Set RF channel
	nrf24_configRegister(RF_CH,channel);
    1ec4:	85 e0       	ldi	r24, 0x05	; 5
    1ec6:	69 81       	ldd	r22, Y+1	; 0x01
    1ec8:	0e 94 e6 12 	call	0x25cc	; 0x25cc <nrf24_configRegister>
	// Set length of incoming payload
	nrf24_configRegister(RX_PW_P0, 0x00); // Auto-ACK pipe ...
    1ecc:	81 e1       	ldi	r24, 0x11	; 17
    1ece:	60 e0       	ldi	r22, 0x00	; 0
    1ed0:	0e 94 e6 12 	call	0x25cc	; 0x25cc <nrf24_configRegister>
	nrf24_configRegister(RX_PW_P1, payload_len); // Data payload pipe
    1ed4:	90 91 6b 01 	lds	r25, 0x016B
    1ed8:	82 e1       	ldi	r24, 0x12	; 18
    1eda:	69 2f       	mov	r22, r25
    1edc:	0e 94 e6 12 	call	0x25cc	; 0x25cc <nrf24_configRegister>
	nrf24_configRegister(RX_PW_P2, 0x00); // Pipe not used
    1ee0:	83 e1       	ldi	r24, 0x13	; 19
    1ee2:	60 e0       	ldi	r22, 0x00	; 0
    1ee4:	0e 94 e6 12 	call	0x25cc	; 0x25cc <nrf24_configRegister>
	nrf24_configRegister(RX_PW_P3, 0x00); // Pipe not used
    1ee8:	84 e1       	ldi	r24, 0x14	; 20
    1eea:	60 e0       	ldi	r22, 0x00	; 0
    1eec:	0e 94 e6 12 	call	0x25cc	; 0x25cc <nrf24_configRegister>
	nrf24_configRegister(RX_PW_P4, 0x00); // Pipe not used
    1ef0:	85 e1       	ldi	r24, 0x15	; 21
    1ef2:	60 e0       	ldi	r22, 0x00	; 0
    1ef4:	0e 94 e6 12 	call	0x25cc	; 0x25cc <nrf24_configRegister>
	nrf24_configRegister(RX_PW_P5, 0x00); // Pipe not used
    1ef8:	86 e1       	ldi	r24, 0x16	; 22
    1efa:	60 e0       	ldi	r22, 0x00	; 0
    1efc:	0e 94 e6 12 	call	0x25cc	; 0x25cc <nrf24_configRegister>
	// 1 Mbps, TX gain: 0dbm
	nrf24_configRegister(RF_SETUP, (0<<RF_DR)|((0x03)<<RF_PWR));
    1f00:	86 e0       	ldi	r24, 0x06	; 6
    1f02:	66 e0       	ldi	r22, 0x06	; 6
    1f04:	0e 94 e6 12 	call	0x25cc	; 0x25cc <nrf24_configRegister>
	// CRC enable, 1 byte CRC length
	nrf24_configRegister(CONFIG,nrf24_CONFIG);
    1f08:	80 e0       	ldi	r24, 0x00	; 0
    1f0a:	68 e0       	ldi	r22, 0x08	; 8
    1f0c:	0e 94 e6 12 	call	0x25cc	; 0x25cc <nrf24_configRegister>
	// Auto Acknowledgment
	nrf24_configRegister(EN_AA,(1<<ENAA_P0)|(1<<ENAA_P1)|(0<<ENAA_P2)|(0<<ENAA_P3)|(0<<ENAA_P4)|(0<<ENAA_P5));
    1f10:	81 e0       	ldi	r24, 0x01	; 1
    1f12:	63 e0       	ldi	r22, 0x03	; 3
    1f14:	0e 94 e6 12 	call	0x25cc	; 0x25cc <nrf24_configRegister>
	// Enable RX addresses
	nrf24_configRegister(EN_RXADDR,(1<<ERX_P0)|(1<<ERX_P1)|(0<<ERX_P2)|(0<<ERX_P3)|(0<<ERX_P4)|(0<<ERX_P5));
    1f18:	82 e0       	ldi	r24, 0x02	; 2
    1f1a:	63 e0       	ldi	r22, 0x03	; 3
    1f1c:	0e 94 e6 12 	call	0x25cc	; 0x25cc <nrf24_configRegister>
	// Auto retransmit delay: 1000 us and Up to 15 retransmit trials
	nrf24_configRegister(SETUP_RETR,(0x04<<ARD)|(0x0F<<ARC));
    1f20:	84 e0       	ldi	r24, 0x04	; 4
    1f22:	6f e4       	ldi	r22, 0x4F	; 79
    1f24:	0e 94 e6 12 	call	0x25cc	; 0x25cc <nrf24_configRegister>
	// Dynamic length configurations: No dynamic length
	nrf24_configRegister(DYNPD,(0<<DPL_P0)|(0<<DPL_P1)|(0<<DPL_P2)|(0<<DPL_P3)|(0<<DPL_P4)|(0<<DPL_P5));
    1f28:	8c e1       	ldi	r24, 0x1C	; 28
    1f2a:	60 e0       	ldi	r22, 0x00	; 0
    1f2c:	0e 94 e6 12 	call	0x25cc	; 0x25cc <nrf24_configRegister>

}
    1f30:	0f 90       	pop	r0
    1f32:	0f 90       	pop	r0
    1f34:	cf 91       	pop	r28
    1f36:	df 91       	pop	r29
    1f38:	08 95       	ret

00001f3a <nrf24_checkConfig>:

bool nrf24_checkConfig(){
    1f3a:	df 93       	push	r29
    1f3c:	cf 93       	push	r28
    1f3e:	cd b7       	in	r28, 0x3d	; 61
    1f40:	de b7       	in	r29, 0x3e	; 62
	// Check all registers
	if (nrf24_checkRegister(RF_CH, selectedChannel,1)==false) return false;
    1f42:	90 91 6c 01 	lds	r25, 0x016C
    1f46:	85 e0       	ldi	r24, 0x05	; 5
    1f48:	69 2f       	mov	r22, r25
    1f4a:	41 e0       	ldi	r20, 0x01	; 1
    1f4c:	0e 94 44 13 	call	0x2688	; 0x2688 <nrf24_checkRegister>
    1f50:	98 2f       	mov	r25, r24
    1f52:	81 e0       	ldi	r24, 0x01	; 1
    1f54:	89 27       	eor	r24, r25
    1f56:	88 23       	and	r24, r24
    1f58:	11 f0       	breq	.+4      	; 0x1f5e <nrf24_checkConfig+0x24>
    1f5a:	80 e0       	ldi	r24, 0x00	; 0
    1f5c:	87 c0       	rjmp	.+270    	; 0x206c <nrf24_checkConfig+0x132>
	if (nrf24_checkRegister(RX_PW_P0, 0x00,1)==false) return false;
    1f5e:	81 e1       	ldi	r24, 0x11	; 17
    1f60:	60 e0       	ldi	r22, 0x00	; 0
    1f62:	41 e0       	ldi	r20, 0x01	; 1
    1f64:	0e 94 44 13 	call	0x2688	; 0x2688 <nrf24_checkRegister>
    1f68:	98 2f       	mov	r25, r24
    1f6a:	81 e0       	ldi	r24, 0x01	; 1
    1f6c:	89 27       	eor	r24, r25
    1f6e:	88 23       	and	r24, r24
    1f70:	11 f0       	breq	.+4      	; 0x1f76 <nrf24_checkConfig+0x3c>
    1f72:	80 e0       	ldi	r24, 0x00	; 0
    1f74:	7b c0       	rjmp	.+246    	; 0x206c <nrf24_checkConfig+0x132>
	if (nrf24_checkRegister(RX_PW_P1, payload_len,1)==false) return false;
    1f76:	90 91 6b 01 	lds	r25, 0x016B
    1f7a:	82 e1       	ldi	r24, 0x12	; 18
    1f7c:	69 2f       	mov	r22, r25
    1f7e:	41 e0       	ldi	r20, 0x01	; 1
    1f80:	0e 94 44 13 	call	0x2688	; 0x2688 <nrf24_checkRegister>
    1f84:	98 2f       	mov	r25, r24
    1f86:	81 e0       	ldi	r24, 0x01	; 1
    1f88:	89 27       	eor	r24, r25
    1f8a:	88 23       	and	r24, r24
    1f8c:	11 f0       	breq	.+4      	; 0x1f92 <nrf24_checkConfig+0x58>
    1f8e:	80 e0       	ldi	r24, 0x00	; 0
    1f90:	6d c0       	rjmp	.+218    	; 0x206c <nrf24_checkConfig+0x132>
	if (nrf24_checkRegister(RX_PW_P2, 0x00,1)==false) return false;
    1f92:	83 e1       	ldi	r24, 0x13	; 19
    1f94:	60 e0       	ldi	r22, 0x00	; 0
    1f96:	41 e0       	ldi	r20, 0x01	; 1
    1f98:	0e 94 44 13 	call	0x2688	; 0x2688 <nrf24_checkRegister>
    1f9c:	98 2f       	mov	r25, r24
    1f9e:	81 e0       	ldi	r24, 0x01	; 1
    1fa0:	89 27       	eor	r24, r25
    1fa2:	88 23       	and	r24, r24
    1fa4:	11 f0       	breq	.+4      	; 0x1faa <nrf24_checkConfig+0x70>
    1fa6:	80 e0       	ldi	r24, 0x00	; 0
    1fa8:	61 c0       	rjmp	.+194    	; 0x206c <nrf24_checkConfig+0x132>
	if (nrf24_checkRegister(RX_PW_P3, 0x00,1)==false) return false;
    1faa:	84 e1       	ldi	r24, 0x14	; 20
    1fac:	60 e0       	ldi	r22, 0x00	; 0
    1fae:	41 e0       	ldi	r20, 0x01	; 1
    1fb0:	0e 94 44 13 	call	0x2688	; 0x2688 <nrf24_checkRegister>
    1fb4:	98 2f       	mov	r25, r24
    1fb6:	81 e0       	ldi	r24, 0x01	; 1
    1fb8:	89 27       	eor	r24, r25
    1fba:	88 23       	and	r24, r24
    1fbc:	11 f0       	breq	.+4      	; 0x1fc2 <nrf24_checkConfig+0x88>
    1fbe:	80 e0       	ldi	r24, 0x00	; 0
    1fc0:	55 c0       	rjmp	.+170    	; 0x206c <nrf24_checkConfig+0x132>
	if (nrf24_checkRegister(RX_PW_P4, 0x00,1)==false) return false;
    1fc2:	85 e1       	ldi	r24, 0x15	; 21
    1fc4:	60 e0       	ldi	r22, 0x00	; 0
    1fc6:	41 e0       	ldi	r20, 0x01	; 1
    1fc8:	0e 94 44 13 	call	0x2688	; 0x2688 <nrf24_checkRegister>
    1fcc:	98 2f       	mov	r25, r24
    1fce:	81 e0       	ldi	r24, 0x01	; 1
    1fd0:	89 27       	eor	r24, r25
    1fd2:	88 23       	and	r24, r24
    1fd4:	11 f0       	breq	.+4      	; 0x1fda <nrf24_checkConfig+0xa0>
    1fd6:	80 e0       	ldi	r24, 0x00	; 0
    1fd8:	49 c0       	rjmp	.+146    	; 0x206c <nrf24_checkConfig+0x132>
	if (nrf24_checkRegister(RX_PW_P5, 0x00,1)==false) return false;
    1fda:	86 e1       	ldi	r24, 0x16	; 22
    1fdc:	60 e0       	ldi	r22, 0x00	; 0
    1fde:	41 e0       	ldi	r20, 0x01	; 1
    1fe0:	0e 94 44 13 	call	0x2688	; 0x2688 <nrf24_checkRegister>
    1fe4:	98 2f       	mov	r25, r24
    1fe6:	81 e0       	ldi	r24, 0x01	; 1
    1fe8:	89 27       	eor	r24, r25
    1fea:	88 23       	and	r24, r24
    1fec:	11 f0       	breq	.+4      	; 0x1ff2 <nrf24_checkConfig+0xb8>
    1fee:	80 e0       	ldi	r24, 0x00	; 0
    1ff0:	3d c0       	rjmp	.+122    	; 0x206c <nrf24_checkConfig+0x132>
	if (nrf24_checkRegister(RF_SETUP, (0<<RF_DR)|((0x03)<<RF_PWR),1)==false) return false;
    1ff2:	86 e0       	ldi	r24, 0x06	; 6
    1ff4:	66 e0       	ldi	r22, 0x06	; 6
    1ff6:	41 e0       	ldi	r20, 0x01	; 1
    1ff8:	0e 94 44 13 	call	0x2688	; 0x2688 <nrf24_checkRegister>
    1ffc:	98 2f       	mov	r25, r24
    1ffe:	81 e0       	ldi	r24, 0x01	; 1
    2000:	89 27       	eor	r24, r25
    2002:	88 23       	and	r24, r24
    2004:	11 f0       	breq	.+4      	; 0x200a <nrf24_checkConfig+0xd0>
    2006:	80 e0       	ldi	r24, 0x00	; 0
    2008:	31 c0       	rjmp	.+98     	; 0x206c <nrf24_checkConfig+0x132>
	if (nrf24_checkRegister(CONFIG,nrf24_CONFIG,1)==false) return false;
    200a:	80 e0       	ldi	r24, 0x00	; 0
    200c:	68 e0       	ldi	r22, 0x08	; 8
    200e:	41 e0       	ldi	r20, 0x01	; 1
    2010:	0e 94 44 13 	call	0x2688	; 0x2688 <nrf24_checkRegister>
    2014:	98 2f       	mov	r25, r24
    2016:	81 e0       	ldi	r24, 0x01	; 1
    2018:	89 27       	eor	r24, r25
    201a:	88 23       	and	r24, r24
    201c:	11 f0       	breq	.+4      	; 0x2022 <nrf24_checkConfig+0xe8>
    201e:	80 e0       	ldi	r24, 0x00	; 0
    2020:	25 c0       	rjmp	.+74     	; 0x206c <nrf24_checkConfig+0x132>
	if (nrf24_checkRegister(EN_AA,(1<<ENAA_P0)|(1<<ENAA_P1)|(0<<ENAA_P2)|(0<<ENAA_P3)|(0<<ENAA_P4)|(0<<ENAA_P5),1)==false) return false;
    2022:	81 e0       	ldi	r24, 0x01	; 1
    2024:	63 e0       	ldi	r22, 0x03	; 3
    2026:	41 e0       	ldi	r20, 0x01	; 1
    2028:	0e 94 44 13 	call	0x2688	; 0x2688 <nrf24_checkRegister>
    202c:	98 2f       	mov	r25, r24
    202e:	81 e0       	ldi	r24, 0x01	; 1
    2030:	89 27       	eor	r24, r25
    2032:	88 23       	and	r24, r24
    2034:	11 f0       	breq	.+4      	; 0x203a <nrf24_checkConfig+0x100>
    2036:	80 e0       	ldi	r24, 0x00	; 0
    2038:	19 c0       	rjmp	.+50     	; 0x206c <nrf24_checkConfig+0x132>
	if (nrf24_checkRegister(SETUP_RETR,(0x04<<ARD)|(0x0F<<ARC),1)==false) return false;
    203a:	84 e0       	ldi	r24, 0x04	; 4
    203c:	6f e4       	ldi	r22, 0x4F	; 79
    203e:	41 e0       	ldi	r20, 0x01	; 1
    2040:	0e 94 44 13 	call	0x2688	; 0x2688 <nrf24_checkRegister>
    2044:	98 2f       	mov	r25, r24
    2046:	81 e0       	ldi	r24, 0x01	; 1
    2048:	89 27       	eor	r24, r25
    204a:	88 23       	and	r24, r24
    204c:	11 f0       	breq	.+4      	; 0x2052 <nrf24_checkConfig+0x118>
    204e:	80 e0       	ldi	r24, 0x00	; 0
    2050:	0d c0       	rjmp	.+26     	; 0x206c <nrf24_checkConfig+0x132>
	if (nrf24_checkRegister(DYNPD,(0<<DPL_P0)|(0<<DPL_P1)|(0<<DPL_P2)|(0<<DPL_P3)|(0<<DPL_P4)|(0<<DPL_P5),1)==false) return false;
    2052:	8c e1       	ldi	r24, 0x1C	; 28
    2054:	60 e0       	ldi	r22, 0x00	; 0
    2056:	41 e0       	ldi	r20, 0x01	; 1
    2058:	0e 94 44 13 	call	0x2688	; 0x2688 <nrf24_checkRegister>
    205c:	98 2f       	mov	r25, r24
    205e:	81 e0       	ldi	r24, 0x01	; 1
    2060:	89 27       	eor	r24, r25
    2062:	88 23       	and	r24, r24
    2064:	11 f0       	breq	.+4      	; 0x206a <nrf24_checkConfig+0x130>
    2066:	80 e0       	ldi	r24, 0x00	; 0
    2068:	01 c0       	rjmp	.+2      	; 0x206c <nrf24_checkConfig+0x132>
	
	return true;
    206a:	81 e0       	ldi	r24, 0x01	; 1
}
    206c:	cf 91       	pop	r28
    206e:	df 91       	pop	r29
    2070:	08 95       	ret

00002072 <nrf24_checkAvailability>:

bool nrf24_checkAvailability(){
    2072:	df 93       	push	r29
    2074:	cf 93       	push	r28
    2076:	cd b7       	in	r28, 0x3d	; 61
    2078:	de b7       	in	r29, 0x3e	; 62
	if (nrf24_checkRegister(RF_CH, selectedChannel,1)==true) { return true; } else { return false;}
    207a:	90 91 6c 01 	lds	r25, 0x016C
    207e:	85 e0       	ldi	r24, 0x05	; 5
    2080:	69 2f       	mov	r22, r25
    2082:	41 e0       	ldi	r20, 0x01	; 1
    2084:	0e 94 44 13 	call	0x2688	; 0x2688 <nrf24_checkRegister>
    2088:	88 23       	and	r24, r24
    208a:	11 f0       	breq	.+4      	; 0x2090 <nrf24_checkAvailability+0x1e>
    208c:	81 e0       	ldi	r24, 0x01	; 1
    208e:	01 c0       	rjmp	.+2      	; 0x2092 <nrf24_checkAvailability+0x20>
    2090:	80 e0       	ldi	r24, 0x00	; 0
}
    2092:	cf 91       	pop	r28
    2094:	df 91       	pop	r29
    2096:	08 95       	ret

00002098 <faultyRF_Alarm>:




void faultyRF_Alarm(){
    2098:	0f 93       	push	r16
    209a:	1f 93       	push	r17
    209c:	df 93       	push	r29
    209e:	cf 93       	push	r28
    20a0:	cd b7       	in	r28, 0x3d	; 61
    20a2:	de b7       	in	r29, 0x3e	; 62
    20a4:	6d 97       	sbiw	r28, 0x1d	; 29
    20a6:	0f b6       	in	r0, 0x3f	; 63
    20a8:	f8 94       	cli
    20aa:	de bf       	out	0x3e, r29	; 62
    20ac:	0f be       	out	0x3f, r0	; 63
    20ae:	cd bf       	out	0x3d, r28	; 61
	CLEAR_FAULTY_RF_LED;
    20b0:	85 e2       	ldi	r24, 0x25	; 37
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	25 e2       	ldi	r18, 0x25	; 37
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	f9 01       	movw	r30, r18
    20ba:	20 81       	ld	r18, Z
    20bc:	2d 7f       	andi	r18, 0xFD	; 253
    20be:	fc 01       	movw	r30, r24
    20c0:	20 83       	st	Z, r18
	for (uint8_t x = 0; x < 6; x++)
    20c2:	19 82       	std	Y+1, r1	; 0x01
    20c4:	8d c0       	rjmp	.+282    	; 0x21e0 <faultyRF_Alarm+0x148>
	{
		FLIP_FAULTY_RF_LED;
    20c6:	85 e2       	ldi	r24, 0x25	; 37
    20c8:	90 e0       	ldi	r25, 0x00	; 0
    20ca:	25 e2       	ldi	r18, 0x25	; 37
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	f9 01       	movw	r30, r18
    20d0:	30 81       	ld	r19, Z
    20d2:	22 e0       	ldi	r18, 0x02	; 2
    20d4:	23 27       	eor	r18, r19
    20d6:	fc 01       	movw	r30, r24
    20d8:	20 83       	st	Z, r18
    20da:	80 e0       	ldi	r24, 0x00	; 0
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	aa ef       	ldi	r26, 0xFA	; 250
    20e0:	b2 e4       	ldi	r27, 0x42	; 66
    20e2:	8a 83       	std	Y+2, r24	; 0x02
    20e4:	9b 83       	std	Y+3, r25	; 0x03
    20e6:	ac 83       	std	Y+4, r26	; 0x04
    20e8:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    20ea:	6a 81       	ldd	r22, Y+2	; 0x02
    20ec:	7b 81       	ldd	r23, Y+3	; 0x03
    20ee:	8c 81       	ldd	r24, Y+4	; 0x04
    20f0:	9d 81       	ldd	r25, Y+5	; 0x05
    20f2:	20 e0       	ldi	r18, 0x00	; 0
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	4a e7       	ldi	r20, 0x7A	; 122
    20f8:	55 e4       	ldi	r21, 0x45	; 69
    20fa:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__mulsf3>
    20fe:	dc 01       	movw	r26, r24
    2100:	cb 01       	movw	r24, r22
    2102:	8e 83       	std	Y+6, r24	; 0x06
    2104:	9f 83       	std	Y+7, r25	; 0x07
    2106:	a8 87       	std	Y+8, r26	; 0x08
    2108:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
    210a:	11 e0       	ldi	r17, 0x01	; 1
    210c:	6e 81       	ldd	r22, Y+6	; 0x06
    210e:	7f 81       	ldd	r23, Y+7	; 0x07
    2110:	88 85       	ldd	r24, Y+8	; 0x08
    2112:	99 85       	ldd	r25, Y+9	; 0x09
    2114:	20 e0       	ldi	r18, 0x00	; 0
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	40 e8       	ldi	r20, 0x80	; 128
    211a:	5f e3       	ldi	r21, 0x3F	; 63
    211c:	0e 94 76 14 	call	0x28ec	; 0x28ec <__cmpsf2>
    2120:	88 23       	and	r24, r24
    2122:	0c f0       	brlt	.+2      	; 0x2126 <faultyRF_Alarm+0x8e>
    2124:	10 e0       	ldi	r17, 0x00	; 0
    2126:	11 23       	and	r17, r17
    2128:	29 f0       	breq	.+10     	; 0x2134 <faultyRF_Alarm+0x9c>
		__ticks = 1;
    212a:	81 e0       	ldi	r24, 0x01	; 1
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	9b 87       	std	Y+11, r25	; 0x0b
    2130:	8a 87       	std	Y+10, r24	; 0x0a
    2132:	46 c0       	rjmp	.+140    	; 0x21c0 <faultyRF_Alarm+0x128>
	else if (__tmp > 65535)
    2134:	11 e0       	ldi	r17, 0x01	; 1
    2136:	6e 81       	ldd	r22, Y+6	; 0x06
    2138:	7f 81       	ldd	r23, Y+7	; 0x07
    213a:	88 85       	ldd	r24, Y+8	; 0x08
    213c:	99 85       	ldd	r25, Y+9	; 0x09
    213e:	20 e0       	ldi	r18, 0x00	; 0
    2140:	3f ef       	ldi	r19, 0xFF	; 255
    2142:	4f e7       	ldi	r20, 0x7F	; 127
    2144:	57 e4       	ldi	r21, 0x47	; 71
    2146:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__gesf2>
    214a:	18 16       	cp	r1, r24
    214c:	0c f0       	brlt	.+2      	; 0x2150 <faultyRF_Alarm+0xb8>
    214e:	10 e0       	ldi	r17, 0x00	; 0
    2150:	11 23       	and	r17, r17
    2152:	61 f1       	breq	.+88     	; 0x21ac <faultyRF_Alarm+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2154:	6a 81       	ldd	r22, Y+2	; 0x02
    2156:	7b 81       	ldd	r23, Y+3	; 0x03
    2158:	8c 81       	ldd	r24, Y+4	; 0x04
    215a:	9d 81       	ldd	r25, Y+5	; 0x05
    215c:	20 e0       	ldi	r18, 0x00	; 0
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	40 e2       	ldi	r20, 0x20	; 32
    2162:	51 e4       	ldi	r21, 0x41	; 65
    2164:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__mulsf3>
    2168:	dc 01       	movw	r26, r24
    216a:	cb 01       	movw	r24, r22
    216c:	bc 01       	movw	r22, r24
    216e:	cd 01       	movw	r24, r26
    2170:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <__fixunssfsi>
    2174:	dc 01       	movw	r26, r24
    2176:	cb 01       	movw	r24, r22
    2178:	9b 87       	std	Y+11, r25	; 0x0b
    217a:	8a 87       	std	Y+10, r24	; 0x0a
    217c:	12 c0       	rjmp	.+36     	; 0x21a2 <faultyRF_Alarm+0x10a>
    217e:	80 e9       	ldi	r24, 0x90	; 144
    2180:	91 e0       	ldi	r25, 0x01	; 1
    2182:	9d 87       	std	Y+13, r25	; 0x0d
    2184:	8c 87       	std	Y+12, r24	; 0x0c
    2186:	8c 85       	ldd	r24, Y+12	; 0x0c
    2188:	9d 85       	ldd	r25, Y+13	; 0x0d
    218a:	8c 01       	movw	r16, r24
    218c:	c8 01       	movw	r24, r16
    218e:	01 97       	sbiw	r24, 0x01	; 1
    2190:	f1 f7       	brne	.-4      	; 0x218e <faultyRF_Alarm+0xf6>
    2192:	8c 01       	movw	r16, r24
    2194:	1d 87       	std	Y+13, r17	; 0x0d
    2196:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2198:	8a 85       	ldd	r24, Y+10	; 0x0a
    219a:	9b 85       	ldd	r25, Y+11	; 0x0b
    219c:	01 97       	sbiw	r24, 0x01	; 1
    219e:	9b 87       	std	Y+11, r25	; 0x0b
    21a0:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21a2:	8a 85       	ldd	r24, Y+10	; 0x0a
    21a4:	9b 85       	ldd	r25, Y+11	; 0x0b
    21a6:	00 97       	sbiw	r24, 0x00	; 0
    21a8:	51 f7       	brne	.-44     	; 0x217e <faultyRF_Alarm+0xe6>
    21aa:	17 c0       	rjmp	.+46     	; 0x21da <faultyRF_Alarm+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ac:	6e 81       	ldd	r22, Y+6	; 0x06
    21ae:	7f 81       	ldd	r23, Y+7	; 0x07
    21b0:	88 85       	ldd	r24, Y+8	; 0x08
    21b2:	99 85       	ldd	r25, Y+9	; 0x09
    21b4:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <__fixunssfsi>
    21b8:	dc 01       	movw	r26, r24
    21ba:	cb 01       	movw	r24, r22
    21bc:	9b 87       	std	Y+11, r25	; 0x0b
    21be:	8a 87       	std	Y+10, r24	; 0x0a
    21c0:	8a 85       	ldd	r24, Y+10	; 0x0a
    21c2:	9b 85       	ldd	r25, Y+11	; 0x0b
    21c4:	9f 87       	std	Y+15, r25	; 0x0f
    21c6:	8e 87       	std	Y+14, r24	; 0x0e
    21c8:	8e 85       	ldd	r24, Y+14	; 0x0e
    21ca:	9f 85       	ldd	r25, Y+15	; 0x0f
    21cc:	8c 01       	movw	r16, r24
    21ce:	f8 01       	movw	r30, r16
    21d0:	31 97       	sbiw	r30, 0x01	; 1
    21d2:	f1 f7       	brne	.-4      	; 0x21d0 <faultyRF_Alarm+0x138>
    21d4:	8f 01       	movw	r16, r30
    21d6:	1f 87       	std	Y+15, r17	; 0x0f
    21d8:	0e 87       	std	Y+14, r16	; 0x0e



void faultyRF_Alarm(){
	CLEAR_FAULTY_RF_LED;
	for (uint8_t x = 0; x < 6; x++)
    21da:	89 81       	ldd	r24, Y+1	; 0x01
    21dc:	8f 5f       	subi	r24, 0xFF	; 255
    21de:	89 83       	std	Y+1, r24	; 0x01
    21e0:	89 81       	ldd	r24, Y+1	; 0x01
    21e2:	86 30       	cpi	r24, 0x06	; 6
    21e4:	08 f4       	brcc	.+2      	; 0x21e8 <faultyRF_Alarm+0x150>
    21e6:	6f cf       	rjmp	.-290    	; 0x20c6 <faultyRF_Alarm+0x2e>
    21e8:	80 e0       	ldi	r24, 0x00	; 0
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	aa e7       	ldi	r26, 0x7A	; 122
    21ee:	b3 e4       	ldi	r27, 0x43	; 67
    21f0:	88 8b       	std	Y+16, r24	; 0x10
    21f2:	99 8b       	std	Y+17, r25	; 0x11
    21f4:	aa 8b       	std	Y+18, r26	; 0x12
    21f6:	bb 8b       	std	Y+19, r27	; 0x13
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    21f8:	68 89       	ldd	r22, Y+16	; 0x10
    21fa:	79 89       	ldd	r23, Y+17	; 0x11
    21fc:	8a 89       	ldd	r24, Y+18	; 0x12
    21fe:	9b 89       	ldd	r25, Y+19	; 0x13
    2200:	20 e0       	ldi	r18, 0x00	; 0
    2202:	30 e0       	ldi	r19, 0x00	; 0
    2204:	4a e7       	ldi	r20, 0x7A	; 122
    2206:	55 e4       	ldi	r21, 0x45	; 69
    2208:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__mulsf3>
    220c:	dc 01       	movw	r26, r24
    220e:	cb 01       	movw	r24, r22
    2210:	8c 8b       	std	Y+20, r24	; 0x14
    2212:	9d 8b       	std	Y+21, r25	; 0x15
    2214:	ae 8b       	std	Y+22, r26	; 0x16
    2216:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
    2218:	11 e0       	ldi	r17, 0x01	; 1
    221a:	6c 89       	ldd	r22, Y+20	; 0x14
    221c:	7d 89       	ldd	r23, Y+21	; 0x15
    221e:	8e 89       	ldd	r24, Y+22	; 0x16
    2220:	9f 89       	ldd	r25, Y+23	; 0x17
    2222:	20 e0       	ldi	r18, 0x00	; 0
    2224:	30 e0       	ldi	r19, 0x00	; 0
    2226:	40 e8       	ldi	r20, 0x80	; 128
    2228:	5f e3       	ldi	r21, 0x3F	; 63
    222a:	0e 94 76 14 	call	0x28ec	; 0x28ec <__cmpsf2>
    222e:	88 23       	and	r24, r24
    2230:	0c f0       	brlt	.+2      	; 0x2234 <faultyRF_Alarm+0x19c>
    2232:	10 e0       	ldi	r17, 0x00	; 0
    2234:	11 23       	and	r17, r17
    2236:	29 f0       	breq	.+10     	; 0x2242 <faultyRF_Alarm+0x1aa>
		__ticks = 1;
    2238:	81 e0       	ldi	r24, 0x01	; 1
    223a:	90 e0       	ldi	r25, 0x00	; 0
    223c:	99 8f       	std	Y+25, r25	; 0x19
    223e:	88 8f       	std	Y+24, r24	; 0x18
    2240:	46 c0       	rjmp	.+140    	; 0x22ce <faultyRF_Alarm+0x236>
	else if (__tmp > 65535)
    2242:	11 e0       	ldi	r17, 0x01	; 1
    2244:	6c 89       	ldd	r22, Y+20	; 0x14
    2246:	7d 89       	ldd	r23, Y+21	; 0x15
    2248:	8e 89       	ldd	r24, Y+22	; 0x16
    224a:	9f 89       	ldd	r25, Y+23	; 0x17
    224c:	20 e0       	ldi	r18, 0x00	; 0
    224e:	3f ef       	ldi	r19, 0xFF	; 255
    2250:	4f e7       	ldi	r20, 0x7F	; 127
    2252:	57 e4       	ldi	r21, 0x47	; 71
    2254:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__gesf2>
    2258:	18 16       	cp	r1, r24
    225a:	0c f0       	brlt	.+2      	; 0x225e <faultyRF_Alarm+0x1c6>
    225c:	10 e0       	ldi	r17, 0x00	; 0
    225e:	11 23       	and	r17, r17
    2260:	61 f1       	breq	.+88     	; 0x22ba <faultyRF_Alarm+0x222>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2262:	68 89       	ldd	r22, Y+16	; 0x10
    2264:	79 89       	ldd	r23, Y+17	; 0x11
    2266:	8a 89       	ldd	r24, Y+18	; 0x12
    2268:	9b 89       	ldd	r25, Y+19	; 0x13
    226a:	20 e0       	ldi	r18, 0x00	; 0
    226c:	30 e0       	ldi	r19, 0x00	; 0
    226e:	40 e2       	ldi	r20, 0x20	; 32
    2270:	51 e4       	ldi	r21, 0x41	; 65
    2272:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__mulsf3>
    2276:	dc 01       	movw	r26, r24
    2278:	cb 01       	movw	r24, r22
    227a:	bc 01       	movw	r22, r24
    227c:	cd 01       	movw	r24, r26
    227e:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <__fixunssfsi>
    2282:	dc 01       	movw	r26, r24
    2284:	cb 01       	movw	r24, r22
    2286:	99 8f       	std	Y+25, r25	; 0x19
    2288:	88 8f       	std	Y+24, r24	; 0x18
    228a:	12 c0       	rjmp	.+36     	; 0x22b0 <faultyRF_Alarm+0x218>
    228c:	80 e9       	ldi	r24, 0x90	; 144
    228e:	91 e0       	ldi	r25, 0x01	; 1
    2290:	9b 8f       	std	Y+27, r25	; 0x1b
    2292:	8a 8f       	std	Y+26, r24	; 0x1a
    2294:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2296:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2298:	8c 01       	movw	r16, r24
    229a:	c8 01       	movw	r24, r16
    229c:	01 97       	sbiw	r24, 0x01	; 1
    229e:	f1 f7       	brne	.-4      	; 0x229c <faultyRF_Alarm+0x204>
    22a0:	8c 01       	movw	r16, r24
    22a2:	1b 8f       	std	Y+27, r17	; 0x1b
    22a4:	0a 8f       	std	Y+26, r16	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22a6:	88 8d       	ldd	r24, Y+24	; 0x18
    22a8:	99 8d       	ldd	r25, Y+25	; 0x19
    22aa:	01 97       	sbiw	r24, 0x01	; 1
    22ac:	99 8f       	std	Y+25, r25	; 0x19
    22ae:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22b0:	88 8d       	ldd	r24, Y+24	; 0x18
    22b2:	99 8d       	ldd	r25, Y+25	; 0x19
    22b4:	00 97       	sbiw	r24, 0x00	; 0
    22b6:	51 f7       	brne	.-44     	; 0x228c <faultyRF_Alarm+0x1f4>
    22b8:	17 c0       	rjmp	.+46     	; 0x22e8 <faultyRF_Alarm+0x250>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22ba:	6c 89       	ldd	r22, Y+20	; 0x14
    22bc:	7d 89       	ldd	r23, Y+21	; 0x15
    22be:	8e 89       	ldd	r24, Y+22	; 0x16
    22c0:	9f 89       	ldd	r25, Y+23	; 0x17
    22c2:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <__fixunssfsi>
    22c6:	dc 01       	movw	r26, r24
    22c8:	cb 01       	movw	r24, r22
    22ca:	99 8f       	std	Y+25, r25	; 0x19
    22cc:	88 8f       	std	Y+24, r24	; 0x18
    22ce:	88 8d       	ldd	r24, Y+24	; 0x18
    22d0:	99 8d       	ldd	r25, Y+25	; 0x19
    22d2:	9d 8f       	std	Y+29, r25	; 0x1d
    22d4:	8c 8f       	std	Y+28, r24	; 0x1c
    22d6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    22d8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    22da:	8c 01       	movw	r16, r24
    22dc:	f8 01       	movw	r30, r16
    22de:	31 97       	sbiw	r30, 0x01	; 1
    22e0:	f1 f7       	brne	.-4      	; 0x22de <faultyRF_Alarm+0x246>
    22e2:	8f 01       	movw	r16, r30
    22e4:	1d 8f       	std	Y+29, r17	; 0x1d
    22e6:	0c 8f       	std	Y+28, r16	; 0x1c
	{
		FLIP_FAULTY_RF_LED;
		_delay_ms(125);
	}
	_delay_ms(250);
}
    22e8:	6d 96       	adiw	r28, 0x1d	; 29
    22ea:	0f b6       	in	r0, 0x3f	; 63
    22ec:	f8 94       	cli
    22ee:	de bf       	out	0x3e, r29	; 62
    22f0:	0f be       	out	0x3f, r0	; 63
    22f2:	cd bf       	out	0x3d, r28	; 61
    22f4:	cf 91       	pop	r28
    22f6:	df 91       	pop	r29
    22f8:	1f 91       	pop	r17
    22fa:	0f 91       	pop	r16
    22fc:	08 95       	ret

000022fe <nrf24_rx_address>:



/* Set the RX address */
void nrf24_rx_address(uint8_t * adr) 
{
    22fe:	df 93       	push	r29
    2300:	cf 93       	push	r28
    2302:	00 d0       	rcall	.+0      	; 0x2304 <nrf24_rx_address+0x6>
    2304:	cd b7       	in	r28, 0x3d	; 61
    2306:	de b7       	in	r29, 0x3e	; 62
    2308:	9a 83       	std	Y+2, r25	; 0x02
    230a:	89 83       	std	Y+1, r24	; 0x01
    nrf24_ce_digitalWrite(LOW);
    230c:	80 e0       	ldi	r24, 0x00	; 0
    230e:	0e 94 97 13 	call	0x272e	; 0x272e <nrf24_ce_digitalWrite>
    nrf24_writeRegister(RX_ADDR_P1,adr,nrf24_ADDR_LEN);
    2312:	29 81       	ldd	r18, Y+1	; 0x01
    2314:	3a 81       	ldd	r19, Y+2	; 0x02
    2316:	8b e0       	ldi	r24, 0x0B	; 11
    2318:	b9 01       	movw	r22, r18
    231a:	45 e0       	ldi	r20, 0x05	; 5
    231c:	0e 94 23 13 	call	0x2646	; 0x2646 <nrf24_writeRegister>
    nrf24_ce_digitalWrite(HIGH);
    2320:	81 e0       	ldi	r24, 0x01	; 1
    2322:	0e 94 97 13 	call	0x272e	; 0x272e <nrf24_ce_digitalWrite>
}
    2326:	0f 90       	pop	r0
    2328:	0f 90       	pop	r0
    232a:	cf 91       	pop	r28
    232c:	df 91       	pop	r29
    232e:	08 95       	ret

00002330 <nrf24_tx_address>:
    return payload_len;
}

/* Set the TX address */
void nrf24_tx_address(uint8_t* adr)
{
    2330:	df 93       	push	r29
    2332:	cf 93       	push	r28
    2334:	00 d0       	rcall	.+0      	; 0x2336 <nrf24_tx_address+0x6>
    2336:	cd b7       	in	r28, 0x3d	; 61
    2338:	de b7       	in	r29, 0x3e	; 62
    233a:	9a 83       	std	Y+2, r25	; 0x02
    233c:	89 83       	std	Y+1, r24	; 0x01
    /* RX_ADDR_P0 must be set to the sending addr for auto ack to work. */
    nrf24_writeRegister(RX_ADDR_P0,adr,nrf24_ADDR_LEN);
    233e:	29 81       	ldd	r18, Y+1	; 0x01
    2340:	3a 81       	ldd	r19, Y+2	; 0x02
    2342:	8a e0       	ldi	r24, 0x0A	; 10
    2344:	b9 01       	movw	r22, r18
    2346:	45 e0       	ldi	r20, 0x05	; 5
    2348:	0e 94 23 13 	call	0x2646	; 0x2646 <nrf24_writeRegister>
    nrf24_writeRegister(TX_ADDR,adr,nrf24_ADDR_LEN);
    234c:	29 81       	ldd	r18, Y+1	; 0x01
    234e:	3a 81       	ldd	r19, Y+2	; 0x02
    2350:	80 e1       	ldi	r24, 0x10	; 16
    2352:	b9 01       	movw	r22, r18
    2354:	45 e0       	ldi	r20, 0x05	; 5
    2356:	0e 94 23 13 	call	0x2646	; 0x2646 <nrf24_writeRegister>
}
    235a:	0f 90       	pop	r0
    235c:	0f 90       	pop	r0
    235e:	cf 91       	pop	r28
    2360:	df 91       	pop	r29
    2362:	08 95       	ret

00002364 <nrf24_dataReady>:

/* Checks if data is available for reading */
/* Returns 1 if data is ready ... */
uint8_t nrf24_dataReady() 
{
    2364:	df 93       	push	r29
    2366:	cf 93       	push	r28
    2368:	0f 92       	push	r0
    236a:	cd b7       	in	r28, 0x3d	; 61
    236c:	de b7       	in	r29, 0x3e	; 62
    // See note in getData() function - just checking RX_DR isn't good enough
    uint8_t status = nrf24_getStatus();
    236e:	0e 94 03 12 	call	0x2406	; 0x2406 <nrf24_getStatus>
    2372:	89 83       	std	Y+1, r24	; 0x01

    // We can short circuit on RX_DR, but if it's not set, we still need
    // to check the FIFO for any pending packets
    if ( status & (1 << RX_DR) ) 
    2374:	89 81       	ldd	r24, Y+1	; 0x01
    2376:	88 2f       	mov	r24, r24
    2378:	90 e0       	ldi	r25, 0x00	; 0
    237a:	80 74       	andi	r24, 0x40	; 64
    237c:	90 70       	andi	r25, 0x00	; 0
    237e:	00 97       	sbiw	r24, 0x00	; 0
    2380:	11 f0       	breq	.+4      	; 0x2386 <nrf24_dataReady+0x22>
    {
        return 1;
    2382:	81 e0       	ldi	r24, 0x01	; 1
    2384:	07 c0       	rjmp	.+14     	; 0x2394 <nrf24_dataReady+0x30>
    }

    return !nrf24_rxFifoEmpty();;
    2386:	0e 94 ce 11 	call	0x239c	; 0x239c <nrf24_rxFifoEmpty>
    238a:	98 2f       	mov	r25, r24
    238c:	81 e0       	ldi	r24, 0x01	; 1
    238e:	99 23       	and	r25, r25
    2390:	09 f0       	breq	.+2      	; 0x2394 <nrf24_dataReady+0x30>
    2392:	80 e0       	ldi	r24, 0x00	; 0
}
    2394:	0f 90       	pop	r0
    2396:	cf 91       	pop	r28
    2398:	df 91       	pop	r29
    239a:	08 95       	ret

0000239c <nrf24_rxFifoEmpty>:

/* Checks if receive FIFO is empty or not */
uint8_t nrf24_rxFifoEmpty()
{
    239c:	df 93       	push	r29
    239e:	cf 93       	push	r28
    23a0:	0f 92       	push	r0
    23a2:	cd b7       	in	r28, 0x3d	; 61
    23a4:	de b7       	in	r29, 0x3e	; 62
    uint8_t fifoStatus;

    nrf24_readRegister(FIFO_STATUS,&fifoStatus,1);
    23a6:	87 e1       	ldi	r24, 0x17	; 23
    23a8:	9e 01       	movw	r18, r28
    23aa:	2f 5f       	subi	r18, 0xFF	; 255
    23ac:	3f 4f       	sbci	r19, 0xFF	; 255
    23ae:	b9 01       	movw	r22, r18
    23b0:	41 e0       	ldi	r20, 0x01	; 1
    23b2:	0e 94 00 13 	call	0x2600	; 0x2600 <nrf24_readRegister>
    
    return (fifoStatus & (1 << RX_EMPTY));
    23b6:	89 81       	ldd	r24, Y+1	; 0x01
    23b8:	81 70       	andi	r24, 0x01	; 1
}
    23ba:	0f 90       	pop	r0
    23bc:	cf 91       	pop	r28
    23be:	df 91       	pop	r29
    23c0:	08 95       	ret

000023c2 <nrf24_getData>:
    return status;
}

/* Reads payload bytes into data array */
void nrf24_getData(uint8_t* data) 
{
    23c2:	df 93       	push	r29
    23c4:	cf 93       	push	r28
    23c6:	00 d0       	rcall	.+0      	; 0x23c8 <nrf24_getData+0x6>
    23c8:	cd b7       	in	r28, 0x3d	; 61
    23ca:	de b7       	in	r29, 0x3e	; 62
    23cc:	9a 83       	std	Y+2, r25	; 0x02
    23ce:	89 83       	std	Y+1, r24	; 0x01
    /* Pull down chip select */
    nrf24_csn_digitalWrite(LOW);                               
    23d0:	80 e0       	ldi	r24, 0x00	; 0
    23d2:	0e 94 b7 13 	call	0x276e	; 0x276e <nrf24_csn_digitalWrite>

    /* Send cmd to read rx payload */
    spi_transfer( R_RX_PAYLOAD );
    23d6:	81 e6       	ldi	r24, 0x61	; 97
    23d8:	0e 94 43 12 	call	0x2486	; 0x2486 <spi_transfer>
    
    /* Read payload */
    nrf24_transferSync(data,data,payload_len);
    23dc:	40 91 6b 01 	lds	r20, 0x016B
    23e0:	89 81       	ldd	r24, Y+1	; 0x01
    23e2:	9a 81       	ldd	r25, Y+2	; 0x02
    23e4:	29 81       	ldd	r18, Y+1	; 0x01
    23e6:	3a 81       	ldd	r19, Y+2	; 0x02
    23e8:	b9 01       	movw	r22, r18
    23ea:	0e 94 8b 12 	call	0x2516	; 0x2516 <nrf24_transferSync>
    
    /* Pull up chip select */
    nrf24_csn_digitalWrite(HIGH);
    23ee:	81 e0       	ldi	r24, 0x01	; 1
    23f0:	0e 94 b7 13 	call	0x276e	; 0x276e <nrf24_csn_digitalWrite>

    /* Reset status register */
    nrf24_configRegister(STATUS,(1<<RX_DR));   
    23f4:	87 e0       	ldi	r24, 0x07	; 7
    23f6:	60 e4       	ldi	r22, 0x40	; 64
    23f8:	0e 94 e6 12 	call	0x25cc	; 0x25cc <nrf24_configRegister>
}
    23fc:	0f 90       	pop	r0
    23fe:	0f 90       	pop	r0
    2400:	cf 91       	pop	r28
    2402:	df 91       	pop	r29
    2404:	08 95       	ret

00002406 <nrf24_getStatus>:
    return 1; /* true */

}

uint8_t nrf24_getStatus()
{
    2406:	df 93       	push	r29
    2408:	cf 93       	push	r28
    240a:	0f 92       	push	r0
    240c:	cd b7       	in	r28, 0x3d	; 61
    240e:	de b7       	in	r29, 0x3e	; 62
    uint8_t rv;
    nrf24_csn_digitalWrite(LOW);
    2410:	80 e0       	ldi	r24, 0x00	; 0
    2412:	0e 94 b7 13 	call	0x276e	; 0x276e <nrf24_csn_digitalWrite>
    rv = spi_transfer(NOP);
    2416:	8f ef       	ldi	r24, 0xFF	; 255
    2418:	0e 94 43 12 	call	0x2486	; 0x2486 <spi_transfer>
    241c:	89 83       	std	Y+1, r24	; 0x01
    nrf24_csn_digitalWrite(HIGH);
    241e:	81 e0       	ldi	r24, 0x01	; 1
    2420:	0e 94 b7 13 	call	0x276e	; 0x276e <nrf24_csn_digitalWrite>
    return rv;
    2424:	89 81       	ldd	r24, Y+1	; 0x01
}
    2426:	0f 90       	pop	r0
    2428:	cf 91       	pop	r28
    242a:	df 91       	pop	r29
    242c:	08 95       	ret

0000242e <nrf24_powerUpRx>:
        return 0xFF;
    }
}

void nrf24_powerUpRx()
{     
    242e:	df 93       	push	r29
    2430:	cf 93       	push	r28
    2432:	cd b7       	in	r28, 0x3d	; 61
    2434:	de b7       	in	r29, 0x3e	; 62
    nrf24_csn_digitalWrite(LOW);
    2436:	80 e0       	ldi	r24, 0x00	; 0
    2438:	0e 94 b7 13 	call	0x276e	; 0x276e <nrf24_csn_digitalWrite>
    spi_transfer(FLUSH_RX);
    243c:	82 ee       	ldi	r24, 0xE2	; 226
    243e:	0e 94 43 12 	call	0x2486	; 0x2486 <spi_transfer>
    nrf24_csn_digitalWrite(HIGH);
    2442:	81 e0       	ldi	r24, 0x01	; 1
    2444:	0e 94 b7 13 	call	0x276e	; 0x276e <nrf24_csn_digitalWrite>

    nrf24_configRegister(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT)); 
    2448:	87 e0       	ldi	r24, 0x07	; 7
    244a:	60 e7       	ldi	r22, 0x70	; 112
    244c:	0e 94 e6 12 	call	0x25cc	; 0x25cc <nrf24_configRegister>

    nrf24_ce_digitalWrite(LOW);    
    2450:	80 e0       	ldi	r24, 0x00	; 0
    2452:	0e 94 97 13 	call	0x272e	; 0x272e <nrf24_ce_digitalWrite>
    nrf24_configRegister(CONFIG,nrf24_CONFIG|((1<<PWR_UP)|(1<<PRIM_RX)));    
    2456:	80 e0       	ldi	r24, 0x00	; 0
    2458:	6b e0       	ldi	r22, 0x0B	; 11
    245a:	0e 94 e6 12 	call	0x25cc	; 0x25cc <nrf24_configRegister>
    nrf24_ce_digitalWrite(HIGH);
    245e:	81 e0       	ldi	r24, 0x01	; 1
    2460:	0e 94 97 13 	call	0x272e	; 0x272e <nrf24_ce_digitalWrite>
}
    2464:	cf 91       	pop	r28
    2466:	df 91       	pop	r29
    2468:	08 95       	ret

0000246a <nrf24_powerDown>:

    nrf24_configRegister(CONFIG,nrf24_CONFIG|((1<<PWR_UP)|(0<<PRIM_RX)));
}

void nrf24_powerDown()
{
    246a:	df 93       	push	r29
    246c:	cf 93       	push	r28
    246e:	cd b7       	in	r28, 0x3d	; 61
    2470:	de b7       	in	r29, 0x3e	; 62
    nrf24_ce_digitalWrite(LOW);
    2472:	80 e0       	ldi	r24, 0x00	; 0
    2474:	0e 94 97 13 	call	0x272e	; 0x272e <nrf24_ce_digitalWrite>
    nrf24_configRegister(CONFIG,nrf24_CONFIG);
    2478:	80 e0       	ldi	r24, 0x00	; 0
    247a:	68 e0       	ldi	r22, 0x08	; 8
    247c:	0e 94 e6 12 	call	0x25cc	; 0x25cc <nrf24_configRegister>
}
    2480:	cf 91       	pop	r28
    2482:	df 91       	pop	r29
    2484:	08 95       	ret

00002486 <spi_transfer>:

uint8_t spi_transfer(uint8_t tx)
{
    2486:	df 93       	push	r29
    2488:	cf 93       	push	r28
    248a:	00 d0       	rcall	.+0      	; 0x248c <spi_transfer+0x6>
    248c:	0f 92       	push	r0
    248e:	cd b7       	in	r28, 0x3d	; 61
    2490:	de b7       	in	r29, 0x3e	; 62
    2492:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t i = 0;
    2494:	19 82       	std	Y+1, r1	; 0x01
    uint8_t rx = 0;
    2496:	1a 82       	std	Y+2, r1	; 0x02

    nrf24_sck_digitalWrite(LOW);
    2498:	80 e0       	ldi	r24, 0x00	; 0
    249a:	0e 94 d7 13 	call	0x27ae	; 0x27ae <nrf24_sck_digitalWrite>

    for(i=0;i<8;i++)
    249e:	19 82       	std	Y+1, r1	; 0x01
    24a0:	30 c0       	rjmp	.+96     	; 0x2502 <spi_transfer+0x7c>
    {

	    if(tx & (1<<(7-i)))
    24a2:	8b 81       	ldd	r24, Y+3	; 0x03
    24a4:	88 2f       	mov	r24, r24
    24a6:	90 e0       	ldi	r25, 0x00	; 0
    24a8:	29 81       	ldd	r18, Y+1	; 0x01
    24aa:	22 2f       	mov	r18, r18
    24ac:	30 e0       	ldi	r19, 0x00	; 0
    24ae:	47 e0       	ldi	r20, 0x07	; 7
    24b0:	50 e0       	ldi	r21, 0x00	; 0
    24b2:	ba 01       	movw	r22, r20
    24b4:	62 1b       	sub	r22, r18
    24b6:	73 0b       	sbc	r23, r19
    24b8:	9b 01       	movw	r18, r22
    24ba:	02 2e       	mov	r0, r18
    24bc:	02 c0       	rjmp	.+4      	; 0x24c2 <spi_transfer+0x3c>
    24be:	95 95       	asr	r25
    24c0:	87 95       	ror	r24
    24c2:	0a 94       	dec	r0
    24c4:	e2 f7       	brpl	.-8      	; 0x24be <spi_transfer+0x38>
    24c6:	81 70       	andi	r24, 0x01	; 1
    24c8:	90 70       	andi	r25, 0x00	; 0
    24ca:	88 23       	and	r24, r24
    24cc:	21 f0       	breq	.+8      	; 0x24d6 <spi_transfer+0x50>
	    {
		    nrf24_mosi_digitalWrite(HIGH);
    24ce:	81 e0       	ldi	r24, 0x01	; 1
    24d0:	0e 94 f7 13 	call	0x27ee	; 0x27ee <nrf24_mosi_digitalWrite>
    24d4:	03 c0       	rjmp	.+6      	; 0x24dc <spi_transfer+0x56>
	    }
	    else
	    {
		    nrf24_mosi_digitalWrite(LOW);
    24d6:	80 e0       	ldi	r24, 0x00	; 0
    24d8:	0e 94 f7 13 	call	0x27ee	; 0x27ee <nrf24_mosi_digitalWrite>
	    }

	    nrf24_sck_digitalWrite(HIGH);
    24dc:	81 e0       	ldi	r24, 0x01	; 1
    24de:	0e 94 d7 13 	call	0x27ae	; 0x27ae <nrf24_sck_digitalWrite>

	    rx = rx << 1;
    24e2:	8a 81       	ldd	r24, Y+2	; 0x02
    24e4:	88 0f       	add	r24, r24
    24e6:	8a 83       	std	Y+2, r24	; 0x02
	    if(nrf24_miso_digitalRead())
    24e8:	0e 94 17 14 	call	0x282e	; 0x282e <nrf24_miso_digitalRead>
    24ec:	88 23       	and	r24, r24
    24ee:	19 f0       	breq	.+6      	; 0x24f6 <spi_transfer+0x70>
	    {
		    rx |= 0x01;
    24f0:	8a 81       	ldd	r24, Y+2	; 0x02
    24f2:	81 60       	ori	r24, 0x01	; 1
    24f4:	8a 83       	std	Y+2, r24	; 0x02
	    }

	    nrf24_sck_digitalWrite(LOW);
    24f6:	80 e0       	ldi	r24, 0x00	; 0
    24f8:	0e 94 d7 13 	call	0x27ae	; 0x27ae <nrf24_sck_digitalWrite>
    uint8_t i = 0;
    uint8_t rx = 0;

    nrf24_sck_digitalWrite(LOW);

    for(i=0;i<8;i++)
    24fc:	89 81       	ldd	r24, Y+1	; 0x01
    24fe:	8f 5f       	subi	r24, 0xFF	; 255
    2500:	89 83       	std	Y+1, r24	; 0x01
    2502:	89 81       	ldd	r24, Y+1	; 0x01
    2504:	88 30       	cpi	r24, 0x08	; 8
    2506:	68 f2       	brcs	.-102    	; 0x24a2 <spi_transfer+0x1c>

	    nrf24_sck_digitalWrite(LOW);

    }

    return rx;
    2508:	8a 81       	ldd	r24, Y+2	; 0x02
}
    250a:	0f 90       	pop	r0
    250c:	0f 90       	pop	r0
    250e:	0f 90       	pop	r0
    2510:	cf 91       	pop	r28
    2512:	df 91       	pop	r29
    2514:	08 95       	ret

00002516 <nrf24_transferSync>:

/* send and receive multiple bytes over SPI */
void nrf24_transferSync(uint8_t* dataout,uint8_t* datain,uint8_t len)
{
    2516:	0f 93       	push	r16
    2518:	1f 93       	push	r17
    251a:	df 93       	push	r29
    251c:	cf 93       	push	r28
    251e:	00 d0       	rcall	.+0      	; 0x2520 <nrf24_transferSync+0xa>
    2520:	00 d0       	rcall	.+0      	; 0x2522 <nrf24_transferSync+0xc>
    2522:	00 d0       	rcall	.+0      	; 0x2524 <nrf24_transferSync+0xe>
    2524:	cd b7       	in	r28, 0x3d	; 61
    2526:	de b7       	in	r29, 0x3e	; 62
    2528:	9b 83       	std	Y+3, r25	; 0x03
    252a:	8a 83       	std	Y+2, r24	; 0x02
    252c:	7d 83       	std	Y+5, r23	; 0x05
    252e:	6c 83       	std	Y+4, r22	; 0x04
    2530:	4e 83       	std	Y+6, r20	; 0x06
    uint8_t i;

    for(i=0;i<len;i++)
    2532:	19 82       	std	Y+1, r1	; 0x01
    2534:	18 c0       	rjmp	.+48     	; 0x2566 <nrf24_transferSync+0x50>
    {
        datain[i] = spi_transfer(dataout[i]);
    2536:	89 81       	ldd	r24, Y+1	; 0x01
    2538:	88 2f       	mov	r24, r24
    253a:	90 e0       	ldi	r25, 0x00	; 0
    253c:	2c 81       	ldd	r18, Y+4	; 0x04
    253e:	3d 81       	ldd	r19, Y+5	; 0x05
    2540:	89 01       	movw	r16, r18
    2542:	08 0f       	add	r16, r24
    2544:	19 1f       	adc	r17, r25
    2546:	89 81       	ldd	r24, Y+1	; 0x01
    2548:	88 2f       	mov	r24, r24
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	2a 81       	ldd	r18, Y+2	; 0x02
    254e:	3b 81       	ldd	r19, Y+3	; 0x03
    2550:	82 0f       	add	r24, r18
    2552:	93 1f       	adc	r25, r19
    2554:	fc 01       	movw	r30, r24
    2556:	80 81       	ld	r24, Z
    2558:	0e 94 43 12 	call	0x2486	; 0x2486 <spi_transfer>
    255c:	f8 01       	movw	r30, r16
    255e:	80 83       	st	Z, r24
/* send and receive multiple bytes over SPI */
void nrf24_transferSync(uint8_t* dataout,uint8_t* datain,uint8_t len)
{
    uint8_t i;

    for(i=0;i<len;i++)
    2560:	89 81       	ldd	r24, Y+1	; 0x01
    2562:	8f 5f       	subi	r24, 0xFF	; 255
    2564:	89 83       	std	Y+1, r24	; 0x01
    2566:	99 81       	ldd	r25, Y+1	; 0x01
    2568:	8e 81       	ldd	r24, Y+6	; 0x06
    256a:	98 17       	cp	r25, r24
    256c:	20 f3       	brcs	.-56     	; 0x2536 <nrf24_transferSync+0x20>
    {
        datain[i] = spi_transfer(dataout[i]);
    }

}
    256e:	26 96       	adiw	r28, 0x06	; 6
    2570:	0f b6       	in	r0, 0x3f	; 63
    2572:	f8 94       	cli
    2574:	de bf       	out	0x3e, r29	; 62
    2576:	0f be       	out	0x3f, r0	; 63
    2578:	cd bf       	out	0x3d, r28	; 61
    257a:	cf 91       	pop	r28
    257c:	df 91       	pop	r29
    257e:	1f 91       	pop	r17
    2580:	0f 91       	pop	r16
    2582:	08 95       	ret

00002584 <nrf24_transmitSync>:

/* send multiple bytes over SPI */
void nrf24_transmitSync(uint8_t* dataout,uint8_t len)
{
    2584:	df 93       	push	r29
    2586:	cf 93       	push	r28
    2588:	00 d0       	rcall	.+0      	; 0x258a <nrf24_transmitSync+0x6>
    258a:	00 d0       	rcall	.+0      	; 0x258c <nrf24_transmitSync+0x8>
    258c:	cd b7       	in	r28, 0x3d	; 61
    258e:	de b7       	in	r29, 0x3e	; 62
    2590:	9b 83       	std	Y+3, r25	; 0x03
    2592:	8a 83       	std	Y+2, r24	; 0x02
    2594:	6c 83       	std	Y+4, r22	; 0x04
    uint8_t i;
    
    for(i=0;i<len;i++)
    2596:	19 82       	std	Y+1, r1	; 0x01
    2598:	0e c0       	rjmp	.+28     	; 0x25b6 <nrf24_transmitSync+0x32>
    {
        spi_transfer(dataout[i]);
    259a:	89 81       	ldd	r24, Y+1	; 0x01
    259c:	88 2f       	mov	r24, r24
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	2a 81       	ldd	r18, Y+2	; 0x02
    25a2:	3b 81       	ldd	r19, Y+3	; 0x03
    25a4:	82 0f       	add	r24, r18
    25a6:	93 1f       	adc	r25, r19
    25a8:	fc 01       	movw	r30, r24
    25aa:	80 81       	ld	r24, Z
    25ac:	0e 94 43 12 	call	0x2486	; 0x2486 <spi_transfer>
/* send multiple bytes over SPI */
void nrf24_transmitSync(uint8_t* dataout,uint8_t len)
{
    uint8_t i;
    
    for(i=0;i<len;i++)
    25b0:	89 81       	ldd	r24, Y+1	; 0x01
    25b2:	8f 5f       	subi	r24, 0xFF	; 255
    25b4:	89 83       	std	Y+1, r24	; 0x01
    25b6:	99 81       	ldd	r25, Y+1	; 0x01
    25b8:	8c 81       	ldd	r24, Y+4	; 0x04
    25ba:	98 17       	cp	r25, r24
    25bc:	70 f3       	brcs	.-36     	; 0x259a <nrf24_transmitSync+0x16>
    {
        spi_transfer(dataout[i]);
    }

}
    25be:	0f 90       	pop	r0
    25c0:	0f 90       	pop	r0
    25c2:	0f 90       	pop	r0
    25c4:	0f 90       	pop	r0
    25c6:	cf 91       	pop	r28
    25c8:	df 91       	pop	r29
    25ca:	08 95       	ret

000025cc <nrf24_configRegister>:

/* Clocks only one byte into the given nrf24 register */
void nrf24_configRegister(uint8_t reg, uint8_t value)
{
    25cc:	df 93       	push	r29
    25ce:	cf 93       	push	r28
    25d0:	00 d0       	rcall	.+0      	; 0x25d2 <nrf24_configRegister+0x6>
    25d2:	cd b7       	in	r28, 0x3d	; 61
    25d4:	de b7       	in	r29, 0x3e	; 62
    25d6:	89 83       	std	Y+1, r24	; 0x01
    25d8:	6a 83       	std	Y+2, r22	; 0x02
    nrf24_csn_digitalWrite(LOW);
    25da:	80 e0       	ldi	r24, 0x00	; 0
    25dc:	0e 94 b7 13 	call	0x276e	; 0x276e <nrf24_csn_digitalWrite>
    spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
    25e0:	89 81       	ldd	r24, Y+1	; 0x01
    25e2:	8f 71       	andi	r24, 0x1F	; 31
    25e4:	80 62       	ori	r24, 0x20	; 32
    25e6:	0e 94 43 12 	call	0x2486	; 0x2486 <spi_transfer>
    spi_transfer(value);
    25ea:	8a 81       	ldd	r24, Y+2	; 0x02
    25ec:	0e 94 43 12 	call	0x2486	; 0x2486 <spi_transfer>
    nrf24_csn_digitalWrite(HIGH);
    25f0:	81 e0       	ldi	r24, 0x01	; 1
    25f2:	0e 94 b7 13 	call	0x276e	; 0x276e <nrf24_csn_digitalWrite>
}
    25f6:	0f 90       	pop	r0
    25f8:	0f 90       	pop	r0
    25fa:	cf 91       	pop	r28
    25fc:	df 91       	pop	r29
    25fe:	08 95       	ret

00002600 <nrf24_readRegister>:

/* Read single register from nrf24 */
void nrf24_readRegister(uint8_t reg, uint8_t* value, uint8_t len)
{
    2600:	df 93       	push	r29
    2602:	cf 93       	push	r28
    2604:	00 d0       	rcall	.+0      	; 0x2606 <nrf24_readRegister+0x6>
    2606:	00 d0       	rcall	.+0      	; 0x2608 <nrf24_readRegister+0x8>
    2608:	cd b7       	in	r28, 0x3d	; 61
    260a:	de b7       	in	r29, 0x3e	; 62
    260c:	89 83       	std	Y+1, r24	; 0x01
    260e:	7b 83       	std	Y+3, r23	; 0x03
    2610:	6a 83       	std	Y+2, r22	; 0x02
    2612:	4c 83       	std	Y+4, r20	; 0x04
    nrf24_csn_digitalWrite(LOW);
    2614:	80 e0       	ldi	r24, 0x00	; 0
    2616:	0e 94 b7 13 	call	0x276e	; 0x276e <nrf24_csn_digitalWrite>
    spi_transfer(R_REGISTER | (REGISTER_MASK & reg));
    261a:	89 81       	ldd	r24, Y+1	; 0x01
    261c:	8f 71       	andi	r24, 0x1F	; 31
    261e:	0e 94 43 12 	call	0x2486	; 0x2486 <spi_transfer>
    nrf24_transferSync(value,value,len);
    2622:	8a 81       	ldd	r24, Y+2	; 0x02
    2624:	9b 81       	ldd	r25, Y+3	; 0x03
    2626:	2a 81       	ldd	r18, Y+2	; 0x02
    2628:	3b 81       	ldd	r19, Y+3	; 0x03
    262a:	b9 01       	movw	r22, r18
    262c:	4c 81       	ldd	r20, Y+4	; 0x04
    262e:	0e 94 8b 12 	call	0x2516	; 0x2516 <nrf24_transferSync>
    nrf24_csn_digitalWrite(HIGH);
    2632:	81 e0       	ldi	r24, 0x01	; 1
    2634:	0e 94 b7 13 	call	0x276e	; 0x276e <nrf24_csn_digitalWrite>
}
    2638:	0f 90       	pop	r0
    263a:	0f 90       	pop	r0
    263c:	0f 90       	pop	r0
    263e:	0f 90       	pop	r0
    2640:	cf 91       	pop	r28
    2642:	df 91       	pop	r29
    2644:	08 95       	ret

00002646 <nrf24_writeRegister>:

/* Write to a single register of nrf24 */
void nrf24_writeRegister(uint8_t reg, uint8_t* value, uint8_t len) 
{
    2646:	df 93       	push	r29
    2648:	cf 93       	push	r28
    264a:	00 d0       	rcall	.+0      	; 0x264c <nrf24_writeRegister+0x6>
    264c:	00 d0       	rcall	.+0      	; 0x264e <nrf24_writeRegister+0x8>
    264e:	cd b7       	in	r28, 0x3d	; 61
    2650:	de b7       	in	r29, 0x3e	; 62
    2652:	89 83       	std	Y+1, r24	; 0x01
    2654:	7b 83       	std	Y+3, r23	; 0x03
    2656:	6a 83       	std	Y+2, r22	; 0x02
    2658:	4c 83       	std	Y+4, r20	; 0x04
    nrf24_csn_digitalWrite(LOW);
    265a:	80 e0       	ldi	r24, 0x00	; 0
    265c:	0e 94 b7 13 	call	0x276e	; 0x276e <nrf24_csn_digitalWrite>
    spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
    2660:	89 81       	ldd	r24, Y+1	; 0x01
    2662:	8f 71       	andi	r24, 0x1F	; 31
    2664:	80 62       	ori	r24, 0x20	; 32
    2666:	0e 94 43 12 	call	0x2486	; 0x2486 <spi_transfer>
    nrf24_transmitSync(value,len);
    266a:	8a 81       	ldd	r24, Y+2	; 0x02
    266c:	9b 81       	ldd	r25, Y+3	; 0x03
    266e:	6c 81       	ldd	r22, Y+4	; 0x04
    2670:	0e 94 c2 12 	call	0x2584	; 0x2584 <nrf24_transmitSync>
    nrf24_csn_digitalWrite(HIGH);
    2674:	81 e0       	ldi	r24, 0x01	; 1
    2676:	0e 94 b7 13 	call	0x276e	; 0x276e <nrf24_csn_digitalWrite>
}
    267a:	0f 90       	pop	r0
    267c:	0f 90       	pop	r0
    267e:	0f 90       	pop	r0
    2680:	0f 90       	pop	r0
    2682:	cf 91       	pop	r28
    2684:	df 91       	pop	r29
    2686:	08 95       	ret

00002688 <nrf24_checkRegister>:

/* Check single register from nrf24 */
bool nrf24_checkRegister(uint8_t reg, uint8_t desiredValue, uint8_t len)
{
    2688:	df 93       	push	r29
    268a:	cf 93       	push	r28
    268c:	00 d0       	rcall	.+0      	; 0x268e <nrf24_checkRegister+0x6>
    268e:	00 d0       	rcall	.+0      	; 0x2690 <nrf24_checkRegister+0x8>
    2690:	cd b7       	in	r28, 0x3d	; 61
    2692:	de b7       	in	r29, 0x3e	; 62
    2694:	8a 83       	std	Y+2, r24	; 0x02
    2696:	6b 83       	std	Y+3, r22	; 0x03
    2698:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t registerValue;
	nrf24_readRegister(reg,&registerValue,len);
    269a:	8a 81       	ldd	r24, Y+2	; 0x02
    269c:	9e 01       	movw	r18, r28
    269e:	2f 5f       	subi	r18, 0xFF	; 255
    26a0:	3f 4f       	sbci	r19, 0xFF	; 255
    26a2:	b9 01       	movw	r22, r18
    26a4:	4c 81       	ldd	r20, Y+4	; 0x04
    26a6:	0e 94 00 13 	call	0x2600	; 0x2600 <nrf24_readRegister>
	if (registerValue==desiredValue) { return true; } else { return false; }
    26aa:	99 81       	ldd	r25, Y+1	; 0x01
    26ac:	8b 81       	ldd	r24, Y+3	; 0x03
    26ae:	98 17       	cp	r25, r24
    26b0:	11 f4       	brne	.+4      	; 0x26b6 <nrf24_checkRegister+0x2e>
    26b2:	81 e0       	ldi	r24, 0x01	; 1
    26b4:	01 c0       	rjmp	.+2      	; 0x26b8 <nrf24_checkRegister+0x30>
    26b6:	80 e0       	ldi	r24, 0x00	; 0
}
    26b8:	0f 90       	pop	r0
    26ba:	0f 90       	pop	r0
    26bc:	0f 90       	pop	r0
    26be:	0f 90       	pop	r0
    26c0:	cf 91       	pop	r28
    26c2:	df 91       	pop	r29
    26c4:	08 95       	ret

000026c6 <nrf24_setupPins>:
#define check_bit(reg,bit) (reg&(1<<bit))

/* ------------------------------------------------------------------------- */

void nrf24_setupPins()
{
    26c6:	df 93       	push	r29
    26c8:	cf 93       	push	r28
    26ca:	cd b7       	in	r28, 0x3d	; 61
    26cc:	de b7       	in	r29, 0x3e	; 62
	set_bit(RF_DDR,0); // CE output
    26ce:	87 e2       	ldi	r24, 0x27	; 39
    26d0:	90 e0       	ldi	r25, 0x00	; 0
    26d2:	27 e2       	ldi	r18, 0x27	; 39
    26d4:	30 e0       	ldi	r19, 0x00	; 0
    26d6:	f9 01       	movw	r30, r18
    26d8:	20 81       	ld	r18, Z
    26da:	21 60       	ori	r18, 0x01	; 1
    26dc:	fc 01       	movw	r30, r24
    26de:	20 83       	st	Z, r18
	set_bit(RF_DDR,1); // CSN output
    26e0:	87 e2       	ldi	r24, 0x27	; 39
    26e2:	90 e0       	ldi	r25, 0x00	; 0
    26e4:	27 e2       	ldi	r18, 0x27	; 39
    26e6:	30 e0       	ldi	r19, 0x00	; 0
    26e8:	f9 01       	movw	r30, r18
    26ea:	20 81       	ld	r18, Z
    26ec:	22 60       	ori	r18, 0x02	; 2
    26ee:	fc 01       	movw	r30, r24
    26f0:	20 83       	st	Z, r18
	set_bit(RF_DDR,2); // SCK output
    26f2:	87 e2       	ldi	r24, 0x27	; 39
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	27 e2       	ldi	r18, 0x27	; 39
    26f8:	30 e0       	ldi	r19, 0x00	; 0
    26fa:	f9 01       	movw	r30, r18
    26fc:	20 81       	ld	r18, Z
    26fe:	24 60       	ori	r18, 0x04	; 4
    2700:	fc 01       	movw	r30, r24
    2702:	20 83       	st	Z, r18
	set_bit(RF_DDR,3); // MOSI output
    2704:	87 e2       	ldi	r24, 0x27	; 39
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	27 e2       	ldi	r18, 0x27	; 39
    270a:	30 e0       	ldi	r19, 0x00	; 0
    270c:	f9 01       	movw	r30, r18
    270e:	20 81       	ld	r18, Z
    2710:	28 60       	ori	r18, 0x08	; 8
    2712:	fc 01       	movw	r30, r24
    2714:	20 83       	st	Z, r18
	clr_bit(RF_DDR,4); // MISO input
    2716:	87 e2       	ldi	r24, 0x27	; 39
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	27 e2       	ldi	r18, 0x27	; 39
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	f9 01       	movw	r30, r18
    2720:	20 81       	ld	r18, Z
    2722:	2f 7e       	andi	r18, 0xEF	; 239
    2724:	fc 01       	movw	r30, r24
    2726:	20 83       	st	Z, r18
}
    2728:	cf 91       	pop	r28
    272a:	df 91       	pop	r29
    272c:	08 95       	ret

0000272e <nrf24_ce_digitalWrite>:
/* ------------------------------------------------------------------------- */
void nrf24_ce_digitalWrite(uint8_t state)
{
    272e:	df 93       	push	r29
    2730:	cf 93       	push	r28
    2732:	0f 92       	push	r0
    2734:	cd b7       	in	r28, 0x3d	; 61
    2736:	de b7       	in	r29, 0x3e	; 62
    2738:	89 83       	std	Y+1, r24	; 0x01
	if(state)
    273a:	89 81       	ldd	r24, Y+1	; 0x01
    273c:	88 23       	and	r24, r24
    273e:	51 f0       	breq	.+20     	; 0x2754 <nrf24_ce_digitalWrite+0x26>
	{
		set_bit(RF_PORT,0);
    2740:	88 e2       	ldi	r24, 0x28	; 40
    2742:	90 e0       	ldi	r25, 0x00	; 0
    2744:	28 e2       	ldi	r18, 0x28	; 40
    2746:	30 e0       	ldi	r19, 0x00	; 0
    2748:	f9 01       	movw	r30, r18
    274a:	20 81       	ld	r18, Z
    274c:	21 60       	ori	r18, 0x01	; 1
    274e:	fc 01       	movw	r30, r24
    2750:	20 83       	st	Z, r18
    2752:	09 c0       	rjmp	.+18     	; 0x2766 <nrf24_ce_digitalWrite+0x38>
	}
	else
	{
		clr_bit(RF_PORT,0);
    2754:	88 e2       	ldi	r24, 0x28	; 40
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	28 e2       	ldi	r18, 0x28	; 40
    275a:	30 e0       	ldi	r19, 0x00	; 0
    275c:	f9 01       	movw	r30, r18
    275e:	20 81       	ld	r18, Z
    2760:	2e 7f       	andi	r18, 0xFE	; 254
    2762:	fc 01       	movw	r30, r24
    2764:	20 83       	st	Z, r18
	}
}
    2766:	0f 90       	pop	r0
    2768:	cf 91       	pop	r28
    276a:	df 91       	pop	r29
    276c:	08 95       	ret

0000276e <nrf24_csn_digitalWrite>:
/* ------------------------------------------------------------------------- */
void nrf24_csn_digitalWrite(uint8_t state)
{
    276e:	df 93       	push	r29
    2770:	cf 93       	push	r28
    2772:	0f 92       	push	r0
    2774:	cd b7       	in	r28, 0x3d	; 61
    2776:	de b7       	in	r29, 0x3e	; 62
    2778:	89 83       	std	Y+1, r24	; 0x01
	if(state)
    277a:	89 81       	ldd	r24, Y+1	; 0x01
    277c:	88 23       	and	r24, r24
    277e:	51 f0       	breq	.+20     	; 0x2794 <nrf24_csn_digitalWrite+0x26>
	{
		set_bit(RF_PORT,1);
    2780:	88 e2       	ldi	r24, 0x28	; 40
    2782:	90 e0       	ldi	r25, 0x00	; 0
    2784:	28 e2       	ldi	r18, 0x28	; 40
    2786:	30 e0       	ldi	r19, 0x00	; 0
    2788:	f9 01       	movw	r30, r18
    278a:	20 81       	ld	r18, Z
    278c:	22 60       	ori	r18, 0x02	; 2
    278e:	fc 01       	movw	r30, r24
    2790:	20 83       	st	Z, r18
    2792:	09 c0       	rjmp	.+18     	; 0x27a6 <nrf24_csn_digitalWrite+0x38>
	}
	else
	{
		clr_bit(RF_PORT,1);
    2794:	88 e2       	ldi	r24, 0x28	; 40
    2796:	90 e0       	ldi	r25, 0x00	; 0
    2798:	28 e2       	ldi	r18, 0x28	; 40
    279a:	30 e0       	ldi	r19, 0x00	; 0
    279c:	f9 01       	movw	r30, r18
    279e:	20 81       	ld	r18, Z
    27a0:	2d 7f       	andi	r18, 0xFD	; 253
    27a2:	fc 01       	movw	r30, r24
    27a4:	20 83       	st	Z, r18
	}
}
    27a6:	0f 90       	pop	r0
    27a8:	cf 91       	pop	r28
    27aa:	df 91       	pop	r29
    27ac:	08 95       	ret

000027ae <nrf24_sck_digitalWrite>:
/* ------------------------------------------------------------------------- */
void nrf24_sck_digitalWrite(uint8_t state)
{
    27ae:	df 93       	push	r29
    27b0:	cf 93       	push	r28
    27b2:	0f 92       	push	r0
    27b4:	cd b7       	in	r28, 0x3d	; 61
    27b6:	de b7       	in	r29, 0x3e	; 62
    27b8:	89 83       	std	Y+1, r24	; 0x01
	if(state)
    27ba:	89 81       	ldd	r24, Y+1	; 0x01
    27bc:	88 23       	and	r24, r24
    27be:	51 f0       	breq	.+20     	; 0x27d4 <nrf24_sck_digitalWrite+0x26>
	{
		set_bit(RF_PORT,2);
    27c0:	88 e2       	ldi	r24, 0x28	; 40
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	28 e2       	ldi	r18, 0x28	; 40
    27c6:	30 e0       	ldi	r19, 0x00	; 0
    27c8:	f9 01       	movw	r30, r18
    27ca:	20 81       	ld	r18, Z
    27cc:	24 60       	ori	r18, 0x04	; 4
    27ce:	fc 01       	movw	r30, r24
    27d0:	20 83       	st	Z, r18
    27d2:	09 c0       	rjmp	.+18     	; 0x27e6 <nrf24_sck_digitalWrite+0x38>
	}
	else
	{
		clr_bit(RF_PORT,2);
    27d4:	88 e2       	ldi	r24, 0x28	; 40
    27d6:	90 e0       	ldi	r25, 0x00	; 0
    27d8:	28 e2       	ldi	r18, 0x28	; 40
    27da:	30 e0       	ldi	r19, 0x00	; 0
    27dc:	f9 01       	movw	r30, r18
    27de:	20 81       	ld	r18, Z
    27e0:	2b 7f       	andi	r18, 0xFB	; 251
    27e2:	fc 01       	movw	r30, r24
    27e4:	20 83       	st	Z, r18
	}
}
    27e6:	0f 90       	pop	r0
    27e8:	cf 91       	pop	r28
    27ea:	df 91       	pop	r29
    27ec:	08 95       	ret

000027ee <nrf24_mosi_digitalWrite>:
/* ------------------------------------------------------------------------- */
void nrf24_mosi_digitalWrite(uint8_t state)
{
    27ee:	df 93       	push	r29
    27f0:	cf 93       	push	r28
    27f2:	0f 92       	push	r0
    27f4:	cd b7       	in	r28, 0x3d	; 61
    27f6:	de b7       	in	r29, 0x3e	; 62
    27f8:	89 83       	std	Y+1, r24	; 0x01
	if(state)
    27fa:	89 81       	ldd	r24, Y+1	; 0x01
    27fc:	88 23       	and	r24, r24
    27fe:	51 f0       	breq	.+20     	; 0x2814 <nrf24_mosi_digitalWrite+0x26>
	{
		set_bit(RF_PORT,3);
    2800:	88 e2       	ldi	r24, 0x28	; 40
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	28 e2       	ldi	r18, 0x28	; 40
    2806:	30 e0       	ldi	r19, 0x00	; 0
    2808:	f9 01       	movw	r30, r18
    280a:	20 81       	ld	r18, Z
    280c:	28 60       	ori	r18, 0x08	; 8
    280e:	fc 01       	movw	r30, r24
    2810:	20 83       	st	Z, r18
    2812:	09 c0       	rjmp	.+18     	; 0x2826 <nrf24_mosi_digitalWrite+0x38>
	}
	else
	{
		clr_bit(RF_PORT,3);
    2814:	88 e2       	ldi	r24, 0x28	; 40
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	28 e2       	ldi	r18, 0x28	; 40
    281a:	30 e0       	ldi	r19, 0x00	; 0
    281c:	f9 01       	movw	r30, r18
    281e:	20 81       	ld	r18, Z
    2820:	27 7f       	andi	r18, 0xF7	; 247
    2822:	fc 01       	movw	r30, r24
    2824:	20 83       	st	Z, r18
	}
}
    2826:	0f 90       	pop	r0
    2828:	cf 91       	pop	r28
    282a:	df 91       	pop	r29
    282c:	08 95       	ret

0000282e <nrf24_miso_digitalRead>:
/* ------------------------------------------------------------------------- */
uint8_t nrf24_miso_digitalRead()
{
    282e:	df 93       	push	r29
    2830:	cf 93       	push	r28
    2832:	cd b7       	in	r28, 0x3d	; 61
    2834:	de b7       	in	r29, 0x3e	; 62
	return check_bit(RF_PIN,4);
    2836:	86 e2       	ldi	r24, 0x26	; 38
    2838:	90 e0       	ldi	r25, 0x00	; 0
    283a:	fc 01       	movw	r30, r24
    283c:	80 81       	ld	r24, Z
    283e:	80 71       	andi	r24, 0x10	; 16
}
    2840:	cf 91       	pop	r28
    2842:	df 91       	pop	r29
    2844:	08 95       	ret

00002846 <nrf24_initRF_SAFE>:
/* ------------------------------------------------------------------------- */

void nrf24_initRF_SAFE(uint8_t boardIndex,TransmissionMode initMode){
    2846:	df 93       	push	r29
    2848:	cf 93       	push	r28
    284a:	00 d0       	rcall	.+0      	; 0x284c <nrf24_initRF_SAFE+0x6>
    284c:	0f 92       	push	r0
    284e:	cd b7       	in	r28, 0x3d	; 61
    2850:	de b7       	in	r29, 0x3e	; 62
    2852:	8a 83       	std	Y+2, r24	; 0x02
    2854:	6b 83       	std	Y+3, r22	; 0x03

	initliazeMemory();
    2856:	0e 94 53 00 	call	0xa6	; 0xa6 <initliazeMemory>
	bool successfulRfInit = false;
    285a:	19 82       	std	Y+1, r1	; 0x01
	
	while(successfulRfInit==false){
    285c:	12 c0       	rjmp	.+36     	; 0x2882 <nrf24_initRF_SAFE+0x3c>
		nrf24_powerDown();
    285e:	0e 94 35 12 	call	0x246a	; 0x246a <nrf24_powerDown>
		nrf24_init();
    2862:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <nrf24_init>
		nrf24_config(GENERAL_RF_CHANNEL,32);
    2866:	80 91 50 01 	lds	r24, 0x0150
    286a:	60 e2       	ldi	r22, 0x20	; 32
    286c:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <nrf24_config>
		if (nrf24_checkConfig()) { successfulRfInit = true; } else { faultyRF_Alarm(); }
    2870:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <nrf24_checkConfig>
    2874:	88 23       	and	r24, r24
    2876:	19 f0       	breq	.+6      	; 0x287e <nrf24_initRF_SAFE+0x38>
    2878:	81 e0       	ldi	r24, 0x01	; 1
    287a:	89 83       	std	Y+1, r24	; 0x01
    287c:	02 c0       	rjmp	.+4      	; 0x2882 <nrf24_initRF_SAFE+0x3c>
    287e:	0e 94 4c 10 	call	0x2098	; 0x2098 <faultyRF_Alarm>
void nrf24_initRF_SAFE(uint8_t boardIndex,TransmissionMode initMode){

	initliazeMemory();
	bool successfulRfInit = false;
	
	while(successfulRfInit==false){
    2882:	99 81       	ldd	r25, Y+1	; 0x01
    2884:	81 e0       	ldi	r24, 0x01	; 1
    2886:	89 27       	eor	r24, r25
    2888:	88 23       	and	r24, r24
    288a:	49 f7       	brne	.-46     	; 0x285e <nrf24_initRF_SAFE+0x18>
		nrf24_init();
		nrf24_config(GENERAL_RF_CHANNEL,32);
		if (nrf24_checkConfig()) { successfulRfInit = true; } else { faultyRF_Alarm(); }
	}
	
	if (initMode==TRANSMIT){
    288c:	8b 81       	ldd	r24, Y+3	; 0x03
    288e:	81 30       	cpi	r24, 0x01	; 1
    2890:	99 f4       	brne	.+38     	; 0x28b8 <nrf24_initRF_SAFE+0x72>
		nrf24_tx_address(CURRENT_BOARD_ADDRESS);
    2892:	80 91 4e 01 	lds	r24, 0x014E
    2896:	90 91 4f 01 	lds	r25, 0x014F
    289a:	0e 94 98 11 	call	0x2330	; 0x2330 <nrf24_tx_address>
		nrf24_rx_address(BOARD_ADDRESS[boardIndex]);
    289e:	8a 81       	ldd	r24, Y+2	; 0x02
    28a0:	88 2f       	mov	r24, r24
    28a2:	90 e0       	ldi	r25, 0x00	; 0
    28a4:	88 0f       	add	r24, r24
    28a6:	99 1f       	adc	r25, r25
    28a8:	88 5b       	subi	r24, 0xB8	; 184
    28aa:	9e 4f       	sbci	r25, 0xFE	; 254
    28ac:	fc 01       	movw	r30, r24
    28ae:	80 81       	ld	r24, Z
    28b0:	91 81       	ldd	r25, Z+1	; 0x01
    28b2:	0e 94 7f 11 	call	0x22fe	; 0x22fe <nrf24_rx_address>
    28b6:	12 c0       	rjmp	.+36     	; 0x28dc <nrf24_initRF_SAFE+0x96>
	}else{
		nrf24_tx_address(BOARD_ADDRESS[boardIndex]);
    28b8:	8a 81       	ldd	r24, Y+2	; 0x02
    28ba:	88 2f       	mov	r24, r24
    28bc:	90 e0       	ldi	r25, 0x00	; 0
    28be:	88 0f       	add	r24, r24
    28c0:	99 1f       	adc	r25, r25
    28c2:	88 5b       	subi	r24, 0xB8	; 184
    28c4:	9e 4f       	sbci	r25, 0xFE	; 254
    28c6:	fc 01       	movw	r30, r24
    28c8:	80 81       	ld	r24, Z
    28ca:	91 81       	ldd	r25, Z+1	; 0x01
    28cc:	0e 94 98 11 	call	0x2330	; 0x2330 <nrf24_tx_address>
		nrf24_rx_address(CURRENT_BOARD_ADDRESS);
    28d0:	80 91 4e 01 	lds	r24, 0x014E
    28d4:	90 91 4f 01 	lds	r25, 0x014F
    28d8:	0e 94 7f 11 	call	0x22fe	; 0x22fe <nrf24_rx_address>
	}
	nrf24_powerUpRx();
    28dc:	0e 94 17 12 	call	0x242e	; 0x242e <nrf24_powerUpRx>
    28e0:	0f 90       	pop	r0
    28e2:	0f 90       	pop	r0
    28e4:	0f 90       	pop	r0
    28e6:	cf 91       	pop	r28
    28e8:	df 91       	pop	r29
    28ea:	08 95       	ret

000028ec <__cmpsf2>:
    28ec:	2f d0       	rcall	.+94     	; 0x294c <__fp_cmp>
    28ee:	08 f4       	brcc	.+2      	; 0x28f2 <__cmpsf2+0x6>
    28f0:	81 e0       	ldi	r24, 0x01	; 1
    28f2:	08 95       	ret

000028f4 <__fixunssfsi>:
    28f4:	57 d0       	rcall	.+174    	; 0x29a4 <__fp_splitA>
    28f6:	88 f0       	brcs	.+34     	; 0x291a <__fixunssfsi+0x26>
    28f8:	9f 57       	subi	r25, 0x7F	; 127
    28fa:	90 f0       	brcs	.+36     	; 0x2920 <__fixunssfsi+0x2c>
    28fc:	b9 2f       	mov	r27, r25
    28fe:	99 27       	eor	r25, r25
    2900:	b7 51       	subi	r27, 0x17	; 23
    2902:	a0 f0       	brcs	.+40     	; 0x292c <__fixunssfsi+0x38>
    2904:	d1 f0       	breq	.+52     	; 0x293a <__fixunssfsi+0x46>
    2906:	66 0f       	add	r22, r22
    2908:	77 1f       	adc	r23, r23
    290a:	88 1f       	adc	r24, r24
    290c:	99 1f       	adc	r25, r25
    290e:	1a f0       	brmi	.+6      	; 0x2916 <__fixunssfsi+0x22>
    2910:	ba 95       	dec	r27
    2912:	c9 f7       	brne	.-14     	; 0x2906 <__fixunssfsi+0x12>
    2914:	12 c0       	rjmp	.+36     	; 0x293a <__fixunssfsi+0x46>
    2916:	b1 30       	cpi	r27, 0x01	; 1
    2918:	81 f0       	breq	.+32     	; 0x293a <__fixunssfsi+0x46>
    291a:	5e d0       	rcall	.+188    	; 0x29d8 <__fp_zero>
    291c:	b1 e0       	ldi	r27, 0x01	; 1
    291e:	08 95       	ret
    2920:	5b c0       	rjmp	.+182    	; 0x29d8 <__fp_zero>
    2922:	67 2f       	mov	r22, r23
    2924:	78 2f       	mov	r23, r24
    2926:	88 27       	eor	r24, r24
    2928:	b8 5f       	subi	r27, 0xF8	; 248
    292a:	39 f0       	breq	.+14     	; 0x293a <__fixunssfsi+0x46>
    292c:	b9 3f       	cpi	r27, 0xF9	; 249
    292e:	cc f3       	brlt	.-14     	; 0x2922 <__fixunssfsi+0x2e>
    2930:	86 95       	lsr	r24
    2932:	77 95       	ror	r23
    2934:	67 95       	ror	r22
    2936:	b3 95       	inc	r27
    2938:	d9 f7       	brne	.-10     	; 0x2930 <__fixunssfsi+0x3c>
    293a:	3e f4       	brtc	.+14     	; 0x294a <__fixunssfsi+0x56>
    293c:	90 95       	com	r25
    293e:	80 95       	com	r24
    2940:	70 95       	com	r23
    2942:	61 95       	neg	r22
    2944:	7f 4f       	sbci	r23, 0xFF	; 255
    2946:	8f 4f       	sbci	r24, 0xFF	; 255
    2948:	9f 4f       	sbci	r25, 0xFF	; 255
    294a:	08 95       	ret

0000294c <__fp_cmp>:
    294c:	99 0f       	add	r25, r25
    294e:	00 08       	sbc	r0, r0
    2950:	55 0f       	add	r21, r21
    2952:	aa 0b       	sbc	r26, r26
    2954:	e0 e8       	ldi	r30, 0x80	; 128
    2956:	fe ef       	ldi	r31, 0xFE	; 254
    2958:	16 16       	cp	r1, r22
    295a:	17 06       	cpc	r1, r23
    295c:	e8 07       	cpc	r30, r24
    295e:	f9 07       	cpc	r31, r25
    2960:	c0 f0       	brcs	.+48     	; 0x2992 <__fp_cmp+0x46>
    2962:	12 16       	cp	r1, r18
    2964:	13 06       	cpc	r1, r19
    2966:	e4 07       	cpc	r30, r20
    2968:	f5 07       	cpc	r31, r21
    296a:	98 f0       	brcs	.+38     	; 0x2992 <__fp_cmp+0x46>
    296c:	62 1b       	sub	r22, r18
    296e:	73 0b       	sbc	r23, r19
    2970:	84 0b       	sbc	r24, r20
    2972:	95 0b       	sbc	r25, r21
    2974:	39 f4       	brne	.+14     	; 0x2984 <__fp_cmp+0x38>
    2976:	0a 26       	eor	r0, r26
    2978:	61 f0       	breq	.+24     	; 0x2992 <__fp_cmp+0x46>
    297a:	23 2b       	or	r18, r19
    297c:	24 2b       	or	r18, r20
    297e:	25 2b       	or	r18, r21
    2980:	21 f4       	brne	.+8      	; 0x298a <__fp_cmp+0x3e>
    2982:	08 95       	ret
    2984:	0a 26       	eor	r0, r26
    2986:	09 f4       	brne	.+2      	; 0x298a <__fp_cmp+0x3e>
    2988:	a1 40       	sbci	r26, 0x01	; 1
    298a:	a6 95       	lsr	r26
    298c:	8f ef       	ldi	r24, 0xFF	; 255
    298e:	81 1d       	adc	r24, r1
    2990:	81 1d       	adc	r24, r1
    2992:	08 95       	ret

00002994 <__fp_split3>:
    2994:	57 fd       	sbrc	r21, 7
    2996:	90 58       	subi	r25, 0x80	; 128
    2998:	44 0f       	add	r20, r20
    299a:	55 1f       	adc	r21, r21
    299c:	59 f0       	breq	.+22     	; 0x29b4 <__fp_splitA+0x10>
    299e:	5f 3f       	cpi	r21, 0xFF	; 255
    29a0:	71 f0       	breq	.+28     	; 0x29be <__fp_splitA+0x1a>
    29a2:	47 95       	ror	r20

000029a4 <__fp_splitA>:
    29a4:	88 0f       	add	r24, r24
    29a6:	97 fb       	bst	r25, 7
    29a8:	99 1f       	adc	r25, r25
    29aa:	61 f0       	breq	.+24     	; 0x29c4 <__fp_splitA+0x20>
    29ac:	9f 3f       	cpi	r25, 0xFF	; 255
    29ae:	79 f0       	breq	.+30     	; 0x29ce <__fp_splitA+0x2a>
    29b0:	87 95       	ror	r24
    29b2:	08 95       	ret
    29b4:	12 16       	cp	r1, r18
    29b6:	13 06       	cpc	r1, r19
    29b8:	14 06       	cpc	r1, r20
    29ba:	55 1f       	adc	r21, r21
    29bc:	f2 cf       	rjmp	.-28     	; 0x29a2 <__fp_split3+0xe>
    29be:	46 95       	lsr	r20
    29c0:	f1 df       	rcall	.-30     	; 0x29a4 <__fp_splitA>
    29c2:	08 c0       	rjmp	.+16     	; 0x29d4 <__fp_splitA+0x30>
    29c4:	16 16       	cp	r1, r22
    29c6:	17 06       	cpc	r1, r23
    29c8:	18 06       	cpc	r1, r24
    29ca:	99 1f       	adc	r25, r25
    29cc:	f1 cf       	rjmp	.-30     	; 0x29b0 <__fp_splitA+0xc>
    29ce:	86 95       	lsr	r24
    29d0:	71 05       	cpc	r23, r1
    29d2:	61 05       	cpc	r22, r1
    29d4:	08 94       	sec
    29d6:	08 95       	ret

000029d8 <__fp_zero>:
    29d8:	e8 94       	clt

000029da <__fp_szero>:
    29da:	bb 27       	eor	r27, r27
    29dc:	66 27       	eor	r22, r22
    29de:	77 27       	eor	r23, r23
    29e0:	cb 01       	movw	r24, r22
    29e2:	97 f9       	bld	r25, 7
    29e4:	08 95       	ret

000029e6 <__gesf2>:
    29e6:	b2 df       	rcall	.-156    	; 0x294c <__fp_cmp>
    29e8:	08 f4       	brcc	.+2      	; 0x29ec <__gesf2+0x6>
    29ea:	8f ef       	ldi	r24, 0xFF	; 255
    29ec:	08 95       	ret

000029ee <__mulsf3>:
    29ee:	0b d0       	rcall	.+22     	; 0x2a06 <__mulsf3x>
    29f0:	78 c0       	rjmp	.+240    	; 0x2ae2 <__fp_round>
    29f2:	69 d0       	rcall	.+210    	; 0x2ac6 <__fp_pscA>
    29f4:	28 f0       	brcs	.+10     	; 0x2a00 <__mulsf3+0x12>
    29f6:	6e d0       	rcall	.+220    	; 0x2ad4 <__fp_pscB>
    29f8:	18 f0       	brcs	.+6      	; 0x2a00 <__mulsf3+0x12>
    29fa:	95 23       	and	r25, r21
    29fc:	09 f0       	breq	.+2      	; 0x2a00 <__mulsf3+0x12>
    29fe:	5a c0       	rjmp	.+180    	; 0x2ab4 <__fp_inf>
    2a00:	5f c0       	rjmp	.+190    	; 0x2ac0 <__fp_nan>
    2a02:	11 24       	eor	r1, r1
    2a04:	ea cf       	rjmp	.-44     	; 0x29da <__fp_szero>

00002a06 <__mulsf3x>:
    2a06:	c6 df       	rcall	.-116    	; 0x2994 <__fp_split3>
    2a08:	a0 f3       	brcs	.-24     	; 0x29f2 <__mulsf3+0x4>

00002a0a <__mulsf3_pse>:
    2a0a:	95 9f       	mul	r25, r21
    2a0c:	d1 f3       	breq	.-12     	; 0x2a02 <__mulsf3+0x14>
    2a0e:	95 0f       	add	r25, r21
    2a10:	50 e0       	ldi	r21, 0x00	; 0
    2a12:	55 1f       	adc	r21, r21
    2a14:	62 9f       	mul	r22, r18
    2a16:	f0 01       	movw	r30, r0
    2a18:	72 9f       	mul	r23, r18
    2a1a:	bb 27       	eor	r27, r27
    2a1c:	f0 0d       	add	r31, r0
    2a1e:	b1 1d       	adc	r27, r1
    2a20:	63 9f       	mul	r22, r19
    2a22:	aa 27       	eor	r26, r26
    2a24:	f0 0d       	add	r31, r0
    2a26:	b1 1d       	adc	r27, r1
    2a28:	aa 1f       	adc	r26, r26
    2a2a:	64 9f       	mul	r22, r20
    2a2c:	66 27       	eor	r22, r22
    2a2e:	b0 0d       	add	r27, r0
    2a30:	a1 1d       	adc	r26, r1
    2a32:	66 1f       	adc	r22, r22
    2a34:	82 9f       	mul	r24, r18
    2a36:	22 27       	eor	r18, r18
    2a38:	b0 0d       	add	r27, r0
    2a3a:	a1 1d       	adc	r26, r1
    2a3c:	62 1f       	adc	r22, r18
    2a3e:	73 9f       	mul	r23, r19
    2a40:	b0 0d       	add	r27, r0
    2a42:	a1 1d       	adc	r26, r1
    2a44:	62 1f       	adc	r22, r18
    2a46:	83 9f       	mul	r24, r19
    2a48:	a0 0d       	add	r26, r0
    2a4a:	61 1d       	adc	r22, r1
    2a4c:	22 1f       	adc	r18, r18
    2a4e:	74 9f       	mul	r23, r20
    2a50:	33 27       	eor	r19, r19
    2a52:	a0 0d       	add	r26, r0
    2a54:	61 1d       	adc	r22, r1
    2a56:	23 1f       	adc	r18, r19
    2a58:	84 9f       	mul	r24, r20
    2a5a:	60 0d       	add	r22, r0
    2a5c:	21 1d       	adc	r18, r1
    2a5e:	82 2f       	mov	r24, r18
    2a60:	76 2f       	mov	r23, r22
    2a62:	6a 2f       	mov	r22, r26
    2a64:	11 24       	eor	r1, r1
    2a66:	9f 57       	subi	r25, 0x7F	; 127
    2a68:	50 40       	sbci	r21, 0x00	; 0
    2a6a:	8a f0       	brmi	.+34     	; 0x2a8e <__mulsf3_pse+0x84>
    2a6c:	e1 f0       	breq	.+56     	; 0x2aa6 <__mulsf3_pse+0x9c>
    2a6e:	88 23       	and	r24, r24
    2a70:	4a f0       	brmi	.+18     	; 0x2a84 <__mulsf3_pse+0x7a>
    2a72:	ee 0f       	add	r30, r30
    2a74:	ff 1f       	adc	r31, r31
    2a76:	bb 1f       	adc	r27, r27
    2a78:	66 1f       	adc	r22, r22
    2a7a:	77 1f       	adc	r23, r23
    2a7c:	88 1f       	adc	r24, r24
    2a7e:	91 50       	subi	r25, 0x01	; 1
    2a80:	50 40       	sbci	r21, 0x00	; 0
    2a82:	a9 f7       	brne	.-22     	; 0x2a6e <__mulsf3_pse+0x64>
    2a84:	9e 3f       	cpi	r25, 0xFE	; 254
    2a86:	51 05       	cpc	r21, r1
    2a88:	70 f0       	brcs	.+28     	; 0x2aa6 <__mulsf3_pse+0x9c>
    2a8a:	14 c0       	rjmp	.+40     	; 0x2ab4 <__fp_inf>
    2a8c:	a6 cf       	rjmp	.-180    	; 0x29da <__fp_szero>
    2a8e:	5f 3f       	cpi	r21, 0xFF	; 255
    2a90:	ec f3       	brlt	.-6      	; 0x2a8c <__mulsf3_pse+0x82>
    2a92:	98 3e       	cpi	r25, 0xE8	; 232
    2a94:	dc f3       	brlt	.-10     	; 0x2a8c <__mulsf3_pse+0x82>
    2a96:	86 95       	lsr	r24
    2a98:	77 95       	ror	r23
    2a9a:	67 95       	ror	r22
    2a9c:	b7 95       	ror	r27
    2a9e:	f7 95       	ror	r31
    2aa0:	e7 95       	ror	r30
    2aa2:	9f 5f       	subi	r25, 0xFF	; 255
    2aa4:	c1 f7       	brne	.-16     	; 0x2a96 <__mulsf3_pse+0x8c>
    2aa6:	fe 2b       	or	r31, r30
    2aa8:	88 0f       	add	r24, r24
    2aaa:	91 1d       	adc	r25, r1
    2aac:	96 95       	lsr	r25
    2aae:	87 95       	ror	r24
    2ab0:	97 f9       	bld	r25, 7
    2ab2:	08 95       	ret

00002ab4 <__fp_inf>:
    2ab4:	97 f9       	bld	r25, 7
    2ab6:	9f 67       	ori	r25, 0x7F	; 127
    2ab8:	80 e8       	ldi	r24, 0x80	; 128
    2aba:	70 e0       	ldi	r23, 0x00	; 0
    2abc:	60 e0       	ldi	r22, 0x00	; 0
    2abe:	08 95       	ret

00002ac0 <__fp_nan>:
    2ac0:	9f ef       	ldi	r25, 0xFF	; 255
    2ac2:	80 ec       	ldi	r24, 0xC0	; 192
    2ac4:	08 95       	ret

00002ac6 <__fp_pscA>:
    2ac6:	00 24       	eor	r0, r0
    2ac8:	0a 94       	dec	r0
    2aca:	16 16       	cp	r1, r22
    2acc:	17 06       	cpc	r1, r23
    2ace:	18 06       	cpc	r1, r24
    2ad0:	09 06       	cpc	r0, r25
    2ad2:	08 95       	ret

00002ad4 <__fp_pscB>:
    2ad4:	00 24       	eor	r0, r0
    2ad6:	0a 94       	dec	r0
    2ad8:	12 16       	cp	r1, r18
    2ada:	13 06       	cpc	r1, r19
    2adc:	14 06       	cpc	r1, r20
    2ade:	05 06       	cpc	r0, r21
    2ae0:	08 95       	ret

00002ae2 <__fp_round>:
    2ae2:	09 2e       	mov	r0, r25
    2ae4:	03 94       	inc	r0
    2ae6:	00 0c       	add	r0, r0
    2ae8:	11 f4       	brne	.+4      	; 0x2aee <__fp_round+0xc>
    2aea:	88 23       	and	r24, r24
    2aec:	52 f0       	brmi	.+20     	; 0x2b02 <__fp_round+0x20>
    2aee:	bb 0f       	add	r27, r27
    2af0:	40 f4       	brcc	.+16     	; 0x2b02 <__fp_round+0x20>
    2af2:	bf 2b       	or	r27, r31
    2af4:	11 f4       	brne	.+4      	; 0x2afa <__fp_round+0x18>
    2af6:	60 ff       	sbrs	r22, 0
    2af8:	04 c0       	rjmp	.+8      	; 0x2b02 <__fp_round+0x20>
    2afa:	6f 5f       	subi	r22, 0xFF	; 255
    2afc:	7f 4f       	sbci	r23, 0xFF	; 255
    2afe:	8f 4f       	sbci	r24, 0xFF	; 255
    2b00:	9f 4f       	sbci	r25, 0xFF	; 255
    2b02:	08 95       	ret

00002b04 <calloc>:
    2b04:	ef 92       	push	r14
    2b06:	ff 92       	push	r15
    2b08:	0f 93       	push	r16
    2b0a:	1f 93       	push	r17
    2b0c:	cf 93       	push	r28
    2b0e:	df 93       	push	r29
    2b10:	68 9f       	mul	r22, r24
    2b12:	80 01       	movw	r16, r0
    2b14:	69 9f       	mul	r22, r25
    2b16:	10 0d       	add	r17, r0
    2b18:	78 9f       	mul	r23, r24
    2b1a:	10 0d       	add	r17, r0
    2b1c:	11 24       	eor	r1, r1
    2b1e:	c8 01       	movw	r24, r16
    2b20:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <malloc>
    2b24:	e8 2e       	mov	r14, r24
    2b26:	e7 01       	movw	r28, r14
    2b28:	7e 01       	movw	r14, r28
    2b2a:	f9 2e       	mov	r15, r25
    2b2c:	e7 01       	movw	r28, r14
    2b2e:	20 97       	sbiw	r28, 0x00	; 0
    2b30:	31 f0       	breq	.+12     	; 0x2b3e <calloc+0x3a>
    2b32:	8e 2d       	mov	r24, r14
    2b34:	60 e0       	ldi	r22, 0x00	; 0
    2b36:	70 e0       	ldi	r23, 0x00	; 0
    2b38:	a8 01       	movw	r20, r16
    2b3a:	0e 94 33 17 	call	0x2e66	; 0x2e66 <memset>
    2b3e:	7e 01       	movw	r14, r28
    2b40:	ce 01       	movw	r24, r28
    2b42:	cd b7       	in	r28, 0x3d	; 61
    2b44:	de b7       	in	r29, 0x3e	; 62
    2b46:	e6 e0       	ldi	r30, 0x06	; 6
    2b48:	0c 94 57 17 	jmp	0x2eae	; 0x2eae <__epilogue_restores__+0x18>

00002b4c <malloc>:
    2b4c:	cf 93       	push	r28
    2b4e:	df 93       	push	r29
    2b50:	82 30       	cpi	r24, 0x02	; 2
    2b52:	91 05       	cpc	r25, r1
    2b54:	10 f4       	brcc	.+4      	; 0x2b5a <malloc+0xe>
    2b56:	82 e0       	ldi	r24, 0x02	; 2
    2b58:	90 e0       	ldi	r25, 0x00	; 0
    2b5a:	e0 91 6f 01 	lds	r30, 0x016F
    2b5e:	f0 91 70 01 	lds	r31, 0x0170
    2b62:	40 e0       	ldi	r20, 0x00	; 0
    2b64:	50 e0       	ldi	r21, 0x00	; 0
    2b66:	20 e0       	ldi	r18, 0x00	; 0
    2b68:	30 e0       	ldi	r19, 0x00	; 0
    2b6a:	26 c0       	rjmp	.+76     	; 0x2bb8 <malloc+0x6c>
    2b6c:	60 81       	ld	r22, Z
    2b6e:	71 81       	ldd	r23, Z+1	; 0x01
    2b70:	68 17       	cp	r22, r24
    2b72:	79 07       	cpc	r23, r25
    2b74:	e0 f0       	brcs	.+56     	; 0x2bae <malloc+0x62>
    2b76:	68 17       	cp	r22, r24
    2b78:	79 07       	cpc	r23, r25
    2b7a:	81 f4       	brne	.+32     	; 0x2b9c <malloc+0x50>
    2b7c:	82 81       	ldd	r24, Z+2	; 0x02
    2b7e:	93 81       	ldd	r25, Z+3	; 0x03
    2b80:	21 15       	cp	r18, r1
    2b82:	31 05       	cpc	r19, r1
    2b84:	31 f0       	breq	.+12     	; 0x2b92 <malloc+0x46>
    2b86:	d9 01       	movw	r26, r18
    2b88:	13 96       	adiw	r26, 0x03	; 3
    2b8a:	9c 93       	st	X, r25
    2b8c:	8e 93       	st	-X, r24
    2b8e:	12 97       	sbiw	r26, 0x02	; 2
    2b90:	2b c0       	rjmp	.+86     	; 0x2be8 <malloc+0x9c>
    2b92:	90 93 70 01 	sts	0x0170, r25
    2b96:	80 93 6f 01 	sts	0x016F, r24
    2b9a:	26 c0       	rjmp	.+76     	; 0x2be8 <malloc+0x9c>
    2b9c:	41 15       	cp	r20, r1
    2b9e:	51 05       	cpc	r21, r1
    2ba0:	19 f0       	breq	.+6      	; 0x2ba8 <malloc+0x5c>
    2ba2:	64 17       	cp	r22, r20
    2ba4:	75 07       	cpc	r23, r21
    2ba6:	18 f4       	brcc	.+6      	; 0x2bae <malloc+0x62>
    2ba8:	ab 01       	movw	r20, r22
    2baa:	e9 01       	movw	r28, r18
    2bac:	df 01       	movw	r26, r30
    2bae:	9f 01       	movw	r18, r30
    2bb0:	72 81       	ldd	r23, Z+2	; 0x02
    2bb2:	63 81       	ldd	r22, Z+3	; 0x03
    2bb4:	e7 2f       	mov	r30, r23
    2bb6:	f6 2f       	mov	r31, r22
    2bb8:	30 97       	sbiw	r30, 0x00	; 0
    2bba:	c1 f6       	brne	.-80     	; 0x2b6c <malloc+0x20>
    2bbc:	41 15       	cp	r20, r1
    2bbe:	51 05       	cpc	r21, r1
    2bc0:	01 f1       	breq	.+64     	; 0x2c02 <malloc+0xb6>
    2bc2:	48 1b       	sub	r20, r24
    2bc4:	59 0b       	sbc	r21, r25
    2bc6:	44 30       	cpi	r20, 0x04	; 4
    2bc8:	51 05       	cpc	r21, r1
    2bca:	80 f4       	brcc	.+32     	; 0x2bec <malloc+0xa0>
    2bcc:	12 96       	adiw	r26, 0x02	; 2
    2bce:	8d 91       	ld	r24, X+
    2bd0:	9c 91       	ld	r25, X
    2bd2:	13 97       	sbiw	r26, 0x03	; 3
    2bd4:	20 97       	sbiw	r28, 0x00	; 0
    2bd6:	19 f0       	breq	.+6      	; 0x2bde <malloc+0x92>
    2bd8:	9b 83       	std	Y+3, r25	; 0x03
    2bda:	8a 83       	std	Y+2, r24	; 0x02
    2bdc:	04 c0       	rjmp	.+8      	; 0x2be6 <malloc+0x9a>
    2bde:	90 93 70 01 	sts	0x0170, r25
    2be2:	80 93 6f 01 	sts	0x016F, r24
    2be6:	fd 01       	movw	r30, r26
    2be8:	32 96       	adiw	r30, 0x02	; 2
    2bea:	46 c0       	rjmp	.+140    	; 0x2c78 <malloc+0x12c>
    2bec:	fd 01       	movw	r30, r26
    2bee:	e4 0f       	add	r30, r20
    2bf0:	f5 1f       	adc	r31, r21
    2bf2:	81 93       	st	Z+, r24
    2bf4:	91 93       	st	Z+, r25
    2bf6:	42 50       	subi	r20, 0x02	; 2
    2bf8:	50 40       	sbci	r21, 0x00	; 0
    2bfa:	11 96       	adiw	r26, 0x01	; 1
    2bfc:	5c 93       	st	X, r21
    2bfe:	4e 93       	st	-X, r20
    2c00:	3b c0       	rjmp	.+118    	; 0x2c78 <malloc+0x12c>
    2c02:	20 91 6d 01 	lds	r18, 0x016D
    2c06:	30 91 6e 01 	lds	r19, 0x016E
    2c0a:	21 15       	cp	r18, r1
    2c0c:	31 05       	cpc	r19, r1
    2c0e:	41 f4       	brne	.+16     	; 0x2c20 <malloc+0xd4>
    2c10:	20 91 35 01 	lds	r18, 0x0135
    2c14:	30 91 36 01 	lds	r19, 0x0136
    2c18:	30 93 6e 01 	sts	0x016E, r19
    2c1c:	20 93 6d 01 	sts	0x016D, r18
    2c20:	20 91 37 01 	lds	r18, 0x0137
    2c24:	30 91 38 01 	lds	r19, 0x0138
    2c28:	21 15       	cp	r18, r1
    2c2a:	31 05       	cpc	r19, r1
    2c2c:	41 f4       	brne	.+16     	; 0x2c3e <malloc+0xf2>
    2c2e:	2d b7       	in	r18, 0x3d	; 61
    2c30:	3e b7       	in	r19, 0x3e	; 62
    2c32:	40 91 33 01 	lds	r20, 0x0133
    2c36:	50 91 34 01 	lds	r21, 0x0134
    2c3a:	24 1b       	sub	r18, r20
    2c3c:	35 0b       	sbc	r19, r21
    2c3e:	e0 91 6d 01 	lds	r30, 0x016D
    2c42:	f0 91 6e 01 	lds	r31, 0x016E
    2c46:	e2 17       	cp	r30, r18
    2c48:	f3 07       	cpc	r31, r19
    2c4a:	a0 f4       	brcc	.+40     	; 0x2c74 <malloc+0x128>
    2c4c:	2e 1b       	sub	r18, r30
    2c4e:	3f 0b       	sbc	r19, r31
    2c50:	28 17       	cp	r18, r24
    2c52:	39 07       	cpc	r19, r25
    2c54:	78 f0       	brcs	.+30     	; 0x2c74 <malloc+0x128>
    2c56:	ac 01       	movw	r20, r24
    2c58:	4e 5f       	subi	r20, 0xFE	; 254
    2c5a:	5f 4f       	sbci	r21, 0xFF	; 255
    2c5c:	24 17       	cp	r18, r20
    2c5e:	35 07       	cpc	r19, r21
    2c60:	48 f0       	brcs	.+18     	; 0x2c74 <malloc+0x128>
    2c62:	4e 0f       	add	r20, r30
    2c64:	5f 1f       	adc	r21, r31
    2c66:	50 93 6e 01 	sts	0x016E, r21
    2c6a:	40 93 6d 01 	sts	0x016D, r20
    2c6e:	81 93       	st	Z+, r24
    2c70:	91 93       	st	Z+, r25
    2c72:	02 c0       	rjmp	.+4      	; 0x2c78 <malloc+0x12c>
    2c74:	e0 e0       	ldi	r30, 0x00	; 0
    2c76:	f0 e0       	ldi	r31, 0x00	; 0
    2c78:	cf 01       	movw	r24, r30
    2c7a:	df 91       	pop	r29
    2c7c:	cf 91       	pop	r28
    2c7e:	08 95       	ret

00002c80 <free>:
    2c80:	cf 93       	push	r28
    2c82:	df 93       	push	r29
    2c84:	00 97       	sbiw	r24, 0x00	; 0
    2c86:	09 f4       	brne	.+2      	; 0x2c8a <free+0xa>
    2c88:	91 c0       	rjmp	.+290    	; 0x2dac <free+0x12c>
    2c8a:	fc 01       	movw	r30, r24
    2c8c:	32 97       	sbiw	r30, 0x02	; 2
    2c8e:	13 82       	std	Z+3, r1	; 0x03
    2c90:	12 82       	std	Z+2, r1	; 0x02
    2c92:	60 91 6f 01 	lds	r22, 0x016F
    2c96:	70 91 70 01 	lds	r23, 0x0170
    2c9a:	61 15       	cp	r22, r1
    2c9c:	71 05       	cpc	r23, r1
    2c9e:	81 f4       	brne	.+32     	; 0x2cc0 <free+0x40>
    2ca0:	20 81       	ld	r18, Z
    2ca2:	31 81       	ldd	r19, Z+1	; 0x01
    2ca4:	28 0f       	add	r18, r24
    2ca6:	39 1f       	adc	r19, r25
    2ca8:	80 91 6d 01 	lds	r24, 0x016D
    2cac:	90 91 6e 01 	lds	r25, 0x016E
    2cb0:	82 17       	cp	r24, r18
    2cb2:	93 07       	cpc	r25, r19
    2cb4:	99 f5       	brne	.+102    	; 0x2d1c <free+0x9c>
    2cb6:	f0 93 6e 01 	sts	0x016E, r31
    2cba:	e0 93 6d 01 	sts	0x016D, r30
    2cbe:	76 c0       	rjmp	.+236    	; 0x2dac <free+0x12c>
    2cc0:	db 01       	movw	r26, r22
    2cc2:	80 e0       	ldi	r24, 0x00	; 0
    2cc4:	90 e0       	ldi	r25, 0x00	; 0
    2cc6:	02 c0       	rjmp	.+4      	; 0x2ccc <free+0x4c>
    2cc8:	cd 01       	movw	r24, r26
    2cca:	d9 01       	movw	r26, r18
    2ccc:	ae 17       	cp	r26, r30
    2cce:	bf 07       	cpc	r27, r31
    2cd0:	48 f4       	brcc	.+18     	; 0x2ce4 <free+0x64>
    2cd2:	12 96       	adiw	r26, 0x02	; 2
    2cd4:	2d 91       	ld	r18, X+
    2cd6:	3c 91       	ld	r19, X
    2cd8:	13 97       	sbiw	r26, 0x03	; 3
    2cda:	21 15       	cp	r18, r1
    2cdc:	31 05       	cpc	r19, r1
    2cde:	a1 f7       	brne	.-24     	; 0x2cc8 <free+0x48>
    2ce0:	cd 01       	movw	r24, r26
    2ce2:	21 c0       	rjmp	.+66     	; 0x2d26 <free+0xa6>
    2ce4:	b3 83       	std	Z+3, r27	; 0x03
    2ce6:	a2 83       	std	Z+2, r26	; 0x02
    2ce8:	ef 01       	movw	r28, r30
    2cea:	49 91       	ld	r20, Y+
    2cec:	59 91       	ld	r21, Y+
    2cee:	9e 01       	movw	r18, r28
    2cf0:	24 0f       	add	r18, r20
    2cf2:	35 1f       	adc	r19, r21
    2cf4:	a2 17       	cp	r26, r18
    2cf6:	b3 07       	cpc	r27, r19
    2cf8:	79 f4       	brne	.+30     	; 0x2d18 <free+0x98>
    2cfa:	2d 91       	ld	r18, X+
    2cfc:	3c 91       	ld	r19, X
    2cfe:	11 97       	sbiw	r26, 0x01	; 1
    2d00:	24 0f       	add	r18, r20
    2d02:	35 1f       	adc	r19, r21
    2d04:	2e 5f       	subi	r18, 0xFE	; 254
    2d06:	3f 4f       	sbci	r19, 0xFF	; 255
    2d08:	31 83       	std	Z+1, r19	; 0x01
    2d0a:	20 83       	st	Z, r18
    2d0c:	12 96       	adiw	r26, 0x02	; 2
    2d0e:	2d 91       	ld	r18, X+
    2d10:	3c 91       	ld	r19, X
    2d12:	13 97       	sbiw	r26, 0x03	; 3
    2d14:	33 83       	std	Z+3, r19	; 0x03
    2d16:	22 83       	std	Z+2, r18	; 0x02
    2d18:	00 97       	sbiw	r24, 0x00	; 0
    2d1a:	29 f4       	brne	.+10     	; 0x2d26 <free+0xa6>
    2d1c:	f0 93 70 01 	sts	0x0170, r31
    2d20:	e0 93 6f 01 	sts	0x016F, r30
    2d24:	43 c0       	rjmp	.+134    	; 0x2dac <free+0x12c>
    2d26:	dc 01       	movw	r26, r24
    2d28:	13 96       	adiw	r26, 0x03	; 3
    2d2a:	fc 93       	st	X, r31
    2d2c:	ee 93       	st	-X, r30
    2d2e:	12 97       	sbiw	r26, 0x02	; 2
    2d30:	4d 91       	ld	r20, X+
    2d32:	5d 91       	ld	r21, X+
    2d34:	a4 0f       	add	r26, r20
    2d36:	b5 1f       	adc	r27, r21
    2d38:	ea 17       	cp	r30, r26
    2d3a:	fb 07       	cpc	r31, r27
    2d3c:	69 f4       	brne	.+26     	; 0x2d58 <free+0xd8>
    2d3e:	20 81       	ld	r18, Z
    2d40:	31 81       	ldd	r19, Z+1	; 0x01
    2d42:	24 0f       	add	r18, r20
    2d44:	35 1f       	adc	r19, r21
    2d46:	2e 5f       	subi	r18, 0xFE	; 254
    2d48:	3f 4f       	sbci	r19, 0xFF	; 255
    2d4a:	ec 01       	movw	r28, r24
    2d4c:	39 83       	std	Y+1, r19	; 0x01
    2d4e:	28 83       	st	Y, r18
    2d50:	22 81       	ldd	r18, Z+2	; 0x02
    2d52:	33 81       	ldd	r19, Z+3	; 0x03
    2d54:	3b 83       	std	Y+3, r19	; 0x03
    2d56:	2a 83       	std	Y+2, r18	; 0x02
    2d58:	e0 e0       	ldi	r30, 0x00	; 0
    2d5a:	f0 e0       	ldi	r31, 0x00	; 0
    2d5c:	02 c0       	rjmp	.+4      	; 0x2d62 <free+0xe2>
    2d5e:	fb 01       	movw	r30, r22
    2d60:	bc 01       	movw	r22, r24
    2d62:	db 01       	movw	r26, r22
    2d64:	12 96       	adiw	r26, 0x02	; 2
    2d66:	8d 91       	ld	r24, X+
    2d68:	9c 91       	ld	r25, X
    2d6a:	13 97       	sbiw	r26, 0x03	; 3
    2d6c:	00 97       	sbiw	r24, 0x00	; 0
    2d6e:	b9 f7       	brne	.-18     	; 0x2d5e <free+0xde>
    2d70:	9b 01       	movw	r18, r22
    2d72:	2e 5f       	subi	r18, 0xFE	; 254
    2d74:	3f 4f       	sbci	r19, 0xFF	; 255
    2d76:	8d 91       	ld	r24, X+
    2d78:	9c 91       	ld	r25, X
    2d7a:	11 97       	sbiw	r26, 0x01	; 1
    2d7c:	82 0f       	add	r24, r18
    2d7e:	93 1f       	adc	r25, r19
    2d80:	40 91 6d 01 	lds	r20, 0x016D
    2d84:	50 91 6e 01 	lds	r21, 0x016E
    2d88:	48 17       	cp	r20, r24
    2d8a:	59 07       	cpc	r21, r25
    2d8c:	79 f4       	brne	.+30     	; 0x2dac <free+0x12c>
    2d8e:	30 97       	sbiw	r30, 0x00	; 0
    2d90:	29 f4       	brne	.+10     	; 0x2d9c <free+0x11c>
    2d92:	10 92 70 01 	sts	0x0170, r1
    2d96:	10 92 6f 01 	sts	0x016F, r1
    2d9a:	02 c0       	rjmp	.+4      	; 0x2da0 <free+0x120>
    2d9c:	13 82       	std	Z+3, r1	; 0x03
    2d9e:	12 82       	std	Z+2, r1	; 0x02
    2da0:	22 50       	subi	r18, 0x02	; 2
    2da2:	30 40       	sbci	r19, 0x00	; 0
    2da4:	30 93 6e 01 	sts	0x016E, r19
    2da8:	20 93 6d 01 	sts	0x016D, r18
    2dac:	df 91       	pop	r29
    2dae:	cf 91       	pop	r28
    2db0:	08 95       	ret

00002db2 <atoi>:
    2db2:	fc 01       	movw	r30, r24
    2db4:	88 27       	eor	r24, r24
    2db6:	99 27       	eor	r25, r25
    2db8:	e8 94       	clt
    2dba:	21 91       	ld	r18, Z+
    2dbc:	20 32       	cpi	r18, 0x20	; 32
    2dbe:	e9 f3       	breq	.-6      	; 0x2dba <atoi+0x8>
    2dc0:	29 30       	cpi	r18, 0x09	; 9
    2dc2:	10 f0       	brcs	.+4      	; 0x2dc8 <atoi+0x16>
    2dc4:	2e 30       	cpi	r18, 0x0E	; 14
    2dc6:	c8 f3       	brcs	.-14     	; 0x2dba <atoi+0x8>
    2dc8:	2b 32       	cpi	r18, 0x2B	; 43
    2dca:	41 f0       	breq	.+16     	; 0x2ddc <atoi+0x2a>
    2dcc:	2d 32       	cpi	r18, 0x2D	; 45
    2dce:	39 f4       	brne	.+14     	; 0x2dde <atoi+0x2c>
    2dd0:	68 94       	set
    2dd2:	04 c0       	rjmp	.+8      	; 0x2ddc <atoi+0x2a>
    2dd4:	0e 94 43 17 	call	0x2e86	; 0x2e86 <__mulhi_const_10>
    2dd8:	82 0f       	add	r24, r18
    2dda:	91 1d       	adc	r25, r1
    2ddc:	21 91       	ld	r18, Z+
    2dde:	20 53       	subi	r18, 0x30	; 48
    2de0:	2a 30       	cpi	r18, 0x0A	; 10
    2de2:	c0 f3       	brcs	.-16     	; 0x2dd4 <atoi+0x22>
    2de4:	1e f4       	brtc	.+6      	; 0x2dec <atoi+0x3a>
    2de6:	90 95       	com	r25
    2de8:	81 95       	neg	r24
    2dea:	9f 4f       	sbci	r25, 0xFF	; 255
    2dec:	08 95       	ret

00002dee <memchr>:
    2dee:	fc 01       	movw	r30, r24
    2df0:	41 50       	subi	r20, 0x01	; 1
    2df2:	50 40       	sbci	r21, 0x00	; 0
    2df4:	30 f0       	brcs	.+12     	; 0x2e02 <memchr+0x14>
    2df6:	01 90       	ld	r0, Z+
    2df8:	06 16       	cp	r0, r22
    2dfa:	d1 f7       	brne	.-12     	; 0x2df0 <memchr+0x2>
    2dfc:	31 97       	sbiw	r30, 0x01	; 1
    2dfe:	cf 01       	movw	r24, r30
    2e00:	08 95       	ret
    2e02:	88 27       	eor	r24, r24
    2e04:	99 27       	eor	r25, r25
    2e06:	08 95       	ret

00002e08 <memcpy>:
    2e08:	fb 01       	movw	r30, r22
    2e0a:	dc 01       	movw	r26, r24
    2e0c:	02 c0       	rjmp	.+4      	; 0x2e12 <memcpy+0xa>
    2e0e:	01 90       	ld	r0, Z+
    2e10:	0d 92       	st	X+, r0
    2e12:	41 50       	subi	r20, 0x01	; 1
    2e14:	50 40       	sbci	r21, 0x00	; 0
    2e16:	d8 f7       	brcc	.-10     	; 0x2e0e <memcpy+0x6>
    2e18:	08 95       	ret

00002e1a <memmem>:
    2e1a:	21 15       	cp	r18, r1
    2e1c:	31 05       	cpc	r19, r1
    2e1e:	11 f1       	breq	.+68     	; 0x2e64 <memmem+0x4a>
    2e20:	1f 93       	push	r17
    2e22:	0f 93       	push	r16
    2e24:	24 0f       	add	r18, r20
    2e26:	35 1f       	adc	r19, r21
    2e28:	68 0f       	add	r22, r24
    2e2a:	79 1f       	adc	r23, r25
    2e2c:	fa 01       	movw	r30, r20
    2e2e:	11 91       	ld	r17, Z+
    2e30:	af 01       	movw	r20, r30
    2e32:	dc 01       	movw	r26, r24
    2e34:	a6 17       	cp	r26, r22
    2e36:	b7 07       	cpc	r27, r23
    2e38:	80 f4       	brcc	.+32     	; 0x2e5a <memmem+0x40>
    2e3a:	0d 91       	ld	r16, X+
    2e3c:	01 17       	cp	r16, r17
    2e3e:	d1 f7       	brne	.-12     	; 0x2e34 <memmem+0x1a>
    2e40:	cd 01       	movw	r24, r26
    2e42:	fa 01       	movw	r30, r20
    2e44:	e2 17       	cp	r30, r18
    2e46:	f3 07       	cpc	r31, r19
    2e48:	50 f4       	brcc	.+20     	; 0x2e5e <memmem+0x44>
    2e4a:	a6 17       	cp	r26, r22
    2e4c:	b7 07       	cpc	r27, r23
    2e4e:	28 f4       	brcc	.+10     	; 0x2e5a <memmem+0x40>
    2e50:	0d 91       	ld	r16, X+
    2e52:	01 90       	ld	r0, Z+
    2e54:	00 15       	cp	r16, r0
    2e56:	b1 f3       	breq	.-20     	; 0x2e44 <memmem+0x2a>
    2e58:	ec cf       	rjmp	.-40     	; 0x2e32 <memmem+0x18>
    2e5a:	81 e0       	ldi	r24, 0x01	; 1
    2e5c:	90 e0       	ldi	r25, 0x00	; 0
    2e5e:	01 97       	sbiw	r24, 0x01	; 1
    2e60:	0f 91       	pop	r16
    2e62:	1f 91       	pop	r17
    2e64:	08 95       	ret

00002e66 <memset>:
    2e66:	dc 01       	movw	r26, r24
    2e68:	01 c0       	rjmp	.+2      	; 0x2e6c <memset+0x6>
    2e6a:	6d 93       	st	X+, r22
    2e6c:	41 50       	subi	r20, 0x01	; 1
    2e6e:	50 40       	sbci	r21, 0x00	; 0
    2e70:	e0 f7       	brcc	.-8      	; 0x2e6a <memset+0x4>
    2e72:	08 95       	ret

00002e74 <strlen>:
    2e74:	fc 01       	movw	r30, r24
    2e76:	01 90       	ld	r0, Z+
    2e78:	00 20       	and	r0, r0
    2e7a:	e9 f7       	brne	.-6      	; 0x2e76 <strlen+0x2>
    2e7c:	80 95       	com	r24
    2e7e:	90 95       	com	r25
    2e80:	8e 0f       	add	r24, r30
    2e82:	9f 1f       	adc	r25, r31
    2e84:	08 95       	ret

00002e86 <__mulhi_const_10>:
    2e86:	7a e0       	ldi	r23, 0x0A	; 10
    2e88:	97 9f       	mul	r25, r23
    2e8a:	90 2d       	mov	r25, r0
    2e8c:	87 9f       	mul	r24, r23
    2e8e:	80 2d       	mov	r24, r0
    2e90:	91 0d       	add	r25, r1
    2e92:	11 24       	eor	r1, r1
    2e94:	08 95       	ret

00002e96 <__epilogue_restores__>:
    2e96:	2a 88       	ldd	r2, Y+18	; 0x12
    2e98:	39 88       	ldd	r3, Y+17	; 0x11
    2e9a:	48 88       	ldd	r4, Y+16	; 0x10
    2e9c:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e9e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ea0:	7d 84       	ldd	r7, Y+13	; 0x0d
    2ea2:	8c 84       	ldd	r8, Y+12	; 0x0c
    2ea4:	9b 84       	ldd	r9, Y+11	; 0x0b
    2ea6:	aa 84       	ldd	r10, Y+10	; 0x0a
    2ea8:	b9 84       	ldd	r11, Y+9	; 0x09
    2eaa:	c8 84       	ldd	r12, Y+8	; 0x08
    2eac:	df 80       	ldd	r13, Y+7	; 0x07
    2eae:	ee 80       	ldd	r14, Y+6	; 0x06
    2eb0:	fd 80       	ldd	r15, Y+5	; 0x05
    2eb2:	0c 81       	ldd	r16, Y+4	; 0x04
    2eb4:	1b 81       	ldd	r17, Y+3	; 0x03
    2eb6:	aa 81       	ldd	r26, Y+2	; 0x02
    2eb8:	b9 81       	ldd	r27, Y+1	; 0x01
    2eba:	ce 0f       	add	r28, r30
    2ebc:	d1 1d       	adc	r29, r1
    2ebe:	0f b6       	in	r0, 0x3f	; 63
    2ec0:	f8 94       	cli
    2ec2:	de bf       	out	0x3e, r29	; 62
    2ec4:	0f be       	out	0x3f, r0	; 63
    2ec6:	cd bf       	out	0x3d, r28	; 61
    2ec8:	ed 01       	movw	r28, r26
    2eca:	08 95       	ret

00002ecc <_exit>:
    2ecc:	f8 94       	cli

00002ece <__stop_program>:
    2ece:	ff cf       	rjmp	.-2      	; 0x2ece <__stop_program>
