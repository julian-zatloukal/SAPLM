
Proyecto de placa de potencia.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008e  00800100  0000177c  00001810  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000177c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  0080018e  0080018e  0000189e  2**0
                  ALLOC
  3 .stab         00001cb0  00000000  00000000  000018a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000a15  00000000  00000000  00003550  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001f0  00000000  00000000  00003f65  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000060b  00000000  00000000  00004155  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001269  00000000  00000000  00004760  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000675  00000000  00000000  000059c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000017ea  00000000  00000000  0000603e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000340  00000000  00000000  00007828  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000084e  00000000  00000000  00007b68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000491  00000000  00000000  000083b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000168  00000000  00000000  00008847  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000001b8  00000000  00000000  000089af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec e7       	ldi	r30, 0x7C	; 124
      7c:	f7 e1       	ldi	r31, 0x17	; 23
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ae 38       	cpi	r26, 0x8E	; 142
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	ae e8       	ldi	r26, 0x8E	; 142
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a1 3a       	cpi	r26, 0xA1	; 161
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 39 03 	call	0x672	; 0x672 <main>
      9e:	0c 94 bc 0b 	jmp	0x1778	; 0x1778 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initliazeMemory>:
	{ .commandBase = "BUILT_IN_LED_TEST", .nParameters = 0, .handlerFunction = &BUILT_IN_LED_TEST_HANDLE},
	{ .commandBase = "TURN_EVERYTHING_ON", .nParameters = 0, .handlerFunction = &TURN_EVERYTHING_ON_HANDLE},
	{ .commandBase = "TURN_EVERYTHING_OFF", .nParameters = 0, .handlerFunction = &TURN_EVERYTHING_OFF_HANDLE}
};

bool initliazeMemory(){
      a6:	df 93       	push	r29
      a8:	cf 93       	push	r28
      aa:	cd b7       	in	r28, 0x3d	; 61
      ac:	de b7       	in	r29, 0x3e	; 62
	if(memoryInitialized) return false;
      ae:	80 91 9a 01 	lds	r24, 0x019A
      b2:	88 23       	and	r24, r24
      b4:	11 f0       	breq	.+4      	; 0xba <initliazeMemory+0x14>
      b6:	80 e0       	ldi	r24, 0x00	; 0
      b8:	46 c0       	rjmp	.+140    	; 0x146 <initliazeMemory+0xa0>
	parameter[0] = (void*)calloc(28,1);
      ba:	8c e1       	ldi	r24, 0x1C	; 28
      bc:	90 e0       	ldi	r25, 0x00	; 0
      be:	61 e0       	ldi	r22, 0x01	; 1
      c0:	70 e0       	ldi	r23, 0x00	; 0
      c2:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <calloc>
      c6:	90 93 8f 01 	sts	0x018F, r25
      ca:	80 93 8e 01 	sts	0x018E, r24
	parameter[1] = (void*)calloc(28,1);
      ce:	8c e1       	ldi	r24, 0x1C	; 28
      d0:	90 e0       	ldi	r25, 0x00	; 0
      d2:	61 e0       	ldi	r22, 0x01	; 1
      d4:	70 e0       	ldi	r23, 0x00	; 0
      d6:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <calloc>
      da:	90 93 91 01 	sts	0x0191, r25
      de:	80 93 90 01 	sts	0x0190, r24
	parameter[2] = (void*)calloc(28,1);
      e2:	8c e1       	ldi	r24, 0x1C	; 28
      e4:	90 e0       	ldi	r25, 0x00	; 0
      e6:	61 e0       	ldi	r22, 0x01	; 1
      e8:	70 e0       	ldi	r23, 0x00	; 0
      ea:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <calloc>
      ee:	90 93 93 01 	sts	0x0193, r25
      f2:	80 93 92 01 	sts	0x0192, r24
	command_buffer = (uint8_t*)calloc(32,1);
      f6:	80 e2       	ldi	r24, 0x20	; 32
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	61 e0       	ldi	r22, 0x01	; 1
      fc:	70 e0       	ldi	r23, 0x00	; 0
      fe:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <calloc>
     102:	90 93 99 01 	sts	0x0199, r25
     106:	80 93 98 01 	sts	0x0198, r24
	if(parameter[0]==nullptr||parameter[1]==nullptr||parameter[2]==nullptr||command_buffer==nullptr) return false;
     10a:	80 91 8e 01 	lds	r24, 0x018E
     10e:	90 91 8f 01 	lds	r25, 0x018F
     112:	00 97       	sbiw	r24, 0x00	; 0
     114:	91 f0       	breq	.+36     	; 0x13a <initliazeMemory+0x94>
     116:	80 91 90 01 	lds	r24, 0x0190
     11a:	90 91 91 01 	lds	r25, 0x0191
     11e:	00 97       	sbiw	r24, 0x00	; 0
     120:	61 f0       	breq	.+24     	; 0x13a <initliazeMemory+0x94>
     122:	80 91 92 01 	lds	r24, 0x0192
     126:	90 91 93 01 	lds	r25, 0x0193
     12a:	00 97       	sbiw	r24, 0x00	; 0
     12c:	31 f0       	breq	.+12     	; 0x13a <initliazeMemory+0x94>
     12e:	80 91 98 01 	lds	r24, 0x0198
     132:	90 91 99 01 	lds	r25, 0x0199
     136:	00 97       	sbiw	r24, 0x00	; 0
     138:	11 f4       	brne	.+4      	; 0x13e <initliazeMemory+0x98>
     13a:	80 e0       	ldi	r24, 0x00	; 0
     13c:	04 c0       	rjmp	.+8      	; 0x146 <initliazeMemory+0xa0>
	memoryInitialized = true;
     13e:	81 e0       	ldi	r24, 0x01	; 1
     140:	80 93 9a 01 	sts	0x019A, r24
	return true;
     144:	81 e0       	ldi	r24, 0x01	; 1
}
     146:	cf 91       	pop	r28
     148:	df 91       	pop	r29
     14a:	08 95       	ret

0000014c <decomposeCommand>:
		}
	}
	*startParamPTR='\0';
}

bool decomposeCommand(void* input_buffer, commandType* commandT, void** outputParameter){
     14c:	0f 93       	push	r16
     14e:	1f 93       	push	r17
     150:	df 93       	push	r29
     152:	cf 93       	push	r28
     154:	cd b7       	in	r28, 0x3d	; 61
     156:	de b7       	in	r29, 0x3e	; 62
     158:	60 97       	sbiw	r28, 0x10	; 16
     15a:	0f b6       	in	r0, 0x3f	; 63
     15c:	f8 94       	cli
     15e:	de bf       	out	0x3e, r29	; 62
     160:	0f be       	out	0x3f, r0	; 63
     162:	cd bf       	out	0x3d, r28	; 61
     164:	9c 87       	std	Y+12, r25	; 0x0c
     166:	8b 87       	std	Y+11, r24	; 0x0b
     168:	7e 87       	std	Y+14, r23	; 0x0e
     16a:	6d 87       	std	Y+13, r22	; 0x0d
     16c:	58 8b       	std	Y+16, r21	; 0x10
     16e:	4f 87       	std	Y+15, r20	; 0x0f
	
	for (uint8_t index = 0; index < AVAILABLE_COMMANDS; index++){
     170:	19 82       	std	Y+1, r1	; 0x01
     172:	4e c0       	rjmp	.+156    	; 0x210 <decomposeCommand+0xc4>
		if (memmem(input_buffer, COMMAND_BUFFER_SIZE, availableCommand[index].commandBase, strlen(availableCommand[index].commandBase))!=nullptr) 
     174:	89 81       	ldd	r24, Y+1	; 0x01
     176:	28 2f       	mov	r18, r24
     178:	30 e0       	ldi	r19, 0x00	; 0
     17a:	c9 01       	movw	r24, r18
     17c:	88 0f       	add	r24, r24
     17e:	99 1f       	adc	r25, r25
     180:	88 0f       	add	r24, r24
     182:	99 1f       	adc	r25, r25
     184:	82 0f       	add	r24, r18
     186:	93 1f       	adc	r25, r19
     188:	8c 58       	subi	r24, 0x8C	; 140
     18a:	9e 4f       	sbci	r25, 0xFE	; 254
     18c:	fc 01       	movw	r30, r24
     18e:	00 81       	ld	r16, Z
     190:	11 81       	ldd	r17, Z+1	; 0x01
     192:	89 81       	ldd	r24, Y+1	; 0x01
     194:	28 2f       	mov	r18, r24
     196:	30 e0       	ldi	r19, 0x00	; 0
     198:	c9 01       	movw	r24, r18
     19a:	88 0f       	add	r24, r24
     19c:	99 1f       	adc	r25, r25
     19e:	88 0f       	add	r24, r24
     1a0:	99 1f       	adc	r25, r25
     1a2:	82 0f       	add	r24, r18
     1a4:	93 1f       	adc	r25, r19
     1a6:	8c 58       	subi	r24, 0x8C	; 140
     1a8:	9e 4f       	sbci	r25, 0xFE	; 254
     1aa:	fc 01       	movw	r30, r24
     1ac:	80 81       	ld	r24, Z
     1ae:	91 81       	ldd	r25, Z+1	; 0x01
     1b0:	0e 94 90 0b 	call	0x1720	; 0x1720 <strlen>
     1b4:	9c 01       	movw	r18, r24
     1b6:	8b 85       	ldd	r24, Y+11	; 0x0b
     1b8:	9c 85       	ldd	r25, Y+12	; 0x0c
     1ba:	60 e2       	ldi	r22, 0x20	; 32
     1bc:	70 e0       	ldi	r23, 0x00	; 0
     1be:	a8 01       	movw	r20, r16
     1c0:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <memmem>
     1c4:	00 97       	sbiw	r24, 0x00	; 0
     1c6:	e1 f0       	breq	.+56     	; 0x200 <decomposeCommand+0xb4>
		{ 
			*commandT = availableCommand[index]; break; 
     1c8:	89 81       	ldd	r24, Y+1	; 0x01
     1ca:	28 2f       	mov	r18, r24
     1cc:	30 e0       	ldi	r19, 0x00	; 0
     1ce:	4d 85       	ldd	r20, Y+13	; 0x0d
     1d0:	5e 85       	ldd	r21, Y+14	; 0x0e
     1d2:	c9 01       	movw	r24, r18
     1d4:	88 0f       	add	r24, r24
     1d6:	99 1f       	adc	r25, r25
     1d8:	88 0f       	add	r24, r24
     1da:	99 1f       	adc	r25, r25
     1dc:	82 0f       	add	r24, r18
     1de:	93 1f       	adc	r25, r19
     1e0:	9c 01       	movw	r18, r24
     1e2:	2c 58       	subi	r18, 0x8C	; 140
     1e4:	3e 4f       	sbci	r19, 0xFE	; 254
     1e6:	ca 01       	movw	r24, r20
     1e8:	45 e0       	ldi	r20, 0x05	; 5
     1ea:	f9 01       	movw	r30, r18
     1ec:	00 80       	ld	r0, Z
     1ee:	2f 5f       	subi	r18, 0xFF	; 255
     1f0:	3f 4f       	sbci	r19, 0xFF	; 255
     1f2:	fc 01       	movw	r30, r24
     1f4:	00 82       	st	Z, r0
     1f6:	01 96       	adiw	r24, 0x01	; 1
     1f8:	41 50       	subi	r20, 0x01	; 1
     1fa:	44 23       	and	r20, r20
     1fc:	b1 f7       	brne	.-20     	; 0x1ea <decomposeCommand+0x9e>
     1fe:	0c c0       	rjmp	.+24     	; 0x218 <decomposeCommand+0xcc>
		}
		else if (index==(AVAILABLE_COMMANDS-1)) { return false;}
     200:	89 81       	ldd	r24, Y+1	; 0x01
     202:	84 30       	cpi	r24, 0x04	; 4
     204:	11 f4       	brne	.+4      	; 0x20a <decomposeCommand+0xbe>
     206:	80 e0       	ldi	r24, 0x00	; 0
     208:	77 c0       	rjmp	.+238    	; 0x2f8 <decomposeCommand+0x1ac>
	*startParamPTR='\0';
}

bool decomposeCommand(void* input_buffer, commandType* commandT, void** outputParameter){
	
	for (uint8_t index = 0; index < AVAILABLE_COMMANDS; index++){
     20a:	89 81       	ldd	r24, Y+1	; 0x01
     20c:	8f 5f       	subi	r24, 0xFF	; 255
     20e:	89 83       	std	Y+1, r24	; 0x01
     210:	89 81       	ldd	r24, Y+1	; 0x01
     212:	85 30       	cpi	r24, 0x05	; 5
     214:	08 f4       	brcc	.+2      	; 0x218 <decomposeCommand+0xcc>
     216:	ae cf       	rjmp	.-164    	; 0x174 <decomposeCommand+0x28>
			*commandT = availableCommand[index]; break; 
		}
		else if (index==(AVAILABLE_COMMANDS-1)) { return false;}
	}
	
	for (uint8_t x = 0; x < commandT->nParameters; x++){
     218:	1a 82       	std	Y+2, r1	; 0x02
     21a:	63 c0       	rjmp	.+198    	; 0x2e2 <decomposeCommand+0x196>
		uint8_t* startNumPTR = memchr(input_buffer, '[', COMMAND_BUFFER_SIZE);
     21c:	8b 85       	ldd	r24, Y+11	; 0x0b
     21e:	9c 85       	ldd	r25, Y+12	; 0x0c
     220:	6b e5       	ldi	r22, 0x5B	; 91
     222:	70 e0       	ldi	r23, 0x00	; 0
     224:	40 e2       	ldi	r20, 0x20	; 32
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	0e 94 4d 0b 	call	0x169a	; 0x169a <memchr>
     22c:	9c 83       	std	Y+4, r25	; 0x04
     22e:	8b 83       	std	Y+3, r24	; 0x03
		uint8_t* endNumPTR = memchr(input_buffer, ']', COMMAND_BUFFER_SIZE);
     230:	8b 85       	ldd	r24, Y+11	; 0x0b
     232:	9c 85       	ldd	r25, Y+12	; 0x0c
     234:	6d e5       	ldi	r22, 0x5D	; 93
     236:	70 e0       	ldi	r23, 0x00	; 0
     238:	40 e2       	ldi	r20, 0x20	; 32
     23a:	50 e0       	ldi	r21, 0x00	; 0
     23c:	0e 94 4d 0b 	call	0x169a	; 0x169a <memchr>
     240:	9e 83       	std	Y+6, r25	; 0x06
     242:	8d 83       	std	Y+5, r24	; 0x05
		if (startNumPTR==nullptr||endNumPTR==nullptr) { if(x==0) return false; break; }
     244:	8b 81       	ldd	r24, Y+3	; 0x03
     246:	9c 81       	ldd	r25, Y+4	; 0x04
     248:	00 97       	sbiw	r24, 0x00	; 0
     24a:	21 f0       	breq	.+8      	; 0x254 <decomposeCommand+0x108>
     24c:	8d 81       	ldd	r24, Y+5	; 0x05
     24e:	9e 81       	ldd	r25, Y+6	; 0x06
     250:	00 97       	sbiw	r24, 0x00	; 0
     252:	31 f4       	brne	.+12     	; 0x260 <decomposeCommand+0x114>
     254:	8a 81       	ldd	r24, Y+2	; 0x02
     256:	88 23       	and	r24, r24
     258:	09 f0       	breq	.+2      	; 0x25c <decomposeCommand+0x110>
     25a:	4c c0       	rjmp	.+152    	; 0x2f4 <decomposeCommand+0x1a8>
     25c:	80 e0       	ldi	r24, 0x00	; 0
     25e:	4c c0       	rjmp	.+152    	; 0x2f8 <decomposeCommand+0x1ac>
		(*startNumPTR) = 0x20;
     260:	8b 81       	ldd	r24, Y+3	; 0x03
     262:	9c 81       	ldd	r25, Y+4	; 0x04
     264:	20 e2       	ldi	r18, 0x20	; 32
     266:	fc 01       	movw	r30, r24
     268:	20 83       	st	Z, r18
		(*endNumPTR) = 0x20;
     26a:	8d 81       	ldd	r24, Y+5	; 0x05
     26c:	9e 81       	ldd	r25, Y+6	; 0x06
     26e:	20 e2       	ldi	r18, 0x20	; 32
     270:	fc 01       	movw	r30, r24
     272:	20 83       	st	Z, r18
		startNumPTR++;
     274:	8b 81       	ldd	r24, Y+3	; 0x03
     276:	9c 81       	ldd	r25, Y+4	; 0x04
     278:	01 96       	adiw	r24, 0x01	; 1
     27a:	9c 83       	std	Y+4, r25	; 0x04
     27c:	8b 83       	std	Y+3, r24	; 0x03
		uint32_t bytes = ((endNumPTR)) - ((startNumPTR));
     27e:	2d 81       	ldd	r18, Y+5	; 0x05
     280:	3e 81       	ldd	r19, Y+6	; 0x06
     282:	8b 81       	ldd	r24, Y+3	; 0x03
     284:	9c 81       	ldd	r25, Y+4	; 0x04
     286:	a9 01       	movw	r20, r18
     288:	48 1b       	sub	r20, r24
     28a:	59 0b       	sbc	r21, r25
     28c:	ca 01       	movw	r24, r20
     28e:	aa 27       	eor	r26, r26
     290:	97 fd       	sbrc	r25, 7
     292:	a0 95       	com	r26
     294:	ba 2f       	mov	r27, r26
     296:	8f 83       	std	Y+7, r24	; 0x07
     298:	98 87       	std	Y+8, r25	; 0x08
     29a:	a9 87       	std	Y+9, r26	; 0x09
     29c:	ba 87       	std	Y+10, r27	; 0x0a
		if (bytes>PARAMETER_BUFFER_SIZE) return false;
     29e:	8f 81       	ldd	r24, Y+7	; 0x07
     2a0:	98 85       	ldd	r25, Y+8	; 0x08
     2a2:	a9 85       	ldd	r26, Y+9	; 0x09
     2a4:	ba 85       	ldd	r27, Y+10	; 0x0a
     2a6:	8d 31       	cpi	r24, 0x1D	; 29
     2a8:	91 05       	cpc	r25, r1
     2aa:	a1 05       	cpc	r26, r1
     2ac:	b1 05       	cpc	r27, r1
     2ae:	10 f0       	brcs	.+4      	; 0x2b4 <decomposeCommand+0x168>
     2b0:	80 e0       	ldi	r24, 0x00	; 0
     2b2:	22 c0       	rjmp	.+68     	; 0x2f8 <decomposeCommand+0x1ac>
		memcpy(outputParameter[x], startNumPTR, bytes);
     2b4:	8a 81       	ldd	r24, Y+2	; 0x02
     2b6:	88 2f       	mov	r24, r24
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	88 0f       	add	r24, r24
     2bc:	99 1f       	adc	r25, r25
     2be:	2f 85       	ldd	r18, Y+15	; 0x0f
     2c0:	38 89       	ldd	r19, Y+16	; 0x10
     2c2:	82 0f       	add	r24, r18
     2c4:	93 1f       	adc	r25, r19
     2c6:	fc 01       	movw	r30, r24
     2c8:	80 81       	ld	r24, Z
     2ca:	91 81       	ldd	r25, Z+1	; 0x01
     2cc:	2f 81       	ldd	r18, Y+7	; 0x07
     2ce:	38 85       	ldd	r19, Y+8	; 0x08
     2d0:	4b 81       	ldd	r20, Y+3	; 0x03
     2d2:	5c 81       	ldd	r21, Y+4	; 0x04
     2d4:	ba 01       	movw	r22, r20
     2d6:	a9 01       	movw	r20, r18
     2d8:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <memcpy>
			*commandT = availableCommand[index]; break; 
		}
		else if (index==(AVAILABLE_COMMANDS-1)) { return false;}
	}
	
	for (uint8_t x = 0; x < commandT->nParameters; x++){
     2dc:	8a 81       	ldd	r24, Y+2	; 0x02
     2de:	8f 5f       	subi	r24, 0xFF	; 255
     2e0:	8a 83       	std	Y+2, r24	; 0x02
     2e2:	8d 85       	ldd	r24, Y+13	; 0x0d
     2e4:	9e 85       	ldd	r25, Y+14	; 0x0e
     2e6:	fc 01       	movw	r30, r24
     2e8:	92 81       	ldd	r25, Z+2	; 0x02
     2ea:	8a 81       	ldd	r24, Y+2	; 0x02
     2ec:	89 17       	cp	r24, r25
     2ee:	08 f4       	brcc	.+2      	; 0x2f2 <decomposeCommand+0x1a6>
     2f0:	95 cf       	rjmp	.-214    	; 0x21c <decomposeCommand+0xd0>
     2f2:	01 c0       	rjmp	.+2      	; 0x2f6 <decomposeCommand+0x1aa>
		uint8_t* startNumPTR = memchr(input_buffer, '[', COMMAND_BUFFER_SIZE);
		uint8_t* endNumPTR = memchr(input_buffer, ']', COMMAND_BUFFER_SIZE);
		if (startNumPTR==nullptr||endNumPTR==nullptr) { if(x==0) return false; break; }
     2f4:	00 00       	nop
		uint32_t bytes = ((endNumPTR)) - ((startNumPTR));
		if (bytes>PARAMETER_BUFFER_SIZE) return false;
		memcpy(outputParameter[x], startNumPTR, bytes);
	}

	return true;
     2f6:	81 e0       	ldi	r24, 0x01	; 1
}
     2f8:	60 96       	adiw	r28, 0x10	; 16
     2fa:	0f b6       	in	r0, 0x3f	; 63
     2fc:	f8 94       	cli
     2fe:	de bf       	out	0x3e, r29	; 62
     300:	0f be       	out	0x3f, r0	; 63
     302:	cd bf       	out	0x3d, r28	; 61
     304:	cf 91       	pop	r28
     306:	df 91       	pop	r29
     308:	1f 91       	pop	r17
     30a:	0f 91       	pop	r16
     30c:	08 95       	ret

0000030e <TURN_RELAY_ON_HANDLE>:
	
void TURN_RELAY_ON_HANDLE() {
     30e:	df 93       	push	r29
     310:	cf 93       	push	r28
     312:	0f 92       	push	r0
     314:	cd b7       	in	r28, 0x3d	; 61
     316:	de b7       	in	r29, 0x3e	; 62
	uint8_t relayIndex =  atoi(parameter[0]);
     318:	80 91 8e 01 	lds	r24, 0x018E
     31c:	90 91 8f 01 	lds	r25, 0x018F
     320:	0e 94 2f 0b 	call	0x165e	; 0x165e <atoi>
     324:	89 83       	std	Y+1, r24	; 0x01
	switch (relayIndex) {
     326:	89 81       	ldd	r24, Y+1	; 0x01
     328:	88 2f       	mov	r24, r24
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	81 30       	cpi	r24, 0x01	; 1
     32e:	91 05       	cpc	r25, r1
     330:	b9 f0       	breq	.+46     	; 0x360 <TURN_RELAY_ON_HANDLE+0x52>
     332:	82 30       	cpi	r24, 0x02	; 2
     334:	91 05       	cpc	r25, r1
     336:	1c f4       	brge	.+6      	; 0x33e <TURN_RELAY_ON_HANDLE+0x30>
     338:	00 97       	sbiw	r24, 0x00	; 0
     33a:	41 f0       	breq	.+16     	; 0x34c <TURN_RELAY_ON_HANDLE+0x3e>
     33c:	2f c0       	rjmp	.+94     	; 0x39c <TURN_RELAY_ON_HANDLE+0x8e>
     33e:	82 30       	cpi	r24, 0x02	; 2
     340:	91 05       	cpc	r25, r1
     342:	c1 f0       	breq	.+48     	; 0x374 <TURN_RELAY_ON_HANDLE+0x66>
     344:	83 30       	cpi	r24, 0x03	; 3
     346:	91 05       	cpc	r25, r1
     348:	f9 f0       	breq	.+62     	; 0x388 <TURN_RELAY_ON_HANDLE+0x7a>
     34a:	28 c0       	rjmp	.+80     	; 0x39c <TURN_RELAY_ON_HANDLE+0x8e>
		case 0:
		bit_set(PORTD, BIT(3));
     34c:	8b e2       	ldi	r24, 0x2B	; 43
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	2b e2       	ldi	r18, 0x2B	; 43
     352:	30 e0       	ldi	r19, 0x00	; 0
     354:	f9 01       	movw	r30, r18
     356:	20 81       	ld	r18, Z
     358:	28 60       	ori	r18, 0x08	; 8
     35a:	fc 01       	movw	r30, r24
     35c:	20 83       	st	Z, r18
		break;
     35e:	1e c0       	rjmp	.+60     	; 0x39c <TURN_RELAY_ON_HANDLE+0x8e>
		case 1:
		bit_set(PORTD, BIT(2));
     360:	8b e2       	ldi	r24, 0x2B	; 43
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	2b e2       	ldi	r18, 0x2B	; 43
     366:	30 e0       	ldi	r19, 0x00	; 0
     368:	f9 01       	movw	r30, r18
     36a:	20 81       	ld	r18, Z
     36c:	24 60       	ori	r18, 0x04	; 4
     36e:	fc 01       	movw	r30, r24
     370:	20 83       	st	Z, r18
		break;
     372:	14 c0       	rjmp	.+40     	; 0x39c <TURN_RELAY_ON_HANDLE+0x8e>
		case 2:
		bit_set(PORTD, BIT(6));
     374:	8b e2       	ldi	r24, 0x2B	; 43
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	2b e2       	ldi	r18, 0x2B	; 43
     37a:	30 e0       	ldi	r19, 0x00	; 0
     37c:	f9 01       	movw	r30, r18
     37e:	20 81       	ld	r18, Z
     380:	20 64       	ori	r18, 0x40	; 64
     382:	fc 01       	movw	r30, r24
     384:	20 83       	st	Z, r18
		break;
     386:	0a c0       	rjmp	.+20     	; 0x39c <TURN_RELAY_ON_HANDLE+0x8e>
		case 3:
		bit_set(PORTD, BIT(5));
     388:	8b e2       	ldi	r24, 0x2B	; 43
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	2b e2       	ldi	r18, 0x2B	; 43
     38e:	30 e0       	ldi	r19, 0x00	; 0
     390:	f9 01       	movw	r30, r18
     392:	20 81       	ld	r18, Z
     394:	20 62       	ori	r18, 0x20	; 32
     396:	fc 01       	movw	r30, r24
     398:	20 83       	st	Z, r18
		break;
     39a:	00 00       	nop
	}
}
     39c:	0f 90       	pop	r0
     39e:	cf 91       	pop	r28
     3a0:	df 91       	pop	r29
     3a2:	08 95       	ret

000003a4 <TURN_RELAY_OFF_HANDLE>:

void TURN_RELAY_OFF_HANDLE() {
     3a4:	df 93       	push	r29
     3a6:	cf 93       	push	r28
     3a8:	0f 92       	push	r0
     3aa:	cd b7       	in	r28, 0x3d	; 61
     3ac:	de b7       	in	r29, 0x3e	; 62
	uint8_t relayIndex =  atoi(parameter[0]);
     3ae:	80 91 8e 01 	lds	r24, 0x018E
     3b2:	90 91 8f 01 	lds	r25, 0x018F
     3b6:	0e 94 2f 0b 	call	0x165e	; 0x165e <atoi>
     3ba:	89 83       	std	Y+1, r24	; 0x01
	switch (relayIndex) {
     3bc:	89 81       	ldd	r24, Y+1	; 0x01
     3be:	88 2f       	mov	r24, r24
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	81 30       	cpi	r24, 0x01	; 1
     3c4:	91 05       	cpc	r25, r1
     3c6:	b9 f0       	breq	.+46     	; 0x3f6 <TURN_RELAY_OFF_HANDLE+0x52>
     3c8:	82 30       	cpi	r24, 0x02	; 2
     3ca:	91 05       	cpc	r25, r1
     3cc:	1c f4       	brge	.+6      	; 0x3d4 <TURN_RELAY_OFF_HANDLE+0x30>
     3ce:	00 97       	sbiw	r24, 0x00	; 0
     3d0:	41 f0       	breq	.+16     	; 0x3e2 <TURN_RELAY_OFF_HANDLE+0x3e>
     3d2:	2f c0       	rjmp	.+94     	; 0x432 <TURN_RELAY_OFF_HANDLE+0x8e>
     3d4:	82 30       	cpi	r24, 0x02	; 2
     3d6:	91 05       	cpc	r25, r1
     3d8:	c1 f0       	breq	.+48     	; 0x40a <TURN_RELAY_OFF_HANDLE+0x66>
     3da:	83 30       	cpi	r24, 0x03	; 3
     3dc:	91 05       	cpc	r25, r1
     3de:	f9 f0       	breq	.+62     	; 0x41e <TURN_RELAY_OFF_HANDLE+0x7a>
     3e0:	28 c0       	rjmp	.+80     	; 0x432 <TURN_RELAY_OFF_HANDLE+0x8e>
		case 0:
		bit_clear(PORTD, BIT(3));
     3e2:	8b e2       	ldi	r24, 0x2B	; 43
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	2b e2       	ldi	r18, 0x2B	; 43
     3e8:	30 e0       	ldi	r19, 0x00	; 0
     3ea:	f9 01       	movw	r30, r18
     3ec:	20 81       	ld	r18, Z
     3ee:	27 7f       	andi	r18, 0xF7	; 247
     3f0:	fc 01       	movw	r30, r24
     3f2:	20 83       	st	Z, r18
		break;
     3f4:	1e c0       	rjmp	.+60     	; 0x432 <TURN_RELAY_OFF_HANDLE+0x8e>
		case 1:
		bit_clear(PORTD, BIT(2));
     3f6:	8b e2       	ldi	r24, 0x2B	; 43
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	2b e2       	ldi	r18, 0x2B	; 43
     3fc:	30 e0       	ldi	r19, 0x00	; 0
     3fe:	f9 01       	movw	r30, r18
     400:	20 81       	ld	r18, Z
     402:	2b 7f       	andi	r18, 0xFB	; 251
     404:	fc 01       	movw	r30, r24
     406:	20 83       	st	Z, r18
		break;
     408:	14 c0       	rjmp	.+40     	; 0x432 <TURN_RELAY_OFF_HANDLE+0x8e>
		case 2:
		bit_clear(PORTD, BIT(6));
     40a:	8b e2       	ldi	r24, 0x2B	; 43
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	2b e2       	ldi	r18, 0x2B	; 43
     410:	30 e0       	ldi	r19, 0x00	; 0
     412:	f9 01       	movw	r30, r18
     414:	20 81       	ld	r18, Z
     416:	2f 7b       	andi	r18, 0xBF	; 191
     418:	fc 01       	movw	r30, r24
     41a:	20 83       	st	Z, r18
		break;
     41c:	0a c0       	rjmp	.+20     	; 0x432 <TURN_RELAY_OFF_HANDLE+0x8e>
		case 3:
		bit_clear(PORTD, BIT(5));
     41e:	8b e2       	ldi	r24, 0x2B	; 43
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	2b e2       	ldi	r18, 0x2B	; 43
     424:	30 e0       	ldi	r19, 0x00	; 0
     426:	f9 01       	movw	r30, r18
     428:	20 81       	ld	r18, Z
     42a:	2f 7d       	andi	r18, 0xDF	; 223
     42c:	fc 01       	movw	r30, r24
     42e:	20 83       	st	Z, r18
		break;
     430:	00 00       	nop
	}
}
     432:	0f 90       	pop	r0
     434:	cf 91       	pop	r28
     436:	df 91       	pop	r29
     438:	08 95       	ret

0000043a <BUILT_IN_LED_TEST_HANDLE>:

void BUILT_IN_LED_TEST_HANDLE(){
     43a:	0f 93       	push	r16
     43c:	1f 93       	push	r17
     43e:	df 93       	push	r29
     440:	cf 93       	push	r28
     442:	cd b7       	in	r28, 0x3d	; 61
     444:	de b7       	in	r29, 0x3e	; 62
     446:	2f 97       	sbiw	r28, 0x0f	; 15
     448:	0f b6       	in	r0, 0x3f	; 63
     44a:	f8 94       	cli
     44c:	de bf       	out	0x3e, r29	; 62
     44e:	0f be       	out	0x3f, r0	; 63
     450:	cd bf       	out	0x3d, r28	; 61
	for (uint8_t x = 0; x < 8; x++) {
     452:	19 82       	std	Y+1, r1	; 0x01
     454:	97 c0       	rjmp	.+302    	; 0x584 <BUILT_IN_LED_TEST_HANDLE+0x14a>
		bit_flip(PORTD, BIT(7));
     456:	8b e2       	ldi	r24, 0x2B	; 43
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	2b e2       	ldi	r18, 0x2B	; 43
     45c:	30 e0       	ldi	r19, 0x00	; 0
     45e:	f9 01       	movw	r30, r18
     460:	30 81       	ld	r19, Z
     462:	20 e8       	ldi	r18, 0x80	; 128
     464:	23 27       	eor	r18, r19
     466:	fc 01       	movw	r30, r24
     468:	20 83       	st	Z, r18
		bit_flip(PORTB, BIT(0));
     46a:	85 e2       	ldi	r24, 0x25	; 37
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	25 e2       	ldi	r18, 0x25	; 37
     470:	30 e0       	ldi	r19, 0x00	; 0
     472:	f9 01       	movw	r30, r18
     474:	30 81       	ld	r19, Z
     476:	21 e0       	ldi	r18, 0x01	; 1
     478:	23 27       	eor	r18, r19
     47a:	fc 01       	movw	r30, r24
     47c:	20 83       	st	Z, r18
     47e:	80 e0       	ldi	r24, 0x00	; 0
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	aa e7       	ldi	r26, 0x7A	; 122
     484:	b3 e4       	ldi	r27, 0x43	; 67
     486:	8a 83       	std	Y+2, r24	; 0x02
     488:	9b 83       	std	Y+3, r25	; 0x03
     48a:	ac 83       	std	Y+4, r26	; 0x04
     48c:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     48e:	6a 81       	ldd	r22, Y+2	; 0x02
     490:	7b 81       	ldd	r23, Y+3	; 0x03
     492:	8c 81       	ldd	r24, Y+4	; 0x04
     494:	9d 81       	ldd	r25, Y+5	; 0x05
     496:	20 e0       	ldi	r18, 0x00	; 0
     498:	30 e0       	ldi	r19, 0x00	; 0
     49a:	4a e7       	ldi	r20, 0x7A	; 122
     49c:	55 e4       	ldi	r21, 0x45	; 69
     49e:	0e 94 4d 09 	call	0x129a	; 0x129a <__mulsf3>
     4a2:	dc 01       	movw	r26, r24
     4a4:	cb 01       	movw	r24, r22
     4a6:	8e 83       	std	Y+6, r24	; 0x06
     4a8:	9f 83       	std	Y+7, r25	; 0x07
     4aa:	a8 87       	std	Y+8, r26	; 0x08
     4ac:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     4ae:	11 e0       	ldi	r17, 0x01	; 1
     4b0:	6e 81       	ldd	r22, Y+6	; 0x06
     4b2:	7f 81       	ldd	r23, Y+7	; 0x07
     4b4:	88 85       	ldd	r24, Y+8	; 0x08
     4b6:	99 85       	ldd	r25, Y+9	; 0x09
     4b8:	20 e0       	ldi	r18, 0x00	; 0
     4ba:	30 e0       	ldi	r19, 0x00	; 0
     4bc:	40 e8       	ldi	r20, 0x80	; 128
     4be:	5f e3       	ldi	r21, 0x3F	; 63
     4c0:	0e 94 cc 08 	call	0x1198	; 0x1198 <__cmpsf2>
     4c4:	88 23       	and	r24, r24
     4c6:	0c f0       	brlt	.+2      	; 0x4ca <BUILT_IN_LED_TEST_HANDLE+0x90>
     4c8:	10 e0       	ldi	r17, 0x00	; 0
     4ca:	11 23       	and	r17, r17
     4cc:	29 f0       	breq	.+10     	; 0x4d8 <BUILT_IN_LED_TEST_HANDLE+0x9e>
		__ticks = 1;
     4ce:	81 e0       	ldi	r24, 0x01	; 1
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	9b 87       	std	Y+11, r25	; 0x0b
     4d4:	8a 87       	std	Y+10, r24	; 0x0a
     4d6:	46 c0       	rjmp	.+140    	; 0x564 <BUILT_IN_LED_TEST_HANDLE+0x12a>
	else if (__tmp > 65535)
     4d8:	11 e0       	ldi	r17, 0x01	; 1
     4da:	6e 81       	ldd	r22, Y+6	; 0x06
     4dc:	7f 81       	ldd	r23, Y+7	; 0x07
     4de:	88 85       	ldd	r24, Y+8	; 0x08
     4e0:	99 85       	ldd	r25, Y+9	; 0x09
     4e2:	20 e0       	ldi	r18, 0x00	; 0
     4e4:	3f ef       	ldi	r19, 0xFF	; 255
     4e6:	4f e7       	ldi	r20, 0x7F	; 127
     4e8:	57 e4       	ldi	r21, 0x47	; 71
     4ea:	0e 94 49 09 	call	0x1292	; 0x1292 <__gesf2>
     4ee:	18 16       	cp	r1, r24
     4f0:	0c f0       	brlt	.+2      	; 0x4f4 <BUILT_IN_LED_TEST_HANDLE+0xba>
     4f2:	10 e0       	ldi	r17, 0x00	; 0
     4f4:	11 23       	and	r17, r17
     4f6:	61 f1       	breq	.+88     	; 0x550 <BUILT_IN_LED_TEST_HANDLE+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4f8:	6a 81       	ldd	r22, Y+2	; 0x02
     4fa:	7b 81       	ldd	r23, Y+3	; 0x03
     4fc:	8c 81       	ldd	r24, Y+4	; 0x04
     4fe:	9d 81       	ldd	r25, Y+5	; 0x05
     500:	20 e0       	ldi	r18, 0x00	; 0
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	40 e2       	ldi	r20, 0x20	; 32
     506:	51 e4       	ldi	r21, 0x41	; 65
     508:	0e 94 4d 09 	call	0x129a	; 0x129a <__mulsf3>
     50c:	dc 01       	movw	r26, r24
     50e:	cb 01       	movw	r24, r22
     510:	bc 01       	movw	r22, r24
     512:	cd 01       	movw	r24, r26
     514:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <__fixunssfsi>
     518:	dc 01       	movw	r26, r24
     51a:	cb 01       	movw	r24, r22
     51c:	9b 87       	std	Y+11, r25	; 0x0b
     51e:	8a 87       	std	Y+10, r24	; 0x0a
     520:	12 c0       	rjmp	.+36     	; 0x546 <BUILT_IN_LED_TEST_HANDLE+0x10c>
     522:	80 e9       	ldi	r24, 0x90	; 144
     524:	91 e0       	ldi	r25, 0x01	; 1
     526:	9d 87       	std	Y+13, r25	; 0x0d
     528:	8c 87       	std	Y+12, r24	; 0x0c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     52a:	8c 85       	ldd	r24, Y+12	; 0x0c
     52c:	9d 85       	ldd	r25, Y+13	; 0x0d
     52e:	8c 01       	movw	r16, r24
     530:	c8 01       	movw	r24, r16
     532:	01 97       	sbiw	r24, 0x01	; 1
     534:	f1 f7       	brne	.-4      	; 0x532 <BUILT_IN_LED_TEST_HANDLE+0xf8>
     536:	8c 01       	movw	r16, r24
     538:	1d 87       	std	Y+13, r17	; 0x0d
     53a:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     53c:	8a 85       	ldd	r24, Y+10	; 0x0a
     53e:	9b 85       	ldd	r25, Y+11	; 0x0b
     540:	01 97       	sbiw	r24, 0x01	; 1
     542:	9b 87       	std	Y+11, r25	; 0x0b
     544:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     546:	8a 85       	ldd	r24, Y+10	; 0x0a
     548:	9b 85       	ldd	r25, Y+11	; 0x0b
     54a:	00 97       	sbiw	r24, 0x00	; 0
     54c:	51 f7       	brne	.-44     	; 0x522 <BUILT_IN_LED_TEST_HANDLE+0xe8>
     54e:	17 c0       	rjmp	.+46     	; 0x57e <BUILT_IN_LED_TEST_HANDLE+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     550:	6e 81       	ldd	r22, Y+6	; 0x06
     552:	7f 81       	ldd	r23, Y+7	; 0x07
     554:	88 85       	ldd	r24, Y+8	; 0x08
     556:	99 85       	ldd	r25, Y+9	; 0x09
     558:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <__fixunssfsi>
     55c:	dc 01       	movw	r26, r24
     55e:	cb 01       	movw	r24, r22
     560:	9b 87       	std	Y+11, r25	; 0x0b
     562:	8a 87       	std	Y+10, r24	; 0x0a
     564:	8a 85       	ldd	r24, Y+10	; 0x0a
     566:	9b 85       	ldd	r25, Y+11	; 0x0b
     568:	9f 87       	std	Y+15, r25	; 0x0f
     56a:	8e 87       	std	Y+14, r24	; 0x0e
     56c:	8e 85       	ldd	r24, Y+14	; 0x0e
     56e:	9f 85       	ldd	r25, Y+15	; 0x0f
     570:	8c 01       	movw	r16, r24
     572:	f8 01       	movw	r30, r16
     574:	31 97       	sbiw	r30, 0x01	; 1
     576:	f1 f7       	brne	.-4      	; 0x574 <BUILT_IN_LED_TEST_HANDLE+0x13a>
     578:	8f 01       	movw	r16, r30
     57a:	1f 87       	std	Y+15, r17	; 0x0f
     57c:	0e 87       	std	Y+14, r16	; 0x0e
		break;
	}
}

void BUILT_IN_LED_TEST_HANDLE(){
	for (uint8_t x = 0; x < 8; x++) {
     57e:	89 81       	ldd	r24, Y+1	; 0x01
     580:	8f 5f       	subi	r24, 0xFF	; 255
     582:	89 83       	std	Y+1, r24	; 0x01
     584:	89 81       	ldd	r24, Y+1	; 0x01
     586:	88 30       	cpi	r24, 0x08	; 8
     588:	08 f4       	brcc	.+2      	; 0x58c <BUILT_IN_LED_TEST_HANDLE+0x152>
     58a:	65 cf       	rjmp	.-310    	; 0x456 <BUILT_IN_LED_TEST_HANDLE+0x1c>
		bit_flip(PORTD, BIT(7));
		bit_flip(PORTB, BIT(0));
		_delay_ms(250);
	}
	bit_clear(PORTD, BIT(7));
     58c:	8b e2       	ldi	r24, 0x2B	; 43
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	2b e2       	ldi	r18, 0x2B	; 43
     592:	30 e0       	ldi	r19, 0x00	; 0
     594:	f9 01       	movw	r30, r18
     596:	20 81       	ld	r18, Z
     598:	2f 77       	andi	r18, 0x7F	; 127
     59a:	fc 01       	movw	r30, r24
     59c:	20 83       	st	Z, r18
	bit_clear(PORTB, BIT(0));
     59e:	85 e2       	ldi	r24, 0x25	; 37
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	25 e2       	ldi	r18, 0x25	; 37
     5a4:	30 e0       	ldi	r19, 0x00	; 0
     5a6:	f9 01       	movw	r30, r18
     5a8:	20 81       	ld	r18, Z
     5aa:	2e 7f       	andi	r18, 0xFE	; 254
     5ac:	fc 01       	movw	r30, r24
     5ae:	20 83       	st	Z, r18
}
     5b0:	2f 96       	adiw	r28, 0x0f	; 15
     5b2:	0f b6       	in	r0, 0x3f	; 63
     5b4:	f8 94       	cli
     5b6:	de bf       	out	0x3e, r29	; 62
     5b8:	0f be       	out	0x3f, r0	; 63
     5ba:	cd bf       	out	0x3d, r28	; 61
     5bc:	cf 91       	pop	r28
     5be:	df 91       	pop	r29
     5c0:	1f 91       	pop	r17
     5c2:	0f 91       	pop	r16
     5c4:	08 95       	ret

000005c6 <TURN_EVERYTHING_ON_HANDLE>:

void TURN_EVERYTHING_ON_HANDLE(){
     5c6:	df 93       	push	r29
     5c8:	cf 93       	push	r28
     5ca:	cd b7       	in	r28, 0x3d	; 61
     5cc:	de b7       	in	r29, 0x3e	; 62
	bit_set(PORTD, BIT(3));
     5ce:	8b e2       	ldi	r24, 0x2B	; 43
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	2b e2       	ldi	r18, 0x2B	; 43
     5d4:	30 e0       	ldi	r19, 0x00	; 0
     5d6:	f9 01       	movw	r30, r18
     5d8:	20 81       	ld	r18, Z
     5da:	28 60       	ori	r18, 0x08	; 8
     5dc:	fc 01       	movw	r30, r24
     5de:	20 83       	st	Z, r18
	bit_set(PORTD, BIT(2));
     5e0:	8b e2       	ldi	r24, 0x2B	; 43
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	2b e2       	ldi	r18, 0x2B	; 43
     5e6:	30 e0       	ldi	r19, 0x00	; 0
     5e8:	f9 01       	movw	r30, r18
     5ea:	20 81       	ld	r18, Z
     5ec:	24 60       	ori	r18, 0x04	; 4
     5ee:	fc 01       	movw	r30, r24
     5f0:	20 83       	st	Z, r18
	bit_set(PORTD, BIT(6));
     5f2:	8b e2       	ldi	r24, 0x2B	; 43
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	2b e2       	ldi	r18, 0x2B	; 43
     5f8:	30 e0       	ldi	r19, 0x00	; 0
     5fa:	f9 01       	movw	r30, r18
     5fc:	20 81       	ld	r18, Z
     5fe:	20 64       	ori	r18, 0x40	; 64
     600:	fc 01       	movw	r30, r24
     602:	20 83       	st	Z, r18
	bit_set(PORTD, BIT(5));
     604:	8b e2       	ldi	r24, 0x2B	; 43
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	2b e2       	ldi	r18, 0x2B	; 43
     60a:	30 e0       	ldi	r19, 0x00	; 0
     60c:	f9 01       	movw	r30, r18
     60e:	20 81       	ld	r18, Z
     610:	20 62       	ori	r18, 0x20	; 32
     612:	fc 01       	movw	r30, r24
     614:	20 83       	st	Z, r18
}
     616:	cf 91       	pop	r28
     618:	df 91       	pop	r29
     61a:	08 95       	ret

0000061c <TURN_EVERYTHING_OFF_HANDLE>:

void TURN_EVERYTHING_OFF_HANDLE(){
     61c:	df 93       	push	r29
     61e:	cf 93       	push	r28
     620:	cd b7       	in	r28, 0x3d	; 61
     622:	de b7       	in	r29, 0x3e	; 62
	bit_clear(PORTD, BIT(3));
     624:	8b e2       	ldi	r24, 0x2B	; 43
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	2b e2       	ldi	r18, 0x2B	; 43
     62a:	30 e0       	ldi	r19, 0x00	; 0
     62c:	f9 01       	movw	r30, r18
     62e:	20 81       	ld	r18, Z
     630:	27 7f       	andi	r18, 0xF7	; 247
     632:	fc 01       	movw	r30, r24
     634:	20 83       	st	Z, r18
	bit_clear(PORTD, BIT(2));
     636:	8b e2       	ldi	r24, 0x2B	; 43
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	2b e2       	ldi	r18, 0x2B	; 43
     63c:	30 e0       	ldi	r19, 0x00	; 0
     63e:	f9 01       	movw	r30, r18
     640:	20 81       	ld	r18, Z
     642:	2b 7f       	andi	r18, 0xFB	; 251
     644:	fc 01       	movw	r30, r24
     646:	20 83       	st	Z, r18
	bit_clear(PORTD, BIT(6));
     648:	8b e2       	ldi	r24, 0x2B	; 43
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	2b e2       	ldi	r18, 0x2B	; 43
     64e:	30 e0       	ldi	r19, 0x00	; 0
     650:	f9 01       	movw	r30, r18
     652:	20 81       	ld	r18, Z
     654:	2f 7b       	andi	r18, 0xBF	; 191
     656:	fc 01       	movw	r30, r24
     658:	20 83       	st	Z, r18
	bit_clear(PORTD, BIT(5));
     65a:	8b e2       	ldi	r24, 0x2B	; 43
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	2b e2       	ldi	r18, 0x2B	; 43
     660:	30 e0       	ldi	r19, 0x00	; 0
     662:	f9 01       	movw	r30, r18
     664:	20 81       	ld	r18, Z
     666:	2f 7d       	andi	r18, 0xDF	; 223
     668:	fc 01       	movw	r30, r24
     66a:	20 83       	st	Z, r18
}
     66c:	cf 91       	pop	r28
     66e:	df 91       	pop	r29
     670:	08 95       	ret

00000672 <main>:
#include "nrf24.h"

void initIO();

int main(void)
{
     672:	df 93       	push	r29
     674:	cf 93       	push	r28
     676:	00 d0       	rcall	.+0      	; 0x678 <main+0x6>
     678:	00 d0       	rcall	.+0      	; 0x67a <main+0x8>
     67a:	00 d0       	rcall	.+0      	; 0x67c <main+0xa>
     67c:	cd b7       	in	r28, 0x3d	; 61
     67e:	de b7       	in	r29, 0x3e	; 62
	sei();	// Interrupts on
     680:	78 94       	sei
    initIO();
     682:	0e 94 86 03 	call	0x70c	; 0x70c <initIO>
	nrf24_initRF_SAFE(MAIN_BOARD, RECEIVE);	// CONNECTION TO MAIN BOARD : GENERAL RF CHANNEL 112
     686:	80 e0       	ldi	r24, 0x00	; 0
     688:	60 e0       	ldi	r22, 0x00	; 0
     68a:	0e 94 79 08 	call	0x10f2	; 0x10f2 <nrf24_initRF_SAFE>
     68e:	01 c0       	rjmp	.+2      	; 0x692 <main+0x20>
			if (success) { currentCommand.handlerFunction(); }
			bit_clear(PORTB, BIT(0));
		}
		
		if (nrf24_checkAvailability()==false) { nrf24_initRF_SAFE(MAIN_BOARD, RECEIVE); }
    }
     690:	00 00       	nop
    initIO();
	nrf24_initRF_SAFE(MAIN_BOARD, RECEIVE);	// CONNECTION TO MAIN BOARD : GENERAL RF CHANNEL 112
	
    while (1) 
    {
		if(nrf24_dataReady())
     692:	0e 94 08 06 	call	0xc10	; 0xc10 <nrf24_dataReady>
     696:	88 23       	and	r24, r24
     698:	69 f1       	breq	.+90     	; 0x6f4 <main+0x82>
		{
			bit_set(PORTB, BIT(0));
     69a:	85 e2       	ldi	r24, 0x25	; 37
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	25 e2       	ldi	r18, 0x25	; 37
     6a0:	30 e0       	ldi	r19, 0x00	; 0
     6a2:	f9 01       	movw	r30, r18
     6a4:	20 81       	ld	r18, Z
     6a6:	21 60       	ori	r18, 0x01	; 1
     6a8:	fc 01       	movw	r30, r24
     6aa:	20 83       	st	Z, r18
			nrf24_getData(command_buffer);
     6ac:	80 91 98 01 	lds	r24, 0x0198
     6b0:	90 91 99 01 	lds	r25, 0x0199
     6b4:	0e 94 37 06 	call	0xc6e	; 0xc6e <nrf24_getData>
			commandType currentCommand;
			bool success = decomposeCommand(command_buffer, &currentCommand, parameter);
     6b8:	80 91 98 01 	lds	r24, 0x0198
     6bc:	90 91 99 01 	lds	r25, 0x0199
     6c0:	ae 01       	movw	r20, r28
     6c2:	4e 5f       	subi	r20, 0xFE	; 254
     6c4:	5f 4f       	sbci	r21, 0xFF	; 255
     6c6:	2e e8       	ldi	r18, 0x8E	; 142
     6c8:	31 e0       	ldi	r19, 0x01	; 1
     6ca:	ba 01       	movw	r22, r20
     6cc:	a9 01       	movw	r20, r18
     6ce:	0e 94 a6 00 	call	0x14c	; 0x14c <decomposeCommand>
     6d2:	89 83       	std	Y+1, r24	; 0x01
			if (success) { currentCommand.handlerFunction(); }
     6d4:	89 81       	ldd	r24, Y+1	; 0x01
     6d6:	88 23       	and	r24, r24
     6d8:	21 f0       	breq	.+8      	; 0x6e2 <main+0x70>
     6da:	8d 81       	ldd	r24, Y+5	; 0x05
     6dc:	9e 81       	ldd	r25, Y+6	; 0x06
     6de:	fc 01       	movw	r30, r24
     6e0:	09 95       	icall
			bit_clear(PORTB, BIT(0));
     6e2:	85 e2       	ldi	r24, 0x25	; 37
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	25 e2       	ldi	r18, 0x25	; 37
     6e8:	30 e0       	ldi	r19, 0x00	; 0
     6ea:	f9 01       	movw	r30, r18
     6ec:	20 81       	ld	r18, Z
     6ee:	2e 7f       	andi	r18, 0xFE	; 254
     6f0:	fc 01       	movw	r30, r24
     6f2:	20 83       	st	Z, r18
		}
		
		if (nrf24_checkAvailability()==false) { nrf24_initRF_SAFE(MAIN_BOARD, RECEIVE); }
     6f4:	0e 94 8f 04 	call	0x91e	; 0x91e <nrf24_checkAvailability>
     6f8:	98 2f       	mov	r25, r24
     6fa:	81 e0       	ldi	r24, 0x01	; 1
     6fc:	89 27       	eor	r24, r25
     6fe:	88 23       	and	r24, r24
     700:	39 f2       	breq	.-114    	; 0x690 <main+0x1e>
     702:	80 e0       	ldi	r24, 0x00	; 0
     704:	60 e0       	ldi	r22, 0x00	; 0
     706:	0e 94 79 08 	call	0x10f2	; 0x10f2 <nrf24_initRF_SAFE>
    }
     70a:	c3 cf       	rjmp	.-122    	; 0x692 <main+0x20>

0000070c <initIO>:
}


void initIO(){
     70c:	df 93       	push	r29
     70e:	cf 93       	push	r28
     710:	cd b7       	in	r28, 0x3d	; 61
     712:	de b7       	in	r29, 0x3e	; 62
			CSN	 : PC1						|	OUTPUT
			MISO : PD0 (MSPIM MISO ATMEGA)	|	INPUT
			MOSI : PD1 (MSPIM MOSI ATMEGA)	|	OUTPUT
			SCK	 : PD4 (MSPIM XCK)			|	OUTPUT
	*/ 
	DDRD = 0b11111110;
     714:	8a e2       	ldi	r24, 0x2A	; 42
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	2e ef       	ldi	r18, 0xFE	; 254
     71a:	fc 01       	movw	r30, r24
     71c:	20 83       	st	Z, r18
	DDRB = 0b00101001;
     71e:	84 e2       	ldi	r24, 0x24	; 36
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	29 e2       	ldi	r18, 0x29	; 41
     724:	fc 01       	movw	r30, r24
     726:	20 83       	st	Z, r18
	DDRC = 0b11011111;
     728:	87 e2       	ldi	r24, 0x27	; 39
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	2f ed       	ldi	r18, 0xDF	; 223
     72e:	fc 01       	movw	r30, r24
     730:	20 83       	st	Z, r18
}
     732:	cf 91       	pop	r28
     734:	df 91       	pop	r29
     736:	08 95       	ret

00000738 <nrf24_init>:
uint8_t GENERAL_RF_CHANNEL = 112;



void nrf24_init() 
{
     738:	df 93       	push	r29
     73a:	cf 93       	push	r28
     73c:	cd b7       	in	r28, 0x3d	; 61
     73e:	de b7       	in	r29, 0x3e	; 62
    nrf24_setupPins();
     740:	0e 94 b9 07 	call	0xf72	; 0xf72 <nrf24_setupPins>
    nrf24_ce_digitalWrite(LOW);
     744:	80 e0       	ldi	r24, 0x00	; 0
     746:	0e 94 ed 07 	call	0xfda	; 0xfda <nrf24_ce_digitalWrite>
    nrf24_csn_digitalWrite(HIGH);    
     74a:	81 e0       	ldi	r24, 0x01	; 1
     74c:	0e 94 0d 08 	call	0x101a	; 0x101a <nrf24_csn_digitalWrite>
}
     750:	cf 91       	pop	r28
     752:	df 91       	pop	r29
     754:	08 95       	ret

00000756 <nrf24_config>:

void nrf24_config(uint8_t channel, uint8_t pay_length)
{
     756:	df 93       	push	r29
     758:	cf 93       	push	r28
     75a:	00 d0       	rcall	.+0      	; 0x75c <nrf24_config+0x6>
     75c:	cd b7       	in	r28, 0x3d	; 61
     75e:	de b7       	in	r29, 0x3e	; 62
     760:	89 83       	std	Y+1, r24	; 0x01
     762:	6a 83       	std	Y+2, r22	; 0x02
	/* Use static payload length ... */
	payload_len = pay_length;
     764:	8a 81       	ldd	r24, Y+2	; 0x02
     766:	80 93 9b 01 	sts	0x019B, r24
	selectedChannel = channel;
     76a:	89 81       	ldd	r24, Y+1	; 0x01
     76c:	80 93 9c 01 	sts	0x019C, r24
	// Set RF channel
	nrf24_configRegister(RF_CH,channel);
     770:	85 e0       	ldi	r24, 0x05	; 5
     772:	69 81       	ldd	r22, Y+1	; 0x01
     774:	0e 94 3c 07 	call	0xe78	; 0xe78 <nrf24_configRegister>
	// Set length of incoming payload
	nrf24_configRegister(RX_PW_P0, 0x00); // Auto-ACK pipe ...
     778:	81 e1       	ldi	r24, 0x11	; 17
     77a:	60 e0       	ldi	r22, 0x00	; 0
     77c:	0e 94 3c 07 	call	0xe78	; 0xe78 <nrf24_configRegister>
	nrf24_configRegister(RX_PW_P1, payload_len); // Data payload pipe
     780:	90 91 9b 01 	lds	r25, 0x019B
     784:	82 e1       	ldi	r24, 0x12	; 18
     786:	69 2f       	mov	r22, r25
     788:	0e 94 3c 07 	call	0xe78	; 0xe78 <nrf24_configRegister>
	nrf24_configRegister(RX_PW_P2, 0x00); // Pipe not used
     78c:	83 e1       	ldi	r24, 0x13	; 19
     78e:	60 e0       	ldi	r22, 0x00	; 0
     790:	0e 94 3c 07 	call	0xe78	; 0xe78 <nrf24_configRegister>
	nrf24_configRegister(RX_PW_P3, 0x00); // Pipe not used
     794:	84 e1       	ldi	r24, 0x14	; 20
     796:	60 e0       	ldi	r22, 0x00	; 0
     798:	0e 94 3c 07 	call	0xe78	; 0xe78 <nrf24_configRegister>
	nrf24_configRegister(RX_PW_P4, 0x00); // Pipe not used
     79c:	85 e1       	ldi	r24, 0x15	; 21
     79e:	60 e0       	ldi	r22, 0x00	; 0
     7a0:	0e 94 3c 07 	call	0xe78	; 0xe78 <nrf24_configRegister>
	nrf24_configRegister(RX_PW_P5, 0x00); // Pipe not used
     7a4:	86 e1       	ldi	r24, 0x16	; 22
     7a6:	60 e0       	ldi	r22, 0x00	; 0
     7a8:	0e 94 3c 07 	call	0xe78	; 0xe78 <nrf24_configRegister>
	// 1 Mbps, TX gain: 0dbm
	nrf24_configRegister(RF_SETUP, (0<<RF_DR)|((0x03)<<RF_PWR));
     7ac:	86 e0       	ldi	r24, 0x06	; 6
     7ae:	66 e0       	ldi	r22, 0x06	; 6
     7b0:	0e 94 3c 07 	call	0xe78	; 0xe78 <nrf24_configRegister>
	// CRC enable, 1 byte CRC length
	nrf24_configRegister(CONFIG,nrf24_CONFIG);
     7b4:	80 e0       	ldi	r24, 0x00	; 0
     7b6:	68 e0       	ldi	r22, 0x08	; 8
     7b8:	0e 94 3c 07 	call	0xe78	; 0xe78 <nrf24_configRegister>
	// Auto Acknowledgment
	nrf24_configRegister(EN_AA,(1<<ENAA_P0)|(1<<ENAA_P1)|(0<<ENAA_P2)|(0<<ENAA_P3)|(0<<ENAA_P4)|(0<<ENAA_P5));
     7bc:	81 e0       	ldi	r24, 0x01	; 1
     7be:	63 e0       	ldi	r22, 0x03	; 3
     7c0:	0e 94 3c 07 	call	0xe78	; 0xe78 <nrf24_configRegister>
	// Enable RX addresses
	nrf24_configRegister(EN_RXADDR,(1<<ERX_P0)|(1<<ERX_P1)|(0<<ERX_P2)|(0<<ERX_P3)|(0<<ERX_P4)|(0<<ERX_P5));
     7c4:	82 e0       	ldi	r24, 0x02	; 2
     7c6:	63 e0       	ldi	r22, 0x03	; 3
     7c8:	0e 94 3c 07 	call	0xe78	; 0xe78 <nrf24_configRegister>
	// Auto retransmit delay: 1000 us and Up to 15 retransmit trials
	nrf24_configRegister(SETUP_RETR,(0x04<<ARD)|(0x0F<<ARC));
     7cc:	84 e0       	ldi	r24, 0x04	; 4
     7ce:	6f e4       	ldi	r22, 0x4F	; 79
     7d0:	0e 94 3c 07 	call	0xe78	; 0xe78 <nrf24_configRegister>
	// Dynamic length configurations: No dynamic length
	nrf24_configRegister(DYNPD,(0<<DPL_P0)|(0<<DPL_P1)|(0<<DPL_P2)|(0<<DPL_P3)|(0<<DPL_P4)|(0<<DPL_P5));
     7d4:	8c e1       	ldi	r24, 0x1C	; 28
     7d6:	60 e0       	ldi	r22, 0x00	; 0
     7d8:	0e 94 3c 07 	call	0xe78	; 0xe78 <nrf24_configRegister>

}
     7dc:	0f 90       	pop	r0
     7de:	0f 90       	pop	r0
     7e0:	cf 91       	pop	r28
     7e2:	df 91       	pop	r29
     7e4:	08 95       	ret

000007e6 <nrf24_checkConfig>:

bool nrf24_checkConfig(){
     7e6:	df 93       	push	r29
     7e8:	cf 93       	push	r28
     7ea:	cd b7       	in	r28, 0x3d	; 61
     7ec:	de b7       	in	r29, 0x3e	; 62
	// Check all registers
	if (nrf24_checkRegister(RF_CH, selectedChannel,1)==false) return false;
     7ee:	90 91 9c 01 	lds	r25, 0x019C
     7f2:	85 e0       	ldi	r24, 0x05	; 5
     7f4:	69 2f       	mov	r22, r25
     7f6:	41 e0       	ldi	r20, 0x01	; 1
     7f8:	0e 94 9a 07 	call	0xf34	; 0xf34 <nrf24_checkRegister>
     7fc:	98 2f       	mov	r25, r24
     7fe:	81 e0       	ldi	r24, 0x01	; 1
     800:	89 27       	eor	r24, r25
     802:	88 23       	and	r24, r24
     804:	11 f0       	breq	.+4      	; 0x80a <nrf24_checkConfig+0x24>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	87 c0       	rjmp	.+270    	; 0x918 <__stack+0x19>
	if (nrf24_checkRegister(RX_PW_P0, 0x00,1)==false) return false;
     80a:	81 e1       	ldi	r24, 0x11	; 17
     80c:	60 e0       	ldi	r22, 0x00	; 0
     80e:	41 e0       	ldi	r20, 0x01	; 1
     810:	0e 94 9a 07 	call	0xf34	; 0xf34 <nrf24_checkRegister>
     814:	98 2f       	mov	r25, r24
     816:	81 e0       	ldi	r24, 0x01	; 1
     818:	89 27       	eor	r24, r25
     81a:	88 23       	and	r24, r24
     81c:	11 f0       	breq	.+4      	; 0x822 <nrf24_checkConfig+0x3c>
     81e:	80 e0       	ldi	r24, 0x00	; 0
     820:	7b c0       	rjmp	.+246    	; 0x918 <__stack+0x19>
	if (nrf24_checkRegister(RX_PW_P1, payload_len,1)==false) return false;
     822:	90 91 9b 01 	lds	r25, 0x019B
     826:	82 e1       	ldi	r24, 0x12	; 18
     828:	69 2f       	mov	r22, r25
     82a:	41 e0       	ldi	r20, 0x01	; 1
     82c:	0e 94 9a 07 	call	0xf34	; 0xf34 <nrf24_checkRegister>
     830:	98 2f       	mov	r25, r24
     832:	81 e0       	ldi	r24, 0x01	; 1
     834:	89 27       	eor	r24, r25
     836:	88 23       	and	r24, r24
     838:	11 f0       	breq	.+4      	; 0x83e <nrf24_checkConfig+0x58>
     83a:	80 e0       	ldi	r24, 0x00	; 0
     83c:	6d c0       	rjmp	.+218    	; 0x918 <__stack+0x19>
	if (nrf24_checkRegister(RX_PW_P2, 0x00,1)==false) return false;
     83e:	83 e1       	ldi	r24, 0x13	; 19
     840:	60 e0       	ldi	r22, 0x00	; 0
     842:	41 e0       	ldi	r20, 0x01	; 1
     844:	0e 94 9a 07 	call	0xf34	; 0xf34 <nrf24_checkRegister>
     848:	98 2f       	mov	r25, r24
     84a:	81 e0       	ldi	r24, 0x01	; 1
     84c:	89 27       	eor	r24, r25
     84e:	88 23       	and	r24, r24
     850:	11 f0       	breq	.+4      	; 0x856 <nrf24_checkConfig+0x70>
     852:	80 e0       	ldi	r24, 0x00	; 0
     854:	61 c0       	rjmp	.+194    	; 0x918 <__stack+0x19>
	if (nrf24_checkRegister(RX_PW_P3, 0x00,1)==false) return false;
     856:	84 e1       	ldi	r24, 0x14	; 20
     858:	60 e0       	ldi	r22, 0x00	; 0
     85a:	41 e0       	ldi	r20, 0x01	; 1
     85c:	0e 94 9a 07 	call	0xf34	; 0xf34 <nrf24_checkRegister>
     860:	98 2f       	mov	r25, r24
     862:	81 e0       	ldi	r24, 0x01	; 1
     864:	89 27       	eor	r24, r25
     866:	88 23       	and	r24, r24
     868:	11 f0       	breq	.+4      	; 0x86e <nrf24_checkConfig+0x88>
     86a:	80 e0       	ldi	r24, 0x00	; 0
     86c:	55 c0       	rjmp	.+170    	; 0x918 <__stack+0x19>
	if (nrf24_checkRegister(RX_PW_P4, 0x00,1)==false) return false;
     86e:	85 e1       	ldi	r24, 0x15	; 21
     870:	60 e0       	ldi	r22, 0x00	; 0
     872:	41 e0       	ldi	r20, 0x01	; 1
     874:	0e 94 9a 07 	call	0xf34	; 0xf34 <nrf24_checkRegister>
     878:	98 2f       	mov	r25, r24
     87a:	81 e0       	ldi	r24, 0x01	; 1
     87c:	89 27       	eor	r24, r25
     87e:	88 23       	and	r24, r24
     880:	11 f0       	breq	.+4      	; 0x886 <nrf24_checkConfig+0xa0>
     882:	80 e0       	ldi	r24, 0x00	; 0
     884:	49 c0       	rjmp	.+146    	; 0x918 <__stack+0x19>
	if (nrf24_checkRegister(RX_PW_P5, 0x00,1)==false) return false;
     886:	86 e1       	ldi	r24, 0x16	; 22
     888:	60 e0       	ldi	r22, 0x00	; 0
     88a:	41 e0       	ldi	r20, 0x01	; 1
     88c:	0e 94 9a 07 	call	0xf34	; 0xf34 <nrf24_checkRegister>
     890:	98 2f       	mov	r25, r24
     892:	81 e0       	ldi	r24, 0x01	; 1
     894:	89 27       	eor	r24, r25
     896:	88 23       	and	r24, r24
     898:	11 f0       	breq	.+4      	; 0x89e <nrf24_checkConfig+0xb8>
     89a:	80 e0       	ldi	r24, 0x00	; 0
     89c:	3d c0       	rjmp	.+122    	; 0x918 <__stack+0x19>
	if (nrf24_checkRegister(RF_SETUP, (0<<RF_DR)|((0x03)<<RF_PWR),1)==false) return false;
     89e:	86 e0       	ldi	r24, 0x06	; 6
     8a0:	66 e0       	ldi	r22, 0x06	; 6
     8a2:	41 e0       	ldi	r20, 0x01	; 1
     8a4:	0e 94 9a 07 	call	0xf34	; 0xf34 <nrf24_checkRegister>
     8a8:	98 2f       	mov	r25, r24
     8aa:	81 e0       	ldi	r24, 0x01	; 1
     8ac:	89 27       	eor	r24, r25
     8ae:	88 23       	and	r24, r24
     8b0:	11 f0       	breq	.+4      	; 0x8b6 <nrf24_checkConfig+0xd0>
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	31 c0       	rjmp	.+98     	; 0x918 <__stack+0x19>
	if (nrf24_checkRegister(CONFIG,nrf24_CONFIG,1)==false) return false;
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	68 e0       	ldi	r22, 0x08	; 8
     8ba:	41 e0       	ldi	r20, 0x01	; 1
     8bc:	0e 94 9a 07 	call	0xf34	; 0xf34 <nrf24_checkRegister>
     8c0:	98 2f       	mov	r25, r24
     8c2:	81 e0       	ldi	r24, 0x01	; 1
     8c4:	89 27       	eor	r24, r25
     8c6:	88 23       	and	r24, r24
     8c8:	11 f0       	breq	.+4      	; 0x8ce <nrf24_checkConfig+0xe8>
     8ca:	80 e0       	ldi	r24, 0x00	; 0
     8cc:	25 c0       	rjmp	.+74     	; 0x918 <__stack+0x19>
	if (nrf24_checkRegister(EN_AA,(1<<ENAA_P0)|(1<<ENAA_P1)|(0<<ENAA_P2)|(0<<ENAA_P3)|(0<<ENAA_P4)|(0<<ENAA_P5),1)==false) return false;
     8ce:	81 e0       	ldi	r24, 0x01	; 1
     8d0:	63 e0       	ldi	r22, 0x03	; 3
     8d2:	41 e0       	ldi	r20, 0x01	; 1
     8d4:	0e 94 9a 07 	call	0xf34	; 0xf34 <nrf24_checkRegister>
     8d8:	98 2f       	mov	r25, r24
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	89 27       	eor	r24, r25
     8de:	88 23       	and	r24, r24
     8e0:	11 f0       	breq	.+4      	; 0x8e6 <nrf24_checkConfig+0x100>
     8e2:	80 e0       	ldi	r24, 0x00	; 0
     8e4:	19 c0       	rjmp	.+50     	; 0x918 <__stack+0x19>
	if (nrf24_checkRegister(SETUP_RETR,(0x04<<ARD)|(0x0F<<ARC),1)==false) return false;
     8e6:	84 e0       	ldi	r24, 0x04	; 4
     8e8:	6f e4       	ldi	r22, 0x4F	; 79
     8ea:	41 e0       	ldi	r20, 0x01	; 1
     8ec:	0e 94 9a 07 	call	0xf34	; 0xf34 <nrf24_checkRegister>
     8f0:	98 2f       	mov	r25, r24
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	89 27       	eor	r24, r25
     8f6:	88 23       	and	r24, r24
     8f8:	11 f0       	breq	.+4      	; 0x8fe <nrf24_checkConfig+0x118>
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	0d c0       	rjmp	.+26     	; 0x918 <__stack+0x19>
	if (nrf24_checkRegister(DYNPD,(0<<DPL_P0)|(0<<DPL_P1)|(0<<DPL_P2)|(0<<DPL_P3)|(0<<DPL_P4)|(0<<DPL_P5),1)==false) return false;
     8fe:	8c e1       	ldi	r24, 0x1C	; 28
     900:	60 e0       	ldi	r22, 0x00	; 0
     902:	41 e0       	ldi	r20, 0x01	; 1
     904:	0e 94 9a 07 	call	0xf34	; 0xf34 <nrf24_checkRegister>
     908:	98 2f       	mov	r25, r24
     90a:	81 e0       	ldi	r24, 0x01	; 1
     90c:	89 27       	eor	r24, r25
     90e:	88 23       	and	r24, r24
     910:	11 f0       	breq	.+4      	; 0x916 <__stack+0x17>
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	01 c0       	rjmp	.+2      	; 0x918 <__stack+0x19>
	
	return true;
     916:	81 e0       	ldi	r24, 0x01	; 1
}
     918:	cf 91       	pop	r28
     91a:	df 91       	pop	r29
     91c:	08 95       	ret

0000091e <nrf24_checkAvailability>:

bool nrf24_checkAvailability(){
     91e:	df 93       	push	r29
     920:	cf 93       	push	r28
     922:	cd b7       	in	r28, 0x3d	; 61
     924:	de b7       	in	r29, 0x3e	; 62
	if (nrf24_checkRegister(RF_CH, selectedChannel,1)==true) { return true; } else { return false;}
     926:	90 91 9c 01 	lds	r25, 0x019C
     92a:	85 e0       	ldi	r24, 0x05	; 5
     92c:	69 2f       	mov	r22, r25
     92e:	41 e0       	ldi	r20, 0x01	; 1
     930:	0e 94 9a 07 	call	0xf34	; 0xf34 <nrf24_checkRegister>
     934:	88 23       	and	r24, r24
     936:	11 f0       	breq	.+4      	; 0x93c <nrf24_checkAvailability+0x1e>
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	01 c0       	rjmp	.+2      	; 0x93e <nrf24_checkAvailability+0x20>
     93c:	80 e0       	ldi	r24, 0x00	; 0
}
     93e:	cf 91       	pop	r28
     940:	df 91       	pop	r29
     942:	08 95       	ret

00000944 <faultyRF_Alarm>:




void faultyRF_Alarm(){
     944:	0f 93       	push	r16
     946:	1f 93       	push	r17
     948:	df 93       	push	r29
     94a:	cf 93       	push	r28
     94c:	cd b7       	in	r28, 0x3d	; 61
     94e:	de b7       	in	r29, 0x3e	; 62
     950:	6d 97       	sbiw	r28, 0x1d	; 29
     952:	0f b6       	in	r0, 0x3f	; 63
     954:	f8 94       	cli
     956:	de bf       	out	0x3e, r29	; 62
     958:	0f be       	out	0x3f, r0	; 63
     95a:	cd bf       	out	0x3d, r28	; 61
	CLEAR_FAULTY_RF_LED;
     95c:	8b e2       	ldi	r24, 0x2B	; 43
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	2b e2       	ldi	r18, 0x2B	; 43
     962:	30 e0       	ldi	r19, 0x00	; 0
     964:	f9 01       	movw	r30, r18
     966:	20 81       	ld	r18, Z
     968:	2f 77       	andi	r18, 0x7F	; 127
     96a:	fc 01       	movw	r30, r24
     96c:	20 83       	st	Z, r18
	for (uint8_t x = 0; x < 6; x++)
     96e:	19 82       	std	Y+1, r1	; 0x01
     970:	8d c0       	rjmp	.+282    	; 0xa8c <faultyRF_Alarm+0x148>
	{
		FLIP_FAULTY_RF_LED;
     972:	8b e2       	ldi	r24, 0x2B	; 43
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	2b e2       	ldi	r18, 0x2B	; 43
     978:	30 e0       	ldi	r19, 0x00	; 0
     97a:	f9 01       	movw	r30, r18
     97c:	30 81       	ld	r19, Z
     97e:	20 e8       	ldi	r18, 0x80	; 128
     980:	23 27       	eor	r18, r19
     982:	fc 01       	movw	r30, r24
     984:	20 83       	st	Z, r18
     986:	80 e0       	ldi	r24, 0x00	; 0
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	aa ef       	ldi	r26, 0xFA	; 250
     98c:	b2 e4       	ldi	r27, 0x42	; 66
     98e:	8a 83       	std	Y+2, r24	; 0x02
     990:	9b 83       	std	Y+3, r25	; 0x03
     992:	ac 83       	std	Y+4, r26	; 0x04
     994:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     996:	6a 81       	ldd	r22, Y+2	; 0x02
     998:	7b 81       	ldd	r23, Y+3	; 0x03
     99a:	8c 81       	ldd	r24, Y+4	; 0x04
     99c:	9d 81       	ldd	r25, Y+5	; 0x05
     99e:	20 e0       	ldi	r18, 0x00	; 0
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	4a e7       	ldi	r20, 0x7A	; 122
     9a4:	55 e4       	ldi	r21, 0x45	; 69
     9a6:	0e 94 4d 09 	call	0x129a	; 0x129a <__mulsf3>
     9aa:	dc 01       	movw	r26, r24
     9ac:	cb 01       	movw	r24, r22
     9ae:	8e 83       	std	Y+6, r24	; 0x06
     9b0:	9f 83       	std	Y+7, r25	; 0x07
     9b2:	a8 87       	std	Y+8, r26	; 0x08
     9b4:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     9b6:	11 e0       	ldi	r17, 0x01	; 1
     9b8:	6e 81       	ldd	r22, Y+6	; 0x06
     9ba:	7f 81       	ldd	r23, Y+7	; 0x07
     9bc:	88 85       	ldd	r24, Y+8	; 0x08
     9be:	99 85       	ldd	r25, Y+9	; 0x09
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	40 e8       	ldi	r20, 0x80	; 128
     9c6:	5f e3       	ldi	r21, 0x3F	; 63
     9c8:	0e 94 cc 08 	call	0x1198	; 0x1198 <__cmpsf2>
     9cc:	88 23       	and	r24, r24
     9ce:	0c f0       	brlt	.+2      	; 0x9d2 <faultyRF_Alarm+0x8e>
     9d0:	10 e0       	ldi	r17, 0x00	; 0
     9d2:	11 23       	and	r17, r17
     9d4:	29 f0       	breq	.+10     	; 0x9e0 <faultyRF_Alarm+0x9c>
		__ticks = 1;
     9d6:	81 e0       	ldi	r24, 0x01	; 1
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	9b 87       	std	Y+11, r25	; 0x0b
     9dc:	8a 87       	std	Y+10, r24	; 0x0a
     9de:	46 c0       	rjmp	.+140    	; 0xa6c <faultyRF_Alarm+0x128>
	else if (__tmp > 65535)
     9e0:	11 e0       	ldi	r17, 0x01	; 1
     9e2:	6e 81       	ldd	r22, Y+6	; 0x06
     9e4:	7f 81       	ldd	r23, Y+7	; 0x07
     9e6:	88 85       	ldd	r24, Y+8	; 0x08
     9e8:	99 85       	ldd	r25, Y+9	; 0x09
     9ea:	20 e0       	ldi	r18, 0x00	; 0
     9ec:	3f ef       	ldi	r19, 0xFF	; 255
     9ee:	4f e7       	ldi	r20, 0x7F	; 127
     9f0:	57 e4       	ldi	r21, 0x47	; 71
     9f2:	0e 94 49 09 	call	0x1292	; 0x1292 <__gesf2>
     9f6:	18 16       	cp	r1, r24
     9f8:	0c f0       	brlt	.+2      	; 0x9fc <faultyRF_Alarm+0xb8>
     9fa:	10 e0       	ldi	r17, 0x00	; 0
     9fc:	11 23       	and	r17, r17
     9fe:	61 f1       	breq	.+88     	; 0xa58 <faultyRF_Alarm+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a00:	6a 81       	ldd	r22, Y+2	; 0x02
     a02:	7b 81       	ldd	r23, Y+3	; 0x03
     a04:	8c 81       	ldd	r24, Y+4	; 0x04
     a06:	9d 81       	ldd	r25, Y+5	; 0x05
     a08:	20 e0       	ldi	r18, 0x00	; 0
     a0a:	30 e0       	ldi	r19, 0x00	; 0
     a0c:	40 e2       	ldi	r20, 0x20	; 32
     a0e:	51 e4       	ldi	r21, 0x41	; 65
     a10:	0e 94 4d 09 	call	0x129a	; 0x129a <__mulsf3>
     a14:	dc 01       	movw	r26, r24
     a16:	cb 01       	movw	r24, r22
     a18:	bc 01       	movw	r22, r24
     a1a:	cd 01       	movw	r24, r26
     a1c:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <__fixunssfsi>
     a20:	dc 01       	movw	r26, r24
     a22:	cb 01       	movw	r24, r22
     a24:	9b 87       	std	Y+11, r25	; 0x0b
     a26:	8a 87       	std	Y+10, r24	; 0x0a
     a28:	12 c0       	rjmp	.+36     	; 0xa4e <faultyRF_Alarm+0x10a>
     a2a:	80 e9       	ldi	r24, 0x90	; 144
     a2c:	91 e0       	ldi	r25, 0x01	; 1
     a2e:	9d 87       	std	Y+13, r25	; 0x0d
     a30:	8c 87       	std	Y+12, r24	; 0x0c
     a32:	8c 85       	ldd	r24, Y+12	; 0x0c
     a34:	9d 85       	ldd	r25, Y+13	; 0x0d
     a36:	8c 01       	movw	r16, r24
     a38:	c8 01       	movw	r24, r16
     a3a:	01 97       	sbiw	r24, 0x01	; 1
     a3c:	f1 f7       	brne	.-4      	; 0xa3a <faultyRF_Alarm+0xf6>
     a3e:	8c 01       	movw	r16, r24
     a40:	1d 87       	std	Y+13, r17	; 0x0d
     a42:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a44:	8a 85       	ldd	r24, Y+10	; 0x0a
     a46:	9b 85       	ldd	r25, Y+11	; 0x0b
     a48:	01 97       	sbiw	r24, 0x01	; 1
     a4a:	9b 87       	std	Y+11, r25	; 0x0b
     a4c:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a4e:	8a 85       	ldd	r24, Y+10	; 0x0a
     a50:	9b 85       	ldd	r25, Y+11	; 0x0b
     a52:	00 97       	sbiw	r24, 0x00	; 0
     a54:	51 f7       	brne	.-44     	; 0xa2a <faultyRF_Alarm+0xe6>
     a56:	17 c0       	rjmp	.+46     	; 0xa86 <faultyRF_Alarm+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a58:	6e 81       	ldd	r22, Y+6	; 0x06
     a5a:	7f 81       	ldd	r23, Y+7	; 0x07
     a5c:	88 85       	ldd	r24, Y+8	; 0x08
     a5e:	99 85       	ldd	r25, Y+9	; 0x09
     a60:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <__fixunssfsi>
     a64:	dc 01       	movw	r26, r24
     a66:	cb 01       	movw	r24, r22
     a68:	9b 87       	std	Y+11, r25	; 0x0b
     a6a:	8a 87       	std	Y+10, r24	; 0x0a
     a6c:	8a 85       	ldd	r24, Y+10	; 0x0a
     a6e:	9b 85       	ldd	r25, Y+11	; 0x0b
     a70:	9f 87       	std	Y+15, r25	; 0x0f
     a72:	8e 87       	std	Y+14, r24	; 0x0e
     a74:	8e 85       	ldd	r24, Y+14	; 0x0e
     a76:	9f 85       	ldd	r25, Y+15	; 0x0f
     a78:	8c 01       	movw	r16, r24
     a7a:	f8 01       	movw	r30, r16
     a7c:	31 97       	sbiw	r30, 0x01	; 1
     a7e:	f1 f7       	brne	.-4      	; 0xa7c <faultyRF_Alarm+0x138>
     a80:	8f 01       	movw	r16, r30
     a82:	1f 87       	std	Y+15, r17	; 0x0f
     a84:	0e 87       	std	Y+14, r16	; 0x0e



void faultyRF_Alarm(){
	CLEAR_FAULTY_RF_LED;
	for (uint8_t x = 0; x < 6; x++)
     a86:	89 81       	ldd	r24, Y+1	; 0x01
     a88:	8f 5f       	subi	r24, 0xFF	; 255
     a8a:	89 83       	std	Y+1, r24	; 0x01
     a8c:	89 81       	ldd	r24, Y+1	; 0x01
     a8e:	86 30       	cpi	r24, 0x06	; 6
     a90:	08 f4       	brcc	.+2      	; 0xa94 <faultyRF_Alarm+0x150>
     a92:	6f cf       	rjmp	.-290    	; 0x972 <faultyRF_Alarm+0x2e>
     a94:	80 e0       	ldi	r24, 0x00	; 0
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	aa e7       	ldi	r26, 0x7A	; 122
     a9a:	b3 e4       	ldi	r27, 0x43	; 67
     a9c:	88 8b       	std	Y+16, r24	; 0x10
     a9e:	99 8b       	std	Y+17, r25	; 0x11
     aa0:	aa 8b       	std	Y+18, r26	; 0x12
     aa2:	bb 8b       	std	Y+19, r27	; 0x13
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     aa4:	68 89       	ldd	r22, Y+16	; 0x10
     aa6:	79 89       	ldd	r23, Y+17	; 0x11
     aa8:	8a 89       	ldd	r24, Y+18	; 0x12
     aaa:	9b 89       	ldd	r25, Y+19	; 0x13
     aac:	20 e0       	ldi	r18, 0x00	; 0
     aae:	30 e0       	ldi	r19, 0x00	; 0
     ab0:	4a e7       	ldi	r20, 0x7A	; 122
     ab2:	55 e4       	ldi	r21, 0x45	; 69
     ab4:	0e 94 4d 09 	call	0x129a	; 0x129a <__mulsf3>
     ab8:	dc 01       	movw	r26, r24
     aba:	cb 01       	movw	r24, r22
     abc:	8c 8b       	std	Y+20, r24	; 0x14
     abe:	9d 8b       	std	Y+21, r25	; 0x15
     ac0:	ae 8b       	std	Y+22, r26	; 0x16
     ac2:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
     ac4:	11 e0       	ldi	r17, 0x01	; 1
     ac6:	6c 89       	ldd	r22, Y+20	; 0x14
     ac8:	7d 89       	ldd	r23, Y+21	; 0x15
     aca:	8e 89       	ldd	r24, Y+22	; 0x16
     acc:	9f 89       	ldd	r25, Y+23	; 0x17
     ace:	20 e0       	ldi	r18, 0x00	; 0
     ad0:	30 e0       	ldi	r19, 0x00	; 0
     ad2:	40 e8       	ldi	r20, 0x80	; 128
     ad4:	5f e3       	ldi	r21, 0x3F	; 63
     ad6:	0e 94 cc 08 	call	0x1198	; 0x1198 <__cmpsf2>
     ada:	88 23       	and	r24, r24
     adc:	0c f0       	brlt	.+2      	; 0xae0 <faultyRF_Alarm+0x19c>
     ade:	10 e0       	ldi	r17, 0x00	; 0
     ae0:	11 23       	and	r17, r17
     ae2:	29 f0       	breq	.+10     	; 0xaee <faultyRF_Alarm+0x1aa>
		__ticks = 1;
     ae4:	81 e0       	ldi	r24, 0x01	; 1
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	99 8f       	std	Y+25, r25	; 0x19
     aea:	88 8f       	std	Y+24, r24	; 0x18
     aec:	46 c0       	rjmp	.+140    	; 0xb7a <faultyRF_Alarm+0x236>
	else if (__tmp > 65535)
     aee:	11 e0       	ldi	r17, 0x01	; 1
     af0:	6c 89       	ldd	r22, Y+20	; 0x14
     af2:	7d 89       	ldd	r23, Y+21	; 0x15
     af4:	8e 89       	ldd	r24, Y+22	; 0x16
     af6:	9f 89       	ldd	r25, Y+23	; 0x17
     af8:	20 e0       	ldi	r18, 0x00	; 0
     afa:	3f ef       	ldi	r19, 0xFF	; 255
     afc:	4f e7       	ldi	r20, 0x7F	; 127
     afe:	57 e4       	ldi	r21, 0x47	; 71
     b00:	0e 94 49 09 	call	0x1292	; 0x1292 <__gesf2>
     b04:	18 16       	cp	r1, r24
     b06:	0c f0       	brlt	.+2      	; 0xb0a <faultyRF_Alarm+0x1c6>
     b08:	10 e0       	ldi	r17, 0x00	; 0
     b0a:	11 23       	and	r17, r17
     b0c:	61 f1       	breq	.+88     	; 0xb66 <faultyRF_Alarm+0x222>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b0e:	68 89       	ldd	r22, Y+16	; 0x10
     b10:	79 89       	ldd	r23, Y+17	; 0x11
     b12:	8a 89       	ldd	r24, Y+18	; 0x12
     b14:	9b 89       	ldd	r25, Y+19	; 0x13
     b16:	20 e0       	ldi	r18, 0x00	; 0
     b18:	30 e0       	ldi	r19, 0x00	; 0
     b1a:	40 e2       	ldi	r20, 0x20	; 32
     b1c:	51 e4       	ldi	r21, 0x41	; 65
     b1e:	0e 94 4d 09 	call	0x129a	; 0x129a <__mulsf3>
     b22:	dc 01       	movw	r26, r24
     b24:	cb 01       	movw	r24, r22
     b26:	bc 01       	movw	r22, r24
     b28:	cd 01       	movw	r24, r26
     b2a:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <__fixunssfsi>
     b2e:	dc 01       	movw	r26, r24
     b30:	cb 01       	movw	r24, r22
     b32:	99 8f       	std	Y+25, r25	; 0x19
     b34:	88 8f       	std	Y+24, r24	; 0x18
     b36:	12 c0       	rjmp	.+36     	; 0xb5c <faultyRF_Alarm+0x218>
     b38:	80 e9       	ldi	r24, 0x90	; 144
     b3a:	91 e0       	ldi	r25, 0x01	; 1
     b3c:	9b 8f       	std	Y+27, r25	; 0x1b
     b3e:	8a 8f       	std	Y+26, r24	; 0x1a
     b40:	8a 8d       	ldd	r24, Y+26	; 0x1a
     b42:	9b 8d       	ldd	r25, Y+27	; 0x1b
     b44:	8c 01       	movw	r16, r24
     b46:	c8 01       	movw	r24, r16
     b48:	01 97       	sbiw	r24, 0x01	; 1
     b4a:	f1 f7       	brne	.-4      	; 0xb48 <faultyRF_Alarm+0x204>
     b4c:	8c 01       	movw	r16, r24
     b4e:	1b 8f       	std	Y+27, r17	; 0x1b
     b50:	0a 8f       	std	Y+26, r16	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b52:	88 8d       	ldd	r24, Y+24	; 0x18
     b54:	99 8d       	ldd	r25, Y+25	; 0x19
     b56:	01 97       	sbiw	r24, 0x01	; 1
     b58:	99 8f       	std	Y+25, r25	; 0x19
     b5a:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b5c:	88 8d       	ldd	r24, Y+24	; 0x18
     b5e:	99 8d       	ldd	r25, Y+25	; 0x19
     b60:	00 97       	sbiw	r24, 0x00	; 0
     b62:	51 f7       	brne	.-44     	; 0xb38 <faultyRF_Alarm+0x1f4>
     b64:	17 c0       	rjmp	.+46     	; 0xb94 <faultyRF_Alarm+0x250>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b66:	6c 89       	ldd	r22, Y+20	; 0x14
     b68:	7d 89       	ldd	r23, Y+21	; 0x15
     b6a:	8e 89       	ldd	r24, Y+22	; 0x16
     b6c:	9f 89       	ldd	r25, Y+23	; 0x17
     b6e:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <__fixunssfsi>
     b72:	dc 01       	movw	r26, r24
     b74:	cb 01       	movw	r24, r22
     b76:	99 8f       	std	Y+25, r25	; 0x19
     b78:	88 8f       	std	Y+24, r24	; 0x18
     b7a:	88 8d       	ldd	r24, Y+24	; 0x18
     b7c:	99 8d       	ldd	r25, Y+25	; 0x19
     b7e:	9d 8f       	std	Y+29, r25	; 0x1d
     b80:	8c 8f       	std	Y+28, r24	; 0x1c
     b82:	8c 8d       	ldd	r24, Y+28	; 0x1c
     b84:	9d 8d       	ldd	r25, Y+29	; 0x1d
     b86:	8c 01       	movw	r16, r24
     b88:	f8 01       	movw	r30, r16
     b8a:	31 97       	sbiw	r30, 0x01	; 1
     b8c:	f1 f7       	brne	.-4      	; 0xb8a <faultyRF_Alarm+0x246>
     b8e:	8f 01       	movw	r16, r30
     b90:	1d 8f       	std	Y+29, r17	; 0x1d
     b92:	0c 8f       	std	Y+28, r16	; 0x1c
	{
		FLIP_FAULTY_RF_LED;
		_delay_ms(125);
	}
	_delay_ms(250);
}
     b94:	6d 96       	adiw	r28, 0x1d	; 29
     b96:	0f b6       	in	r0, 0x3f	; 63
     b98:	f8 94       	cli
     b9a:	de bf       	out	0x3e, r29	; 62
     b9c:	0f be       	out	0x3f, r0	; 63
     b9e:	cd bf       	out	0x3d, r28	; 61
     ba0:	cf 91       	pop	r28
     ba2:	df 91       	pop	r29
     ba4:	1f 91       	pop	r17
     ba6:	0f 91       	pop	r16
     ba8:	08 95       	ret

00000baa <nrf24_rx_address>:



/* Set the RX address */
void nrf24_rx_address(uint8_t * adr) 
{
     baa:	df 93       	push	r29
     bac:	cf 93       	push	r28
     bae:	00 d0       	rcall	.+0      	; 0xbb0 <nrf24_rx_address+0x6>
     bb0:	cd b7       	in	r28, 0x3d	; 61
     bb2:	de b7       	in	r29, 0x3e	; 62
     bb4:	9a 83       	std	Y+2, r25	; 0x02
     bb6:	89 83       	std	Y+1, r24	; 0x01
    nrf24_ce_digitalWrite(LOW);
     bb8:	80 e0       	ldi	r24, 0x00	; 0
     bba:	0e 94 ed 07 	call	0xfda	; 0xfda <nrf24_ce_digitalWrite>
    nrf24_writeRegister(RX_ADDR_P1,adr,nrf24_ADDR_LEN);
     bbe:	29 81       	ldd	r18, Y+1	; 0x01
     bc0:	3a 81       	ldd	r19, Y+2	; 0x02
     bc2:	8b e0       	ldi	r24, 0x0B	; 11
     bc4:	b9 01       	movw	r22, r18
     bc6:	45 e0       	ldi	r20, 0x05	; 5
     bc8:	0e 94 79 07 	call	0xef2	; 0xef2 <nrf24_writeRegister>
    nrf24_ce_digitalWrite(HIGH);
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	0e 94 ed 07 	call	0xfda	; 0xfda <nrf24_ce_digitalWrite>
}
     bd2:	0f 90       	pop	r0
     bd4:	0f 90       	pop	r0
     bd6:	cf 91       	pop	r28
     bd8:	df 91       	pop	r29
     bda:	08 95       	ret

00000bdc <nrf24_tx_address>:
    return payload_len;
}

/* Set the TX address */
void nrf24_tx_address(uint8_t* adr)
{
     bdc:	df 93       	push	r29
     bde:	cf 93       	push	r28
     be0:	00 d0       	rcall	.+0      	; 0xbe2 <nrf24_tx_address+0x6>
     be2:	cd b7       	in	r28, 0x3d	; 61
     be4:	de b7       	in	r29, 0x3e	; 62
     be6:	9a 83       	std	Y+2, r25	; 0x02
     be8:	89 83       	std	Y+1, r24	; 0x01
    /* RX_ADDR_P0 must be set to the sending addr for auto ack to work. */
    nrf24_writeRegister(RX_ADDR_P0,adr,nrf24_ADDR_LEN);
     bea:	29 81       	ldd	r18, Y+1	; 0x01
     bec:	3a 81       	ldd	r19, Y+2	; 0x02
     bee:	8a e0       	ldi	r24, 0x0A	; 10
     bf0:	b9 01       	movw	r22, r18
     bf2:	45 e0       	ldi	r20, 0x05	; 5
     bf4:	0e 94 79 07 	call	0xef2	; 0xef2 <nrf24_writeRegister>
    nrf24_writeRegister(TX_ADDR,adr,nrf24_ADDR_LEN);
     bf8:	29 81       	ldd	r18, Y+1	; 0x01
     bfa:	3a 81       	ldd	r19, Y+2	; 0x02
     bfc:	80 e1       	ldi	r24, 0x10	; 16
     bfe:	b9 01       	movw	r22, r18
     c00:	45 e0       	ldi	r20, 0x05	; 5
     c02:	0e 94 79 07 	call	0xef2	; 0xef2 <nrf24_writeRegister>
}
     c06:	0f 90       	pop	r0
     c08:	0f 90       	pop	r0
     c0a:	cf 91       	pop	r28
     c0c:	df 91       	pop	r29
     c0e:	08 95       	ret

00000c10 <nrf24_dataReady>:

/* Checks if data is available for reading */
/* Returns 1 if data is ready ... */
uint8_t nrf24_dataReady() 
{
     c10:	df 93       	push	r29
     c12:	cf 93       	push	r28
     c14:	0f 92       	push	r0
     c16:	cd b7       	in	r28, 0x3d	; 61
     c18:	de b7       	in	r29, 0x3e	; 62
    // See note in getData() function - just checking RX_DR isn't good enough
    uint8_t status = nrf24_getStatus();
     c1a:	0e 94 59 06 	call	0xcb2	; 0xcb2 <nrf24_getStatus>
     c1e:	89 83       	std	Y+1, r24	; 0x01

    // We can short circuit on RX_DR, but if it's not set, we still need
    // to check the FIFO for any pending packets
    if ( status & (1 << RX_DR) ) 
     c20:	89 81       	ldd	r24, Y+1	; 0x01
     c22:	88 2f       	mov	r24, r24
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	80 74       	andi	r24, 0x40	; 64
     c28:	90 70       	andi	r25, 0x00	; 0
     c2a:	00 97       	sbiw	r24, 0x00	; 0
     c2c:	11 f0       	breq	.+4      	; 0xc32 <nrf24_dataReady+0x22>
    {
        return 1;
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	07 c0       	rjmp	.+14     	; 0xc40 <nrf24_dataReady+0x30>
    }

    return !nrf24_rxFifoEmpty();;
     c32:	0e 94 24 06 	call	0xc48	; 0xc48 <nrf24_rxFifoEmpty>
     c36:	98 2f       	mov	r25, r24
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	99 23       	and	r25, r25
     c3c:	09 f0       	breq	.+2      	; 0xc40 <nrf24_dataReady+0x30>
     c3e:	80 e0       	ldi	r24, 0x00	; 0
}
     c40:	0f 90       	pop	r0
     c42:	cf 91       	pop	r28
     c44:	df 91       	pop	r29
     c46:	08 95       	ret

00000c48 <nrf24_rxFifoEmpty>:

/* Checks if receive FIFO is empty or not */
uint8_t nrf24_rxFifoEmpty()
{
     c48:	df 93       	push	r29
     c4a:	cf 93       	push	r28
     c4c:	0f 92       	push	r0
     c4e:	cd b7       	in	r28, 0x3d	; 61
     c50:	de b7       	in	r29, 0x3e	; 62
    uint8_t fifoStatus;

    nrf24_readRegister(FIFO_STATUS,&fifoStatus,1);
     c52:	87 e1       	ldi	r24, 0x17	; 23
     c54:	9e 01       	movw	r18, r28
     c56:	2f 5f       	subi	r18, 0xFF	; 255
     c58:	3f 4f       	sbci	r19, 0xFF	; 255
     c5a:	b9 01       	movw	r22, r18
     c5c:	41 e0       	ldi	r20, 0x01	; 1
     c5e:	0e 94 56 07 	call	0xeac	; 0xeac <nrf24_readRegister>
    
    return (fifoStatus & (1 << RX_EMPTY));
     c62:	89 81       	ldd	r24, Y+1	; 0x01
     c64:	81 70       	andi	r24, 0x01	; 1
}
     c66:	0f 90       	pop	r0
     c68:	cf 91       	pop	r28
     c6a:	df 91       	pop	r29
     c6c:	08 95       	ret

00000c6e <nrf24_getData>:
    return status;
}

/* Reads payload bytes into data array */
void nrf24_getData(uint8_t* data) 
{
     c6e:	df 93       	push	r29
     c70:	cf 93       	push	r28
     c72:	00 d0       	rcall	.+0      	; 0xc74 <nrf24_getData+0x6>
     c74:	cd b7       	in	r28, 0x3d	; 61
     c76:	de b7       	in	r29, 0x3e	; 62
     c78:	9a 83       	std	Y+2, r25	; 0x02
     c7a:	89 83       	std	Y+1, r24	; 0x01
    /* Pull down chip select */
    nrf24_csn_digitalWrite(LOW);                               
     c7c:	80 e0       	ldi	r24, 0x00	; 0
     c7e:	0e 94 0d 08 	call	0x101a	; 0x101a <nrf24_csn_digitalWrite>

    /* Send cmd to read rx payload */
    spi_transfer( R_RX_PAYLOAD );
     c82:	81 e6       	ldi	r24, 0x61	; 97
     c84:	0e 94 99 06 	call	0xd32	; 0xd32 <spi_transfer>
    
    /* Read payload */
    nrf24_transferSync(data,data,payload_len);
     c88:	40 91 9b 01 	lds	r20, 0x019B
     c8c:	89 81       	ldd	r24, Y+1	; 0x01
     c8e:	9a 81       	ldd	r25, Y+2	; 0x02
     c90:	29 81       	ldd	r18, Y+1	; 0x01
     c92:	3a 81       	ldd	r19, Y+2	; 0x02
     c94:	b9 01       	movw	r22, r18
     c96:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <nrf24_transferSync>
    
    /* Pull up chip select */
    nrf24_csn_digitalWrite(HIGH);
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	0e 94 0d 08 	call	0x101a	; 0x101a <nrf24_csn_digitalWrite>

    /* Reset status register */
    nrf24_configRegister(STATUS,(1<<RX_DR));   
     ca0:	87 e0       	ldi	r24, 0x07	; 7
     ca2:	60 e4       	ldi	r22, 0x40	; 64
     ca4:	0e 94 3c 07 	call	0xe78	; 0xe78 <nrf24_configRegister>
}
     ca8:	0f 90       	pop	r0
     caa:	0f 90       	pop	r0
     cac:	cf 91       	pop	r28
     cae:	df 91       	pop	r29
     cb0:	08 95       	ret

00000cb2 <nrf24_getStatus>:
    return 1; /* true */

}

uint8_t nrf24_getStatus()
{
     cb2:	df 93       	push	r29
     cb4:	cf 93       	push	r28
     cb6:	0f 92       	push	r0
     cb8:	cd b7       	in	r28, 0x3d	; 61
     cba:	de b7       	in	r29, 0x3e	; 62
    uint8_t rv;
    nrf24_csn_digitalWrite(LOW);
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	0e 94 0d 08 	call	0x101a	; 0x101a <nrf24_csn_digitalWrite>
    rv = spi_transfer(NOP);
     cc2:	8f ef       	ldi	r24, 0xFF	; 255
     cc4:	0e 94 99 06 	call	0xd32	; 0xd32 <spi_transfer>
     cc8:	89 83       	std	Y+1, r24	; 0x01
    nrf24_csn_digitalWrite(HIGH);
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	0e 94 0d 08 	call	0x101a	; 0x101a <nrf24_csn_digitalWrite>
    return rv;
     cd0:	89 81       	ldd	r24, Y+1	; 0x01
}
     cd2:	0f 90       	pop	r0
     cd4:	cf 91       	pop	r28
     cd6:	df 91       	pop	r29
     cd8:	08 95       	ret

00000cda <nrf24_powerUpRx>:
        return 0xFF;
    }
}

void nrf24_powerUpRx()
{     
     cda:	df 93       	push	r29
     cdc:	cf 93       	push	r28
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
    nrf24_csn_digitalWrite(LOW);
     ce2:	80 e0       	ldi	r24, 0x00	; 0
     ce4:	0e 94 0d 08 	call	0x101a	; 0x101a <nrf24_csn_digitalWrite>
    spi_transfer(FLUSH_RX);
     ce8:	82 ee       	ldi	r24, 0xE2	; 226
     cea:	0e 94 99 06 	call	0xd32	; 0xd32 <spi_transfer>
    nrf24_csn_digitalWrite(HIGH);
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	0e 94 0d 08 	call	0x101a	; 0x101a <nrf24_csn_digitalWrite>

    nrf24_configRegister(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT)); 
     cf4:	87 e0       	ldi	r24, 0x07	; 7
     cf6:	60 e7       	ldi	r22, 0x70	; 112
     cf8:	0e 94 3c 07 	call	0xe78	; 0xe78 <nrf24_configRegister>

    nrf24_ce_digitalWrite(LOW);    
     cfc:	80 e0       	ldi	r24, 0x00	; 0
     cfe:	0e 94 ed 07 	call	0xfda	; 0xfda <nrf24_ce_digitalWrite>
    nrf24_configRegister(CONFIG,nrf24_CONFIG|((1<<PWR_UP)|(1<<PRIM_RX)));    
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	6b e0       	ldi	r22, 0x0B	; 11
     d06:	0e 94 3c 07 	call	0xe78	; 0xe78 <nrf24_configRegister>
    nrf24_ce_digitalWrite(HIGH);
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	0e 94 ed 07 	call	0xfda	; 0xfda <nrf24_ce_digitalWrite>
}
     d10:	cf 91       	pop	r28
     d12:	df 91       	pop	r29
     d14:	08 95       	ret

00000d16 <nrf24_powerDown>:

    nrf24_configRegister(CONFIG,nrf24_CONFIG|((1<<PWR_UP)|(0<<PRIM_RX)));
}

void nrf24_powerDown()
{
     d16:	df 93       	push	r29
     d18:	cf 93       	push	r28
     d1a:	cd b7       	in	r28, 0x3d	; 61
     d1c:	de b7       	in	r29, 0x3e	; 62
    nrf24_ce_digitalWrite(LOW);
     d1e:	80 e0       	ldi	r24, 0x00	; 0
     d20:	0e 94 ed 07 	call	0xfda	; 0xfda <nrf24_ce_digitalWrite>
    nrf24_configRegister(CONFIG,nrf24_CONFIG);
     d24:	80 e0       	ldi	r24, 0x00	; 0
     d26:	68 e0       	ldi	r22, 0x08	; 8
     d28:	0e 94 3c 07 	call	0xe78	; 0xe78 <nrf24_configRegister>
}
     d2c:	cf 91       	pop	r28
     d2e:	df 91       	pop	r29
     d30:	08 95       	ret

00000d32 <spi_transfer>:

uint8_t spi_transfer(uint8_t tx)
{
     d32:	df 93       	push	r29
     d34:	cf 93       	push	r28
     d36:	00 d0       	rcall	.+0      	; 0xd38 <spi_transfer+0x6>
     d38:	0f 92       	push	r0
     d3a:	cd b7       	in	r28, 0x3d	; 61
     d3c:	de b7       	in	r29, 0x3e	; 62
     d3e:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t i = 0;
     d40:	19 82       	std	Y+1, r1	; 0x01
    uint8_t rx = 0;
     d42:	1a 82       	std	Y+2, r1	; 0x02

    nrf24_sck_digitalWrite(LOW);
     d44:	80 e0       	ldi	r24, 0x00	; 0
     d46:	0e 94 2d 08 	call	0x105a	; 0x105a <nrf24_sck_digitalWrite>

    for(i=0;i<8;i++)
     d4a:	19 82       	std	Y+1, r1	; 0x01
     d4c:	30 c0       	rjmp	.+96     	; 0xdae <spi_transfer+0x7c>
    {

	    if(tx & (1<<(7-i)))
     d4e:	8b 81       	ldd	r24, Y+3	; 0x03
     d50:	88 2f       	mov	r24, r24
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	29 81       	ldd	r18, Y+1	; 0x01
     d56:	22 2f       	mov	r18, r18
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	47 e0       	ldi	r20, 0x07	; 7
     d5c:	50 e0       	ldi	r21, 0x00	; 0
     d5e:	ba 01       	movw	r22, r20
     d60:	62 1b       	sub	r22, r18
     d62:	73 0b       	sbc	r23, r19
     d64:	9b 01       	movw	r18, r22
     d66:	02 2e       	mov	r0, r18
     d68:	02 c0       	rjmp	.+4      	; 0xd6e <spi_transfer+0x3c>
     d6a:	95 95       	asr	r25
     d6c:	87 95       	ror	r24
     d6e:	0a 94       	dec	r0
     d70:	e2 f7       	brpl	.-8      	; 0xd6a <spi_transfer+0x38>
     d72:	81 70       	andi	r24, 0x01	; 1
     d74:	90 70       	andi	r25, 0x00	; 0
     d76:	88 23       	and	r24, r24
     d78:	21 f0       	breq	.+8      	; 0xd82 <spi_transfer+0x50>
	    {
		    nrf24_mosi_digitalWrite(HIGH);
     d7a:	81 e0       	ldi	r24, 0x01	; 1
     d7c:	0e 94 4d 08 	call	0x109a	; 0x109a <nrf24_mosi_digitalWrite>
     d80:	03 c0       	rjmp	.+6      	; 0xd88 <spi_transfer+0x56>
	    }
	    else
	    {
		    nrf24_mosi_digitalWrite(LOW);
     d82:	80 e0       	ldi	r24, 0x00	; 0
     d84:	0e 94 4d 08 	call	0x109a	; 0x109a <nrf24_mosi_digitalWrite>
	    }

	    nrf24_sck_digitalWrite(HIGH);
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	0e 94 2d 08 	call	0x105a	; 0x105a <nrf24_sck_digitalWrite>

	    rx = rx << 1;
     d8e:	8a 81       	ldd	r24, Y+2	; 0x02
     d90:	88 0f       	add	r24, r24
     d92:	8a 83       	std	Y+2, r24	; 0x02
	    if(nrf24_miso_digitalRead())
     d94:	0e 94 6d 08 	call	0x10da	; 0x10da <nrf24_miso_digitalRead>
     d98:	88 23       	and	r24, r24
     d9a:	19 f0       	breq	.+6      	; 0xda2 <spi_transfer+0x70>
	    {
		    rx |= 0x01;
     d9c:	8a 81       	ldd	r24, Y+2	; 0x02
     d9e:	81 60       	ori	r24, 0x01	; 1
     da0:	8a 83       	std	Y+2, r24	; 0x02
	    }

	    nrf24_sck_digitalWrite(LOW);
     da2:	80 e0       	ldi	r24, 0x00	; 0
     da4:	0e 94 2d 08 	call	0x105a	; 0x105a <nrf24_sck_digitalWrite>
    uint8_t i = 0;
    uint8_t rx = 0;

    nrf24_sck_digitalWrite(LOW);

    for(i=0;i<8;i++)
     da8:	89 81       	ldd	r24, Y+1	; 0x01
     daa:	8f 5f       	subi	r24, 0xFF	; 255
     dac:	89 83       	std	Y+1, r24	; 0x01
     dae:	89 81       	ldd	r24, Y+1	; 0x01
     db0:	88 30       	cpi	r24, 0x08	; 8
     db2:	68 f2       	brcs	.-102    	; 0xd4e <spi_transfer+0x1c>

	    nrf24_sck_digitalWrite(LOW);

    }

    return rx;
     db4:	8a 81       	ldd	r24, Y+2	; 0x02
}
     db6:	0f 90       	pop	r0
     db8:	0f 90       	pop	r0
     dba:	0f 90       	pop	r0
     dbc:	cf 91       	pop	r28
     dbe:	df 91       	pop	r29
     dc0:	08 95       	ret

00000dc2 <nrf24_transferSync>:

/* send and receive multiple bytes over SPI */
void nrf24_transferSync(uint8_t* dataout,uint8_t* datain,uint8_t len)
{
     dc2:	0f 93       	push	r16
     dc4:	1f 93       	push	r17
     dc6:	df 93       	push	r29
     dc8:	cf 93       	push	r28
     dca:	00 d0       	rcall	.+0      	; 0xdcc <nrf24_transferSync+0xa>
     dcc:	00 d0       	rcall	.+0      	; 0xdce <nrf24_transferSync+0xc>
     dce:	00 d0       	rcall	.+0      	; 0xdd0 <nrf24_transferSync+0xe>
     dd0:	cd b7       	in	r28, 0x3d	; 61
     dd2:	de b7       	in	r29, 0x3e	; 62
     dd4:	9b 83       	std	Y+3, r25	; 0x03
     dd6:	8a 83       	std	Y+2, r24	; 0x02
     dd8:	7d 83       	std	Y+5, r23	; 0x05
     dda:	6c 83       	std	Y+4, r22	; 0x04
     ddc:	4e 83       	std	Y+6, r20	; 0x06
    uint8_t i;

    for(i=0;i<len;i++)
     dde:	19 82       	std	Y+1, r1	; 0x01
     de0:	18 c0       	rjmp	.+48     	; 0xe12 <nrf24_transferSync+0x50>
    {
        datain[i] = spi_transfer(dataout[i]);
     de2:	89 81       	ldd	r24, Y+1	; 0x01
     de4:	88 2f       	mov	r24, r24
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	2c 81       	ldd	r18, Y+4	; 0x04
     dea:	3d 81       	ldd	r19, Y+5	; 0x05
     dec:	89 01       	movw	r16, r18
     dee:	08 0f       	add	r16, r24
     df0:	19 1f       	adc	r17, r25
     df2:	89 81       	ldd	r24, Y+1	; 0x01
     df4:	88 2f       	mov	r24, r24
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	2a 81       	ldd	r18, Y+2	; 0x02
     dfa:	3b 81       	ldd	r19, Y+3	; 0x03
     dfc:	82 0f       	add	r24, r18
     dfe:	93 1f       	adc	r25, r19
     e00:	fc 01       	movw	r30, r24
     e02:	80 81       	ld	r24, Z
     e04:	0e 94 99 06 	call	0xd32	; 0xd32 <spi_transfer>
     e08:	f8 01       	movw	r30, r16
     e0a:	80 83       	st	Z, r24
/* send and receive multiple bytes over SPI */
void nrf24_transferSync(uint8_t* dataout,uint8_t* datain,uint8_t len)
{
    uint8_t i;

    for(i=0;i<len;i++)
     e0c:	89 81       	ldd	r24, Y+1	; 0x01
     e0e:	8f 5f       	subi	r24, 0xFF	; 255
     e10:	89 83       	std	Y+1, r24	; 0x01
     e12:	99 81       	ldd	r25, Y+1	; 0x01
     e14:	8e 81       	ldd	r24, Y+6	; 0x06
     e16:	98 17       	cp	r25, r24
     e18:	20 f3       	brcs	.-56     	; 0xde2 <nrf24_transferSync+0x20>
    {
        datain[i] = spi_transfer(dataout[i]);
    }

}
     e1a:	26 96       	adiw	r28, 0x06	; 6
     e1c:	0f b6       	in	r0, 0x3f	; 63
     e1e:	f8 94       	cli
     e20:	de bf       	out	0x3e, r29	; 62
     e22:	0f be       	out	0x3f, r0	; 63
     e24:	cd bf       	out	0x3d, r28	; 61
     e26:	cf 91       	pop	r28
     e28:	df 91       	pop	r29
     e2a:	1f 91       	pop	r17
     e2c:	0f 91       	pop	r16
     e2e:	08 95       	ret

00000e30 <nrf24_transmitSync>:

/* send multiple bytes over SPI */
void nrf24_transmitSync(uint8_t* dataout,uint8_t len)
{
     e30:	df 93       	push	r29
     e32:	cf 93       	push	r28
     e34:	00 d0       	rcall	.+0      	; 0xe36 <nrf24_transmitSync+0x6>
     e36:	00 d0       	rcall	.+0      	; 0xe38 <nrf24_transmitSync+0x8>
     e38:	cd b7       	in	r28, 0x3d	; 61
     e3a:	de b7       	in	r29, 0x3e	; 62
     e3c:	9b 83       	std	Y+3, r25	; 0x03
     e3e:	8a 83       	std	Y+2, r24	; 0x02
     e40:	6c 83       	std	Y+4, r22	; 0x04
    uint8_t i;
    
    for(i=0;i<len;i++)
     e42:	19 82       	std	Y+1, r1	; 0x01
     e44:	0e c0       	rjmp	.+28     	; 0xe62 <nrf24_transmitSync+0x32>
    {
        spi_transfer(dataout[i]);
     e46:	89 81       	ldd	r24, Y+1	; 0x01
     e48:	88 2f       	mov	r24, r24
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	2a 81       	ldd	r18, Y+2	; 0x02
     e4e:	3b 81       	ldd	r19, Y+3	; 0x03
     e50:	82 0f       	add	r24, r18
     e52:	93 1f       	adc	r25, r19
     e54:	fc 01       	movw	r30, r24
     e56:	80 81       	ld	r24, Z
     e58:	0e 94 99 06 	call	0xd32	; 0xd32 <spi_transfer>
/* send multiple bytes over SPI */
void nrf24_transmitSync(uint8_t* dataout,uint8_t len)
{
    uint8_t i;
    
    for(i=0;i<len;i++)
     e5c:	89 81       	ldd	r24, Y+1	; 0x01
     e5e:	8f 5f       	subi	r24, 0xFF	; 255
     e60:	89 83       	std	Y+1, r24	; 0x01
     e62:	99 81       	ldd	r25, Y+1	; 0x01
     e64:	8c 81       	ldd	r24, Y+4	; 0x04
     e66:	98 17       	cp	r25, r24
     e68:	70 f3       	brcs	.-36     	; 0xe46 <nrf24_transmitSync+0x16>
    {
        spi_transfer(dataout[i]);
    }

}
     e6a:	0f 90       	pop	r0
     e6c:	0f 90       	pop	r0
     e6e:	0f 90       	pop	r0
     e70:	0f 90       	pop	r0
     e72:	cf 91       	pop	r28
     e74:	df 91       	pop	r29
     e76:	08 95       	ret

00000e78 <nrf24_configRegister>:

/* Clocks only one byte into the given nrf24 register */
void nrf24_configRegister(uint8_t reg, uint8_t value)
{
     e78:	df 93       	push	r29
     e7a:	cf 93       	push	r28
     e7c:	00 d0       	rcall	.+0      	; 0xe7e <nrf24_configRegister+0x6>
     e7e:	cd b7       	in	r28, 0x3d	; 61
     e80:	de b7       	in	r29, 0x3e	; 62
     e82:	89 83       	std	Y+1, r24	; 0x01
     e84:	6a 83       	std	Y+2, r22	; 0x02
    nrf24_csn_digitalWrite(LOW);
     e86:	80 e0       	ldi	r24, 0x00	; 0
     e88:	0e 94 0d 08 	call	0x101a	; 0x101a <nrf24_csn_digitalWrite>
    spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
     e8c:	89 81       	ldd	r24, Y+1	; 0x01
     e8e:	8f 71       	andi	r24, 0x1F	; 31
     e90:	80 62       	ori	r24, 0x20	; 32
     e92:	0e 94 99 06 	call	0xd32	; 0xd32 <spi_transfer>
    spi_transfer(value);
     e96:	8a 81       	ldd	r24, Y+2	; 0x02
     e98:	0e 94 99 06 	call	0xd32	; 0xd32 <spi_transfer>
    nrf24_csn_digitalWrite(HIGH);
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	0e 94 0d 08 	call	0x101a	; 0x101a <nrf24_csn_digitalWrite>
}
     ea2:	0f 90       	pop	r0
     ea4:	0f 90       	pop	r0
     ea6:	cf 91       	pop	r28
     ea8:	df 91       	pop	r29
     eaa:	08 95       	ret

00000eac <nrf24_readRegister>:

/* Read single register from nrf24 */
void nrf24_readRegister(uint8_t reg, uint8_t* value, uint8_t len)
{
     eac:	df 93       	push	r29
     eae:	cf 93       	push	r28
     eb0:	00 d0       	rcall	.+0      	; 0xeb2 <nrf24_readRegister+0x6>
     eb2:	00 d0       	rcall	.+0      	; 0xeb4 <nrf24_readRegister+0x8>
     eb4:	cd b7       	in	r28, 0x3d	; 61
     eb6:	de b7       	in	r29, 0x3e	; 62
     eb8:	89 83       	std	Y+1, r24	; 0x01
     eba:	7b 83       	std	Y+3, r23	; 0x03
     ebc:	6a 83       	std	Y+2, r22	; 0x02
     ebe:	4c 83       	std	Y+4, r20	; 0x04
    nrf24_csn_digitalWrite(LOW);
     ec0:	80 e0       	ldi	r24, 0x00	; 0
     ec2:	0e 94 0d 08 	call	0x101a	; 0x101a <nrf24_csn_digitalWrite>
    spi_transfer(R_REGISTER | (REGISTER_MASK & reg));
     ec6:	89 81       	ldd	r24, Y+1	; 0x01
     ec8:	8f 71       	andi	r24, 0x1F	; 31
     eca:	0e 94 99 06 	call	0xd32	; 0xd32 <spi_transfer>
    nrf24_transferSync(value,value,len);
     ece:	8a 81       	ldd	r24, Y+2	; 0x02
     ed0:	9b 81       	ldd	r25, Y+3	; 0x03
     ed2:	2a 81       	ldd	r18, Y+2	; 0x02
     ed4:	3b 81       	ldd	r19, Y+3	; 0x03
     ed6:	b9 01       	movw	r22, r18
     ed8:	4c 81       	ldd	r20, Y+4	; 0x04
     eda:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <nrf24_transferSync>
    nrf24_csn_digitalWrite(HIGH);
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	0e 94 0d 08 	call	0x101a	; 0x101a <nrf24_csn_digitalWrite>
}
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <nrf24_writeRegister>:

/* Write to a single register of nrf24 */
void nrf24_writeRegister(uint8_t reg, uint8_t* value, uint8_t len) 
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <nrf24_writeRegister+0x6>
     ef8:	00 d0       	rcall	.+0      	; 0xefa <nrf24_writeRegister+0x8>
     efa:	cd b7       	in	r28, 0x3d	; 61
     efc:	de b7       	in	r29, 0x3e	; 62
     efe:	89 83       	std	Y+1, r24	; 0x01
     f00:	7b 83       	std	Y+3, r23	; 0x03
     f02:	6a 83       	std	Y+2, r22	; 0x02
     f04:	4c 83       	std	Y+4, r20	; 0x04
    nrf24_csn_digitalWrite(LOW);
     f06:	80 e0       	ldi	r24, 0x00	; 0
     f08:	0e 94 0d 08 	call	0x101a	; 0x101a <nrf24_csn_digitalWrite>
    spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
     f0c:	89 81       	ldd	r24, Y+1	; 0x01
     f0e:	8f 71       	andi	r24, 0x1F	; 31
     f10:	80 62       	ori	r24, 0x20	; 32
     f12:	0e 94 99 06 	call	0xd32	; 0xd32 <spi_transfer>
    nrf24_transmitSync(value,len);
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	9b 81       	ldd	r25, Y+3	; 0x03
     f1a:	6c 81       	ldd	r22, Y+4	; 0x04
     f1c:	0e 94 18 07 	call	0xe30	; 0xe30 <nrf24_transmitSync>
    nrf24_csn_digitalWrite(HIGH);
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	0e 94 0d 08 	call	0x101a	; 0x101a <nrf24_csn_digitalWrite>
}
     f26:	0f 90       	pop	r0
     f28:	0f 90       	pop	r0
     f2a:	0f 90       	pop	r0
     f2c:	0f 90       	pop	r0
     f2e:	cf 91       	pop	r28
     f30:	df 91       	pop	r29
     f32:	08 95       	ret

00000f34 <nrf24_checkRegister>:

/* Check single register from nrf24 */
bool nrf24_checkRegister(uint8_t reg, uint8_t desiredValue, uint8_t len)
{
     f34:	df 93       	push	r29
     f36:	cf 93       	push	r28
     f38:	00 d0       	rcall	.+0      	; 0xf3a <nrf24_checkRegister+0x6>
     f3a:	00 d0       	rcall	.+0      	; 0xf3c <nrf24_checkRegister+0x8>
     f3c:	cd b7       	in	r28, 0x3d	; 61
     f3e:	de b7       	in	r29, 0x3e	; 62
     f40:	8a 83       	std	Y+2, r24	; 0x02
     f42:	6b 83       	std	Y+3, r22	; 0x03
     f44:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t registerValue;
	nrf24_readRegister(reg,&registerValue,len);
     f46:	8a 81       	ldd	r24, Y+2	; 0x02
     f48:	9e 01       	movw	r18, r28
     f4a:	2f 5f       	subi	r18, 0xFF	; 255
     f4c:	3f 4f       	sbci	r19, 0xFF	; 255
     f4e:	b9 01       	movw	r22, r18
     f50:	4c 81       	ldd	r20, Y+4	; 0x04
     f52:	0e 94 56 07 	call	0xeac	; 0xeac <nrf24_readRegister>
	if (registerValue==desiredValue) { return true; } else { return false; }
     f56:	99 81       	ldd	r25, Y+1	; 0x01
     f58:	8b 81       	ldd	r24, Y+3	; 0x03
     f5a:	98 17       	cp	r25, r24
     f5c:	11 f4       	brne	.+4      	; 0xf62 <nrf24_checkRegister+0x2e>
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	01 c0       	rjmp	.+2      	; 0xf64 <nrf24_checkRegister+0x30>
     f62:	80 e0       	ldi	r24, 0x00	; 0
}
     f64:	0f 90       	pop	r0
     f66:	0f 90       	pop	r0
     f68:	0f 90       	pop	r0
     f6a:	0f 90       	pop	r0
     f6c:	cf 91       	pop	r28
     f6e:	df 91       	pop	r29
     f70:	08 95       	ret

00000f72 <nrf24_setupPins>:
#define check_bit(reg,bit) (reg&(1<<bit))

/* ------------------------------------------------------------------------- */

void nrf24_setupPins()
{
     f72:	df 93       	push	r29
     f74:	cf 93       	push	r28
     f76:	cd b7       	in	r28, 0x3d	; 61
     f78:	de b7       	in	r29, 0x3e	; 62
	set_bit(CE_CSN_DDR, CE_BIT_POS); // CE output
     f7a:	87 e2       	ldi	r24, 0x27	; 39
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	27 e2       	ldi	r18, 0x27	; 39
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	f9 01       	movw	r30, r18
     f84:	20 81       	ld	r18, Z
     f86:	21 60       	ori	r18, 0x01	; 1
     f88:	fc 01       	movw	r30, r24
     f8a:	20 83       	st	Z, r18
	set_bit(CE_CSN_DDR, CSN_BIT_POS); // CSN output
     f8c:	87 e2       	ldi	r24, 0x27	; 39
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	27 e2       	ldi	r18, 0x27	; 39
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	f9 01       	movw	r30, r18
     f96:	20 81       	ld	r18, Z
     f98:	22 60       	ori	r18, 0x02	; 2
     f9a:	fc 01       	movw	r30, r24
     f9c:	20 83       	st	Z, r18
	
	clr_bit(RF_DDR, MISO_BIT_POS); // MISO input
     f9e:	8a e2       	ldi	r24, 0x2A	; 42
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	2a e2       	ldi	r18, 0x2A	; 42
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	f9 01       	movw	r30, r18
     fa8:	20 81       	ld	r18, Z
     faa:	2e 7f       	andi	r18, 0xFE	; 254
     fac:	fc 01       	movw	r30, r24
     fae:	20 83       	st	Z, r18
	set_bit(RF_DDR, MOSI_BIT_POS); // MOSI output
     fb0:	8a e2       	ldi	r24, 0x2A	; 42
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	2a e2       	ldi	r18, 0x2A	; 42
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	f9 01       	movw	r30, r18
     fba:	20 81       	ld	r18, Z
     fbc:	22 60       	ori	r18, 0x02	; 2
     fbe:	fc 01       	movw	r30, r24
     fc0:	20 83       	st	Z, r18
	set_bit(RF_DDR, SCK_BIT_POS); // SCK output
     fc2:	8a e2       	ldi	r24, 0x2A	; 42
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	2a e2       	ldi	r18, 0x2A	; 42
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	f9 01       	movw	r30, r18
     fcc:	20 81       	ld	r18, Z
     fce:	20 61       	ori	r18, 0x10	; 16
     fd0:	fc 01       	movw	r30, r24
     fd2:	20 83       	st	Z, r18
}
     fd4:	cf 91       	pop	r28
     fd6:	df 91       	pop	r29
     fd8:	08 95       	ret

00000fda <nrf24_ce_digitalWrite>:
/* ------------------------------------------------------------------------- */
void nrf24_ce_digitalWrite(uint8_t state)
{
     fda:	df 93       	push	r29
     fdc:	cf 93       	push	r28
     fde:	0f 92       	push	r0
     fe0:	cd b7       	in	r28, 0x3d	; 61
     fe2:	de b7       	in	r29, 0x3e	; 62
     fe4:	89 83       	std	Y+1, r24	; 0x01
	if(state)
     fe6:	89 81       	ldd	r24, Y+1	; 0x01
     fe8:	88 23       	and	r24, r24
     fea:	51 f0       	breq	.+20     	; 0x1000 <nrf24_ce_digitalWrite+0x26>
	{
		set_bit(CE_CSN_PORT, CE_BIT_POS);
     fec:	88 e2       	ldi	r24, 0x28	; 40
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	28 e2       	ldi	r18, 0x28	; 40
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	f9 01       	movw	r30, r18
     ff6:	20 81       	ld	r18, Z
     ff8:	21 60       	ori	r18, 0x01	; 1
     ffa:	fc 01       	movw	r30, r24
     ffc:	20 83       	st	Z, r18
     ffe:	09 c0       	rjmp	.+18     	; 0x1012 <nrf24_ce_digitalWrite+0x38>
	}
	else
	{
		clr_bit(CE_CSN_PORT, CE_BIT_POS);
    1000:	88 e2       	ldi	r24, 0x28	; 40
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	28 e2       	ldi	r18, 0x28	; 40
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	f9 01       	movw	r30, r18
    100a:	20 81       	ld	r18, Z
    100c:	2e 7f       	andi	r18, 0xFE	; 254
    100e:	fc 01       	movw	r30, r24
    1010:	20 83       	st	Z, r18
	}
}
    1012:	0f 90       	pop	r0
    1014:	cf 91       	pop	r28
    1016:	df 91       	pop	r29
    1018:	08 95       	ret

0000101a <nrf24_csn_digitalWrite>:
/* ------------------------------------------------------------------------- */
void nrf24_csn_digitalWrite(uint8_t state)
{
    101a:	df 93       	push	r29
    101c:	cf 93       	push	r28
    101e:	0f 92       	push	r0
    1020:	cd b7       	in	r28, 0x3d	; 61
    1022:	de b7       	in	r29, 0x3e	; 62
    1024:	89 83       	std	Y+1, r24	; 0x01
	if(state)
    1026:	89 81       	ldd	r24, Y+1	; 0x01
    1028:	88 23       	and	r24, r24
    102a:	51 f0       	breq	.+20     	; 0x1040 <nrf24_csn_digitalWrite+0x26>
	{
		set_bit(CE_CSN_PORT, CSN_BIT_POS);
    102c:	88 e2       	ldi	r24, 0x28	; 40
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	28 e2       	ldi	r18, 0x28	; 40
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	f9 01       	movw	r30, r18
    1036:	20 81       	ld	r18, Z
    1038:	22 60       	ori	r18, 0x02	; 2
    103a:	fc 01       	movw	r30, r24
    103c:	20 83       	st	Z, r18
    103e:	09 c0       	rjmp	.+18     	; 0x1052 <nrf24_csn_digitalWrite+0x38>
	}
	else
	{
		clr_bit(CE_CSN_PORT, CSN_BIT_POS);
    1040:	88 e2       	ldi	r24, 0x28	; 40
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	28 e2       	ldi	r18, 0x28	; 40
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	f9 01       	movw	r30, r18
    104a:	20 81       	ld	r18, Z
    104c:	2d 7f       	andi	r18, 0xFD	; 253
    104e:	fc 01       	movw	r30, r24
    1050:	20 83       	st	Z, r18
	}
}
    1052:	0f 90       	pop	r0
    1054:	cf 91       	pop	r28
    1056:	df 91       	pop	r29
    1058:	08 95       	ret

0000105a <nrf24_sck_digitalWrite>:
/* ------------------------------------------------------------------------- */
void nrf24_sck_digitalWrite(uint8_t state)
{
    105a:	df 93       	push	r29
    105c:	cf 93       	push	r28
    105e:	0f 92       	push	r0
    1060:	cd b7       	in	r28, 0x3d	; 61
    1062:	de b7       	in	r29, 0x3e	; 62
    1064:	89 83       	std	Y+1, r24	; 0x01
	if(state)
    1066:	89 81       	ldd	r24, Y+1	; 0x01
    1068:	88 23       	and	r24, r24
    106a:	51 f0       	breq	.+20     	; 0x1080 <nrf24_sck_digitalWrite+0x26>
	{
		set_bit(RF_PORT, SCK_BIT_POS);
    106c:	8b e2       	ldi	r24, 0x2B	; 43
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	2b e2       	ldi	r18, 0x2B	; 43
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	f9 01       	movw	r30, r18
    1076:	20 81       	ld	r18, Z
    1078:	20 61       	ori	r18, 0x10	; 16
    107a:	fc 01       	movw	r30, r24
    107c:	20 83       	st	Z, r18
    107e:	09 c0       	rjmp	.+18     	; 0x1092 <nrf24_sck_digitalWrite+0x38>
	}
	else
	{
		clr_bit(RF_PORT, SCK_BIT_POS);
    1080:	8b e2       	ldi	r24, 0x2B	; 43
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	2b e2       	ldi	r18, 0x2B	; 43
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	f9 01       	movw	r30, r18
    108a:	20 81       	ld	r18, Z
    108c:	2f 7e       	andi	r18, 0xEF	; 239
    108e:	fc 01       	movw	r30, r24
    1090:	20 83       	st	Z, r18
	}
}
    1092:	0f 90       	pop	r0
    1094:	cf 91       	pop	r28
    1096:	df 91       	pop	r29
    1098:	08 95       	ret

0000109a <nrf24_mosi_digitalWrite>:
/* ------------------------------------------------------------------------- */
void nrf24_mosi_digitalWrite(uint8_t state)
{
    109a:	df 93       	push	r29
    109c:	cf 93       	push	r28
    109e:	0f 92       	push	r0
    10a0:	cd b7       	in	r28, 0x3d	; 61
    10a2:	de b7       	in	r29, 0x3e	; 62
    10a4:	89 83       	std	Y+1, r24	; 0x01
	if(state)
    10a6:	89 81       	ldd	r24, Y+1	; 0x01
    10a8:	88 23       	and	r24, r24
    10aa:	51 f0       	breq	.+20     	; 0x10c0 <nrf24_mosi_digitalWrite+0x26>
	{
		set_bit(RF_PORT, MOSI_BIT_POS);
    10ac:	8b e2       	ldi	r24, 0x2B	; 43
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	2b e2       	ldi	r18, 0x2B	; 43
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	f9 01       	movw	r30, r18
    10b6:	20 81       	ld	r18, Z
    10b8:	22 60       	ori	r18, 0x02	; 2
    10ba:	fc 01       	movw	r30, r24
    10bc:	20 83       	st	Z, r18
    10be:	09 c0       	rjmp	.+18     	; 0x10d2 <nrf24_mosi_digitalWrite+0x38>
	}
	else
	{
		clr_bit(RF_PORT, MOSI_BIT_POS);
    10c0:	8b e2       	ldi	r24, 0x2B	; 43
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	2b e2       	ldi	r18, 0x2B	; 43
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	f9 01       	movw	r30, r18
    10ca:	20 81       	ld	r18, Z
    10cc:	2d 7f       	andi	r18, 0xFD	; 253
    10ce:	fc 01       	movw	r30, r24
    10d0:	20 83       	st	Z, r18
	}
}
    10d2:	0f 90       	pop	r0
    10d4:	cf 91       	pop	r28
    10d6:	df 91       	pop	r29
    10d8:	08 95       	ret

000010da <nrf24_miso_digitalRead>:
/* ------------------------------------------------------------------------- */
uint8_t nrf24_miso_digitalRead()
{
    10da:	df 93       	push	r29
    10dc:	cf 93       	push	r28
    10de:	cd b7       	in	r28, 0x3d	; 61
    10e0:	de b7       	in	r29, 0x3e	; 62
	return check_bit(RF_PIN, MISO_BIT_POS);
    10e2:	89 e2       	ldi	r24, 0x29	; 41
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	fc 01       	movw	r30, r24
    10e8:	80 81       	ld	r24, Z
    10ea:	81 70       	andi	r24, 0x01	; 1
}
    10ec:	cf 91       	pop	r28
    10ee:	df 91       	pop	r29
    10f0:	08 95       	ret

000010f2 <nrf24_initRF_SAFE>:
/* ------------------------------------------------------------------------- */


void nrf24_initRF_SAFE(uint8_t boardIndex,TransmissionMode initMode){
    10f2:	df 93       	push	r29
    10f4:	cf 93       	push	r28
    10f6:	00 d0       	rcall	.+0      	; 0x10f8 <nrf24_initRF_SAFE+0x6>
    10f8:	0f 92       	push	r0
    10fa:	cd b7       	in	r28, 0x3d	; 61
    10fc:	de b7       	in	r29, 0x3e	; 62
    10fe:	8a 83       	std	Y+2, r24	; 0x02
    1100:	6b 83       	std	Y+3, r22	; 0x03

	initliazeMemory();
    1102:	0e 94 53 00 	call	0xa6	; 0xa6 <initliazeMemory>
	bool successfulRfInit = false;
    1106:	19 82       	std	Y+1, r1	; 0x01
	
	while(successfulRfInit==false){
    1108:	12 c0       	rjmp	.+36     	; 0x112e <nrf24_initRF_SAFE+0x3c>
		nrf24_powerDown();
    110a:	0e 94 8b 06 	call	0xd16	; 0xd16 <nrf24_powerDown>
		nrf24_init();
    110e:	0e 94 9c 03 	call	0x738	; 0x738 <nrf24_init>
		nrf24_config(GENERAL_RF_CHANNEL,32);
    1112:	80 91 73 01 	lds	r24, 0x0173
    1116:	60 e2       	ldi	r22, 0x20	; 32
    1118:	0e 94 ab 03 	call	0x756	; 0x756 <nrf24_config>
		if (nrf24_checkConfig()) { successfulRfInit = true; } else { faultyRF_Alarm(); }
    111c:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <nrf24_checkConfig>
    1120:	88 23       	and	r24, r24
    1122:	19 f0       	breq	.+6      	; 0x112a <nrf24_initRF_SAFE+0x38>
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	89 83       	std	Y+1, r24	; 0x01
    1128:	02 c0       	rjmp	.+4      	; 0x112e <nrf24_initRF_SAFE+0x3c>
    112a:	0e 94 a2 04 	call	0x944	; 0x944 <faultyRF_Alarm>
void nrf24_initRF_SAFE(uint8_t boardIndex,TransmissionMode initMode){

	initliazeMemory();
	bool successfulRfInit = false;
	
	while(successfulRfInit==false){
    112e:	99 81       	ldd	r25, Y+1	; 0x01
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	89 27       	eor	r24, r25
    1134:	88 23       	and	r24, r24
    1136:	49 f7       	brne	.-46     	; 0x110a <nrf24_initRF_SAFE+0x18>
		nrf24_init();
		nrf24_config(GENERAL_RF_CHANNEL,32);
		if (nrf24_checkConfig()) { successfulRfInit = true; } else { faultyRF_Alarm(); }
	}
	
	if (initMode==TRANSMIT){
    1138:	8b 81       	ldd	r24, Y+3	; 0x03
    113a:	81 30       	cpi	r24, 0x01	; 1
    113c:	99 f4       	brne	.+38     	; 0x1164 <nrf24_initRF_SAFE+0x72>
		nrf24_tx_address(CURRENT_BOARD_ADDRESS);
    113e:	80 91 71 01 	lds	r24, 0x0171
    1142:	90 91 72 01 	lds	r25, 0x0172
    1146:	0e 94 ee 05 	call	0xbdc	; 0xbdc <nrf24_tx_address>
		nrf24_rx_address(BOARD_ADDRESS[boardIndex]);
    114a:	8a 81       	ldd	r24, Y+2	; 0x02
    114c:	88 2f       	mov	r24, r24
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	88 0f       	add	r24, r24
    1152:	99 1f       	adc	r25, r25
    1154:	85 59       	subi	r24, 0x95	; 149
    1156:	9e 4f       	sbci	r25, 0xFE	; 254
    1158:	fc 01       	movw	r30, r24
    115a:	80 81       	ld	r24, Z
    115c:	91 81       	ldd	r25, Z+1	; 0x01
    115e:	0e 94 d5 05 	call	0xbaa	; 0xbaa <nrf24_rx_address>
    1162:	12 c0       	rjmp	.+36     	; 0x1188 <nrf24_initRF_SAFE+0x96>
	}else{
		nrf24_tx_address(BOARD_ADDRESS[boardIndex]);
    1164:	8a 81       	ldd	r24, Y+2	; 0x02
    1166:	88 2f       	mov	r24, r24
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	88 0f       	add	r24, r24
    116c:	99 1f       	adc	r25, r25
    116e:	85 59       	subi	r24, 0x95	; 149
    1170:	9e 4f       	sbci	r25, 0xFE	; 254
    1172:	fc 01       	movw	r30, r24
    1174:	80 81       	ld	r24, Z
    1176:	91 81       	ldd	r25, Z+1	; 0x01
    1178:	0e 94 ee 05 	call	0xbdc	; 0xbdc <nrf24_tx_address>
		nrf24_rx_address(CURRENT_BOARD_ADDRESS);
    117c:	80 91 71 01 	lds	r24, 0x0171
    1180:	90 91 72 01 	lds	r25, 0x0172
    1184:	0e 94 d5 05 	call	0xbaa	; 0xbaa <nrf24_rx_address>
	}
	nrf24_powerUpRx();
    1188:	0e 94 6d 06 	call	0xcda	; 0xcda <nrf24_powerUpRx>
    118c:	0f 90       	pop	r0
    118e:	0f 90       	pop	r0
    1190:	0f 90       	pop	r0
    1192:	cf 91       	pop	r28
    1194:	df 91       	pop	r29
    1196:	08 95       	ret

00001198 <__cmpsf2>:
    1198:	2f d0       	rcall	.+94     	; 0x11f8 <__fp_cmp>
    119a:	08 f4       	brcc	.+2      	; 0x119e <__cmpsf2+0x6>
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	08 95       	ret

000011a0 <__fixunssfsi>:
    11a0:	57 d0       	rcall	.+174    	; 0x1250 <__fp_splitA>
    11a2:	88 f0       	brcs	.+34     	; 0x11c6 <__fixunssfsi+0x26>
    11a4:	9f 57       	subi	r25, 0x7F	; 127
    11a6:	90 f0       	brcs	.+36     	; 0x11cc <__fixunssfsi+0x2c>
    11a8:	b9 2f       	mov	r27, r25
    11aa:	99 27       	eor	r25, r25
    11ac:	b7 51       	subi	r27, 0x17	; 23
    11ae:	a0 f0       	brcs	.+40     	; 0x11d8 <__fixunssfsi+0x38>
    11b0:	d1 f0       	breq	.+52     	; 0x11e6 <__fixunssfsi+0x46>
    11b2:	66 0f       	add	r22, r22
    11b4:	77 1f       	adc	r23, r23
    11b6:	88 1f       	adc	r24, r24
    11b8:	99 1f       	adc	r25, r25
    11ba:	1a f0       	brmi	.+6      	; 0x11c2 <__fixunssfsi+0x22>
    11bc:	ba 95       	dec	r27
    11be:	c9 f7       	brne	.-14     	; 0x11b2 <__fixunssfsi+0x12>
    11c0:	12 c0       	rjmp	.+36     	; 0x11e6 <__fixunssfsi+0x46>
    11c2:	b1 30       	cpi	r27, 0x01	; 1
    11c4:	81 f0       	breq	.+32     	; 0x11e6 <__fixunssfsi+0x46>
    11c6:	5e d0       	rcall	.+188    	; 0x1284 <__fp_zero>
    11c8:	b1 e0       	ldi	r27, 0x01	; 1
    11ca:	08 95       	ret
    11cc:	5b c0       	rjmp	.+182    	; 0x1284 <__fp_zero>
    11ce:	67 2f       	mov	r22, r23
    11d0:	78 2f       	mov	r23, r24
    11d2:	88 27       	eor	r24, r24
    11d4:	b8 5f       	subi	r27, 0xF8	; 248
    11d6:	39 f0       	breq	.+14     	; 0x11e6 <__fixunssfsi+0x46>
    11d8:	b9 3f       	cpi	r27, 0xF9	; 249
    11da:	cc f3       	brlt	.-14     	; 0x11ce <__fixunssfsi+0x2e>
    11dc:	86 95       	lsr	r24
    11de:	77 95       	ror	r23
    11e0:	67 95       	ror	r22
    11e2:	b3 95       	inc	r27
    11e4:	d9 f7       	brne	.-10     	; 0x11dc <__fixunssfsi+0x3c>
    11e6:	3e f4       	brtc	.+14     	; 0x11f6 <__fixunssfsi+0x56>
    11e8:	90 95       	com	r25
    11ea:	80 95       	com	r24
    11ec:	70 95       	com	r23
    11ee:	61 95       	neg	r22
    11f0:	7f 4f       	sbci	r23, 0xFF	; 255
    11f2:	8f 4f       	sbci	r24, 0xFF	; 255
    11f4:	9f 4f       	sbci	r25, 0xFF	; 255
    11f6:	08 95       	ret

000011f8 <__fp_cmp>:
    11f8:	99 0f       	add	r25, r25
    11fa:	00 08       	sbc	r0, r0
    11fc:	55 0f       	add	r21, r21
    11fe:	aa 0b       	sbc	r26, r26
    1200:	e0 e8       	ldi	r30, 0x80	; 128
    1202:	fe ef       	ldi	r31, 0xFE	; 254
    1204:	16 16       	cp	r1, r22
    1206:	17 06       	cpc	r1, r23
    1208:	e8 07       	cpc	r30, r24
    120a:	f9 07       	cpc	r31, r25
    120c:	c0 f0       	brcs	.+48     	; 0x123e <__fp_cmp+0x46>
    120e:	12 16       	cp	r1, r18
    1210:	13 06       	cpc	r1, r19
    1212:	e4 07       	cpc	r30, r20
    1214:	f5 07       	cpc	r31, r21
    1216:	98 f0       	brcs	.+38     	; 0x123e <__fp_cmp+0x46>
    1218:	62 1b       	sub	r22, r18
    121a:	73 0b       	sbc	r23, r19
    121c:	84 0b       	sbc	r24, r20
    121e:	95 0b       	sbc	r25, r21
    1220:	39 f4       	brne	.+14     	; 0x1230 <__fp_cmp+0x38>
    1222:	0a 26       	eor	r0, r26
    1224:	61 f0       	breq	.+24     	; 0x123e <__fp_cmp+0x46>
    1226:	23 2b       	or	r18, r19
    1228:	24 2b       	or	r18, r20
    122a:	25 2b       	or	r18, r21
    122c:	21 f4       	brne	.+8      	; 0x1236 <__fp_cmp+0x3e>
    122e:	08 95       	ret
    1230:	0a 26       	eor	r0, r26
    1232:	09 f4       	brne	.+2      	; 0x1236 <__fp_cmp+0x3e>
    1234:	a1 40       	sbci	r26, 0x01	; 1
    1236:	a6 95       	lsr	r26
    1238:	8f ef       	ldi	r24, 0xFF	; 255
    123a:	81 1d       	adc	r24, r1
    123c:	81 1d       	adc	r24, r1
    123e:	08 95       	ret

00001240 <__fp_split3>:
    1240:	57 fd       	sbrc	r21, 7
    1242:	90 58       	subi	r25, 0x80	; 128
    1244:	44 0f       	add	r20, r20
    1246:	55 1f       	adc	r21, r21
    1248:	59 f0       	breq	.+22     	; 0x1260 <__fp_splitA+0x10>
    124a:	5f 3f       	cpi	r21, 0xFF	; 255
    124c:	71 f0       	breq	.+28     	; 0x126a <__fp_splitA+0x1a>
    124e:	47 95       	ror	r20

00001250 <__fp_splitA>:
    1250:	88 0f       	add	r24, r24
    1252:	97 fb       	bst	r25, 7
    1254:	99 1f       	adc	r25, r25
    1256:	61 f0       	breq	.+24     	; 0x1270 <__fp_splitA+0x20>
    1258:	9f 3f       	cpi	r25, 0xFF	; 255
    125a:	79 f0       	breq	.+30     	; 0x127a <__fp_splitA+0x2a>
    125c:	87 95       	ror	r24
    125e:	08 95       	ret
    1260:	12 16       	cp	r1, r18
    1262:	13 06       	cpc	r1, r19
    1264:	14 06       	cpc	r1, r20
    1266:	55 1f       	adc	r21, r21
    1268:	f2 cf       	rjmp	.-28     	; 0x124e <__fp_split3+0xe>
    126a:	46 95       	lsr	r20
    126c:	f1 df       	rcall	.-30     	; 0x1250 <__fp_splitA>
    126e:	08 c0       	rjmp	.+16     	; 0x1280 <__fp_splitA+0x30>
    1270:	16 16       	cp	r1, r22
    1272:	17 06       	cpc	r1, r23
    1274:	18 06       	cpc	r1, r24
    1276:	99 1f       	adc	r25, r25
    1278:	f1 cf       	rjmp	.-30     	; 0x125c <__fp_splitA+0xc>
    127a:	86 95       	lsr	r24
    127c:	71 05       	cpc	r23, r1
    127e:	61 05       	cpc	r22, r1
    1280:	08 94       	sec
    1282:	08 95       	ret

00001284 <__fp_zero>:
    1284:	e8 94       	clt

00001286 <__fp_szero>:
    1286:	bb 27       	eor	r27, r27
    1288:	66 27       	eor	r22, r22
    128a:	77 27       	eor	r23, r23
    128c:	cb 01       	movw	r24, r22
    128e:	97 f9       	bld	r25, 7
    1290:	08 95       	ret

00001292 <__gesf2>:
    1292:	b2 df       	rcall	.-156    	; 0x11f8 <__fp_cmp>
    1294:	08 f4       	brcc	.+2      	; 0x1298 <__gesf2+0x6>
    1296:	8f ef       	ldi	r24, 0xFF	; 255
    1298:	08 95       	ret

0000129a <__mulsf3>:
    129a:	0b d0       	rcall	.+22     	; 0x12b2 <__mulsf3x>
    129c:	78 c0       	rjmp	.+240    	; 0x138e <__fp_round>
    129e:	69 d0       	rcall	.+210    	; 0x1372 <__fp_pscA>
    12a0:	28 f0       	brcs	.+10     	; 0x12ac <__mulsf3+0x12>
    12a2:	6e d0       	rcall	.+220    	; 0x1380 <__fp_pscB>
    12a4:	18 f0       	brcs	.+6      	; 0x12ac <__mulsf3+0x12>
    12a6:	95 23       	and	r25, r21
    12a8:	09 f0       	breq	.+2      	; 0x12ac <__mulsf3+0x12>
    12aa:	5a c0       	rjmp	.+180    	; 0x1360 <__fp_inf>
    12ac:	5f c0       	rjmp	.+190    	; 0x136c <__fp_nan>
    12ae:	11 24       	eor	r1, r1
    12b0:	ea cf       	rjmp	.-44     	; 0x1286 <__fp_szero>

000012b2 <__mulsf3x>:
    12b2:	c6 df       	rcall	.-116    	; 0x1240 <__fp_split3>
    12b4:	a0 f3       	brcs	.-24     	; 0x129e <__mulsf3+0x4>

000012b6 <__mulsf3_pse>:
    12b6:	95 9f       	mul	r25, r21
    12b8:	d1 f3       	breq	.-12     	; 0x12ae <__mulsf3+0x14>
    12ba:	95 0f       	add	r25, r21
    12bc:	50 e0       	ldi	r21, 0x00	; 0
    12be:	55 1f       	adc	r21, r21
    12c0:	62 9f       	mul	r22, r18
    12c2:	f0 01       	movw	r30, r0
    12c4:	72 9f       	mul	r23, r18
    12c6:	bb 27       	eor	r27, r27
    12c8:	f0 0d       	add	r31, r0
    12ca:	b1 1d       	adc	r27, r1
    12cc:	63 9f       	mul	r22, r19
    12ce:	aa 27       	eor	r26, r26
    12d0:	f0 0d       	add	r31, r0
    12d2:	b1 1d       	adc	r27, r1
    12d4:	aa 1f       	adc	r26, r26
    12d6:	64 9f       	mul	r22, r20
    12d8:	66 27       	eor	r22, r22
    12da:	b0 0d       	add	r27, r0
    12dc:	a1 1d       	adc	r26, r1
    12de:	66 1f       	adc	r22, r22
    12e0:	82 9f       	mul	r24, r18
    12e2:	22 27       	eor	r18, r18
    12e4:	b0 0d       	add	r27, r0
    12e6:	a1 1d       	adc	r26, r1
    12e8:	62 1f       	adc	r22, r18
    12ea:	73 9f       	mul	r23, r19
    12ec:	b0 0d       	add	r27, r0
    12ee:	a1 1d       	adc	r26, r1
    12f0:	62 1f       	adc	r22, r18
    12f2:	83 9f       	mul	r24, r19
    12f4:	a0 0d       	add	r26, r0
    12f6:	61 1d       	adc	r22, r1
    12f8:	22 1f       	adc	r18, r18
    12fa:	74 9f       	mul	r23, r20
    12fc:	33 27       	eor	r19, r19
    12fe:	a0 0d       	add	r26, r0
    1300:	61 1d       	adc	r22, r1
    1302:	23 1f       	adc	r18, r19
    1304:	84 9f       	mul	r24, r20
    1306:	60 0d       	add	r22, r0
    1308:	21 1d       	adc	r18, r1
    130a:	82 2f       	mov	r24, r18
    130c:	76 2f       	mov	r23, r22
    130e:	6a 2f       	mov	r22, r26
    1310:	11 24       	eor	r1, r1
    1312:	9f 57       	subi	r25, 0x7F	; 127
    1314:	50 40       	sbci	r21, 0x00	; 0
    1316:	8a f0       	brmi	.+34     	; 0x133a <__mulsf3_pse+0x84>
    1318:	e1 f0       	breq	.+56     	; 0x1352 <__mulsf3_pse+0x9c>
    131a:	88 23       	and	r24, r24
    131c:	4a f0       	brmi	.+18     	; 0x1330 <__mulsf3_pse+0x7a>
    131e:	ee 0f       	add	r30, r30
    1320:	ff 1f       	adc	r31, r31
    1322:	bb 1f       	adc	r27, r27
    1324:	66 1f       	adc	r22, r22
    1326:	77 1f       	adc	r23, r23
    1328:	88 1f       	adc	r24, r24
    132a:	91 50       	subi	r25, 0x01	; 1
    132c:	50 40       	sbci	r21, 0x00	; 0
    132e:	a9 f7       	brne	.-22     	; 0x131a <__mulsf3_pse+0x64>
    1330:	9e 3f       	cpi	r25, 0xFE	; 254
    1332:	51 05       	cpc	r21, r1
    1334:	70 f0       	brcs	.+28     	; 0x1352 <__mulsf3_pse+0x9c>
    1336:	14 c0       	rjmp	.+40     	; 0x1360 <__fp_inf>
    1338:	a6 cf       	rjmp	.-180    	; 0x1286 <__fp_szero>
    133a:	5f 3f       	cpi	r21, 0xFF	; 255
    133c:	ec f3       	brlt	.-6      	; 0x1338 <__mulsf3_pse+0x82>
    133e:	98 3e       	cpi	r25, 0xE8	; 232
    1340:	dc f3       	brlt	.-10     	; 0x1338 <__mulsf3_pse+0x82>
    1342:	86 95       	lsr	r24
    1344:	77 95       	ror	r23
    1346:	67 95       	ror	r22
    1348:	b7 95       	ror	r27
    134a:	f7 95       	ror	r31
    134c:	e7 95       	ror	r30
    134e:	9f 5f       	subi	r25, 0xFF	; 255
    1350:	c1 f7       	brne	.-16     	; 0x1342 <__mulsf3_pse+0x8c>
    1352:	fe 2b       	or	r31, r30
    1354:	88 0f       	add	r24, r24
    1356:	91 1d       	adc	r25, r1
    1358:	96 95       	lsr	r25
    135a:	87 95       	ror	r24
    135c:	97 f9       	bld	r25, 7
    135e:	08 95       	ret

00001360 <__fp_inf>:
    1360:	97 f9       	bld	r25, 7
    1362:	9f 67       	ori	r25, 0x7F	; 127
    1364:	80 e8       	ldi	r24, 0x80	; 128
    1366:	70 e0       	ldi	r23, 0x00	; 0
    1368:	60 e0       	ldi	r22, 0x00	; 0
    136a:	08 95       	ret

0000136c <__fp_nan>:
    136c:	9f ef       	ldi	r25, 0xFF	; 255
    136e:	80 ec       	ldi	r24, 0xC0	; 192
    1370:	08 95       	ret

00001372 <__fp_pscA>:
    1372:	00 24       	eor	r0, r0
    1374:	0a 94       	dec	r0
    1376:	16 16       	cp	r1, r22
    1378:	17 06       	cpc	r1, r23
    137a:	18 06       	cpc	r1, r24
    137c:	09 06       	cpc	r0, r25
    137e:	08 95       	ret

00001380 <__fp_pscB>:
    1380:	00 24       	eor	r0, r0
    1382:	0a 94       	dec	r0
    1384:	12 16       	cp	r1, r18
    1386:	13 06       	cpc	r1, r19
    1388:	14 06       	cpc	r1, r20
    138a:	05 06       	cpc	r0, r21
    138c:	08 95       	ret

0000138e <__fp_round>:
    138e:	09 2e       	mov	r0, r25
    1390:	03 94       	inc	r0
    1392:	00 0c       	add	r0, r0
    1394:	11 f4       	brne	.+4      	; 0x139a <__fp_round+0xc>
    1396:	88 23       	and	r24, r24
    1398:	52 f0       	brmi	.+20     	; 0x13ae <__fp_round+0x20>
    139a:	bb 0f       	add	r27, r27
    139c:	40 f4       	brcc	.+16     	; 0x13ae <__fp_round+0x20>
    139e:	bf 2b       	or	r27, r31
    13a0:	11 f4       	brne	.+4      	; 0x13a6 <__fp_round+0x18>
    13a2:	60 ff       	sbrs	r22, 0
    13a4:	04 c0       	rjmp	.+8      	; 0x13ae <__fp_round+0x20>
    13a6:	6f 5f       	subi	r22, 0xFF	; 255
    13a8:	7f 4f       	sbci	r23, 0xFF	; 255
    13aa:	8f 4f       	sbci	r24, 0xFF	; 255
    13ac:	9f 4f       	sbci	r25, 0xFF	; 255
    13ae:	08 95       	ret

000013b0 <calloc>:
    13b0:	ef 92       	push	r14
    13b2:	ff 92       	push	r15
    13b4:	0f 93       	push	r16
    13b6:	1f 93       	push	r17
    13b8:	cf 93       	push	r28
    13ba:	df 93       	push	r29
    13bc:	68 9f       	mul	r22, r24
    13be:	80 01       	movw	r16, r0
    13c0:	69 9f       	mul	r22, r25
    13c2:	10 0d       	add	r17, r0
    13c4:	78 9f       	mul	r23, r24
    13c6:	10 0d       	add	r17, r0
    13c8:	11 24       	eor	r1, r1
    13ca:	c8 01       	movw	r24, r16
    13cc:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <malloc>
    13d0:	e8 2e       	mov	r14, r24
    13d2:	e7 01       	movw	r28, r14
    13d4:	7e 01       	movw	r14, r28
    13d6:	f9 2e       	mov	r15, r25
    13d8:	e7 01       	movw	r28, r14
    13da:	20 97       	sbiw	r28, 0x00	; 0
    13dc:	31 f0       	breq	.+12     	; 0x13ea <calloc+0x3a>
    13de:	8e 2d       	mov	r24, r14
    13e0:	60 e0       	ldi	r22, 0x00	; 0
    13e2:	70 e0       	ldi	r23, 0x00	; 0
    13e4:	a8 01       	movw	r20, r16
    13e6:	0e 94 89 0b 	call	0x1712	; 0x1712 <memset>
    13ea:	7e 01       	movw	r14, r28
    13ec:	ce 01       	movw	r24, r28
    13ee:	cd b7       	in	r28, 0x3d	; 61
    13f0:	de b7       	in	r29, 0x3e	; 62
    13f2:	e6 e0       	ldi	r30, 0x06	; 6
    13f4:	0c 94 ad 0b 	jmp	0x175a	; 0x175a <__epilogue_restores__+0x18>

000013f8 <malloc>:
    13f8:	cf 93       	push	r28
    13fa:	df 93       	push	r29
    13fc:	82 30       	cpi	r24, 0x02	; 2
    13fe:	91 05       	cpc	r25, r1
    1400:	10 f4       	brcc	.+4      	; 0x1406 <malloc+0xe>
    1402:	82 e0       	ldi	r24, 0x02	; 2
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	e0 91 9f 01 	lds	r30, 0x019F
    140a:	f0 91 a0 01 	lds	r31, 0x01A0
    140e:	40 e0       	ldi	r20, 0x00	; 0
    1410:	50 e0       	ldi	r21, 0x00	; 0
    1412:	20 e0       	ldi	r18, 0x00	; 0
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	26 c0       	rjmp	.+76     	; 0x1464 <malloc+0x6c>
    1418:	60 81       	ld	r22, Z
    141a:	71 81       	ldd	r23, Z+1	; 0x01
    141c:	68 17       	cp	r22, r24
    141e:	79 07       	cpc	r23, r25
    1420:	e0 f0       	brcs	.+56     	; 0x145a <malloc+0x62>
    1422:	68 17       	cp	r22, r24
    1424:	79 07       	cpc	r23, r25
    1426:	81 f4       	brne	.+32     	; 0x1448 <malloc+0x50>
    1428:	82 81       	ldd	r24, Z+2	; 0x02
    142a:	93 81       	ldd	r25, Z+3	; 0x03
    142c:	21 15       	cp	r18, r1
    142e:	31 05       	cpc	r19, r1
    1430:	31 f0       	breq	.+12     	; 0x143e <malloc+0x46>
    1432:	d9 01       	movw	r26, r18
    1434:	13 96       	adiw	r26, 0x03	; 3
    1436:	9c 93       	st	X, r25
    1438:	8e 93       	st	-X, r24
    143a:	12 97       	sbiw	r26, 0x02	; 2
    143c:	2b c0       	rjmp	.+86     	; 0x1494 <malloc+0x9c>
    143e:	90 93 a0 01 	sts	0x01A0, r25
    1442:	80 93 9f 01 	sts	0x019F, r24
    1446:	26 c0       	rjmp	.+76     	; 0x1494 <malloc+0x9c>
    1448:	41 15       	cp	r20, r1
    144a:	51 05       	cpc	r21, r1
    144c:	19 f0       	breq	.+6      	; 0x1454 <malloc+0x5c>
    144e:	64 17       	cp	r22, r20
    1450:	75 07       	cpc	r23, r21
    1452:	18 f4       	brcc	.+6      	; 0x145a <malloc+0x62>
    1454:	ab 01       	movw	r20, r22
    1456:	e9 01       	movw	r28, r18
    1458:	df 01       	movw	r26, r30
    145a:	9f 01       	movw	r18, r30
    145c:	72 81       	ldd	r23, Z+2	; 0x02
    145e:	63 81       	ldd	r22, Z+3	; 0x03
    1460:	e7 2f       	mov	r30, r23
    1462:	f6 2f       	mov	r31, r22
    1464:	30 97       	sbiw	r30, 0x00	; 0
    1466:	c1 f6       	brne	.-80     	; 0x1418 <malloc+0x20>
    1468:	41 15       	cp	r20, r1
    146a:	51 05       	cpc	r21, r1
    146c:	01 f1       	breq	.+64     	; 0x14ae <malloc+0xb6>
    146e:	48 1b       	sub	r20, r24
    1470:	59 0b       	sbc	r21, r25
    1472:	44 30       	cpi	r20, 0x04	; 4
    1474:	51 05       	cpc	r21, r1
    1476:	80 f4       	brcc	.+32     	; 0x1498 <malloc+0xa0>
    1478:	12 96       	adiw	r26, 0x02	; 2
    147a:	8d 91       	ld	r24, X+
    147c:	9c 91       	ld	r25, X
    147e:	13 97       	sbiw	r26, 0x03	; 3
    1480:	20 97       	sbiw	r28, 0x00	; 0
    1482:	19 f0       	breq	.+6      	; 0x148a <malloc+0x92>
    1484:	9b 83       	std	Y+3, r25	; 0x03
    1486:	8a 83       	std	Y+2, r24	; 0x02
    1488:	04 c0       	rjmp	.+8      	; 0x1492 <malloc+0x9a>
    148a:	90 93 a0 01 	sts	0x01A0, r25
    148e:	80 93 9f 01 	sts	0x019F, r24
    1492:	fd 01       	movw	r30, r26
    1494:	32 96       	adiw	r30, 0x02	; 2
    1496:	46 c0       	rjmp	.+140    	; 0x1524 <malloc+0x12c>
    1498:	fd 01       	movw	r30, r26
    149a:	e4 0f       	add	r30, r20
    149c:	f5 1f       	adc	r31, r21
    149e:	81 93       	st	Z+, r24
    14a0:	91 93       	st	Z+, r25
    14a2:	42 50       	subi	r20, 0x02	; 2
    14a4:	50 40       	sbci	r21, 0x00	; 0
    14a6:	11 96       	adiw	r26, 0x01	; 1
    14a8:	5c 93       	st	X, r21
    14aa:	4e 93       	st	-X, r20
    14ac:	3b c0       	rjmp	.+118    	; 0x1524 <malloc+0x12c>
    14ae:	20 91 9d 01 	lds	r18, 0x019D
    14b2:	30 91 9e 01 	lds	r19, 0x019E
    14b6:	21 15       	cp	r18, r1
    14b8:	31 05       	cpc	r19, r1
    14ba:	41 f4       	brne	.+16     	; 0x14cc <malloc+0xd4>
    14bc:	20 91 58 01 	lds	r18, 0x0158
    14c0:	30 91 59 01 	lds	r19, 0x0159
    14c4:	30 93 9e 01 	sts	0x019E, r19
    14c8:	20 93 9d 01 	sts	0x019D, r18
    14cc:	20 91 5a 01 	lds	r18, 0x015A
    14d0:	30 91 5b 01 	lds	r19, 0x015B
    14d4:	21 15       	cp	r18, r1
    14d6:	31 05       	cpc	r19, r1
    14d8:	41 f4       	brne	.+16     	; 0x14ea <malloc+0xf2>
    14da:	2d b7       	in	r18, 0x3d	; 61
    14dc:	3e b7       	in	r19, 0x3e	; 62
    14de:	40 91 56 01 	lds	r20, 0x0156
    14e2:	50 91 57 01 	lds	r21, 0x0157
    14e6:	24 1b       	sub	r18, r20
    14e8:	35 0b       	sbc	r19, r21
    14ea:	e0 91 9d 01 	lds	r30, 0x019D
    14ee:	f0 91 9e 01 	lds	r31, 0x019E
    14f2:	e2 17       	cp	r30, r18
    14f4:	f3 07       	cpc	r31, r19
    14f6:	a0 f4       	brcc	.+40     	; 0x1520 <malloc+0x128>
    14f8:	2e 1b       	sub	r18, r30
    14fa:	3f 0b       	sbc	r19, r31
    14fc:	28 17       	cp	r18, r24
    14fe:	39 07       	cpc	r19, r25
    1500:	78 f0       	brcs	.+30     	; 0x1520 <malloc+0x128>
    1502:	ac 01       	movw	r20, r24
    1504:	4e 5f       	subi	r20, 0xFE	; 254
    1506:	5f 4f       	sbci	r21, 0xFF	; 255
    1508:	24 17       	cp	r18, r20
    150a:	35 07       	cpc	r19, r21
    150c:	48 f0       	brcs	.+18     	; 0x1520 <malloc+0x128>
    150e:	4e 0f       	add	r20, r30
    1510:	5f 1f       	adc	r21, r31
    1512:	50 93 9e 01 	sts	0x019E, r21
    1516:	40 93 9d 01 	sts	0x019D, r20
    151a:	81 93       	st	Z+, r24
    151c:	91 93       	st	Z+, r25
    151e:	02 c0       	rjmp	.+4      	; 0x1524 <malloc+0x12c>
    1520:	e0 e0       	ldi	r30, 0x00	; 0
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	cf 01       	movw	r24, r30
    1526:	df 91       	pop	r29
    1528:	cf 91       	pop	r28
    152a:	08 95       	ret

0000152c <free>:
    152c:	cf 93       	push	r28
    152e:	df 93       	push	r29
    1530:	00 97       	sbiw	r24, 0x00	; 0
    1532:	09 f4       	brne	.+2      	; 0x1536 <free+0xa>
    1534:	91 c0       	rjmp	.+290    	; 0x1658 <free+0x12c>
    1536:	fc 01       	movw	r30, r24
    1538:	32 97       	sbiw	r30, 0x02	; 2
    153a:	13 82       	std	Z+3, r1	; 0x03
    153c:	12 82       	std	Z+2, r1	; 0x02
    153e:	60 91 9f 01 	lds	r22, 0x019F
    1542:	70 91 a0 01 	lds	r23, 0x01A0
    1546:	61 15       	cp	r22, r1
    1548:	71 05       	cpc	r23, r1
    154a:	81 f4       	brne	.+32     	; 0x156c <free+0x40>
    154c:	20 81       	ld	r18, Z
    154e:	31 81       	ldd	r19, Z+1	; 0x01
    1550:	28 0f       	add	r18, r24
    1552:	39 1f       	adc	r19, r25
    1554:	80 91 9d 01 	lds	r24, 0x019D
    1558:	90 91 9e 01 	lds	r25, 0x019E
    155c:	82 17       	cp	r24, r18
    155e:	93 07       	cpc	r25, r19
    1560:	99 f5       	brne	.+102    	; 0x15c8 <free+0x9c>
    1562:	f0 93 9e 01 	sts	0x019E, r31
    1566:	e0 93 9d 01 	sts	0x019D, r30
    156a:	76 c0       	rjmp	.+236    	; 0x1658 <free+0x12c>
    156c:	db 01       	movw	r26, r22
    156e:	80 e0       	ldi	r24, 0x00	; 0
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	02 c0       	rjmp	.+4      	; 0x1578 <free+0x4c>
    1574:	cd 01       	movw	r24, r26
    1576:	d9 01       	movw	r26, r18
    1578:	ae 17       	cp	r26, r30
    157a:	bf 07       	cpc	r27, r31
    157c:	48 f4       	brcc	.+18     	; 0x1590 <free+0x64>
    157e:	12 96       	adiw	r26, 0x02	; 2
    1580:	2d 91       	ld	r18, X+
    1582:	3c 91       	ld	r19, X
    1584:	13 97       	sbiw	r26, 0x03	; 3
    1586:	21 15       	cp	r18, r1
    1588:	31 05       	cpc	r19, r1
    158a:	a1 f7       	brne	.-24     	; 0x1574 <free+0x48>
    158c:	cd 01       	movw	r24, r26
    158e:	21 c0       	rjmp	.+66     	; 0x15d2 <free+0xa6>
    1590:	b3 83       	std	Z+3, r27	; 0x03
    1592:	a2 83       	std	Z+2, r26	; 0x02
    1594:	ef 01       	movw	r28, r30
    1596:	49 91       	ld	r20, Y+
    1598:	59 91       	ld	r21, Y+
    159a:	9e 01       	movw	r18, r28
    159c:	24 0f       	add	r18, r20
    159e:	35 1f       	adc	r19, r21
    15a0:	a2 17       	cp	r26, r18
    15a2:	b3 07       	cpc	r27, r19
    15a4:	79 f4       	brne	.+30     	; 0x15c4 <free+0x98>
    15a6:	2d 91       	ld	r18, X+
    15a8:	3c 91       	ld	r19, X
    15aa:	11 97       	sbiw	r26, 0x01	; 1
    15ac:	24 0f       	add	r18, r20
    15ae:	35 1f       	adc	r19, r21
    15b0:	2e 5f       	subi	r18, 0xFE	; 254
    15b2:	3f 4f       	sbci	r19, 0xFF	; 255
    15b4:	31 83       	std	Z+1, r19	; 0x01
    15b6:	20 83       	st	Z, r18
    15b8:	12 96       	adiw	r26, 0x02	; 2
    15ba:	2d 91       	ld	r18, X+
    15bc:	3c 91       	ld	r19, X
    15be:	13 97       	sbiw	r26, 0x03	; 3
    15c0:	33 83       	std	Z+3, r19	; 0x03
    15c2:	22 83       	std	Z+2, r18	; 0x02
    15c4:	00 97       	sbiw	r24, 0x00	; 0
    15c6:	29 f4       	brne	.+10     	; 0x15d2 <free+0xa6>
    15c8:	f0 93 a0 01 	sts	0x01A0, r31
    15cc:	e0 93 9f 01 	sts	0x019F, r30
    15d0:	43 c0       	rjmp	.+134    	; 0x1658 <free+0x12c>
    15d2:	dc 01       	movw	r26, r24
    15d4:	13 96       	adiw	r26, 0x03	; 3
    15d6:	fc 93       	st	X, r31
    15d8:	ee 93       	st	-X, r30
    15da:	12 97       	sbiw	r26, 0x02	; 2
    15dc:	4d 91       	ld	r20, X+
    15de:	5d 91       	ld	r21, X+
    15e0:	a4 0f       	add	r26, r20
    15e2:	b5 1f       	adc	r27, r21
    15e4:	ea 17       	cp	r30, r26
    15e6:	fb 07       	cpc	r31, r27
    15e8:	69 f4       	brne	.+26     	; 0x1604 <free+0xd8>
    15ea:	20 81       	ld	r18, Z
    15ec:	31 81       	ldd	r19, Z+1	; 0x01
    15ee:	24 0f       	add	r18, r20
    15f0:	35 1f       	adc	r19, r21
    15f2:	2e 5f       	subi	r18, 0xFE	; 254
    15f4:	3f 4f       	sbci	r19, 0xFF	; 255
    15f6:	ec 01       	movw	r28, r24
    15f8:	39 83       	std	Y+1, r19	; 0x01
    15fa:	28 83       	st	Y, r18
    15fc:	22 81       	ldd	r18, Z+2	; 0x02
    15fe:	33 81       	ldd	r19, Z+3	; 0x03
    1600:	3b 83       	std	Y+3, r19	; 0x03
    1602:	2a 83       	std	Y+2, r18	; 0x02
    1604:	e0 e0       	ldi	r30, 0x00	; 0
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	02 c0       	rjmp	.+4      	; 0x160e <free+0xe2>
    160a:	fb 01       	movw	r30, r22
    160c:	bc 01       	movw	r22, r24
    160e:	db 01       	movw	r26, r22
    1610:	12 96       	adiw	r26, 0x02	; 2
    1612:	8d 91       	ld	r24, X+
    1614:	9c 91       	ld	r25, X
    1616:	13 97       	sbiw	r26, 0x03	; 3
    1618:	00 97       	sbiw	r24, 0x00	; 0
    161a:	b9 f7       	brne	.-18     	; 0x160a <free+0xde>
    161c:	9b 01       	movw	r18, r22
    161e:	2e 5f       	subi	r18, 0xFE	; 254
    1620:	3f 4f       	sbci	r19, 0xFF	; 255
    1622:	8d 91       	ld	r24, X+
    1624:	9c 91       	ld	r25, X
    1626:	11 97       	sbiw	r26, 0x01	; 1
    1628:	82 0f       	add	r24, r18
    162a:	93 1f       	adc	r25, r19
    162c:	40 91 9d 01 	lds	r20, 0x019D
    1630:	50 91 9e 01 	lds	r21, 0x019E
    1634:	48 17       	cp	r20, r24
    1636:	59 07       	cpc	r21, r25
    1638:	79 f4       	brne	.+30     	; 0x1658 <free+0x12c>
    163a:	30 97       	sbiw	r30, 0x00	; 0
    163c:	29 f4       	brne	.+10     	; 0x1648 <free+0x11c>
    163e:	10 92 a0 01 	sts	0x01A0, r1
    1642:	10 92 9f 01 	sts	0x019F, r1
    1646:	02 c0       	rjmp	.+4      	; 0x164c <free+0x120>
    1648:	13 82       	std	Z+3, r1	; 0x03
    164a:	12 82       	std	Z+2, r1	; 0x02
    164c:	22 50       	subi	r18, 0x02	; 2
    164e:	30 40       	sbci	r19, 0x00	; 0
    1650:	30 93 9e 01 	sts	0x019E, r19
    1654:	20 93 9d 01 	sts	0x019D, r18
    1658:	df 91       	pop	r29
    165a:	cf 91       	pop	r28
    165c:	08 95       	ret

0000165e <atoi>:
    165e:	fc 01       	movw	r30, r24
    1660:	88 27       	eor	r24, r24
    1662:	99 27       	eor	r25, r25
    1664:	e8 94       	clt
    1666:	21 91       	ld	r18, Z+
    1668:	20 32       	cpi	r18, 0x20	; 32
    166a:	e9 f3       	breq	.-6      	; 0x1666 <atoi+0x8>
    166c:	29 30       	cpi	r18, 0x09	; 9
    166e:	10 f0       	brcs	.+4      	; 0x1674 <atoi+0x16>
    1670:	2e 30       	cpi	r18, 0x0E	; 14
    1672:	c8 f3       	brcs	.-14     	; 0x1666 <atoi+0x8>
    1674:	2b 32       	cpi	r18, 0x2B	; 43
    1676:	41 f0       	breq	.+16     	; 0x1688 <atoi+0x2a>
    1678:	2d 32       	cpi	r18, 0x2D	; 45
    167a:	39 f4       	brne	.+14     	; 0x168a <atoi+0x2c>
    167c:	68 94       	set
    167e:	04 c0       	rjmp	.+8      	; 0x1688 <atoi+0x2a>
    1680:	0e 94 99 0b 	call	0x1732	; 0x1732 <__mulhi_const_10>
    1684:	82 0f       	add	r24, r18
    1686:	91 1d       	adc	r25, r1
    1688:	21 91       	ld	r18, Z+
    168a:	20 53       	subi	r18, 0x30	; 48
    168c:	2a 30       	cpi	r18, 0x0A	; 10
    168e:	c0 f3       	brcs	.-16     	; 0x1680 <atoi+0x22>
    1690:	1e f4       	brtc	.+6      	; 0x1698 <atoi+0x3a>
    1692:	90 95       	com	r25
    1694:	81 95       	neg	r24
    1696:	9f 4f       	sbci	r25, 0xFF	; 255
    1698:	08 95       	ret

0000169a <memchr>:
    169a:	fc 01       	movw	r30, r24
    169c:	41 50       	subi	r20, 0x01	; 1
    169e:	50 40       	sbci	r21, 0x00	; 0
    16a0:	30 f0       	brcs	.+12     	; 0x16ae <memchr+0x14>
    16a2:	01 90       	ld	r0, Z+
    16a4:	06 16       	cp	r0, r22
    16a6:	d1 f7       	brne	.-12     	; 0x169c <memchr+0x2>
    16a8:	31 97       	sbiw	r30, 0x01	; 1
    16aa:	cf 01       	movw	r24, r30
    16ac:	08 95       	ret
    16ae:	88 27       	eor	r24, r24
    16b0:	99 27       	eor	r25, r25
    16b2:	08 95       	ret

000016b4 <memcpy>:
    16b4:	fb 01       	movw	r30, r22
    16b6:	dc 01       	movw	r26, r24
    16b8:	02 c0       	rjmp	.+4      	; 0x16be <memcpy+0xa>
    16ba:	01 90       	ld	r0, Z+
    16bc:	0d 92       	st	X+, r0
    16be:	41 50       	subi	r20, 0x01	; 1
    16c0:	50 40       	sbci	r21, 0x00	; 0
    16c2:	d8 f7       	brcc	.-10     	; 0x16ba <memcpy+0x6>
    16c4:	08 95       	ret

000016c6 <memmem>:
    16c6:	21 15       	cp	r18, r1
    16c8:	31 05       	cpc	r19, r1
    16ca:	11 f1       	breq	.+68     	; 0x1710 <memmem+0x4a>
    16cc:	1f 93       	push	r17
    16ce:	0f 93       	push	r16
    16d0:	24 0f       	add	r18, r20
    16d2:	35 1f       	adc	r19, r21
    16d4:	68 0f       	add	r22, r24
    16d6:	79 1f       	adc	r23, r25
    16d8:	fa 01       	movw	r30, r20
    16da:	11 91       	ld	r17, Z+
    16dc:	af 01       	movw	r20, r30
    16de:	dc 01       	movw	r26, r24
    16e0:	a6 17       	cp	r26, r22
    16e2:	b7 07       	cpc	r27, r23
    16e4:	80 f4       	brcc	.+32     	; 0x1706 <memmem+0x40>
    16e6:	0d 91       	ld	r16, X+
    16e8:	01 17       	cp	r16, r17
    16ea:	d1 f7       	brne	.-12     	; 0x16e0 <memmem+0x1a>
    16ec:	cd 01       	movw	r24, r26
    16ee:	fa 01       	movw	r30, r20
    16f0:	e2 17       	cp	r30, r18
    16f2:	f3 07       	cpc	r31, r19
    16f4:	50 f4       	brcc	.+20     	; 0x170a <memmem+0x44>
    16f6:	a6 17       	cp	r26, r22
    16f8:	b7 07       	cpc	r27, r23
    16fa:	28 f4       	brcc	.+10     	; 0x1706 <memmem+0x40>
    16fc:	0d 91       	ld	r16, X+
    16fe:	01 90       	ld	r0, Z+
    1700:	00 15       	cp	r16, r0
    1702:	b1 f3       	breq	.-20     	; 0x16f0 <memmem+0x2a>
    1704:	ec cf       	rjmp	.-40     	; 0x16de <memmem+0x18>
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	01 97       	sbiw	r24, 0x01	; 1
    170c:	0f 91       	pop	r16
    170e:	1f 91       	pop	r17
    1710:	08 95       	ret

00001712 <memset>:
    1712:	dc 01       	movw	r26, r24
    1714:	01 c0       	rjmp	.+2      	; 0x1718 <memset+0x6>
    1716:	6d 93       	st	X+, r22
    1718:	41 50       	subi	r20, 0x01	; 1
    171a:	50 40       	sbci	r21, 0x00	; 0
    171c:	e0 f7       	brcc	.-8      	; 0x1716 <memset+0x4>
    171e:	08 95       	ret

00001720 <strlen>:
    1720:	fc 01       	movw	r30, r24
    1722:	01 90       	ld	r0, Z+
    1724:	00 20       	and	r0, r0
    1726:	e9 f7       	brne	.-6      	; 0x1722 <strlen+0x2>
    1728:	80 95       	com	r24
    172a:	90 95       	com	r25
    172c:	8e 0f       	add	r24, r30
    172e:	9f 1f       	adc	r25, r31
    1730:	08 95       	ret

00001732 <__mulhi_const_10>:
    1732:	7a e0       	ldi	r23, 0x0A	; 10
    1734:	97 9f       	mul	r25, r23
    1736:	90 2d       	mov	r25, r0
    1738:	87 9f       	mul	r24, r23
    173a:	80 2d       	mov	r24, r0
    173c:	91 0d       	add	r25, r1
    173e:	11 24       	eor	r1, r1
    1740:	08 95       	ret

00001742 <__epilogue_restores__>:
    1742:	2a 88       	ldd	r2, Y+18	; 0x12
    1744:	39 88       	ldd	r3, Y+17	; 0x11
    1746:	48 88       	ldd	r4, Y+16	; 0x10
    1748:	5f 84       	ldd	r5, Y+15	; 0x0f
    174a:	6e 84       	ldd	r6, Y+14	; 0x0e
    174c:	7d 84       	ldd	r7, Y+13	; 0x0d
    174e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1750:	9b 84       	ldd	r9, Y+11	; 0x0b
    1752:	aa 84       	ldd	r10, Y+10	; 0x0a
    1754:	b9 84       	ldd	r11, Y+9	; 0x09
    1756:	c8 84       	ldd	r12, Y+8	; 0x08
    1758:	df 80       	ldd	r13, Y+7	; 0x07
    175a:	ee 80       	ldd	r14, Y+6	; 0x06
    175c:	fd 80       	ldd	r15, Y+5	; 0x05
    175e:	0c 81       	ldd	r16, Y+4	; 0x04
    1760:	1b 81       	ldd	r17, Y+3	; 0x03
    1762:	aa 81       	ldd	r26, Y+2	; 0x02
    1764:	b9 81       	ldd	r27, Y+1	; 0x01
    1766:	ce 0f       	add	r28, r30
    1768:	d1 1d       	adc	r29, r1
    176a:	0f b6       	in	r0, 0x3f	; 63
    176c:	f8 94       	cli
    176e:	de bf       	out	0x3e, r29	; 62
    1770:	0f be       	out	0x3f, r0	; 63
    1772:	cd bf       	out	0x3d, r28	; 61
    1774:	ed 01       	movw	r28, r26
    1776:	08 95       	ret

00001778 <_exit>:
    1778:	f8 94       	cli

0000177a <__stop_program>:
    177a:	ff cf       	rjmp	.-2      	; 0x177a <__stop_program>
