
Proyecto de placa principal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001c6  00800100  000022a2  00002336  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000022a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  008002c6  008002c6  000024fc  2**0
                  ALLOC
  3 .stab         0000207c  00000000  00000000  000024fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000a99  00000000  00000000  00004578  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000002f8  00000000  00000000  00005011  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000925  00000000  00000000  00005309  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001ccb  00000000  00000000  00005c2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000aac  00000000  00000000  000078f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002665  00000000  00000000  000083a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000004d0  00000000  00000000  0000aa0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000c0e  00000000  00000000  0000aedc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000b82  00000000  00000000  0000baea  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000025f  00000000  00000000  0000c66c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000298  00000000  00000000  0000c8cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 47 0b 	jmp	0x168e	; 0x168e <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 0d 0b 	jmp	0x161a	; 0x161a <__vector_20>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e2 ea       	ldi	r30, 0xA2	; 162
      7c:	f2 e2       	ldi	r31, 0x22	; 34
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a6 3c       	cpi	r26, 0xC6	; 198
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	12 e0       	ldi	r17, 0x02	; 2
      8c:	a6 ec       	ldi	r26, 0xC6	; 198
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ac 3d       	cpi	r26, 0xDC	; 220
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 14 04 	call	0x828	; 0x828 <main>
      9e:	0c 94 4f 11 	jmp	0x229e	; 0x229e <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initliazeMemory>:
	{ .commandBase = "CALL_NURSE", .nParameters = 0, .handlerFunction = &CALL_NURSE_HANDLE},
	{ .commandBase = "CURTAIN_POS_CHANGE", .nParameters = 1, .handlerFunction = &CURTAIN_POS_CHANGE_HANDLE},
	{ .commandBase = "STRETCHER_POS_CHANGE", .nParameters = 1, .handlerFunction = &STRETCHER_POS_CHANGE_HANDLE}
};

bool initliazeMemory(){
      a6:	df 93       	push	r29
      a8:	cf 93       	push	r28
      aa:	cd b7       	in	r28, 0x3d	; 61
      ac:	de b7       	in	r29, 0x3e	; 62
	if(memoryInitialized) return false;
      ae:	80 91 d0 02 	lds	r24, 0x02D0
      b2:	88 23       	and	r24, r24
      b4:	11 f0       	breq	.+4      	; 0xba <initliazeMemory+0x14>
      b6:	80 e0       	ldi	r24, 0x00	; 0
      b8:	46 c0       	rjmp	.+140    	; 0x146 <initliazeMemory+0xa0>
	parameter[0] = (void*)calloc(28,1);
      ba:	8c e1       	ldi	r24, 0x1C	; 28
      bc:	90 e0       	ldi	r25, 0x00	; 0
      be:	61 e0       	ldi	r22, 0x01	; 1
      c0:	70 e0       	ldi	r23, 0x00	; 0
      c2:	0e 94 c4 0c 	call	0x1988	; 0x1988 <calloc>
      c6:	90 93 c7 02 	sts	0x02C7, r25
      ca:	80 93 c6 02 	sts	0x02C6, r24
	parameter[1] = (void*)calloc(28,1);
      ce:	8c e1       	ldi	r24, 0x1C	; 28
      d0:	90 e0       	ldi	r25, 0x00	; 0
      d2:	61 e0       	ldi	r22, 0x01	; 1
      d4:	70 e0       	ldi	r23, 0x00	; 0
      d6:	0e 94 c4 0c 	call	0x1988	; 0x1988 <calloc>
      da:	90 93 c9 02 	sts	0x02C9, r25
      de:	80 93 c8 02 	sts	0x02C8, r24
	parameter[2] = (void*)calloc(28,1);
      e2:	8c e1       	ldi	r24, 0x1C	; 28
      e4:	90 e0       	ldi	r25, 0x00	; 0
      e6:	61 e0       	ldi	r22, 0x01	; 1
      e8:	70 e0       	ldi	r23, 0x00	; 0
      ea:	0e 94 c4 0c 	call	0x1988	; 0x1988 <calloc>
      ee:	90 93 cb 02 	sts	0x02CB, r25
      f2:	80 93 ca 02 	sts	0x02CA, r24
	command_buffer = (uint8_t*)calloc(32,1);
      f6:	80 e2       	ldi	r24, 0x20	; 32
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	61 e0       	ldi	r22, 0x01	; 1
      fc:	70 e0       	ldi	r23, 0x00	; 0
      fe:	0e 94 c4 0c 	call	0x1988	; 0x1988 <calloc>
     102:	90 93 cf 02 	sts	0x02CF, r25
     106:	80 93 ce 02 	sts	0x02CE, r24
	if(parameter[0]==nullptr||parameter[1]==nullptr||parameter[2]==nullptr||command_buffer==nullptr) return false;
     10a:	80 91 c6 02 	lds	r24, 0x02C6
     10e:	90 91 c7 02 	lds	r25, 0x02C7
     112:	00 97       	sbiw	r24, 0x00	; 0
     114:	91 f0       	breq	.+36     	; 0x13a <initliazeMemory+0x94>
     116:	80 91 c8 02 	lds	r24, 0x02C8
     11a:	90 91 c9 02 	lds	r25, 0x02C9
     11e:	00 97       	sbiw	r24, 0x00	; 0
     120:	61 f0       	breq	.+24     	; 0x13a <initliazeMemory+0x94>
     122:	80 91 ca 02 	lds	r24, 0x02CA
     126:	90 91 cb 02 	lds	r25, 0x02CB
     12a:	00 97       	sbiw	r24, 0x00	; 0
     12c:	31 f0       	breq	.+12     	; 0x13a <initliazeMemory+0x94>
     12e:	80 91 ce 02 	lds	r24, 0x02CE
     132:	90 91 cf 02 	lds	r25, 0x02CF
     136:	00 97       	sbiw	r24, 0x00	; 0
     138:	11 f4       	brne	.+4      	; 0x13e <initliazeMemory+0x98>
     13a:	80 e0       	ldi	r24, 0x00	; 0
     13c:	04 c0       	rjmp	.+8      	; 0x146 <initliazeMemory+0xa0>
	memoryInitialized = true;
     13e:	81 e0       	ldi	r24, 0x01	; 1
     140:	80 93 d0 02 	sts	0x02D0, r24
	return true;
     144:	81 e0       	ldi	r24, 0x01	; 1
}
     146:	cf 91       	pop	r28
     148:	df 91       	pop	r29
     14a:	08 95       	ret

0000014c <composeCommand>:


void composeCommand(void* output_buffer, commandType* commandT, void** inputParameter){
     14c:	0f 93       	push	r16
     14e:	1f 93       	push	r17
     150:	df 93       	push	r29
     152:	cf 93       	push	r28
     154:	cd b7       	in	r28, 0x3d	; 61
     156:	de b7       	in	r29, 0x3e	; 62
     158:	2c 97       	sbiw	r28, 0x0c	; 12
     15a:	0f b6       	in	r0, 0x3f	; 63
     15c:	f8 94       	cli
     15e:	de bf       	out	0x3e, r29	; 62
     160:	0f be       	out	0x3f, r0	; 63
     162:	cd bf       	out	0x3d, r28	; 61
     164:	98 87       	std	Y+8, r25	; 0x08
     166:	8f 83       	std	Y+7, r24	; 0x07
     168:	7a 87       	std	Y+10, r23	; 0x0a
     16a:	69 87       	std	Y+9, r22	; 0x09
     16c:	5c 87       	std	Y+12, r21	; 0x0c
     16e:	4b 87       	std	Y+11, r20	; 0x0b
	strcpy(output_buffer, commandT->commandBase);
     170:	8f 81       	ldd	r24, Y+7	; 0x07
     172:	98 85       	ldd	r25, Y+8	; 0x08
     174:	29 85       	ldd	r18, Y+9	; 0x09
     176:	3a 85       	ldd	r19, Y+10	; 0x0a
     178:	f9 01       	movw	r30, r18
     17a:	20 81       	ld	r18, Z
     17c:	31 81       	ldd	r19, Z+1	; 0x01
     17e:	b9 01       	movw	r22, r18
     180:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <strcpy>
	char* startParamPTR = (char*)(output_buffer+strlen(commandT->commandBase));
     184:	0f 81       	ldd	r16, Y+7	; 0x07
     186:	18 85       	ldd	r17, Y+8	; 0x08
     188:	89 85       	ldd	r24, Y+9	; 0x09
     18a:	9a 85       	ldd	r25, Y+10	; 0x0a
     18c:	fc 01       	movw	r30, r24
     18e:	80 81       	ld	r24, Z
     190:	91 81       	ldd	r25, Z+1	; 0x01
     192:	0e 94 65 0e 	call	0x1cca	; 0x1cca <strlen>
     196:	80 0f       	add	r24, r16
     198:	91 1f       	adc	r25, r17
     19a:	9a 83       	std	Y+2, r25	; 0x02
     19c:	89 83       	std	Y+1, r24	; 0x01
	char* endParamPTR = (char*)(startParamPTR+1+strlen(*inputParameter));
     19e:	8b 85       	ldd	r24, Y+11	; 0x0b
     1a0:	9c 85       	ldd	r25, Y+12	; 0x0c
     1a2:	fc 01       	movw	r30, r24
     1a4:	80 81       	ld	r24, Z
     1a6:	91 81       	ldd	r25, Z+1	; 0x01
     1a8:	0e 94 65 0e 	call	0x1cca	; 0x1cca <strlen>
     1ac:	01 96       	adiw	r24, 0x01	; 1
     1ae:	29 81       	ldd	r18, Y+1	; 0x01
     1b0:	3a 81       	ldd	r19, Y+2	; 0x02
     1b2:	82 0f       	add	r24, r18
     1b4:	93 1f       	adc	r25, r19
     1b6:	9c 83       	std	Y+4, r25	; 0x04
     1b8:	8b 83       	std	Y+3, r24	; 0x03

	for (uint8_t index = 0; index < commandT->nParameters; index++){
     1ba:	1d 82       	std	Y+5, r1	; 0x05
     1bc:	41 c0       	rjmp	.+130    	; 0x240 <composeCommand+0xf4>
		*startParamPTR='[';
     1be:	89 81       	ldd	r24, Y+1	; 0x01
     1c0:	9a 81       	ldd	r25, Y+2	; 0x02
     1c2:	2b e5       	ldi	r18, 0x5B	; 91
     1c4:	fc 01       	movw	r30, r24
     1c6:	20 83       	st	Z, r18
		strcpy(startParamPTR+1, *inputParameter);
     1c8:	89 81       	ldd	r24, Y+1	; 0x01
     1ca:	9a 81       	ldd	r25, Y+2	; 0x02
     1cc:	01 96       	adiw	r24, 0x01	; 1
     1ce:	2b 85       	ldd	r18, Y+11	; 0x0b
     1d0:	3c 85       	ldd	r19, Y+12	; 0x0c
     1d2:	f9 01       	movw	r30, r18
     1d4:	20 81       	ld	r18, Z
     1d6:	31 81       	ldd	r19, Z+1	; 0x01
     1d8:	b9 01       	movw	r22, r18
     1da:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <strcpy>
		*endParamPTR=']';
     1de:	8b 81       	ldd	r24, Y+3	; 0x03
     1e0:	9c 81       	ldd	r25, Y+4	; 0x04
     1e2:	2d e5       	ldi	r18, 0x5D	; 93
     1e4:	fc 01       	movw	r30, r24
     1e6:	20 83       	st	Z, r18
		startParamPTR=(endParamPTR+1);
     1e8:	8b 81       	ldd	r24, Y+3	; 0x03
     1ea:	9c 81       	ldd	r25, Y+4	; 0x04
     1ec:	01 96       	adiw	r24, 0x01	; 1
     1ee:	9a 83       	std	Y+2, r25	; 0x02
     1f0:	89 83       	std	Y+1, r24	; 0x01
		if (index!=(commandT->nParameters-1)){
     1f2:	8d 81       	ldd	r24, Y+5	; 0x05
     1f4:	28 2f       	mov	r18, r24
     1f6:	30 e0       	ldi	r19, 0x00	; 0
     1f8:	89 85       	ldd	r24, Y+9	; 0x09
     1fa:	9a 85       	ldd	r25, Y+10	; 0x0a
     1fc:	fc 01       	movw	r30, r24
     1fe:	82 81       	ldd	r24, Z+2	; 0x02
     200:	88 2f       	mov	r24, r24
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	01 97       	sbiw	r24, 0x01	; 1
     206:	28 17       	cp	r18, r24
     208:	39 07       	cpc	r19, r25
     20a:	b9 f0       	breq	.+46     	; 0x23a <composeCommand+0xee>
			inputParameter++;
     20c:	8b 85       	ldd	r24, Y+11	; 0x0b
     20e:	9c 85       	ldd	r25, Y+12	; 0x0c
     210:	02 96       	adiw	r24, 0x02	; 2
     212:	9c 87       	std	Y+12, r25	; 0x0c
     214:	8b 87       	std	Y+11, r24	; 0x0b
			uint8_t len = strlen(*inputParameter);
     216:	8b 85       	ldd	r24, Y+11	; 0x0b
     218:	9c 85       	ldd	r25, Y+12	; 0x0c
     21a:	fc 01       	movw	r30, r24
     21c:	80 81       	ld	r24, Z
     21e:	91 81       	ldd	r25, Z+1	; 0x01
     220:	0e 94 65 0e 	call	0x1cca	; 0x1cca <strlen>
     224:	8e 83       	std	Y+6, r24	; 0x06
			endParamPTR = (char*)(startParamPTR+len+1);
     226:	8e 81       	ldd	r24, Y+6	; 0x06
     228:	88 2f       	mov	r24, r24
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	01 96       	adiw	r24, 0x01	; 1
     22e:	29 81       	ldd	r18, Y+1	; 0x01
     230:	3a 81       	ldd	r19, Y+2	; 0x02
     232:	82 0f       	add	r24, r18
     234:	93 1f       	adc	r25, r19
     236:	9c 83       	std	Y+4, r25	; 0x04
     238:	8b 83       	std	Y+3, r24	; 0x03
void composeCommand(void* output_buffer, commandType* commandT, void** inputParameter){
	strcpy(output_buffer, commandT->commandBase);
	char* startParamPTR = (char*)(output_buffer+strlen(commandT->commandBase));
	char* endParamPTR = (char*)(startParamPTR+1+strlen(*inputParameter));

	for (uint8_t index = 0; index < commandT->nParameters; index++){
     23a:	8d 81       	ldd	r24, Y+5	; 0x05
     23c:	8f 5f       	subi	r24, 0xFF	; 255
     23e:	8d 83       	std	Y+5, r24	; 0x05
     240:	89 85       	ldd	r24, Y+9	; 0x09
     242:	9a 85       	ldd	r25, Y+10	; 0x0a
     244:	fc 01       	movw	r30, r24
     246:	92 81       	ldd	r25, Z+2	; 0x02
     248:	8d 81       	ldd	r24, Y+5	; 0x05
     24a:	89 17       	cp	r24, r25
     24c:	08 f4       	brcc	.+2      	; 0x250 <composeCommand+0x104>
     24e:	b7 cf       	rjmp	.-146    	; 0x1be <composeCommand+0x72>
			inputParameter++;
			uint8_t len = strlen(*inputParameter);
			endParamPTR = (char*)(startParamPTR+len+1);
		}
	}
	*startParamPTR='\0';
     250:	89 81       	ldd	r24, Y+1	; 0x01
     252:	9a 81       	ldd	r25, Y+2	; 0x02
     254:	fc 01       	movw	r30, r24
     256:	10 82       	st	Z, r1
}
     258:	2c 96       	adiw	r28, 0x0c	; 12
     25a:	0f b6       	in	r0, 0x3f	; 63
     25c:	f8 94       	cli
     25e:	de bf       	out	0x3e, r29	; 62
     260:	0f be       	out	0x3f, r0	; 63
     262:	cd bf       	out	0x3d, r28	; 61
     264:	cf 91       	pop	r28
     266:	df 91       	pop	r29
     268:	1f 91       	pop	r17
     26a:	0f 91       	pop	r16
     26c:	08 95       	ret

0000026e <decomposeCommand>:

bool decomposeCommand(void* input_buffer, commandType* commandT, void** outputParameter){
     26e:	0f 93       	push	r16
     270:	1f 93       	push	r17
     272:	df 93       	push	r29
     274:	cf 93       	push	r28
     276:	cd b7       	in	r28, 0x3d	; 61
     278:	de b7       	in	r29, 0x3e	; 62
     27a:	60 97       	sbiw	r28, 0x10	; 16
     27c:	0f b6       	in	r0, 0x3f	; 63
     27e:	f8 94       	cli
     280:	de bf       	out	0x3e, r29	; 62
     282:	0f be       	out	0x3f, r0	; 63
     284:	cd bf       	out	0x3d, r28	; 61
     286:	9c 87       	std	Y+12, r25	; 0x0c
     288:	8b 87       	std	Y+11, r24	; 0x0b
     28a:	7e 87       	std	Y+14, r23	; 0x0e
     28c:	6d 87       	std	Y+13, r22	; 0x0d
     28e:	58 8b       	std	Y+16, r21	; 0x10
     290:	4f 87       	std	Y+15, r20	; 0x0f
	
	
	for (uint8_t index = 0; index < AVAILABLE_COMMANDS; index++){
     292:	19 82       	std	Y+1, r1	; 0x01
     294:	4e c0       	rjmp	.+156    	; 0x332 <decomposeCommand+0xc4>
		if (memmem(input_buffer, COMMAND_BUFFER_SIZE, availableCommand[index].commandBase, strlen(availableCommand[index].commandBase))!=nullptr) 
     296:	89 81       	ldd	r24, Y+1	; 0x01
     298:	28 2f       	mov	r18, r24
     29a:	30 e0       	ldi	r19, 0x00	; 0
     29c:	c9 01       	movw	r24, r18
     29e:	88 0f       	add	r24, r24
     2a0:	99 1f       	adc	r25, r25
     2a2:	88 0f       	add	r24, r24
     2a4:	99 1f       	adc	r25, r25
     2a6:	82 0f       	add	r24, r18
     2a8:	93 1f       	adc	r25, r19
     2aa:	8c 57       	subi	r24, 0x7C	; 124
     2ac:	9d 4f       	sbci	r25, 0xFD	; 253
     2ae:	fc 01       	movw	r30, r24
     2b0:	00 81       	ld	r16, Z
     2b2:	11 81       	ldd	r17, Z+1	; 0x01
     2b4:	89 81       	ldd	r24, Y+1	; 0x01
     2b6:	28 2f       	mov	r18, r24
     2b8:	30 e0       	ldi	r19, 0x00	; 0
     2ba:	c9 01       	movw	r24, r18
     2bc:	88 0f       	add	r24, r24
     2be:	99 1f       	adc	r25, r25
     2c0:	88 0f       	add	r24, r24
     2c2:	99 1f       	adc	r25, r25
     2c4:	82 0f       	add	r24, r18
     2c6:	93 1f       	adc	r25, r19
     2c8:	8c 57       	subi	r24, 0x7C	; 124
     2ca:	9d 4f       	sbci	r25, 0xFD	; 253
     2cc:	fc 01       	movw	r30, r24
     2ce:	80 81       	ld	r24, Z
     2d0:	91 81       	ldd	r25, Z+1	; 0x01
     2d2:	0e 94 65 0e 	call	0x1cca	; 0x1cca <strlen>
     2d6:	9c 01       	movw	r18, r24
     2d8:	8b 85       	ldd	r24, Y+11	; 0x0b
     2da:	9c 85       	ldd	r25, Y+12	; 0x0c
     2dc:	60 e2       	ldi	r22, 0x20	; 32
     2de:	70 e0       	ldi	r23, 0x00	; 0
     2e0:	a8 01       	movw	r20, r16
     2e2:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <memmem>
     2e6:	00 97       	sbiw	r24, 0x00	; 0
     2e8:	e1 f0       	breq	.+56     	; 0x322 <decomposeCommand+0xb4>
		{ 
			*commandT = availableCommand[index]; break; 
     2ea:	89 81       	ldd	r24, Y+1	; 0x01
     2ec:	28 2f       	mov	r18, r24
     2ee:	30 e0       	ldi	r19, 0x00	; 0
     2f0:	4d 85       	ldd	r20, Y+13	; 0x0d
     2f2:	5e 85       	ldd	r21, Y+14	; 0x0e
     2f4:	c9 01       	movw	r24, r18
     2f6:	88 0f       	add	r24, r24
     2f8:	99 1f       	adc	r25, r25
     2fa:	88 0f       	add	r24, r24
     2fc:	99 1f       	adc	r25, r25
     2fe:	82 0f       	add	r24, r18
     300:	93 1f       	adc	r25, r19
     302:	9c 01       	movw	r18, r24
     304:	2c 57       	subi	r18, 0x7C	; 124
     306:	3d 4f       	sbci	r19, 0xFD	; 253
     308:	ca 01       	movw	r24, r20
     30a:	45 e0       	ldi	r20, 0x05	; 5
     30c:	f9 01       	movw	r30, r18
     30e:	00 80       	ld	r0, Z
     310:	2f 5f       	subi	r18, 0xFF	; 255
     312:	3f 4f       	sbci	r19, 0xFF	; 255
     314:	fc 01       	movw	r30, r24
     316:	00 82       	st	Z, r0
     318:	01 96       	adiw	r24, 0x01	; 1
     31a:	41 50       	subi	r20, 0x01	; 1
     31c:	44 23       	and	r20, r20
     31e:	b1 f7       	brne	.-20     	; 0x30c <decomposeCommand+0x9e>
     320:	0c c0       	rjmp	.+24     	; 0x33a <decomposeCommand+0xcc>
		}
		else if (index==(AVAILABLE_COMMANDS-1)) { return false;}
     322:	89 81       	ldd	r24, Y+1	; 0x01
     324:	8c 30       	cpi	r24, 0x0C	; 12
     326:	11 f4       	brne	.+4      	; 0x32c <decomposeCommand+0xbe>
     328:	80 e0       	ldi	r24, 0x00	; 0
     32a:	77 c0       	rjmp	.+238    	; 0x41a <decomposeCommand+0x1ac>
}

bool decomposeCommand(void* input_buffer, commandType* commandT, void** outputParameter){
	
	
	for (uint8_t index = 0; index < AVAILABLE_COMMANDS; index++){
     32c:	89 81       	ldd	r24, Y+1	; 0x01
     32e:	8f 5f       	subi	r24, 0xFF	; 255
     330:	89 83       	std	Y+1, r24	; 0x01
     332:	89 81       	ldd	r24, Y+1	; 0x01
     334:	8d 30       	cpi	r24, 0x0D	; 13
     336:	08 f4       	brcc	.+2      	; 0x33a <decomposeCommand+0xcc>
     338:	ae cf       	rjmp	.-164    	; 0x296 <decomposeCommand+0x28>
			*commandT = availableCommand[index]; break; 
		}
		else if (index==(AVAILABLE_COMMANDS-1)) { return false;}
	}
	
	for (uint8_t x = 0; x < commandT->nParameters; x++){
     33a:	1a 82       	std	Y+2, r1	; 0x02
     33c:	63 c0       	rjmp	.+198    	; 0x404 <decomposeCommand+0x196>
		uint8_t* startNumPTR = memchr(input_buffer, '[', COMMAND_BUFFER_SIZE);
     33e:	8b 85       	ldd	r24, Y+11	; 0x0b
     340:	9c 85       	ldd	r25, Y+12	; 0x0c
     342:	6b e5       	ldi	r22, 0x5B	; 91
     344:	70 e0       	ldi	r23, 0x00	; 0
     346:	40 e2       	ldi	r20, 0x20	; 32
     348:	50 e0       	ldi	r21, 0x00	; 0
     34a:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <memchr>
     34e:	9c 83       	std	Y+4, r25	; 0x04
     350:	8b 83       	std	Y+3, r24	; 0x03
		uint8_t* endNumPTR = memchr(input_buffer, ']', COMMAND_BUFFER_SIZE);
     352:	8b 85       	ldd	r24, Y+11	; 0x0b
     354:	9c 85       	ldd	r25, Y+12	; 0x0c
     356:	6d e5       	ldi	r22, 0x5D	; 93
     358:	70 e0       	ldi	r23, 0x00	; 0
     35a:	40 e2       	ldi	r20, 0x20	; 32
     35c:	50 e0       	ldi	r21, 0x00	; 0
     35e:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <memchr>
     362:	9e 83       	std	Y+6, r25	; 0x06
     364:	8d 83       	std	Y+5, r24	; 0x05
		if (startNumPTR==nullptr||endNumPTR==nullptr) { if(x==0) return false; break; }
     366:	8b 81       	ldd	r24, Y+3	; 0x03
     368:	9c 81       	ldd	r25, Y+4	; 0x04
     36a:	00 97       	sbiw	r24, 0x00	; 0
     36c:	21 f0       	breq	.+8      	; 0x376 <decomposeCommand+0x108>
     36e:	8d 81       	ldd	r24, Y+5	; 0x05
     370:	9e 81       	ldd	r25, Y+6	; 0x06
     372:	00 97       	sbiw	r24, 0x00	; 0
     374:	31 f4       	brne	.+12     	; 0x382 <decomposeCommand+0x114>
     376:	8a 81       	ldd	r24, Y+2	; 0x02
     378:	88 23       	and	r24, r24
     37a:	09 f0       	breq	.+2      	; 0x37e <decomposeCommand+0x110>
     37c:	4c c0       	rjmp	.+152    	; 0x416 <decomposeCommand+0x1a8>
     37e:	80 e0       	ldi	r24, 0x00	; 0
     380:	4c c0       	rjmp	.+152    	; 0x41a <decomposeCommand+0x1ac>
		(*startNumPTR) = 0x20;
     382:	8b 81       	ldd	r24, Y+3	; 0x03
     384:	9c 81       	ldd	r25, Y+4	; 0x04
     386:	20 e2       	ldi	r18, 0x20	; 32
     388:	fc 01       	movw	r30, r24
     38a:	20 83       	st	Z, r18
		(*endNumPTR) = 0x20;
     38c:	8d 81       	ldd	r24, Y+5	; 0x05
     38e:	9e 81       	ldd	r25, Y+6	; 0x06
     390:	20 e2       	ldi	r18, 0x20	; 32
     392:	fc 01       	movw	r30, r24
     394:	20 83       	st	Z, r18
		startNumPTR++;
     396:	8b 81       	ldd	r24, Y+3	; 0x03
     398:	9c 81       	ldd	r25, Y+4	; 0x04
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	9c 83       	std	Y+4, r25	; 0x04
     39e:	8b 83       	std	Y+3, r24	; 0x03
		uint32_t bytes = ((endNumPTR)) - ((startNumPTR));
     3a0:	2d 81       	ldd	r18, Y+5	; 0x05
     3a2:	3e 81       	ldd	r19, Y+6	; 0x06
     3a4:	8b 81       	ldd	r24, Y+3	; 0x03
     3a6:	9c 81       	ldd	r25, Y+4	; 0x04
     3a8:	a9 01       	movw	r20, r18
     3aa:	48 1b       	sub	r20, r24
     3ac:	59 0b       	sbc	r21, r25
     3ae:	ca 01       	movw	r24, r20
     3b0:	aa 27       	eor	r26, r26
     3b2:	97 fd       	sbrc	r25, 7
     3b4:	a0 95       	com	r26
     3b6:	ba 2f       	mov	r27, r26
     3b8:	8f 83       	std	Y+7, r24	; 0x07
     3ba:	98 87       	std	Y+8, r25	; 0x08
     3bc:	a9 87       	std	Y+9, r26	; 0x09
     3be:	ba 87       	std	Y+10, r27	; 0x0a
		if (bytes>PARAMETER_BUFFER_SIZE) return false;
     3c0:	8f 81       	ldd	r24, Y+7	; 0x07
     3c2:	98 85       	ldd	r25, Y+8	; 0x08
     3c4:	a9 85       	ldd	r26, Y+9	; 0x09
     3c6:	ba 85       	ldd	r27, Y+10	; 0x0a
     3c8:	8d 31       	cpi	r24, 0x1D	; 29
     3ca:	91 05       	cpc	r25, r1
     3cc:	a1 05       	cpc	r26, r1
     3ce:	b1 05       	cpc	r27, r1
     3d0:	10 f0       	brcs	.+4      	; 0x3d6 <decomposeCommand+0x168>
     3d2:	80 e0       	ldi	r24, 0x00	; 0
     3d4:	22 c0       	rjmp	.+68     	; 0x41a <decomposeCommand+0x1ac>
		memcpy(outputParameter[x], startNumPTR, bytes);
     3d6:	8a 81       	ldd	r24, Y+2	; 0x02
     3d8:	88 2f       	mov	r24, r24
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	88 0f       	add	r24, r24
     3de:	99 1f       	adc	r25, r25
     3e0:	2f 85       	ldd	r18, Y+15	; 0x0f
     3e2:	38 89       	ldd	r19, Y+16	; 0x10
     3e4:	82 0f       	add	r24, r18
     3e6:	93 1f       	adc	r25, r19
     3e8:	fc 01       	movw	r30, r24
     3ea:	80 81       	ld	r24, Z
     3ec:	91 81       	ldd	r25, Z+1	; 0x01
     3ee:	2f 81       	ldd	r18, Y+7	; 0x07
     3f0:	38 85       	ldd	r19, Y+8	; 0x08
     3f2:	4b 81       	ldd	r20, Y+3	; 0x03
     3f4:	5c 81       	ldd	r21, Y+4	; 0x04
     3f6:	ba 01       	movw	r22, r20
     3f8:	a9 01       	movw	r20, r18
     3fa:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <memcpy>
			*commandT = availableCommand[index]; break; 
		}
		else if (index==(AVAILABLE_COMMANDS-1)) { return false;}
	}
	
	for (uint8_t x = 0; x < commandT->nParameters; x++){
     3fe:	8a 81       	ldd	r24, Y+2	; 0x02
     400:	8f 5f       	subi	r24, 0xFF	; 255
     402:	8a 83       	std	Y+2, r24	; 0x02
     404:	8d 85       	ldd	r24, Y+13	; 0x0d
     406:	9e 85       	ldd	r25, Y+14	; 0x0e
     408:	fc 01       	movw	r30, r24
     40a:	92 81       	ldd	r25, Z+2	; 0x02
     40c:	8a 81       	ldd	r24, Y+2	; 0x02
     40e:	89 17       	cp	r24, r25
     410:	08 f4       	brcc	.+2      	; 0x414 <decomposeCommand+0x1a6>
     412:	95 cf       	rjmp	.-214    	; 0x33e <decomposeCommand+0xd0>
     414:	01 c0       	rjmp	.+2      	; 0x418 <decomposeCommand+0x1aa>
		uint8_t* startNumPTR = memchr(input_buffer, '[', COMMAND_BUFFER_SIZE);
		uint8_t* endNumPTR = memchr(input_buffer, ']', COMMAND_BUFFER_SIZE);
		if (startNumPTR==nullptr||endNumPTR==nullptr) { if(x==0) return false; break; }
     416:	00 00       	nop
		uint32_t bytes = ((endNumPTR)) - ((startNumPTR));
		if (bytes>PARAMETER_BUFFER_SIZE) return false;
		memcpy(outputParameter[x], startNumPTR, bytes);
	}

	return true;
     418:	81 e0       	ldi	r24, 0x01	; 1
}
     41a:	60 96       	adiw	r28, 0x10	; 16
     41c:	0f b6       	in	r0, 0x3f	; 63
     41e:	f8 94       	cli
     420:	de bf       	out	0x3e, r29	; 62
     422:	0f be       	out	0x3f, r0	; 63
     424:	cd bf       	out	0x3d, r28	; 61
     426:	cf 91       	pop	r28
     428:	df 91       	pop	r29
     42a:	1f 91       	pop	r17
     42c:	0f 91       	pop	r16
     42e:	08 95       	ret

00000430 <ROTATE_FORWARDS_HANDLE>:
	
void ROTATE_FORWARDS_HANDLE() {}
     430:	df 93       	push	r29
     432:	cf 93       	push	r28
     434:	cd b7       	in	r28, 0x3d	; 61
     436:	de b7       	in	r29, 0x3e	; 62
     438:	cf 91       	pop	r28
     43a:	df 91       	pop	r29
     43c:	08 95       	ret

0000043e <ROTATE_BACKWARDS_HANDLE>:
	
void ROTATE_BACKWARDS_HANDLE() {}
     43e:	df 93       	push	r29
     440:	cf 93       	push	r28
     442:	cd b7       	in	r28, 0x3d	; 61
     444:	de b7       	in	r29, 0x3e	; 62
     446:	cf 91       	pop	r28
     448:	df 91       	pop	r29
     44a:	08 95       	ret

0000044c <TURN_LED_ON_HANDLE>:
	
void TURN_LED_ON_HANDLE() {}
     44c:	df 93       	push	r29
     44e:	cf 93       	push	r28
     450:	cd b7       	in	r28, 0x3d	; 61
     452:	de b7       	in	r29, 0x3e	; 62
     454:	cf 91       	pop	r28
     456:	df 91       	pop	r29
     458:	08 95       	ret

0000045a <TURN_LED_OFF_HANDLE>:
	
void TURN_LED_OFF_HANDLE() {}
     45a:	df 93       	push	r29
     45c:	cf 93       	push	r28
     45e:	cd b7       	in	r28, 0x3d	; 61
     460:	de b7       	in	r29, 0x3e	; 62
     462:	cf 91       	pop	r28
     464:	df 91       	pop	r29
     466:	08 95       	ret

00000468 <CURTAIN_POS_CHANGE_HANDLE>:
	
void CURTAIN_POS_CHANGE_HANDLE(){
     468:	df 93       	push	r29
     46a:	cf 93       	push	r28
     46c:	cd b7       	in	r28, 0x3d	; 61
     46e:	de b7       	in	r29, 0x3e	; 62
	RETRANSMISSION_TO_BOARD(MOTORIZED_BOARD, &availableCommand[11]);
     470:	2b eb       	ldi	r18, 0xBB	; 187
     472:	32 e0       	ldi	r19, 0x02	; 2
     474:	82 e0       	ldi	r24, 0x02	; 2
     476:	b9 01       	movw	r22, r18
     478:	0e 94 61 03 	call	0x6c2	; 0x6c2 <RETRANSMISSION_TO_BOARD>
}
     47c:	cf 91       	pop	r28
     47e:	df 91       	pop	r29
     480:	08 95       	ret

00000482 <STRETCHER_POS_CHANGE_HANDLE>:

void STRETCHER_POS_CHANGE_HANDLE(){
     482:	df 93       	push	r29
     484:	cf 93       	push	r28
     486:	cd b7       	in	r28, 0x3d	; 61
     488:	de b7       	in	r29, 0x3e	; 62
	RETRANSMISSION_TO_BOARD(MOTORIZED_BOARD, &availableCommand[12]);
     48a:	20 ec       	ldi	r18, 0xC0	; 192
     48c:	32 e0       	ldi	r19, 0x02	; 2
     48e:	82 e0       	ldi	r24, 0x02	; 2
     490:	b9 01       	movw	r22, r18
     492:	0e 94 61 03 	call	0x6c2	; 0x6c2 <RETRANSMISSION_TO_BOARD>
}
     496:	cf 91       	pop	r28
     498:	df 91       	pop	r29
     49a:	08 95       	ret

0000049c <CALL_NURSE_HANDLE>:

void CALL_NURSE_HANDLE(){
     49c:	df 93       	push	r29
     49e:	cf 93       	push	r28
     4a0:	cd b7       	in	r28, 0x3d	; 61
     4a2:	de b7       	in	r29, 0x3e	; 62
	RETRANSMISSION_TO_BOARD(MOTORIZED_BOARD, &availableCommand[10]);
     4a4:	26 eb       	ldi	r18, 0xB6	; 182
     4a6:	32 e0       	ldi	r19, 0x02	; 2
     4a8:	82 e0       	ldi	r24, 0x02	; 2
     4aa:	b9 01       	movw	r22, r18
     4ac:	0e 94 61 03 	call	0x6c2	; 0x6c2 <RETRANSMISSION_TO_BOARD>
}
     4b0:	cf 91       	pop	r28
     4b2:	df 91       	pop	r29
     4b4:	08 95       	ret

000004b6 <TURN_RELAY_ON_HANDLE>:
	
void TURN_RELAY_ON_HANDLE() {
     4b6:	df 93       	push	r29
     4b8:	cf 93       	push	r28
     4ba:	cd b7       	in	r28, 0x3d	; 61
     4bc:	de b7       	in	r29, 0x3e	; 62
	RETRANSMISSION_TO_BOARD(POWER_BOARD, &availableCommand[4]);
     4be:	28 e9       	ldi	r18, 0x98	; 152
     4c0:	32 e0       	ldi	r19, 0x02	; 2
     4c2:	81 e0       	ldi	r24, 0x01	; 1
     4c4:	b9 01       	movw	r22, r18
     4c6:	0e 94 61 03 	call	0x6c2	; 0x6c2 <RETRANSMISSION_TO_BOARD>
}
     4ca:	cf 91       	pop	r28
     4cc:	df 91       	pop	r29
     4ce:	08 95       	ret

000004d0 <TURN_RELAY_OFF_HANDLE>:

void TURN_RELAY_OFF_HANDLE() {
     4d0:	df 93       	push	r29
     4d2:	cf 93       	push	r28
     4d4:	cd b7       	in	r28, 0x3d	; 61
     4d6:	de b7       	in	r29, 0x3e	; 62
	RETRANSMISSION_TO_BOARD(POWER_BOARD, &availableCommand[5]);
     4d8:	2d e9       	ldi	r18, 0x9D	; 157
     4da:	32 e0       	ldi	r19, 0x02	; 2
     4dc:	81 e0       	ldi	r24, 0x01	; 1
     4de:	b9 01       	movw	r22, r18
     4e0:	0e 94 61 03 	call	0x6c2	; 0x6c2 <RETRANSMISSION_TO_BOARD>
}
     4e4:	cf 91       	pop	r28
     4e6:	df 91       	pop	r29
     4e8:	08 95       	ret

000004ea <UART_TEST_HANDLER>:

void UART_TEST_HANDLER() {
     4ea:	df 93       	push	r29
     4ec:	cf 93       	push	r28
     4ee:	cd b7       	in	r28, 0x3d	; 61
     4f0:	de b7       	in	r29, 0x3e	; 62
	transmitMessageSync("Successful UART transmission!\n", 30);
     4f2:	8d ec       	ldi	r24, 0xCD	; 205
     4f4:	91 e0       	ldi	r25, 0x01	; 1
     4f6:	6e e1       	ldi	r22, 0x1E	; 30
     4f8:	0e 94 02 0a 	call	0x1404	; 0x1404 <transmitMessageSync>
}
     4fc:	cf 91       	pop	r28
     4fe:	df 91       	pop	r29
     500:	08 95       	ret

00000502 <BUILT_IN_LED_TEST_HANDLER>:

void BUILT_IN_LED_TEST_HANDLER(){
     502:	0f 93       	push	r16
     504:	1f 93       	push	r17
     506:	df 93       	push	r29
     508:	cf 93       	push	r28
     50a:	cd b7       	in	r28, 0x3d	; 61
     50c:	de b7       	in	r29, 0x3e	; 62
     50e:	2f 97       	sbiw	r28, 0x0f	; 15
     510:	0f b6       	in	r0, 0x3f	; 63
     512:	f8 94       	cli
     514:	de bf       	out	0x3e, r29	; 62
     516:	0f be       	out	0x3f, r0	; 63
     518:	cd bf       	out	0x3d, r28	; 61
	for (uint8_t x = 0; x < 8; x++) {
     51a:	19 82       	std	Y+1, r1	; 0x01
     51c:	97 c0       	rjmp	.+302    	; 0x64c <BUILT_IN_LED_TEST_HANDLER+0x14a>
		bit_flip(PORTD, BIT(7));
     51e:	8b e2       	ldi	r24, 0x2B	; 43
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	2b e2       	ldi	r18, 0x2B	; 43
     524:	30 e0       	ldi	r19, 0x00	; 0
     526:	f9 01       	movw	r30, r18
     528:	30 81       	ld	r19, Z
     52a:	20 e8       	ldi	r18, 0x80	; 128
     52c:	23 27       	eor	r18, r19
     52e:	fc 01       	movw	r30, r24
     530:	20 83       	st	Z, r18
		bit_flip(PORTB, BIT(0));
     532:	85 e2       	ldi	r24, 0x25	; 37
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	25 e2       	ldi	r18, 0x25	; 37
     538:	30 e0       	ldi	r19, 0x00	; 0
     53a:	f9 01       	movw	r30, r18
     53c:	30 81       	ld	r19, Z
     53e:	21 e0       	ldi	r18, 0x01	; 1
     540:	23 27       	eor	r18, r19
     542:	fc 01       	movw	r30, r24
     544:	20 83       	st	Z, r18
     546:	80 e0       	ldi	r24, 0x00	; 0
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	aa e7       	ldi	r26, 0x7A	; 122
     54c:	b3 e4       	ldi	r27, 0x43	; 67
     54e:	8a 83       	std	Y+2, r24	; 0x02
     550:	9b 83       	std	Y+3, r25	; 0x03
     552:	ac 83       	std	Y+4, r26	; 0x04
     554:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     556:	6a 81       	ldd	r22, Y+2	; 0x02
     558:	7b 81       	ldd	r23, Y+3	; 0x03
     55a:	8c 81       	ldd	r24, Y+4	; 0x04
     55c:	9d 81       	ldd	r25, Y+5	; 0x05
     55e:	20 e0       	ldi	r18, 0x00	; 0
     560:	30 e0       	ldi	r19, 0x00	; 0
     562:	4a e7       	ldi	r20, 0x7A	; 122
     564:	55 e4       	ldi	r21, 0x45	; 69
     566:	0e 94 39 0c 	call	0x1872	; 0x1872 <__mulsf3>
     56a:	dc 01       	movw	r26, r24
     56c:	cb 01       	movw	r24, r22
     56e:	8e 83       	std	Y+6, r24	; 0x06
     570:	9f 83       	std	Y+7, r25	; 0x07
     572:	a8 87       	std	Y+8, r26	; 0x08
     574:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     576:	11 e0       	ldi	r17, 0x01	; 1
     578:	6e 81       	ldd	r22, Y+6	; 0x06
     57a:	7f 81       	ldd	r23, Y+7	; 0x07
     57c:	88 85       	ldd	r24, Y+8	; 0x08
     57e:	99 85       	ldd	r25, Y+9	; 0x09
     580:	20 e0       	ldi	r18, 0x00	; 0
     582:	30 e0       	ldi	r19, 0x00	; 0
     584:	40 e8       	ldi	r20, 0x80	; 128
     586:	5f e3       	ldi	r21, 0x3F	; 63
     588:	0e 94 b8 0b 	call	0x1770	; 0x1770 <__cmpsf2>
     58c:	88 23       	and	r24, r24
     58e:	0c f0       	brlt	.+2      	; 0x592 <BUILT_IN_LED_TEST_HANDLER+0x90>
     590:	10 e0       	ldi	r17, 0x00	; 0
     592:	11 23       	and	r17, r17
     594:	29 f0       	breq	.+10     	; 0x5a0 <BUILT_IN_LED_TEST_HANDLER+0x9e>
		__ticks = 1;
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	9b 87       	std	Y+11, r25	; 0x0b
     59c:	8a 87       	std	Y+10, r24	; 0x0a
     59e:	46 c0       	rjmp	.+140    	; 0x62c <BUILT_IN_LED_TEST_HANDLER+0x12a>
	else if (__tmp > 65535)
     5a0:	11 e0       	ldi	r17, 0x01	; 1
     5a2:	6e 81       	ldd	r22, Y+6	; 0x06
     5a4:	7f 81       	ldd	r23, Y+7	; 0x07
     5a6:	88 85       	ldd	r24, Y+8	; 0x08
     5a8:	99 85       	ldd	r25, Y+9	; 0x09
     5aa:	20 e0       	ldi	r18, 0x00	; 0
     5ac:	3f ef       	ldi	r19, 0xFF	; 255
     5ae:	4f e7       	ldi	r20, 0x7F	; 127
     5b0:	57 e4       	ldi	r21, 0x47	; 71
     5b2:	0e 94 35 0c 	call	0x186a	; 0x186a <__gesf2>
     5b6:	18 16       	cp	r1, r24
     5b8:	0c f0       	brlt	.+2      	; 0x5bc <BUILT_IN_LED_TEST_HANDLER+0xba>
     5ba:	10 e0       	ldi	r17, 0x00	; 0
     5bc:	11 23       	and	r17, r17
     5be:	61 f1       	breq	.+88     	; 0x618 <BUILT_IN_LED_TEST_HANDLER+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5c0:	6a 81       	ldd	r22, Y+2	; 0x02
     5c2:	7b 81       	ldd	r23, Y+3	; 0x03
     5c4:	8c 81       	ldd	r24, Y+4	; 0x04
     5c6:	9d 81       	ldd	r25, Y+5	; 0x05
     5c8:	20 e0       	ldi	r18, 0x00	; 0
     5ca:	30 e0       	ldi	r19, 0x00	; 0
     5cc:	40 e2       	ldi	r20, 0x20	; 32
     5ce:	51 e4       	ldi	r21, 0x41	; 65
     5d0:	0e 94 39 0c 	call	0x1872	; 0x1872 <__mulsf3>
     5d4:	dc 01       	movw	r26, r24
     5d6:	cb 01       	movw	r24, r22
     5d8:	bc 01       	movw	r22, r24
     5da:	cd 01       	movw	r24, r26
     5dc:	0e 94 bc 0b 	call	0x1778	; 0x1778 <__fixunssfsi>
     5e0:	dc 01       	movw	r26, r24
     5e2:	cb 01       	movw	r24, r22
     5e4:	9b 87       	std	Y+11, r25	; 0x0b
     5e6:	8a 87       	std	Y+10, r24	; 0x0a
     5e8:	12 c0       	rjmp	.+36     	; 0x60e <BUILT_IN_LED_TEST_HANDLER+0x10c>
     5ea:	80 e9       	ldi	r24, 0x90	; 144
     5ec:	91 e0       	ldi	r25, 0x01	; 1
     5ee:	9d 87       	std	Y+13, r25	; 0x0d
     5f0:	8c 87       	std	Y+12, r24	; 0x0c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     5f2:	8c 85       	ldd	r24, Y+12	; 0x0c
     5f4:	9d 85       	ldd	r25, Y+13	; 0x0d
     5f6:	8c 01       	movw	r16, r24
     5f8:	c8 01       	movw	r24, r16
     5fa:	01 97       	sbiw	r24, 0x01	; 1
     5fc:	f1 f7       	brne	.-4      	; 0x5fa <BUILT_IN_LED_TEST_HANDLER+0xf8>
     5fe:	8c 01       	movw	r16, r24
     600:	1d 87       	std	Y+13, r17	; 0x0d
     602:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     604:	8a 85       	ldd	r24, Y+10	; 0x0a
     606:	9b 85       	ldd	r25, Y+11	; 0x0b
     608:	01 97       	sbiw	r24, 0x01	; 1
     60a:	9b 87       	std	Y+11, r25	; 0x0b
     60c:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     60e:	8a 85       	ldd	r24, Y+10	; 0x0a
     610:	9b 85       	ldd	r25, Y+11	; 0x0b
     612:	00 97       	sbiw	r24, 0x00	; 0
     614:	51 f7       	brne	.-44     	; 0x5ea <BUILT_IN_LED_TEST_HANDLER+0xe8>
     616:	17 c0       	rjmp	.+46     	; 0x646 <BUILT_IN_LED_TEST_HANDLER+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     618:	6e 81       	ldd	r22, Y+6	; 0x06
     61a:	7f 81       	ldd	r23, Y+7	; 0x07
     61c:	88 85       	ldd	r24, Y+8	; 0x08
     61e:	99 85       	ldd	r25, Y+9	; 0x09
     620:	0e 94 bc 0b 	call	0x1778	; 0x1778 <__fixunssfsi>
     624:	dc 01       	movw	r26, r24
     626:	cb 01       	movw	r24, r22
     628:	9b 87       	std	Y+11, r25	; 0x0b
     62a:	8a 87       	std	Y+10, r24	; 0x0a
     62c:	8a 85       	ldd	r24, Y+10	; 0x0a
     62e:	9b 85       	ldd	r25, Y+11	; 0x0b
     630:	9f 87       	std	Y+15, r25	; 0x0f
     632:	8e 87       	std	Y+14, r24	; 0x0e
     634:	8e 85       	ldd	r24, Y+14	; 0x0e
     636:	9f 85       	ldd	r25, Y+15	; 0x0f
     638:	8c 01       	movw	r16, r24
     63a:	f8 01       	movw	r30, r16
     63c:	31 97       	sbiw	r30, 0x01	; 1
     63e:	f1 f7       	brne	.-4      	; 0x63c <BUILT_IN_LED_TEST_HANDLER+0x13a>
     640:	8f 01       	movw	r16, r30
     642:	1f 87       	std	Y+15, r17	; 0x0f
     644:	0e 87       	std	Y+14, r16	; 0x0e
void UART_TEST_HANDLER() {
	transmitMessageSync("Successful UART transmission!\n", 30);
}

void BUILT_IN_LED_TEST_HANDLER(){
	for (uint8_t x = 0; x < 8; x++) {
     646:	89 81       	ldd	r24, Y+1	; 0x01
     648:	8f 5f       	subi	r24, 0xFF	; 255
     64a:	89 83       	std	Y+1, r24	; 0x01
     64c:	89 81       	ldd	r24, Y+1	; 0x01
     64e:	88 30       	cpi	r24, 0x08	; 8
     650:	08 f4       	brcc	.+2      	; 0x654 <BUILT_IN_LED_TEST_HANDLER+0x152>
     652:	65 cf       	rjmp	.-310    	; 0x51e <BUILT_IN_LED_TEST_HANDLER+0x1c>
		bit_flip(PORTD, BIT(7));
		bit_flip(PORTB, BIT(0));
		_delay_ms(250);
	}
	bit_clear(PORTD, BIT(7));
     654:	8b e2       	ldi	r24, 0x2B	; 43
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	2b e2       	ldi	r18, 0x2B	; 43
     65a:	30 e0       	ldi	r19, 0x00	; 0
     65c:	f9 01       	movw	r30, r18
     65e:	20 81       	ld	r18, Z
     660:	2f 77       	andi	r18, 0x7F	; 127
     662:	fc 01       	movw	r30, r24
     664:	20 83       	st	Z, r18
	bit_clear(PORTB, BIT(0));
     666:	85 e2       	ldi	r24, 0x25	; 37
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	25 e2       	ldi	r18, 0x25	; 37
     66c:	30 e0       	ldi	r19, 0x00	; 0
     66e:	f9 01       	movw	r30, r18
     670:	20 81       	ld	r18, Z
     672:	2e 7f       	andi	r18, 0xFE	; 254
     674:	fc 01       	movw	r30, r24
     676:	20 83       	st	Z, r18
}
     678:	2f 96       	adiw	r28, 0x0f	; 15
     67a:	0f b6       	in	r0, 0x3f	; 63
     67c:	f8 94       	cli
     67e:	de bf       	out	0x3e, r29	; 62
     680:	0f be       	out	0x3f, r0	; 63
     682:	cd bf       	out	0x3d, r28	; 61
     684:	cf 91       	pop	r28
     686:	df 91       	pop	r29
     688:	1f 91       	pop	r17
     68a:	0f 91       	pop	r16
     68c:	08 95       	ret

0000068e <TURN_EVERYTHING_ON_HANDLE>:

void TURN_EVERYTHING_ON_HANDLE(){
     68e:	df 93       	push	r29
     690:	cf 93       	push	r28
     692:	cd b7       	in	r28, 0x3d	; 61
     694:	de b7       	in	r29, 0x3e	; 62
	RETRANSMISSION_TO_BOARD(POWER_BOARD, &availableCommand[8]);
     696:	2c ea       	ldi	r18, 0xAC	; 172
     698:	32 e0       	ldi	r19, 0x02	; 2
     69a:	81 e0       	ldi	r24, 0x01	; 1
     69c:	b9 01       	movw	r22, r18
     69e:	0e 94 61 03 	call	0x6c2	; 0x6c2 <RETRANSMISSION_TO_BOARD>
}
     6a2:	cf 91       	pop	r28
     6a4:	df 91       	pop	r29
     6a6:	08 95       	ret

000006a8 <TURN_EVERYTHING_OFF_HANDLE>:

void TURN_EVERYTHING_OFF_HANDLE(){
     6a8:	df 93       	push	r29
     6aa:	cf 93       	push	r28
     6ac:	cd b7       	in	r28, 0x3d	; 61
     6ae:	de b7       	in	r29, 0x3e	; 62
	RETRANSMISSION_TO_BOARD(POWER_BOARD, &availableCommand[9]);
     6b0:	21 eb       	ldi	r18, 0xB1	; 177
     6b2:	32 e0       	ldi	r19, 0x02	; 2
     6b4:	81 e0       	ldi	r24, 0x01	; 1
     6b6:	b9 01       	movw	r22, r18
     6b8:	0e 94 61 03 	call	0x6c2	; 0x6c2 <RETRANSMISSION_TO_BOARD>
}
     6bc:	cf 91       	pop	r28
     6be:	df 91       	pop	r29
     6c0:	08 95       	ret

000006c2 <RETRANSMISSION_TO_BOARD>:

void RETRANSMISSION_TO_BOARD(uint8_t board, const commandType* targetType){
     6c2:	df 93       	push	r29
     6c4:	cf 93       	push	r28
     6c6:	cd b7       	in	r28, 0x3d	; 61
     6c8:	de b7       	in	r29, 0x3e	; 62
     6ca:	27 97       	sbiw	r28, 0x07	; 7
     6cc:	0f b6       	in	r0, 0x3f	; 63
     6ce:	f8 94       	cli
     6d0:	de bf       	out	0x3e, r29	; 62
     6d2:	0f be       	out	0x3f, r0	; 63
     6d4:	cd bf       	out	0x3d, r28	; 61
     6d6:	8d 83       	std	Y+5, r24	; 0x05
     6d8:	7f 83       	std	Y+7, r23	; 0x07
     6da:	6e 83       	std	Y+6, r22	; 0x06
	// Retransmission using previous paramenters
	
	nrf24_initRF_SAFE(board, TRANSMIT);	// CONNECTION TO BOARD: GENERAL RF CHANNEL 112
     6dc:	8d 81       	ldd	r24, Y+5	; 0x05
     6de:	61 e0       	ldi	r22, 0x01	; 1
     6e0:	0e 94 57 09 	call	0x12ae	; 0x12ae <nrf24_initRF_SAFE>
	
	composeCommand(command_buffer, targetType, parameter);
     6e4:	80 91 ce 02 	lds	r24, 0x02CE
     6e8:	90 91 cf 02 	lds	r25, 0x02CF
     6ec:	4e 81       	ldd	r20, Y+6	; 0x06
     6ee:	5f 81       	ldd	r21, Y+7	; 0x07
     6f0:	26 ec       	ldi	r18, 0xC6	; 198
     6f2:	32 e0       	ldi	r19, 0x02	; 2
     6f4:	ba 01       	movw	r22, r20
     6f6:	a9 01       	movw	r20, r18
     6f8:	0e 94 a6 00 	call	0x14c	; 0x14c <composeCommand>
	
	nrf24_send(command_buffer);
     6fc:	80 91 ce 02 	lds	r24, 0x02CE
     700:	90 91 cf 02 	lds	r25, 0x02CF
     704:	0e 94 c6 06 	call	0xd8c	; 0xd8c <nrf24_send>
	while(nrf24_isSending());
     708:	00 00       	nop
     70a:	0e 94 f3 06 	call	0xde6	; 0xde6 <nrf24_isSending>
     70e:	88 23       	and	r24, r24
     710:	e1 f7       	brne	.-8      	; 0x70a <RETRANSMISSION_TO_BOARD+0x48>

	uint8_t messageStatus = nrf24_lastMessageStatus();
     712:	0e 94 1d 07 	call	0xe3a	; 0xe3a <nrf24_lastMessageStatus>
     716:	89 83       	std	Y+1, r24	; 0x01
	if(messageStatus == NRF24_TRANSMISSON_OK) { transmitMessageSync("Successful RF transmission! \n", 29); }
     718:	89 81       	ldd	r24, Y+1	; 0x01
     71a:	88 23       	and	r24, r24
     71c:	31 f4       	brne	.+12     	; 0x72a <RETRANSMISSION_TO_BOARD+0x68>
     71e:	8c ee       	ldi	r24, 0xEC	; 236
     720:	91 e0       	ldi	r25, 0x01	; 1
     722:	6d e1       	ldi	r22, 0x1D	; 29
     724:	0e 94 02 0a 	call	0x1404	; 0x1404 <transmitMessageSync>
     728:	08 c0       	rjmp	.+16     	; 0x73a <RETRANSMISSION_TO_BOARD+0x78>
	else if(messageStatus == NRF24_MESSAGE_LOST) { transmitMessageSync("Failure on RF transmission! \n", 29); }
     72a:	89 81       	ldd	r24, Y+1	; 0x01
     72c:	81 30       	cpi	r24, 0x01	; 1
     72e:	29 f4       	brne	.+10     	; 0x73a <RETRANSMISSION_TO_BOARD+0x78>
     730:	8a e0       	ldi	r24, 0x0A	; 10
     732:	92 e0       	ldi	r25, 0x02	; 2
     734:	6d e1       	ldi	r22, 0x1D	; 29
     736:	0e 94 02 0a 	call	0x1404	; 0x1404 <transmitMessageSync>
	
	uint8_t retransmissionCount = nrf24_retransmissionCount();
     73a:	0e 94 b1 06 	call	0xd62	; 0xd62 <nrf24_retransmissionCount>
     73e:	8a 83       	std	Y+2, r24	; 0x02
	char* retransmissionString = malloc(40);
     740:	88 e2       	ldi	r24, 0x28	; 40
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <malloc>
     748:	9c 83       	std	Y+4, r25	; 0x04
     74a:	8b 83       	std	Y+3, r24	; 0x03
	sprintf(retransmissionString, "Retransmission count: %d \n", retransmissionCount);
     74c:	8a 81       	ldd	r24, Y+2	; 0x02
     74e:	28 2f       	mov	r18, r24
     750:	30 e0       	ldi	r19, 0x00	; 0
     752:	00 d0       	rcall	.+0      	; 0x754 <RETRANSMISSION_TO_BOARD+0x92>
     754:	00 d0       	rcall	.+0      	; 0x756 <RETRANSMISSION_TO_BOARD+0x94>
     756:	00 d0       	rcall	.+0      	; 0x758 <RETRANSMISSION_TO_BOARD+0x96>
     758:	8d b7       	in	r24, 0x3d	; 61
     75a:	9e b7       	in	r25, 0x3e	; 62
     75c:	01 96       	adiw	r24, 0x01	; 1
     75e:	4b 81       	ldd	r20, Y+3	; 0x03
     760:	5c 81       	ldd	r21, Y+4	; 0x04
     762:	fc 01       	movw	r30, r24
     764:	51 83       	std	Z+1, r21	; 0x01
     766:	40 83       	st	Z, r20
     768:	48 e2       	ldi	r20, 0x28	; 40
     76a:	52 e0       	ldi	r21, 0x02	; 2
     76c:	fc 01       	movw	r30, r24
     76e:	53 83       	std	Z+3, r21	; 0x03
     770:	42 83       	std	Z+2, r20	; 0x02
     772:	fc 01       	movw	r30, r24
     774:	35 83       	std	Z+5, r19	; 0x05
     776:	24 83       	std	Z+4, r18	; 0x04
     778:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <sprintf>
     77c:	8d b7       	in	r24, 0x3d	; 61
     77e:	9e b7       	in	r25, 0x3e	; 62
     780:	06 96       	adiw	r24, 0x06	; 6
     782:	0f b6       	in	r0, 0x3f	; 63
     784:	f8 94       	cli
     786:	9e bf       	out	0x3e, r25	; 62
     788:	0f be       	out	0x3f, r0	; 63
     78a:	8d bf       	out	0x3d, r24	; 61
	transmitMessageSync(retransmissionString, strlen(retransmissionString));
     78c:	8b 81       	ldd	r24, Y+3	; 0x03
     78e:	9c 81       	ldd	r25, Y+4	; 0x04
     790:	0e 94 65 0e 	call	0x1cca	; 0x1cca <strlen>
     794:	28 2f       	mov	r18, r24
     796:	8b 81       	ldd	r24, Y+3	; 0x03
     798:	9c 81       	ldd	r25, Y+4	; 0x04
     79a:	62 2f       	mov	r22, r18
     79c:	0e 94 02 0a 	call	0x1404	; 0x1404 <transmitMessageSync>
	sprintf(retransmissionString, "RX ADDRESS: %X :: TX ADDRESS: %X \n",selectedRX_ADDRESS, selectedTX_ADDRESS);
     7a0:	80 91 cc 02 	lds	r24, 0x02CC
     7a4:	48 2f       	mov	r20, r24
     7a6:	50 e0       	ldi	r21, 0x00	; 0
     7a8:	80 91 cd 02 	lds	r24, 0x02CD
     7ac:	28 2f       	mov	r18, r24
     7ae:	30 e0       	ldi	r19, 0x00	; 0
     7b0:	ed b7       	in	r30, 0x3d	; 61
     7b2:	fe b7       	in	r31, 0x3e	; 62
     7b4:	38 97       	sbiw	r30, 0x08	; 8
     7b6:	0f b6       	in	r0, 0x3f	; 63
     7b8:	f8 94       	cli
     7ba:	fe bf       	out	0x3e, r31	; 62
     7bc:	0f be       	out	0x3f, r0	; 63
     7be:	ed bf       	out	0x3d, r30	; 61
     7c0:	8d b7       	in	r24, 0x3d	; 61
     7c2:	9e b7       	in	r25, 0x3e	; 62
     7c4:	01 96       	adiw	r24, 0x01	; 1
     7c6:	6b 81       	ldd	r22, Y+3	; 0x03
     7c8:	7c 81       	ldd	r23, Y+4	; 0x04
     7ca:	fc 01       	movw	r30, r24
     7cc:	71 83       	std	Z+1, r23	; 0x01
     7ce:	60 83       	st	Z, r22
     7d0:	63 e4       	ldi	r22, 0x43	; 67
     7d2:	72 e0       	ldi	r23, 0x02	; 2
     7d4:	fc 01       	movw	r30, r24
     7d6:	73 83       	std	Z+3, r23	; 0x03
     7d8:	62 83       	std	Z+2, r22	; 0x02
     7da:	fc 01       	movw	r30, r24
     7dc:	55 83       	std	Z+5, r21	; 0x05
     7de:	44 83       	std	Z+4, r20	; 0x04
     7e0:	fc 01       	movw	r30, r24
     7e2:	37 83       	std	Z+7, r19	; 0x07
     7e4:	26 83       	std	Z+6, r18	; 0x06
     7e6:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <sprintf>
     7ea:	8d b7       	in	r24, 0x3d	; 61
     7ec:	9e b7       	in	r25, 0x3e	; 62
     7ee:	08 96       	adiw	r24, 0x08	; 8
     7f0:	0f b6       	in	r0, 0x3f	; 63
     7f2:	f8 94       	cli
     7f4:	9e bf       	out	0x3e, r25	; 62
     7f6:	0f be       	out	0x3f, r0	; 63
     7f8:	8d bf       	out	0x3d, r24	; 61
	transmitMessageSync(retransmissionString, strlen(retransmissionString));
     7fa:	8b 81       	ldd	r24, Y+3	; 0x03
     7fc:	9c 81       	ldd	r25, Y+4	; 0x04
     7fe:	0e 94 65 0e 	call	0x1cca	; 0x1cca <strlen>
     802:	28 2f       	mov	r18, r24
     804:	8b 81       	ldd	r24, Y+3	; 0x03
     806:	9c 81       	ldd	r25, Y+4	; 0x04
     808:	62 2f       	mov	r22, r18
     80a:	0e 94 02 0a 	call	0x1404	; 0x1404 <transmitMessageSync>
	free(retransmissionString);
     80e:	8b 81       	ldd	r24, Y+3	; 0x03
     810:	9c 81       	ldd	r25, Y+4	; 0x04
     812:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <free>
}
     816:	27 96       	adiw	r28, 0x07	; 7
     818:	0f b6       	in	r0, 0x3f	; 63
     81a:	f8 94       	cli
     81c:	de bf       	out	0x3e, r29	; 62
     81e:	0f be       	out	0x3f, r0	; 63
     820:	cd bf       	out	0x3d, r28	; 61
     822:	cf 91       	pop	r28
     824:	df 91       	pop	r29
     826:	08 95       	ret

00000828 <main>:

void initIO();
char messageTest[] = "UART TESTING COMMANDS! \n";
	
int main(void)
{
     828:	df 93       	push	r29
     82a:	cf 93       	push	r28
     82c:	cd b7       	in	r28, 0x3d	; 61
     82e:	de b7       	in	r29, 0x3e	; 62
	sei();	// Interrupts on
     830:	78 94       	sei
    initBluetoothUart();
     832:	0e 94 d6 09 	call	0x13ac	; 0x13ac <initBluetoothUart>
    initIO();
     836:	0e 94 39 04 	call	0x872	; 0x872 <initIO>
	nrf24_initRF_SAFE(0, RECEIVE);	// CONNECTION TO MAIN BOARD : GENERAL RF CHANNEL 112
     83a:	80 e0       	ldi	r24, 0x00	; 0
     83c:	60 e0       	ldi	r22, 0x00	; 0
     83e:	0e 94 57 09 	call	0x12ae	; 0x12ae <nrf24_initRF_SAFE>
	setupReceiveMode();
     842:	0e 94 86 0a 	call	0x150c	; 0x150c <setupReceiveMode>
    while (1) 
    {
		while(!commandAvailable);
     846:	00 00       	nop
     848:	90 91 d7 02 	lds	r25, 0x02D7
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	89 27       	eor	r24, r25
     850:	88 23       	and	r24, r24
     852:	d1 f7       	brne	.-12     	; 0x848 <main+0x20>
		bit_clear(PORTB, BIT(0));
     854:	85 e2       	ldi	r24, 0x25	; 37
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	25 e2       	ldi	r18, 0x25	; 37
     85a:	30 e0       	ldi	r19, 0x00	; 0
     85c:	f9 01       	movw	r30, r18
     85e:	20 81       	ld	r18, Z
     860:	2e 7f       	andi	r18, 0xFE	; 254
     862:	fc 01       	movw	r30, r24
     864:	20 83       	st	Z, r18
		processReceivedLine();
     866:	0e 94 bb 0a 	call	0x1576	; 0x1576 <processReceivedLine>
		setupReceiveMode();
     86a:	0e 94 86 0a 	call	0x150c	; 0x150c <setupReceiveMode>
    }
     86e:	00 00       	nop
    initIO();
	nrf24_initRF_SAFE(0, RECEIVE);	// CONNECTION TO MAIN BOARD : GENERAL RF CHANNEL 112
	setupReceiveMode();
    while (1) 
    {
		while(!commandAvailable);
     870:	eb cf       	rjmp	.-42     	; 0x848 <main+0x20>

00000872 <initIO>:
		setupReceiveMode();
    }
}


void initIO(){
     872:	df 93       	push	r29
     874:	cf 93       	push	r28
     876:	cd b7       	in	r28, 0x3d	; 61
     878:	de b7       	in	r29, 0x3e	; 62
			CSN	 : PC1						|	OUTPUT
			MISO : PD0 (MSPIM MISO ATMEGA)	|	INPUT
			MOSI : PD1 (MSPIM MOSI ATMEGA)	|	OUTPUT
			SCK	 : PD4 (MSPIM XCK)			|	OUTPUT
	*/ 
	DDRD = 0b11111110;
     87a:	8a e2       	ldi	r24, 0x2A	; 42
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	2e ef       	ldi	r18, 0xFE	; 254
     880:	fc 01       	movw	r30, r24
     882:	20 83       	st	Z, r18
	DDRB = 0b00101001;
     884:	84 e2       	ldi	r24, 0x24	; 36
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	29 e2       	ldi	r18, 0x29	; 41
     88a:	fc 01       	movw	r30, r24
     88c:	20 83       	st	Z, r18
	DDRC = 0b11011111;
     88e:	87 e2       	ldi	r24, 0x27	; 39
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	2f ed       	ldi	r18, 0xDF	; 223
     894:	fc 01       	movw	r30, r24
     896:	20 83       	st	Z, r18
	bit_clear(PORTD, BIT(2));
     898:	8b e2       	ldi	r24, 0x2B	; 43
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	2b e2       	ldi	r18, 0x2B	; 43
     89e:	30 e0       	ldi	r19, 0x00	; 0
     8a0:	f9 01       	movw	r30, r18
     8a2:	20 81       	ld	r18, Z
     8a4:	2b 7f       	andi	r18, 0xFB	; 251
     8a6:	fc 01       	movw	r30, r24
     8a8:	20 83       	st	Z, r18
}
     8aa:	cf 91       	pop	r28
     8ac:	df 91       	pop	r29
     8ae:	08 95       	ret

000008b0 <nrf24_init>:

uint8_t GENERAL_RF_CHANNEL = 112;


void nrf24_init()
{
     8b0:	df 93       	push	r29
     8b2:	cf 93       	push	r28
     8b4:	cd b7       	in	r28, 0x3d	; 61
     8b6:	de b7       	in	r29, 0x3e	; 62
	nrf24_setupPins();
     8b8:	0e 94 97 08 	call	0x112e	; 0x112e <nrf24_setupPins>
	nrf24_ce_digitalWrite(LOW);
     8bc:	80 e0       	ldi	r24, 0x00	; 0
     8be:	0e 94 cb 08 	call	0x1196	; 0x1196 <nrf24_ce_digitalWrite>
	nrf24_csn_digitalWrite(HIGH);
     8c2:	81 e0       	ldi	r24, 0x01	; 1
     8c4:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <nrf24_csn_digitalWrite>
}
     8c8:	cf 91       	pop	r28
     8ca:	df 91       	pop	r29
     8cc:	08 95       	ret

000008ce <nrf24_config>:

void nrf24_config(uint8_t channel, uint8_t pay_length)
{
     8ce:	df 93       	push	r29
     8d0:	cf 93       	push	r28
     8d2:	00 d0       	rcall	.+0      	; 0x8d4 <nrf24_config+0x6>
     8d4:	cd b7       	in	r28, 0x3d	; 61
     8d6:	de b7       	in	r29, 0x3e	; 62
     8d8:	89 83       	std	Y+1, r24	; 0x01
     8da:	6a 83       	std	Y+2, r22	; 0x02
	/* Use static payload length ... */
	payload_len = pay_length;
     8dc:	8a 81       	ldd	r24, Y+2	; 0x02
     8de:	80 93 d1 02 	sts	0x02D1, r24
	selectedChannel = channel;
     8e2:	89 81       	ldd	r24, Y+1	; 0x01
     8e4:	80 93 d2 02 	sts	0x02D2, r24
	// Set RF channel
	nrf24_configRegister(RF_CH,channel);
     8e8:	85 e0       	ldi	r24, 0x05	; 5
     8ea:	69 81       	ldd	r22, Y+1	; 0x01
     8ec:	0e 94 1a 08 	call	0x1034	; 0x1034 <nrf24_configRegister>
	// Set length of incoming payload
	nrf24_configRegister(RX_PW_P0, 0x00); // Auto-ACK pipe ...
     8f0:	81 e1       	ldi	r24, 0x11	; 17
     8f2:	60 e0       	ldi	r22, 0x00	; 0
     8f4:	0e 94 1a 08 	call	0x1034	; 0x1034 <nrf24_configRegister>
	nrf24_configRegister(RX_PW_P1, payload_len); // Data payload pipe
     8f8:	90 91 d1 02 	lds	r25, 0x02D1
     8fc:	82 e1       	ldi	r24, 0x12	; 18
     8fe:	69 2f       	mov	r22, r25
     900:	0e 94 1a 08 	call	0x1034	; 0x1034 <nrf24_configRegister>
	nrf24_configRegister(RX_PW_P2, 0x00); // Pipe not used
     904:	83 e1       	ldi	r24, 0x13	; 19
     906:	60 e0       	ldi	r22, 0x00	; 0
     908:	0e 94 1a 08 	call	0x1034	; 0x1034 <nrf24_configRegister>
	nrf24_configRegister(RX_PW_P3, 0x00); // Pipe not used
     90c:	84 e1       	ldi	r24, 0x14	; 20
     90e:	60 e0       	ldi	r22, 0x00	; 0
     910:	0e 94 1a 08 	call	0x1034	; 0x1034 <nrf24_configRegister>
	nrf24_configRegister(RX_PW_P4, 0x00); // Pipe not used
     914:	85 e1       	ldi	r24, 0x15	; 21
     916:	60 e0       	ldi	r22, 0x00	; 0
     918:	0e 94 1a 08 	call	0x1034	; 0x1034 <nrf24_configRegister>
	nrf24_configRegister(RX_PW_P5, 0x00); // Pipe not used
     91c:	86 e1       	ldi	r24, 0x16	; 22
     91e:	60 e0       	ldi	r22, 0x00	; 0
     920:	0e 94 1a 08 	call	0x1034	; 0x1034 <nrf24_configRegister>
	// 1 Mbps, TX gain: 0dbm
	nrf24_configRegister(RF_SETUP, (0<<RF_DR)|((0x03)<<RF_PWR));
     924:	86 e0       	ldi	r24, 0x06	; 6
     926:	66 e0       	ldi	r22, 0x06	; 6
     928:	0e 94 1a 08 	call	0x1034	; 0x1034 <nrf24_configRegister>
	// CRC enable, 1 byte CRC length
	nrf24_configRegister(CONFIG,nrf24_CONFIG);
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	68 e0       	ldi	r22, 0x08	; 8
     930:	0e 94 1a 08 	call	0x1034	; 0x1034 <nrf24_configRegister>
	// Auto Acknowledgment
	nrf24_configRegister(EN_AA,(1<<ENAA_P0)|(1<<ENAA_P1)|(0<<ENAA_P2)|(0<<ENAA_P3)|(0<<ENAA_P4)|(0<<ENAA_P5));
     934:	81 e0       	ldi	r24, 0x01	; 1
     936:	63 e0       	ldi	r22, 0x03	; 3
     938:	0e 94 1a 08 	call	0x1034	; 0x1034 <nrf24_configRegister>
	// Enable RX addresses
	nrf24_configRegister(EN_RXADDR,(1<<ERX_P0)|(1<<ERX_P1)|(0<<ERX_P2)|(0<<ERX_P3)|(0<<ERX_P4)|(0<<ERX_P5));
     93c:	82 e0       	ldi	r24, 0x02	; 2
     93e:	63 e0       	ldi	r22, 0x03	; 3
     940:	0e 94 1a 08 	call	0x1034	; 0x1034 <nrf24_configRegister>
	// Auto retransmit delay: 1000 us and Up to 15 retransmit trials
	nrf24_configRegister(SETUP_RETR,(0x04<<ARD)|(0x0F<<ARC));
     944:	84 e0       	ldi	r24, 0x04	; 4
     946:	6f e4       	ldi	r22, 0x4F	; 79
     948:	0e 94 1a 08 	call	0x1034	; 0x1034 <nrf24_configRegister>
	// Dynamic length configurations: No dynamic length
	nrf24_configRegister(DYNPD,(0<<DPL_P0)|(0<<DPL_P1)|(0<<DPL_P2)|(0<<DPL_P3)|(0<<DPL_P4)|(0<<DPL_P5));
     94c:	8c e1       	ldi	r24, 0x1C	; 28
     94e:	60 e0       	ldi	r22, 0x00	; 0
     950:	0e 94 1a 08 	call	0x1034	; 0x1034 <nrf24_configRegister>

}
     954:	0f 90       	pop	r0
     956:	0f 90       	pop	r0
     958:	cf 91       	pop	r28
     95a:	df 91       	pop	r29
     95c:	08 95       	ret

0000095e <nrf24_checkConfig>:

bool nrf24_checkConfig(){
     95e:	df 93       	push	r29
     960:	cf 93       	push	r28
     962:	cd b7       	in	r28, 0x3d	; 61
     964:	de b7       	in	r29, 0x3e	; 62
	// Check all registers
	if (nrf24_checkRegister(RF_CH, selectedChannel,1)==false) return false;
     966:	90 91 d2 02 	lds	r25, 0x02D2
     96a:	85 e0       	ldi	r24, 0x05	; 5
     96c:	69 2f       	mov	r22, r25
     96e:	41 e0       	ldi	r20, 0x01	; 1
     970:	0e 94 78 08 	call	0x10f0	; 0x10f0 <nrf24_checkRegister>
     974:	98 2f       	mov	r25, r24
     976:	81 e0       	ldi	r24, 0x01	; 1
     978:	89 27       	eor	r24, r25
     97a:	88 23       	and	r24, r24
     97c:	11 f0       	breq	.+4      	; 0x982 <nrf24_checkConfig+0x24>
     97e:	80 e0       	ldi	r24, 0x00	; 0
     980:	87 c0       	rjmp	.+270    	; 0xa90 <nrf24_checkConfig+0x132>
	if (nrf24_checkRegister(RX_PW_P0, 0x00,1)==false) return false;
     982:	81 e1       	ldi	r24, 0x11	; 17
     984:	60 e0       	ldi	r22, 0x00	; 0
     986:	41 e0       	ldi	r20, 0x01	; 1
     988:	0e 94 78 08 	call	0x10f0	; 0x10f0 <nrf24_checkRegister>
     98c:	98 2f       	mov	r25, r24
     98e:	81 e0       	ldi	r24, 0x01	; 1
     990:	89 27       	eor	r24, r25
     992:	88 23       	and	r24, r24
     994:	11 f0       	breq	.+4      	; 0x99a <nrf24_checkConfig+0x3c>
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	7b c0       	rjmp	.+246    	; 0xa90 <nrf24_checkConfig+0x132>
	if (nrf24_checkRegister(RX_PW_P1, payload_len,1)==false) return false;
     99a:	90 91 d1 02 	lds	r25, 0x02D1
     99e:	82 e1       	ldi	r24, 0x12	; 18
     9a0:	69 2f       	mov	r22, r25
     9a2:	41 e0       	ldi	r20, 0x01	; 1
     9a4:	0e 94 78 08 	call	0x10f0	; 0x10f0 <nrf24_checkRegister>
     9a8:	98 2f       	mov	r25, r24
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	89 27       	eor	r24, r25
     9ae:	88 23       	and	r24, r24
     9b0:	11 f0       	breq	.+4      	; 0x9b6 <nrf24_checkConfig+0x58>
     9b2:	80 e0       	ldi	r24, 0x00	; 0
     9b4:	6d c0       	rjmp	.+218    	; 0xa90 <nrf24_checkConfig+0x132>
	if (nrf24_checkRegister(RX_PW_P2, 0x00,1)==false) return false;
     9b6:	83 e1       	ldi	r24, 0x13	; 19
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	41 e0       	ldi	r20, 0x01	; 1
     9bc:	0e 94 78 08 	call	0x10f0	; 0x10f0 <nrf24_checkRegister>
     9c0:	98 2f       	mov	r25, r24
     9c2:	81 e0       	ldi	r24, 0x01	; 1
     9c4:	89 27       	eor	r24, r25
     9c6:	88 23       	and	r24, r24
     9c8:	11 f0       	breq	.+4      	; 0x9ce <nrf24_checkConfig+0x70>
     9ca:	80 e0       	ldi	r24, 0x00	; 0
     9cc:	61 c0       	rjmp	.+194    	; 0xa90 <nrf24_checkConfig+0x132>
	if (nrf24_checkRegister(RX_PW_P3, 0x00,1)==false) return false;
     9ce:	84 e1       	ldi	r24, 0x14	; 20
     9d0:	60 e0       	ldi	r22, 0x00	; 0
     9d2:	41 e0       	ldi	r20, 0x01	; 1
     9d4:	0e 94 78 08 	call	0x10f0	; 0x10f0 <nrf24_checkRegister>
     9d8:	98 2f       	mov	r25, r24
     9da:	81 e0       	ldi	r24, 0x01	; 1
     9dc:	89 27       	eor	r24, r25
     9de:	88 23       	and	r24, r24
     9e0:	11 f0       	breq	.+4      	; 0x9e6 <nrf24_checkConfig+0x88>
     9e2:	80 e0       	ldi	r24, 0x00	; 0
     9e4:	55 c0       	rjmp	.+170    	; 0xa90 <nrf24_checkConfig+0x132>
	if (nrf24_checkRegister(RX_PW_P4, 0x00,1)==false) return false;
     9e6:	85 e1       	ldi	r24, 0x15	; 21
     9e8:	60 e0       	ldi	r22, 0x00	; 0
     9ea:	41 e0       	ldi	r20, 0x01	; 1
     9ec:	0e 94 78 08 	call	0x10f0	; 0x10f0 <nrf24_checkRegister>
     9f0:	98 2f       	mov	r25, r24
     9f2:	81 e0       	ldi	r24, 0x01	; 1
     9f4:	89 27       	eor	r24, r25
     9f6:	88 23       	and	r24, r24
     9f8:	11 f0       	breq	.+4      	; 0x9fe <nrf24_checkConfig+0xa0>
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	49 c0       	rjmp	.+146    	; 0xa90 <nrf24_checkConfig+0x132>
	if (nrf24_checkRegister(RX_PW_P5, 0x00,1)==false) return false;
     9fe:	86 e1       	ldi	r24, 0x16	; 22
     a00:	60 e0       	ldi	r22, 0x00	; 0
     a02:	41 e0       	ldi	r20, 0x01	; 1
     a04:	0e 94 78 08 	call	0x10f0	; 0x10f0 <nrf24_checkRegister>
     a08:	98 2f       	mov	r25, r24
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	89 27       	eor	r24, r25
     a0e:	88 23       	and	r24, r24
     a10:	11 f0       	breq	.+4      	; 0xa16 <nrf24_checkConfig+0xb8>
     a12:	80 e0       	ldi	r24, 0x00	; 0
     a14:	3d c0       	rjmp	.+122    	; 0xa90 <nrf24_checkConfig+0x132>
	if (nrf24_checkRegister(RF_SETUP, (0<<RF_DR)|((0x03)<<RF_PWR),1)==false) return false;
     a16:	86 e0       	ldi	r24, 0x06	; 6
     a18:	66 e0       	ldi	r22, 0x06	; 6
     a1a:	41 e0       	ldi	r20, 0x01	; 1
     a1c:	0e 94 78 08 	call	0x10f0	; 0x10f0 <nrf24_checkRegister>
     a20:	98 2f       	mov	r25, r24
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	89 27       	eor	r24, r25
     a26:	88 23       	and	r24, r24
     a28:	11 f0       	breq	.+4      	; 0xa2e <nrf24_checkConfig+0xd0>
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	31 c0       	rjmp	.+98     	; 0xa90 <nrf24_checkConfig+0x132>
	if (nrf24_checkRegister(CONFIG,nrf24_CONFIG,1)==false) return false;
     a2e:	80 e0       	ldi	r24, 0x00	; 0
     a30:	68 e0       	ldi	r22, 0x08	; 8
     a32:	41 e0       	ldi	r20, 0x01	; 1
     a34:	0e 94 78 08 	call	0x10f0	; 0x10f0 <nrf24_checkRegister>
     a38:	98 2f       	mov	r25, r24
     a3a:	81 e0       	ldi	r24, 0x01	; 1
     a3c:	89 27       	eor	r24, r25
     a3e:	88 23       	and	r24, r24
     a40:	11 f0       	breq	.+4      	; 0xa46 <nrf24_checkConfig+0xe8>
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	25 c0       	rjmp	.+74     	; 0xa90 <nrf24_checkConfig+0x132>
	if (nrf24_checkRegister(EN_AA,(1<<ENAA_P0)|(1<<ENAA_P1)|(0<<ENAA_P2)|(0<<ENAA_P3)|(0<<ENAA_P4)|(0<<ENAA_P5),1)==false) return false;
     a46:	81 e0       	ldi	r24, 0x01	; 1
     a48:	63 e0       	ldi	r22, 0x03	; 3
     a4a:	41 e0       	ldi	r20, 0x01	; 1
     a4c:	0e 94 78 08 	call	0x10f0	; 0x10f0 <nrf24_checkRegister>
     a50:	98 2f       	mov	r25, r24
     a52:	81 e0       	ldi	r24, 0x01	; 1
     a54:	89 27       	eor	r24, r25
     a56:	88 23       	and	r24, r24
     a58:	11 f0       	breq	.+4      	; 0xa5e <nrf24_checkConfig+0x100>
     a5a:	80 e0       	ldi	r24, 0x00	; 0
     a5c:	19 c0       	rjmp	.+50     	; 0xa90 <nrf24_checkConfig+0x132>
	if (nrf24_checkRegister(SETUP_RETR,(0x04<<ARD)|(0x0F<<ARC),1)==false) return false;
     a5e:	84 e0       	ldi	r24, 0x04	; 4
     a60:	6f e4       	ldi	r22, 0x4F	; 79
     a62:	41 e0       	ldi	r20, 0x01	; 1
     a64:	0e 94 78 08 	call	0x10f0	; 0x10f0 <nrf24_checkRegister>
     a68:	98 2f       	mov	r25, r24
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	89 27       	eor	r24, r25
     a6e:	88 23       	and	r24, r24
     a70:	11 f0       	breq	.+4      	; 0xa76 <nrf24_checkConfig+0x118>
     a72:	80 e0       	ldi	r24, 0x00	; 0
     a74:	0d c0       	rjmp	.+26     	; 0xa90 <nrf24_checkConfig+0x132>
	if (nrf24_checkRegister(DYNPD,(0<<DPL_P0)|(0<<DPL_P1)|(0<<DPL_P2)|(0<<DPL_P3)|(0<<DPL_P4)|(0<<DPL_P5),1)==false) return false;
     a76:	8c e1       	ldi	r24, 0x1C	; 28
     a78:	60 e0       	ldi	r22, 0x00	; 0
     a7a:	41 e0       	ldi	r20, 0x01	; 1
     a7c:	0e 94 78 08 	call	0x10f0	; 0x10f0 <nrf24_checkRegister>
     a80:	98 2f       	mov	r25, r24
     a82:	81 e0       	ldi	r24, 0x01	; 1
     a84:	89 27       	eor	r24, r25
     a86:	88 23       	and	r24, r24
     a88:	11 f0       	breq	.+4      	; 0xa8e <nrf24_checkConfig+0x130>
     a8a:	80 e0       	ldi	r24, 0x00	; 0
     a8c:	01 c0       	rjmp	.+2      	; 0xa90 <nrf24_checkConfig+0x132>
	
	return true;
     a8e:	81 e0       	ldi	r24, 0x01	; 1
}
     a90:	cf 91       	pop	r28
     a92:	df 91       	pop	r29
     a94:	08 95       	ret

00000a96 <faultyRF_Alarm>:
}




void faultyRF_Alarm(){
     a96:	0f 93       	push	r16
     a98:	1f 93       	push	r17
     a9a:	df 93       	push	r29
     a9c:	cf 93       	push	r28
     a9e:	cd b7       	in	r28, 0x3d	; 61
     aa0:	de b7       	in	r29, 0x3e	; 62
     aa2:	6d 97       	sbiw	r28, 0x1d	; 29
     aa4:	0f b6       	in	r0, 0x3f	; 63
     aa6:	f8 94       	cli
     aa8:	de bf       	out	0x3e, r29	; 62
     aaa:	0f be       	out	0x3f, r0	; 63
     aac:	cd bf       	out	0x3d, r28	; 61
	CLEAR_FAULTY_RF_LED;
     aae:	8b e2       	ldi	r24, 0x2B	; 43
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	2b e2       	ldi	r18, 0x2B	; 43
     ab4:	30 e0       	ldi	r19, 0x00	; 0
     ab6:	f9 01       	movw	r30, r18
     ab8:	20 81       	ld	r18, Z
     aba:	2f 77       	andi	r18, 0x7F	; 127
     abc:	fc 01       	movw	r30, r24
     abe:	20 83       	st	Z, r18
	for (uint8_t x = 0; x < 6; x++)
     ac0:	19 82       	std	Y+1, r1	; 0x01
     ac2:	8d c0       	rjmp	.+282    	; 0xbde <faultyRF_Alarm+0x148>
	{
		FLIP_FAULTY_RF_LED;
     ac4:	8b e2       	ldi	r24, 0x2B	; 43
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	2b e2       	ldi	r18, 0x2B	; 43
     aca:	30 e0       	ldi	r19, 0x00	; 0
     acc:	f9 01       	movw	r30, r18
     ace:	30 81       	ld	r19, Z
     ad0:	20 e8       	ldi	r18, 0x80	; 128
     ad2:	23 27       	eor	r18, r19
     ad4:	fc 01       	movw	r30, r24
     ad6:	20 83       	st	Z, r18
     ad8:	80 e0       	ldi	r24, 0x00	; 0
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	aa ef       	ldi	r26, 0xFA	; 250
     ade:	b2 e4       	ldi	r27, 0x42	; 66
     ae0:	8a 83       	std	Y+2, r24	; 0x02
     ae2:	9b 83       	std	Y+3, r25	; 0x03
     ae4:	ac 83       	std	Y+4, r26	; 0x04
     ae6:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     ae8:	6a 81       	ldd	r22, Y+2	; 0x02
     aea:	7b 81       	ldd	r23, Y+3	; 0x03
     aec:	8c 81       	ldd	r24, Y+4	; 0x04
     aee:	9d 81       	ldd	r25, Y+5	; 0x05
     af0:	20 e0       	ldi	r18, 0x00	; 0
     af2:	30 e0       	ldi	r19, 0x00	; 0
     af4:	4a e7       	ldi	r20, 0x7A	; 122
     af6:	55 e4       	ldi	r21, 0x45	; 69
     af8:	0e 94 39 0c 	call	0x1872	; 0x1872 <__mulsf3>
     afc:	dc 01       	movw	r26, r24
     afe:	cb 01       	movw	r24, r22
     b00:	8e 83       	std	Y+6, r24	; 0x06
     b02:	9f 83       	std	Y+7, r25	; 0x07
     b04:	a8 87       	std	Y+8, r26	; 0x08
     b06:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     b08:	11 e0       	ldi	r17, 0x01	; 1
     b0a:	6e 81       	ldd	r22, Y+6	; 0x06
     b0c:	7f 81       	ldd	r23, Y+7	; 0x07
     b0e:	88 85       	ldd	r24, Y+8	; 0x08
     b10:	99 85       	ldd	r25, Y+9	; 0x09
     b12:	20 e0       	ldi	r18, 0x00	; 0
     b14:	30 e0       	ldi	r19, 0x00	; 0
     b16:	40 e8       	ldi	r20, 0x80	; 128
     b18:	5f e3       	ldi	r21, 0x3F	; 63
     b1a:	0e 94 b8 0b 	call	0x1770	; 0x1770 <__cmpsf2>
     b1e:	88 23       	and	r24, r24
     b20:	0c f0       	brlt	.+2      	; 0xb24 <faultyRF_Alarm+0x8e>
     b22:	10 e0       	ldi	r17, 0x00	; 0
     b24:	11 23       	and	r17, r17
     b26:	29 f0       	breq	.+10     	; 0xb32 <faultyRF_Alarm+0x9c>
		__ticks = 1;
     b28:	81 e0       	ldi	r24, 0x01	; 1
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	9b 87       	std	Y+11, r25	; 0x0b
     b2e:	8a 87       	std	Y+10, r24	; 0x0a
     b30:	46 c0       	rjmp	.+140    	; 0xbbe <faultyRF_Alarm+0x128>
	else if (__tmp > 65535)
     b32:	11 e0       	ldi	r17, 0x01	; 1
     b34:	6e 81       	ldd	r22, Y+6	; 0x06
     b36:	7f 81       	ldd	r23, Y+7	; 0x07
     b38:	88 85       	ldd	r24, Y+8	; 0x08
     b3a:	99 85       	ldd	r25, Y+9	; 0x09
     b3c:	20 e0       	ldi	r18, 0x00	; 0
     b3e:	3f ef       	ldi	r19, 0xFF	; 255
     b40:	4f e7       	ldi	r20, 0x7F	; 127
     b42:	57 e4       	ldi	r21, 0x47	; 71
     b44:	0e 94 35 0c 	call	0x186a	; 0x186a <__gesf2>
     b48:	18 16       	cp	r1, r24
     b4a:	0c f0       	brlt	.+2      	; 0xb4e <faultyRF_Alarm+0xb8>
     b4c:	10 e0       	ldi	r17, 0x00	; 0
     b4e:	11 23       	and	r17, r17
     b50:	61 f1       	breq	.+88     	; 0xbaa <faultyRF_Alarm+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b52:	6a 81       	ldd	r22, Y+2	; 0x02
     b54:	7b 81       	ldd	r23, Y+3	; 0x03
     b56:	8c 81       	ldd	r24, Y+4	; 0x04
     b58:	9d 81       	ldd	r25, Y+5	; 0x05
     b5a:	20 e0       	ldi	r18, 0x00	; 0
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	40 e2       	ldi	r20, 0x20	; 32
     b60:	51 e4       	ldi	r21, 0x41	; 65
     b62:	0e 94 39 0c 	call	0x1872	; 0x1872 <__mulsf3>
     b66:	dc 01       	movw	r26, r24
     b68:	cb 01       	movw	r24, r22
     b6a:	bc 01       	movw	r22, r24
     b6c:	cd 01       	movw	r24, r26
     b6e:	0e 94 bc 0b 	call	0x1778	; 0x1778 <__fixunssfsi>
     b72:	dc 01       	movw	r26, r24
     b74:	cb 01       	movw	r24, r22
     b76:	9b 87       	std	Y+11, r25	; 0x0b
     b78:	8a 87       	std	Y+10, r24	; 0x0a
     b7a:	12 c0       	rjmp	.+36     	; 0xba0 <faultyRF_Alarm+0x10a>
     b7c:	80 e9       	ldi	r24, 0x90	; 144
     b7e:	91 e0       	ldi	r25, 0x01	; 1
     b80:	9d 87       	std	Y+13, r25	; 0x0d
     b82:	8c 87       	std	Y+12, r24	; 0x0c
     b84:	8c 85       	ldd	r24, Y+12	; 0x0c
     b86:	9d 85       	ldd	r25, Y+13	; 0x0d
     b88:	8c 01       	movw	r16, r24
     b8a:	c8 01       	movw	r24, r16
     b8c:	01 97       	sbiw	r24, 0x01	; 1
     b8e:	f1 f7       	brne	.-4      	; 0xb8c <faultyRF_Alarm+0xf6>
     b90:	8c 01       	movw	r16, r24
     b92:	1d 87       	std	Y+13, r17	; 0x0d
     b94:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b96:	8a 85       	ldd	r24, Y+10	; 0x0a
     b98:	9b 85       	ldd	r25, Y+11	; 0x0b
     b9a:	01 97       	sbiw	r24, 0x01	; 1
     b9c:	9b 87       	std	Y+11, r25	; 0x0b
     b9e:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ba0:	8a 85       	ldd	r24, Y+10	; 0x0a
     ba2:	9b 85       	ldd	r25, Y+11	; 0x0b
     ba4:	00 97       	sbiw	r24, 0x00	; 0
     ba6:	51 f7       	brne	.-44     	; 0xb7c <faultyRF_Alarm+0xe6>
     ba8:	17 c0       	rjmp	.+46     	; 0xbd8 <faultyRF_Alarm+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     baa:	6e 81       	ldd	r22, Y+6	; 0x06
     bac:	7f 81       	ldd	r23, Y+7	; 0x07
     bae:	88 85       	ldd	r24, Y+8	; 0x08
     bb0:	99 85       	ldd	r25, Y+9	; 0x09
     bb2:	0e 94 bc 0b 	call	0x1778	; 0x1778 <__fixunssfsi>
     bb6:	dc 01       	movw	r26, r24
     bb8:	cb 01       	movw	r24, r22
     bba:	9b 87       	std	Y+11, r25	; 0x0b
     bbc:	8a 87       	std	Y+10, r24	; 0x0a
     bbe:	8a 85       	ldd	r24, Y+10	; 0x0a
     bc0:	9b 85       	ldd	r25, Y+11	; 0x0b
     bc2:	9f 87       	std	Y+15, r25	; 0x0f
     bc4:	8e 87       	std	Y+14, r24	; 0x0e
     bc6:	8e 85       	ldd	r24, Y+14	; 0x0e
     bc8:	9f 85       	ldd	r25, Y+15	; 0x0f
     bca:	8c 01       	movw	r16, r24
     bcc:	f8 01       	movw	r30, r16
     bce:	31 97       	sbiw	r30, 0x01	; 1
     bd0:	f1 f7       	brne	.-4      	; 0xbce <faultyRF_Alarm+0x138>
     bd2:	8f 01       	movw	r16, r30
     bd4:	1f 87       	std	Y+15, r17	; 0x0f
     bd6:	0e 87       	std	Y+14, r16	; 0x0e



void faultyRF_Alarm(){
	CLEAR_FAULTY_RF_LED;
	for (uint8_t x = 0; x < 6; x++)
     bd8:	89 81       	ldd	r24, Y+1	; 0x01
     bda:	8f 5f       	subi	r24, 0xFF	; 255
     bdc:	89 83       	std	Y+1, r24	; 0x01
     bde:	89 81       	ldd	r24, Y+1	; 0x01
     be0:	86 30       	cpi	r24, 0x06	; 6
     be2:	08 f4       	brcc	.+2      	; 0xbe6 <faultyRF_Alarm+0x150>
     be4:	6f cf       	rjmp	.-290    	; 0xac4 <faultyRF_Alarm+0x2e>
     be6:	80 e0       	ldi	r24, 0x00	; 0
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	aa e7       	ldi	r26, 0x7A	; 122
     bec:	b3 e4       	ldi	r27, 0x43	; 67
     bee:	88 8b       	std	Y+16, r24	; 0x10
     bf0:	99 8b       	std	Y+17, r25	; 0x11
     bf2:	aa 8b       	std	Y+18, r26	; 0x12
     bf4:	bb 8b       	std	Y+19, r27	; 0x13
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     bf6:	68 89       	ldd	r22, Y+16	; 0x10
     bf8:	79 89       	ldd	r23, Y+17	; 0x11
     bfa:	8a 89       	ldd	r24, Y+18	; 0x12
     bfc:	9b 89       	ldd	r25, Y+19	; 0x13
     bfe:	20 e0       	ldi	r18, 0x00	; 0
     c00:	30 e0       	ldi	r19, 0x00	; 0
     c02:	4a e7       	ldi	r20, 0x7A	; 122
     c04:	55 e4       	ldi	r21, 0x45	; 69
     c06:	0e 94 39 0c 	call	0x1872	; 0x1872 <__mulsf3>
     c0a:	dc 01       	movw	r26, r24
     c0c:	cb 01       	movw	r24, r22
     c0e:	8c 8b       	std	Y+20, r24	; 0x14
     c10:	9d 8b       	std	Y+21, r25	; 0x15
     c12:	ae 8b       	std	Y+22, r26	; 0x16
     c14:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
     c16:	11 e0       	ldi	r17, 0x01	; 1
     c18:	6c 89       	ldd	r22, Y+20	; 0x14
     c1a:	7d 89       	ldd	r23, Y+21	; 0x15
     c1c:	8e 89       	ldd	r24, Y+22	; 0x16
     c1e:	9f 89       	ldd	r25, Y+23	; 0x17
     c20:	20 e0       	ldi	r18, 0x00	; 0
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	40 e8       	ldi	r20, 0x80	; 128
     c26:	5f e3       	ldi	r21, 0x3F	; 63
     c28:	0e 94 b8 0b 	call	0x1770	; 0x1770 <__cmpsf2>
     c2c:	88 23       	and	r24, r24
     c2e:	0c f0       	brlt	.+2      	; 0xc32 <faultyRF_Alarm+0x19c>
     c30:	10 e0       	ldi	r17, 0x00	; 0
     c32:	11 23       	and	r17, r17
     c34:	29 f0       	breq	.+10     	; 0xc40 <faultyRF_Alarm+0x1aa>
		__ticks = 1;
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	99 8f       	std	Y+25, r25	; 0x19
     c3c:	88 8f       	std	Y+24, r24	; 0x18
     c3e:	46 c0       	rjmp	.+140    	; 0xccc <faultyRF_Alarm+0x236>
	else if (__tmp > 65535)
     c40:	11 e0       	ldi	r17, 0x01	; 1
     c42:	6c 89       	ldd	r22, Y+20	; 0x14
     c44:	7d 89       	ldd	r23, Y+21	; 0x15
     c46:	8e 89       	ldd	r24, Y+22	; 0x16
     c48:	9f 89       	ldd	r25, Y+23	; 0x17
     c4a:	20 e0       	ldi	r18, 0x00	; 0
     c4c:	3f ef       	ldi	r19, 0xFF	; 255
     c4e:	4f e7       	ldi	r20, 0x7F	; 127
     c50:	57 e4       	ldi	r21, 0x47	; 71
     c52:	0e 94 35 0c 	call	0x186a	; 0x186a <__gesf2>
     c56:	18 16       	cp	r1, r24
     c58:	0c f0       	brlt	.+2      	; 0xc5c <faultyRF_Alarm+0x1c6>
     c5a:	10 e0       	ldi	r17, 0x00	; 0
     c5c:	11 23       	and	r17, r17
     c5e:	61 f1       	breq	.+88     	; 0xcb8 <faultyRF_Alarm+0x222>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c60:	68 89       	ldd	r22, Y+16	; 0x10
     c62:	79 89       	ldd	r23, Y+17	; 0x11
     c64:	8a 89       	ldd	r24, Y+18	; 0x12
     c66:	9b 89       	ldd	r25, Y+19	; 0x13
     c68:	20 e0       	ldi	r18, 0x00	; 0
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	40 e2       	ldi	r20, 0x20	; 32
     c6e:	51 e4       	ldi	r21, 0x41	; 65
     c70:	0e 94 39 0c 	call	0x1872	; 0x1872 <__mulsf3>
     c74:	dc 01       	movw	r26, r24
     c76:	cb 01       	movw	r24, r22
     c78:	bc 01       	movw	r22, r24
     c7a:	cd 01       	movw	r24, r26
     c7c:	0e 94 bc 0b 	call	0x1778	; 0x1778 <__fixunssfsi>
     c80:	dc 01       	movw	r26, r24
     c82:	cb 01       	movw	r24, r22
     c84:	99 8f       	std	Y+25, r25	; 0x19
     c86:	88 8f       	std	Y+24, r24	; 0x18
     c88:	12 c0       	rjmp	.+36     	; 0xcae <faultyRF_Alarm+0x218>
     c8a:	80 e9       	ldi	r24, 0x90	; 144
     c8c:	91 e0       	ldi	r25, 0x01	; 1
     c8e:	9b 8f       	std	Y+27, r25	; 0x1b
     c90:	8a 8f       	std	Y+26, r24	; 0x1a
     c92:	8a 8d       	ldd	r24, Y+26	; 0x1a
     c94:	9b 8d       	ldd	r25, Y+27	; 0x1b
     c96:	8c 01       	movw	r16, r24
     c98:	c8 01       	movw	r24, r16
     c9a:	01 97       	sbiw	r24, 0x01	; 1
     c9c:	f1 f7       	brne	.-4      	; 0xc9a <faultyRF_Alarm+0x204>
     c9e:	8c 01       	movw	r16, r24
     ca0:	1b 8f       	std	Y+27, r17	; 0x1b
     ca2:	0a 8f       	std	Y+26, r16	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ca4:	88 8d       	ldd	r24, Y+24	; 0x18
     ca6:	99 8d       	ldd	r25, Y+25	; 0x19
     ca8:	01 97       	sbiw	r24, 0x01	; 1
     caa:	99 8f       	std	Y+25, r25	; 0x19
     cac:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cae:	88 8d       	ldd	r24, Y+24	; 0x18
     cb0:	99 8d       	ldd	r25, Y+25	; 0x19
     cb2:	00 97       	sbiw	r24, 0x00	; 0
     cb4:	51 f7       	brne	.-44     	; 0xc8a <faultyRF_Alarm+0x1f4>
     cb6:	17 c0       	rjmp	.+46     	; 0xce6 <faultyRF_Alarm+0x250>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cb8:	6c 89       	ldd	r22, Y+20	; 0x14
     cba:	7d 89       	ldd	r23, Y+21	; 0x15
     cbc:	8e 89       	ldd	r24, Y+22	; 0x16
     cbe:	9f 89       	ldd	r25, Y+23	; 0x17
     cc0:	0e 94 bc 0b 	call	0x1778	; 0x1778 <__fixunssfsi>
     cc4:	dc 01       	movw	r26, r24
     cc6:	cb 01       	movw	r24, r22
     cc8:	99 8f       	std	Y+25, r25	; 0x19
     cca:	88 8f       	std	Y+24, r24	; 0x18
     ccc:	88 8d       	ldd	r24, Y+24	; 0x18
     cce:	99 8d       	ldd	r25, Y+25	; 0x19
     cd0:	9d 8f       	std	Y+29, r25	; 0x1d
     cd2:	8c 8f       	std	Y+28, r24	; 0x1c
     cd4:	8c 8d       	ldd	r24, Y+28	; 0x1c
     cd6:	9d 8d       	ldd	r25, Y+29	; 0x1d
     cd8:	8c 01       	movw	r16, r24
     cda:	f8 01       	movw	r30, r16
     cdc:	31 97       	sbiw	r30, 0x01	; 1
     cde:	f1 f7       	brne	.-4      	; 0xcdc <faultyRF_Alarm+0x246>
     ce0:	8f 01       	movw	r16, r30
     ce2:	1d 8f       	std	Y+29, r17	; 0x1d
     ce4:	0c 8f       	std	Y+28, r16	; 0x1c
	{
		FLIP_FAULTY_RF_LED;
		_delay_ms(125);
	}
	_delay_ms(250);
}
     ce6:	6d 96       	adiw	r28, 0x1d	; 29
     ce8:	0f b6       	in	r0, 0x3f	; 63
     cea:	f8 94       	cli
     cec:	de bf       	out	0x3e, r29	; 62
     cee:	0f be       	out	0x3f, r0	; 63
     cf0:	cd bf       	out	0x3d, r28	; 61
     cf2:	cf 91       	pop	r28
     cf4:	df 91       	pop	r29
     cf6:	1f 91       	pop	r17
     cf8:	0f 91       	pop	r16
     cfa:	08 95       	ret

00000cfc <nrf24_rx_address>:



/* Set the RX address */
void nrf24_rx_address(uint8_t * adr)
{
     cfc:	df 93       	push	r29
     cfe:	cf 93       	push	r28
     d00:	00 d0       	rcall	.+0      	; 0xd02 <nrf24_rx_address+0x6>
     d02:	cd b7       	in	r28, 0x3d	; 61
     d04:	de b7       	in	r29, 0x3e	; 62
     d06:	9a 83       	std	Y+2, r25	; 0x02
     d08:	89 83       	std	Y+1, r24	; 0x01
	nrf24_ce_digitalWrite(LOW);
     d0a:	80 e0       	ldi	r24, 0x00	; 0
     d0c:	0e 94 cb 08 	call	0x1196	; 0x1196 <nrf24_ce_digitalWrite>
	nrf24_writeRegister(RX_ADDR_P1,adr,nrf24_ADDR_LEN);
     d10:	29 81       	ldd	r18, Y+1	; 0x01
     d12:	3a 81       	ldd	r19, Y+2	; 0x02
     d14:	8b e0       	ldi	r24, 0x0B	; 11
     d16:	b9 01       	movw	r22, r18
     d18:	45 e0       	ldi	r20, 0x05	; 5
     d1a:	0e 94 57 08 	call	0x10ae	; 0x10ae <nrf24_writeRegister>
	nrf24_ce_digitalWrite(HIGH);
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	0e 94 cb 08 	call	0x1196	; 0x1196 <nrf24_ce_digitalWrite>
}
     d24:	0f 90       	pop	r0
     d26:	0f 90       	pop	r0
     d28:	cf 91       	pop	r28
     d2a:	df 91       	pop	r29
     d2c:	08 95       	ret

00000d2e <nrf24_tx_address>:
	return payload_len;
}

/* Set the TX address */
void nrf24_tx_address(uint8_t* adr)
{
     d2e:	df 93       	push	r29
     d30:	cf 93       	push	r28
     d32:	00 d0       	rcall	.+0      	; 0xd34 <nrf24_tx_address+0x6>
     d34:	cd b7       	in	r28, 0x3d	; 61
     d36:	de b7       	in	r29, 0x3e	; 62
     d38:	9a 83       	std	Y+2, r25	; 0x02
     d3a:	89 83       	std	Y+1, r24	; 0x01
	/* RX_ADDR_P0 must be set to the sending addr for auto ack to work. */
	nrf24_writeRegister(RX_ADDR_P0,adr,nrf24_ADDR_LEN);
     d3c:	29 81       	ldd	r18, Y+1	; 0x01
     d3e:	3a 81       	ldd	r19, Y+2	; 0x02
     d40:	8a e0       	ldi	r24, 0x0A	; 10
     d42:	b9 01       	movw	r22, r18
     d44:	45 e0       	ldi	r20, 0x05	; 5
     d46:	0e 94 57 08 	call	0x10ae	; 0x10ae <nrf24_writeRegister>
	nrf24_writeRegister(TX_ADDR,adr,nrf24_ADDR_LEN);
     d4a:	29 81       	ldd	r18, Y+1	; 0x01
     d4c:	3a 81       	ldd	r19, Y+2	; 0x02
     d4e:	80 e1       	ldi	r24, 0x10	; 16
     d50:	b9 01       	movw	r22, r18
     d52:	45 e0       	ldi	r20, 0x05	; 5
     d54:	0e 94 57 08 	call	0x10ae	; 0x10ae <nrf24_writeRegister>
}
     d58:	0f 90       	pop	r0
     d5a:	0f 90       	pop	r0
     d5c:	cf 91       	pop	r28
     d5e:	df 91       	pop	r29
     d60:	08 95       	ret

00000d62 <nrf24_retransmissionCount>:
	nrf24_configRegister(STATUS,(1<<RX_DR));
}

/* Returns the number of retransmissions occured for the last message */
uint8_t nrf24_retransmissionCount()
{
     d62:	df 93       	push	r29
     d64:	cf 93       	push	r28
     d66:	0f 92       	push	r0
     d68:	cd b7       	in	r28, 0x3d	; 61
     d6a:	de b7       	in	r29, 0x3e	; 62
	uint8_t rv;
	nrf24_readRegister(OBSERVE_TX,&rv,1);
     d6c:	88 e0       	ldi	r24, 0x08	; 8
     d6e:	9e 01       	movw	r18, r28
     d70:	2f 5f       	subi	r18, 0xFF	; 255
     d72:	3f 4f       	sbci	r19, 0xFF	; 255
     d74:	b9 01       	movw	r22, r18
     d76:	41 e0       	ldi	r20, 0x01	; 1
     d78:	0e 94 34 08 	call	0x1068	; 0x1068 <nrf24_readRegister>
	rv = rv & 0x0F;
     d7c:	89 81       	ldd	r24, Y+1	; 0x01
     d7e:	8f 70       	andi	r24, 0x0F	; 15
     d80:	89 83       	std	Y+1, r24	; 0x01
	return rv;
     d82:	89 81       	ldd	r24, Y+1	; 0x01
}
     d84:	0f 90       	pop	r0
     d86:	cf 91       	pop	r28
     d88:	df 91       	pop	r29
     d8a:	08 95       	ret

00000d8c <nrf24_send>:

// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
void nrf24_send(uint8_t* value)
{
     d8c:	df 93       	push	r29
     d8e:	cf 93       	push	r28
     d90:	00 d0       	rcall	.+0      	; 0xd92 <nrf24_send+0x6>
     d92:	cd b7       	in	r28, 0x3d	; 61
     d94:	de b7       	in	r29, 0x3e	; 62
     d96:	9a 83       	std	Y+2, r25	; 0x02
     d98:	89 83       	std	Y+1, r24	; 0x01
	/* Go to Standby-I first */
	nrf24_ce_digitalWrite(LOW);
     d9a:	80 e0       	ldi	r24, 0x00	; 0
     d9c:	0e 94 cb 08 	call	0x1196	; 0x1196 <nrf24_ce_digitalWrite>
	
	/* Set to transmitter mode , Power up if needed */
	nrf24_powerUpTx();
     da0:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <nrf24_powerUpTx>

	/* Do we really need to flush TX fifo each time ? */
	#if 1
	/* Pull down chip select */
	nrf24_csn_digitalWrite(LOW);
     da4:	80 e0       	ldi	r24, 0x00	; 0
     da6:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <nrf24_csn_digitalWrite>

	/* Write cmd to flush transmit FIFO */
	spi_transfer(FLUSH_TX);
     daa:	81 ee       	ldi	r24, 0xE1	; 225
     dac:	0e 94 77 07 	call	0xeee	; 0xeee <spi_transfer>

	/* Pull up chip select */
	nrf24_csn_digitalWrite(HIGH);
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <nrf24_csn_digitalWrite>
	#endif

	/* Pull down chip select */
	nrf24_csn_digitalWrite(LOW);
     db6:	80 e0       	ldi	r24, 0x00	; 0
     db8:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <nrf24_csn_digitalWrite>

	/* Write cmd to write payload */
	spi_transfer(W_TX_PAYLOAD);
     dbc:	80 ea       	ldi	r24, 0xA0	; 160
     dbe:	0e 94 77 07 	call	0xeee	; 0xeee <spi_transfer>

	/* Write payload */
	nrf24_transmitSync(value,payload_len);
     dc2:	20 91 d1 02 	lds	r18, 0x02D1
     dc6:	89 81       	ldd	r24, Y+1	; 0x01
     dc8:	9a 81       	ldd	r25, Y+2	; 0x02
     dca:	62 2f       	mov	r22, r18
     dcc:	0e 94 f6 07 	call	0xfec	; 0xfec <nrf24_transmitSync>

	/* Pull up chip select */
	nrf24_csn_digitalWrite(HIGH);
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <nrf24_csn_digitalWrite>

	/* Start the transmission */
	nrf24_ce_digitalWrite(HIGH);
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	0e 94 cb 08 	call	0x1196	; 0x1196 <nrf24_ce_digitalWrite>
}
     ddc:	0f 90       	pop	r0
     dde:	0f 90       	pop	r0
     de0:	cf 91       	pop	r28
     de2:	df 91       	pop	r29
     de4:	08 95       	ret

00000de6 <nrf24_isSending>:

uint8_t nrf24_isSending()
{
     de6:	df 93       	push	r29
     de8:	cf 93       	push	r28
     dea:	0f 92       	push	r0
     dec:	cd b7       	in	r28, 0x3d	; 61
     dee:	de b7       	in	r29, 0x3e	; 62
	uint8_t status;

	/* read the current status */
	status = nrf24_getStatus();
     df0:	0e 94 09 07 	call	0xe12	; 0xe12 <nrf24_getStatus>
     df4:	89 83       	std	Y+1, r24	; 0x01
	
	/* if sending successful (TX_DS) or max retries exceded (MAX_RT). */
	if((status & ((1 << TX_DS)  | (1 << MAX_RT))))
     df6:	89 81       	ldd	r24, Y+1	; 0x01
     df8:	88 2f       	mov	r24, r24
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	80 73       	andi	r24, 0x30	; 48
     dfe:	90 70       	andi	r25, 0x00	; 0
     e00:	00 97       	sbiw	r24, 0x00	; 0
     e02:	11 f0       	breq	.+4      	; 0xe08 <nrf24_isSending+0x22>
	{
		return 0; /* false */
     e04:	80 e0       	ldi	r24, 0x00	; 0
     e06:	01 c0       	rjmp	.+2      	; 0xe0a <nrf24_isSending+0x24>
	}

	return 1; /* true */
     e08:	81 e0       	ldi	r24, 0x01	; 1

}
     e0a:	0f 90       	pop	r0
     e0c:	cf 91       	pop	r28
     e0e:	df 91       	pop	r29
     e10:	08 95       	ret

00000e12 <nrf24_getStatus>:

uint8_t nrf24_getStatus()
{
     e12:	df 93       	push	r29
     e14:	cf 93       	push	r28
     e16:	0f 92       	push	r0
     e18:	cd b7       	in	r28, 0x3d	; 61
     e1a:	de b7       	in	r29, 0x3e	; 62
	uint8_t rv;
	nrf24_csn_digitalWrite(LOW);
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <nrf24_csn_digitalWrite>
	rv = spi_transfer(NOP);
     e22:	8f ef       	ldi	r24, 0xFF	; 255
     e24:	0e 94 77 07 	call	0xeee	; 0xeee <spi_transfer>
     e28:	89 83       	std	Y+1, r24	; 0x01
	nrf24_csn_digitalWrite(HIGH);
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <nrf24_csn_digitalWrite>
	return rv;
     e30:	89 81       	ldd	r24, Y+1	; 0x01
}
     e32:	0f 90       	pop	r0
     e34:	cf 91       	pop	r28
     e36:	df 91       	pop	r29
     e38:	08 95       	ret

00000e3a <nrf24_lastMessageStatus>:

uint8_t nrf24_lastMessageStatus()
{
     e3a:	df 93       	push	r29
     e3c:	cf 93       	push	r28
     e3e:	0f 92       	push	r0
     e40:	cd b7       	in	r28, 0x3d	; 61
     e42:	de b7       	in	r29, 0x3e	; 62
	uint8_t rv;

	rv = nrf24_getStatus();
     e44:	0e 94 09 07 	call	0xe12	; 0xe12 <nrf24_getStatus>
     e48:	89 83       	std	Y+1, r24	; 0x01

	/* Transmission went OK */
	if((rv & ((1 << TX_DS))))
     e4a:	89 81       	ldd	r24, Y+1	; 0x01
     e4c:	88 2f       	mov	r24, r24
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	80 72       	andi	r24, 0x20	; 32
     e52:	90 70       	andi	r25, 0x00	; 0
     e54:	00 97       	sbiw	r24, 0x00	; 0
     e56:	11 f0       	breq	.+4      	; 0xe5c <nrf24_lastMessageStatus+0x22>
	{
		return NRF24_TRANSMISSON_OK;
     e58:	80 e0       	ldi	r24, 0x00	; 0
     e5a:	0a c0       	rjmp	.+20     	; 0xe70 <nrf24_lastMessageStatus+0x36>
	}
	/* Maximum retransmission count is reached */
	/* Last message probably went missing ... */
	else if((rv & ((1 << MAX_RT))))
     e5c:	89 81       	ldd	r24, Y+1	; 0x01
     e5e:	88 2f       	mov	r24, r24
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	80 71       	andi	r24, 0x10	; 16
     e64:	90 70       	andi	r25, 0x00	; 0
     e66:	00 97       	sbiw	r24, 0x00	; 0
     e68:	11 f0       	breq	.+4      	; 0xe6e <nrf24_lastMessageStatus+0x34>
	{
		return NRF24_MESSAGE_LOST;
     e6a:	81 e0       	ldi	r24, 0x01	; 1
     e6c:	01 c0       	rjmp	.+2      	; 0xe70 <nrf24_lastMessageStatus+0x36>
	}
	/* Probably still sending ... */
	else
	{
		return 0xFF;
     e6e:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
     e70:	0f 90       	pop	r0
     e72:	cf 91       	pop	r28
     e74:	df 91       	pop	r29
     e76:	08 95       	ret

00000e78 <nrf24_powerUpRx>:

void nrf24_powerUpRx()
{
     e78:	df 93       	push	r29
     e7a:	cf 93       	push	r28
     e7c:	cd b7       	in	r28, 0x3d	; 61
     e7e:	de b7       	in	r29, 0x3e	; 62
	nrf24_csn_digitalWrite(LOW);
     e80:	80 e0       	ldi	r24, 0x00	; 0
     e82:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <nrf24_csn_digitalWrite>
	spi_transfer(FLUSH_RX);
     e86:	82 ee       	ldi	r24, 0xE2	; 226
     e88:	0e 94 77 07 	call	0xeee	; 0xeee <spi_transfer>
	nrf24_csn_digitalWrite(HIGH);
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <nrf24_csn_digitalWrite>

	nrf24_configRegister(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT));
     e92:	87 e0       	ldi	r24, 0x07	; 7
     e94:	60 e7       	ldi	r22, 0x70	; 112
     e96:	0e 94 1a 08 	call	0x1034	; 0x1034 <nrf24_configRegister>

	nrf24_ce_digitalWrite(LOW);
     e9a:	80 e0       	ldi	r24, 0x00	; 0
     e9c:	0e 94 cb 08 	call	0x1196	; 0x1196 <nrf24_ce_digitalWrite>
	nrf24_configRegister(CONFIG,nrf24_CONFIG|((1<<PWR_UP)|(1<<PRIM_RX)));
     ea0:	80 e0       	ldi	r24, 0x00	; 0
     ea2:	6b e0       	ldi	r22, 0x0B	; 11
     ea4:	0e 94 1a 08 	call	0x1034	; 0x1034 <nrf24_configRegister>
	nrf24_ce_digitalWrite(HIGH);
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	0e 94 cb 08 	call	0x1196	; 0x1196 <nrf24_ce_digitalWrite>
}
     eae:	cf 91       	pop	r28
     eb0:	df 91       	pop	r29
     eb2:	08 95       	ret

00000eb4 <nrf24_powerUpTx>:

void nrf24_powerUpTx()
{
     eb4:	df 93       	push	r29
     eb6:	cf 93       	push	r28
     eb8:	cd b7       	in	r28, 0x3d	; 61
     eba:	de b7       	in	r29, 0x3e	; 62
	nrf24_configRegister(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT));
     ebc:	87 e0       	ldi	r24, 0x07	; 7
     ebe:	60 e7       	ldi	r22, 0x70	; 112
     ec0:	0e 94 1a 08 	call	0x1034	; 0x1034 <nrf24_configRegister>

	nrf24_configRegister(CONFIG,nrf24_CONFIG|((1<<PWR_UP)|(0<<PRIM_RX)));
     ec4:	80 e0       	ldi	r24, 0x00	; 0
     ec6:	6a e0       	ldi	r22, 0x0A	; 10
     ec8:	0e 94 1a 08 	call	0x1034	; 0x1034 <nrf24_configRegister>
}
     ecc:	cf 91       	pop	r28
     ece:	df 91       	pop	r29
     ed0:	08 95       	ret

00000ed2 <nrf24_powerDown>:

void nrf24_powerDown()
{
     ed2:	df 93       	push	r29
     ed4:	cf 93       	push	r28
     ed6:	cd b7       	in	r28, 0x3d	; 61
     ed8:	de b7       	in	r29, 0x3e	; 62
	nrf24_ce_digitalWrite(LOW);
     eda:	80 e0       	ldi	r24, 0x00	; 0
     edc:	0e 94 cb 08 	call	0x1196	; 0x1196 <nrf24_ce_digitalWrite>
	nrf24_configRegister(CONFIG,nrf24_CONFIG);
     ee0:	80 e0       	ldi	r24, 0x00	; 0
     ee2:	68 e0       	ldi	r22, 0x08	; 8
     ee4:	0e 94 1a 08 	call	0x1034	; 0x1034 <nrf24_configRegister>
}
     ee8:	cf 91       	pop	r28
     eea:	df 91       	pop	r29
     eec:	08 95       	ret

00000eee <spi_transfer>:

uint8_t spi_transfer(uint8_t tx)
{
     eee:	df 93       	push	r29
     ef0:	cf 93       	push	r28
     ef2:	00 d0       	rcall	.+0      	; 0xef4 <spi_transfer+0x6>
     ef4:	0f 92       	push	r0
     ef6:	cd b7       	in	r28, 0x3d	; 61
     ef8:	de b7       	in	r29, 0x3e	; 62
     efa:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t i = 0;
     efc:	19 82       	std	Y+1, r1	; 0x01
	uint8_t rx = 0;
     efe:	1a 82       	std	Y+2, r1	; 0x02

	nrf24_sck_digitalWrite(LOW);
     f00:	80 e0       	ldi	r24, 0x00	; 0
     f02:	0e 94 0b 09 	call	0x1216	; 0x1216 <nrf24_sck_digitalWrite>

	for(i=0;i<8;i++)
     f06:	19 82       	std	Y+1, r1	; 0x01
     f08:	30 c0       	rjmp	.+96     	; 0xf6a <spi_transfer+0x7c>
	{

		if(tx & (1<<(7-i)))
     f0a:	8b 81       	ldd	r24, Y+3	; 0x03
     f0c:	88 2f       	mov	r24, r24
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	29 81       	ldd	r18, Y+1	; 0x01
     f12:	22 2f       	mov	r18, r18
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	47 e0       	ldi	r20, 0x07	; 7
     f18:	50 e0       	ldi	r21, 0x00	; 0
     f1a:	ba 01       	movw	r22, r20
     f1c:	62 1b       	sub	r22, r18
     f1e:	73 0b       	sbc	r23, r19
     f20:	9b 01       	movw	r18, r22
     f22:	02 2e       	mov	r0, r18
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <spi_transfer+0x3c>
     f26:	95 95       	asr	r25
     f28:	87 95       	ror	r24
     f2a:	0a 94       	dec	r0
     f2c:	e2 f7       	brpl	.-8      	; 0xf26 <spi_transfer+0x38>
     f2e:	81 70       	andi	r24, 0x01	; 1
     f30:	90 70       	andi	r25, 0x00	; 0
     f32:	88 23       	and	r24, r24
     f34:	21 f0       	breq	.+8      	; 0xf3e <spi_transfer+0x50>
		{
			nrf24_mosi_digitalWrite(HIGH);
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	0e 94 2b 09 	call	0x1256	; 0x1256 <nrf24_mosi_digitalWrite>
     f3c:	03 c0       	rjmp	.+6      	; 0xf44 <spi_transfer+0x56>
		}
		else
		{
			nrf24_mosi_digitalWrite(LOW);
     f3e:	80 e0       	ldi	r24, 0x00	; 0
     f40:	0e 94 2b 09 	call	0x1256	; 0x1256 <nrf24_mosi_digitalWrite>
		}

		nrf24_sck_digitalWrite(HIGH);
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	0e 94 0b 09 	call	0x1216	; 0x1216 <nrf24_sck_digitalWrite>

		rx = rx << 1;
     f4a:	8a 81       	ldd	r24, Y+2	; 0x02
     f4c:	88 0f       	add	r24, r24
     f4e:	8a 83       	std	Y+2, r24	; 0x02
		if(nrf24_miso_digitalRead())
     f50:	0e 94 4b 09 	call	0x1296	; 0x1296 <nrf24_miso_digitalRead>
     f54:	88 23       	and	r24, r24
     f56:	19 f0       	breq	.+6      	; 0xf5e <spi_transfer+0x70>
		{
			rx |= 0x01;
     f58:	8a 81       	ldd	r24, Y+2	; 0x02
     f5a:	81 60       	ori	r24, 0x01	; 1
     f5c:	8a 83       	std	Y+2, r24	; 0x02
		}

		nrf24_sck_digitalWrite(LOW);
     f5e:	80 e0       	ldi	r24, 0x00	; 0
     f60:	0e 94 0b 09 	call	0x1216	; 0x1216 <nrf24_sck_digitalWrite>
	uint8_t i = 0;
	uint8_t rx = 0;

	nrf24_sck_digitalWrite(LOW);

	for(i=0;i<8;i++)
     f64:	89 81       	ldd	r24, Y+1	; 0x01
     f66:	8f 5f       	subi	r24, 0xFF	; 255
     f68:	89 83       	std	Y+1, r24	; 0x01
     f6a:	89 81       	ldd	r24, Y+1	; 0x01
     f6c:	88 30       	cpi	r24, 0x08	; 8
     f6e:	68 f2       	brcs	.-102    	; 0xf0a <spi_transfer+0x1c>

		nrf24_sck_digitalWrite(LOW);

	}

	return rx;
     f70:	8a 81       	ldd	r24, Y+2	; 0x02
}
     f72:	0f 90       	pop	r0
     f74:	0f 90       	pop	r0
     f76:	0f 90       	pop	r0
     f78:	cf 91       	pop	r28
     f7a:	df 91       	pop	r29
     f7c:	08 95       	ret

00000f7e <nrf24_transferSync>:

/* send and receive multiple bytes over SPI */
void nrf24_transferSync(uint8_t* dataout,uint8_t* datain,uint8_t len)
{
     f7e:	0f 93       	push	r16
     f80:	1f 93       	push	r17
     f82:	df 93       	push	r29
     f84:	cf 93       	push	r28
     f86:	00 d0       	rcall	.+0      	; 0xf88 <nrf24_transferSync+0xa>
     f88:	00 d0       	rcall	.+0      	; 0xf8a <nrf24_transferSync+0xc>
     f8a:	00 d0       	rcall	.+0      	; 0xf8c <nrf24_transferSync+0xe>
     f8c:	cd b7       	in	r28, 0x3d	; 61
     f8e:	de b7       	in	r29, 0x3e	; 62
     f90:	9b 83       	std	Y+3, r25	; 0x03
     f92:	8a 83       	std	Y+2, r24	; 0x02
     f94:	7d 83       	std	Y+5, r23	; 0x05
     f96:	6c 83       	std	Y+4, r22	; 0x04
     f98:	4e 83       	std	Y+6, r20	; 0x06
	uint8_t i;

	for(i=0;i<len;i++)
     f9a:	19 82       	std	Y+1, r1	; 0x01
     f9c:	18 c0       	rjmp	.+48     	; 0xfce <nrf24_transferSync+0x50>
	{
		datain[i] = spi_transfer(dataout[i]);
     f9e:	89 81       	ldd	r24, Y+1	; 0x01
     fa0:	88 2f       	mov	r24, r24
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	2c 81       	ldd	r18, Y+4	; 0x04
     fa6:	3d 81       	ldd	r19, Y+5	; 0x05
     fa8:	89 01       	movw	r16, r18
     faa:	08 0f       	add	r16, r24
     fac:	19 1f       	adc	r17, r25
     fae:	89 81       	ldd	r24, Y+1	; 0x01
     fb0:	88 2f       	mov	r24, r24
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	2a 81       	ldd	r18, Y+2	; 0x02
     fb6:	3b 81       	ldd	r19, Y+3	; 0x03
     fb8:	82 0f       	add	r24, r18
     fba:	93 1f       	adc	r25, r19
     fbc:	fc 01       	movw	r30, r24
     fbe:	80 81       	ld	r24, Z
     fc0:	0e 94 77 07 	call	0xeee	; 0xeee <spi_transfer>
     fc4:	f8 01       	movw	r30, r16
     fc6:	80 83       	st	Z, r24
/* send and receive multiple bytes over SPI */
void nrf24_transferSync(uint8_t* dataout,uint8_t* datain,uint8_t len)
{
	uint8_t i;

	for(i=0;i<len;i++)
     fc8:	89 81       	ldd	r24, Y+1	; 0x01
     fca:	8f 5f       	subi	r24, 0xFF	; 255
     fcc:	89 83       	std	Y+1, r24	; 0x01
     fce:	99 81       	ldd	r25, Y+1	; 0x01
     fd0:	8e 81       	ldd	r24, Y+6	; 0x06
     fd2:	98 17       	cp	r25, r24
     fd4:	20 f3       	brcs	.-56     	; 0xf9e <nrf24_transferSync+0x20>
	{
		datain[i] = spi_transfer(dataout[i]);
	}

}
     fd6:	26 96       	adiw	r28, 0x06	; 6
     fd8:	0f b6       	in	r0, 0x3f	; 63
     fda:	f8 94       	cli
     fdc:	de bf       	out	0x3e, r29	; 62
     fde:	0f be       	out	0x3f, r0	; 63
     fe0:	cd bf       	out	0x3d, r28	; 61
     fe2:	cf 91       	pop	r28
     fe4:	df 91       	pop	r29
     fe6:	1f 91       	pop	r17
     fe8:	0f 91       	pop	r16
     fea:	08 95       	ret

00000fec <nrf24_transmitSync>:

/* send multiple bytes over SPI */
void nrf24_transmitSync(uint8_t* dataout,uint8_t len)
{
     fec:	df 93       	push	r29
     fee:	cf 93       	push	r28
     ff0:	00 d0       	rcall	.+0      	; 0xff2 <nrf24_transmitSync+0x6>
     ff2:	00 d0       	rcall	.+0      	; 0xff4 <nrf24_transmitSync+0x8>
     ff4:	cd b7       	in	r28, 0x3d	; 61
     ff6:	de b7       	in	r29, 0x3e	; 62
     ff8:	9b 83       	std	Y+3, r25	; 0x03
     ffa:	8a 83       	std	Y+2, r24	; 0x02
     ffc:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t i;
	
	for(i=0;i<len;i++)
     ffe:	19 82       	std	Y+1, r1	; 0x01
    1000:	0e c0       	rjmp	.+28     	; 0x101e <nrf24_transmitSync+0x32>
	{
		spi_transfer(dataout[i]);
    1002:	89 81       	ldd	r24, Y+1	; 0x01
    1004:	88 2f       	mov	r24, r24
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	2a 81       	ldd	r18, Y+2	; 0x02
    100a:	3b 81       	ldd	r19, Y+3	; 0x03
    100c:	82 0f       	add	r24, r18
    100e:	93 1f       	adc	r25, r19
    1010:	fc 01       	movw	r30, r24
    1012:	80 81       	ld	r24, Z
    1014:	0e 94 77 07 	call	0xeee	; 0xeee <spi_transfer>
/* send multiple bytes over SPI */
void nrf24_transmitSync(uint8_t* dataout,uint8_t len)
{
	uint8_t i;
	
	for(i=0;i<len;i++)
    1018:	89 81       	ldd	r24, Y+1	; 0x01
    101a:	8f 5f       	subi	r24, 0xFF	; 255
    101c:	89 83       	std	Y+1, r24	; 0x01
    101e:	99 81       	ldd	r25, Y+1	; 0x01
    1020:	8c 81       	ldd	r24, Y+4	; 0x04
    1022:	98 17       	cp	r25, r24
    1024:	70 f3       	brcs	.-36     	; 0x1002 <nrf24_transmitSync+0x16>
	{
		spi_transfer(dataout[i]);
	}

}
    1026:	0f 90       	pop	r0
    1028:	0f 90       	pop	r0
    102a:	0f 90       	pop	r0
    102c:	0f 90       	pop	r0
    102e:	cf 91       	pop	r28
    1030:	df 91       	pop	r29
    1032:	08 95       	ret

00001034 <nrf24_configRegister>:

/* Clocks only one byte into the given nrf24 register */
void nrf24_configRegister(uint8_t reg, uint8_t value)
{
    1034:	df 93       	push	r29
    1036:	cf 93       	push	r28
    1038:	00 d0       	rcall	.+0      	; 0x103a <nrf24_configRegister+0x6>
    103a:	cd b7       	in	r28, 0x3d	; 61
    103c:	de b7       	in	r29, 0x3e	; 62
    103e:	89 83       	std	Y+1, r24	; 0x01
    1040:	6a 83       	std	Y+2, r22	; 0x02
	nrf24_csn_digitalWrite(LOW);
    1042:	80 e0       	ldi	r24, 0x00	; 0
    1044:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <nrf24_csn_digitalWrite>
	spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
    1048:	89 81       	ldd	r24, Y+1	; 0x01
    104a:	8f 71       	andi	r24, 0x1F	; 31
    104c:	80 62       	ori	r24, 0x20	; 32
    104e:	0e 94 77 07 	call	0xeee	; 0xeee <spi_transfer>
	spi_transfer(value);
    1052:	8a 81       	ldd	r24, Y+2	; 0x02
    1054:	0e 94 77 07 	call	0xeee	; 0xeee <spi_transfer>
	nrf24_csn_digitalWrite(HIGH);
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <nrf24_csn_digitalWrite>
}
    105e:	0f 90       	pop	r0
    1060:	0f 90       	pop	r0
    1062:	cf 91       	pop	r28
    1064:	df 91       	pop	r29
    1066:	08 95       	ret

00001068 <nrf24_readRegister>:

/* Read single register from nrf24 */
void nrf24_readRegister(uint8_t reg, uint8_t* value, uint8_t len)
{
    1068:	df 93       	push	r29
    106a:	cf 93       	push	r28
    106c:	00 d0       	rcall	.+0      	; 0x106e <nrf24_readRegister+0x6>
    106e:	00 d0       	rcall	.+0      	; 0x1070 <nrf24_readRegister+0x8>
    1070:	cd b7       	in	r28, 0x3d	; 61
    1072:	de b7       	in	r29, 0x3e	; 62
    1074:	89 83       	std	Y+1, r24	; 0x01
    1076:	7b 83       	std	Y+3, r23	; 0x03
    1078:	6a 83       	std	Y+2, r22	; 0x02
    107a:	4c 83       	std	Y+4, r20	; 0x04
	nrf24_csn_digitalWrite(LOW);
    107c:	80 e0       	ldi	r24, 0x00	; 0
    107e:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <nrf24_csn_digitalWrite>
	spi_transfer(R_REGISTER | (REGISTER_MASK & reg));
    1082:	89 81       	ldd	r24, Y+1	; 0x01
    1084:	8f 71       	andi	r24, 0x1F	; 31
    1086:	0e 94 77 07 	call	0xeee	; 0xeee <spi_transfer>
	nrf24_transferSync(value,value,len);
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	9b 81       	ldd	r25, Y+3	; 0x03
    108e:	2a 81       	ldd	r18, Y+2	; 0x02
    1090:	3b 81       	ldd	r19, Y+3	; 0x03
    1092:	b9 01       	movw	r22, r18
    1094:	4c 81       	ldd	r20, Y+4	; 0x04
    1096:	0e 94 bf 07 	call	0xf7e	; 0xf7e <nrf24_transferSync>
	nrf24_csn_digitalWrite(HIGH);
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <nrf24_csn_digitalWrite>
}
    10a0:	0f 90       	pop	r0
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	cf 91       	pop	r28
    10aa:	df 91       	pop	r29
    10ac:	08 95       	ret

000010ae <nrf24_writeRegister>:

/* Write to a single register of nrf24 */
void nrf24_writeRegister(uint8_t reg, uint8_t* value, uint8_t len)
{
    10ae:	df 93       	push	r29
    10b0:	cf 93       	push	r28
    10b2:	00 d0       	rcall	.+0      	; 0x10b4 <nrf24_writeRegister+0x6>
    10b4:	00 d0       	rcall	.+0      	; 0x10b6 <nrf24_writeRegister+0x8>
    10b6:	cd b7       	in	r28, 0x3d	; 61
    10b8:	de b7       	in	r29, 0x3e	; 62
    10ba:	89 83       	std	Y+1, r24	; 0x01
    10bc:	7b 83       	std	Y+3, r23	; 0x03
    10be:	6a 83       	std	Y+2, r22	; 0x02
    10c0:	4c 83       	std	Y+4, r20	; 0x04
	nrf24_csn_digitalWrite(LOW);
    10c2:	80 e0       	ldi	r24, 0x00	; 0
    10c4:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <nrf24_csn_digitalWrite>
	spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
    10c8:	89 81       	ldd	r24, Y+1	; 0x01
    10ca:	8f 71       	andi	r24, 0x1F	; 31
    10cc:	80 62       	ori	r24, 0x20	; 32
    10ce:	0e 94 77 07 	call	0xeee	; 0xeee <spi_transfer>
	nrf24_transmitSync(value,len);
    10d2:	8a 81       	ldd	r24, Y+2	; 0x02
    10d4:	9b 81       	ldd	r25, Y+3	; 0x03
    10d6:	6c 81       	ldd	r22, Y+4	; 0x04
    10d8:	0e 94 f6 07 	call	0xfec	; 0xfec <nrf24_transmitSync>
	nrf24_csn_digitalWrite(HIGH);
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <nrf24_csn_digitalWrite>
}
    10e2:	0f 90       	pop	r0
    10e4:	0f 90       	pop	r0
    10e6:	0f 90       	pop	r0
    10e8:	0f 90       	pop	r0
    10ea:	cf 91       	pop	r28
    10ec:	df 91       	pop	r29
    10ee:	08 95       	ret

000010f0 <nrf24_checkRegister>:

/* Check single register from nrf24 */
bool nrf24_checkRegister(uint8_t reg, uint8_t desiredValue, uint8_t len)
{
    10f0:	df 93       	push	r29
    10f2:	cf 93       	push	r28
    10f4:	00 d0       	rcall	.+0      	; 0x10f6 <nrf24_checkRegister+0x6>
    10f6:	00 d0       	rcall	.+0      	; 0x10f8 <nrf24_checkRegister+0x8>
    10f8:	cd b7       	in	r28, 0x3d	; 61
    10fa:	de b7       	in	r29, 0x3e	; 62
    10fc:	8a 83       	std	Y+2, r24	; 0x02
    10fe:	6b 83       	std	Y+3, r22	; 0x03
    1100:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t registerValue;
	nrf24_readRegister(reg,&registerValue,len);
    1102:	8a 81       	ldd	r24, Y+2	; 0x02
    1104:	9e 01       	movw	r18, r28
    1106:	2f 5f       	subi	r18, 0xFF	; 255
    1108:	3f 4f       	sbci	r19, 0xFF	; 255
    110a:	b9 01       	movw	r22, r18
    110c:	4c 81       	ldd	r20, Y+4	; 0x04
    110e:	0e 94 34 08 	call	0x1068	; 0x1068 <nrf24_readRegister>
	if (registerValue==desiredValue) { return true; } else { return false; }
    1112:	99 81       	ldd	r25, Y+1	; 0x01
    1114:	8b 81       	ldd	r24, Y+3	; 0x03
    1116:	98 17       	cp	r25, r24
    1118:	11 f4       	brne	.+4      	; 0x111e <nrf24_checkRegister+0x2e>
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	01 c0       	rjmp	.+2      	; 0x1120 <nrf24_checkRegister+0x30>
    111e:	80 e0       	ldi	r24, 0x00	; 0
}
    1120:	0f 90       	pop	r0
    1122:	0f 90       	pop	r0
    1124:	0f 90       	pop	r0
    1126:	0f 90       	pop	r0
    1128:	cf 91       	pop	r28
    112a:	df 91       	pop	r29
    112c:	08 95       	ret

0000112e <nrf24_setupPins>:
#define check_bit(reg,bit) (reg&(1<<bit))

/* ------------------------------------------------------------------------- */

void nrf24_setupPins()
{
    112e:	df 93       	push	r29
    1130:	cf 93       	push	r28
    1132:	cd b7       	in	r28, 0x3d	; 61
    1134:	de b7       	in	r29, 0x3e	; 62
	set_bit(RF_DDR,0); // CE output
    1136:	87 e2       	ldi	r24, 0x27	; 39
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	27 e2       	ldi	r18, 0x27	; 39
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	f9 01       	movw	r30, r18
    1140:	20 81       	ld	r18, Z
    1142:	21 60       	ori	r18, 0x01	; 1
    1144:	fc 01       	movw	r30, r24
    1146:	20 83       	st	Z, r18
	set_bit(RF_DDR,1); // CSN output
    1148:	87 e2       	ldi	r24, 0x27	; 39
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	27 e2       	ldi	r18, 0x27	; 39
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	f9 01       	movw	r30, r18
    1152:	20 81       	ld	r18, Z
    1154:	22 60       	ori	r18, 0x02	; 2
    1156:	fc 01       	movw	r30, r24
    1158:	20 83       	st	Z, r18
	set_bit(RF_DDR,2); // SCK output
    115a:	87 e2       	ldi	r24, 0x27	; 39
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	27 e2       	ldi	r18, 0x27	; 39
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	f9 01       	movw	r30, r18
    1164:	20 81       	ld	r18, Z
    1166:	24 60       	ori	r18, 0x04	; 4
    1168:	fc 01       	movw	r30, r24
    116a:	20 83       	st	Z, r18
	set_bit(RF_DDR,3); // MOSI output
    116c:	87 e2       	ldi	r24, 0x27	; 39
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	27 e2       	ldi	r18, 0x27	; 39
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	f9 01       	movw	r30, r18
    1176:	20 81       	ld	r18, Z
    1178:	28 60       	ori	r18, 0x08	; 8
    117a:	fc 01       	movw	r30, r24
    117c:	20 83       	st	Z, r18
	clr_bit(RF_DDR,4); // MISO input
    117e:	87 e2       	ldi	r24, 0x27	; 39
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	27 e2       	ldi	r18, 0x27	; 39
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	f9 01       	movw	r30, r18
    1188:	20 81       	ld	r18, Z
    118a:	2f 7e       	andi	r18, 0xEF	; 239
    118c:	fc 01       	movw	r30, r24
    118e:	20 83       	st	Z, r18
}
    1190:	cf 91       	pop	r28
    1192:	df 91       	pop	r29
    1194:	08 95       	ret

00001196 <nrf24_ce_digitalWrite>:
/* ------------------------------------------------------------------------- */
void nrf24_ce_digitalWrite(uint8_t state)
{
    1196:	df 93       	push	r29
    1198:	cf 93       	push	r28
    119a:	0f 92       	push	r0
    119c:	cd b7       	in	r28, 0x3d	; 61
    119e:	de b7       	in	r29, 0x3e	; 62
    11a0:	89 83       	std	Y+1, r24	; 0x01
	if(state)
    11a2:	89 81       	ldd	r24, Y+1	; 0x01
    11a4:	88 23       	and	r24, r24
    11a6:	51 f0       	breq	.+20     	; 0x11bc <nrf24_ce_digitalWrite+0x26>
	{
		set_bit(RF_PORT,0);
    11a8:	88 e2       	ldi	r24, 0x28	; 40
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	28 e2       	ldi	r18, 0x28	; 40
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	f9 01       	movw	r30, r18
    11b2:	20 81       	ld	r18, Z
    11b4:	21 60       	ori	r18, 0x01	; 1
    11b6:	fc 01       	movw	r30, r24
    11b8:	20 83       	st	Z, r18
    11ba:	09 c0       	rjmp	.+18     	; 0x11ce <nrf24_ce_digitalWrite+0x38>
	}
	else
	{
		clr_bit(RF_PORT,0);
    11bc:	88 e2       	ldi	r24, 0x28	; 40
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	28 e2       	ldi	r18, 0x28	; 40
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	f9 01       	movw	r30, r18
    11c6:	20 81       	ld	r18, Z
    11c8:	2e 7f       	andi	r18, 0xFE	; 254
    11ca:	fc 01       	movw	r30, r24
    11cc:	20 83       	st	Z, r18
	}
}
    11ce:	0f 90       	pop	r0
    11d0:	cf 91       	pop	r28
    11d2:	df 91       	pop	r29
    11d4:	08 95       	ret

000011d6 <nrf24_csn_digitalWrite>:
/* ------------------------------------------------------------------------- */
void nrf24_csn_digitalWrite(uint8_t state)
{
    11d6:	df 93       	push	r29
    11d8:	cf 93       	push	r28
    11da:	0f 92       	push	r0
    11dc:	cd b7       	in	r28, 0x3d	; 61
    11de:	de b7       	in	r29, 0x3e	; 62
    11e0:	89 83       	std	Y+1, r24	; 0x01
	if(state)
    11e2:	89 81       	ldd	r24, Y+1	; 0x01
    11e4:	88 23       	and	r24, r24
    11e6:	51 f0       	breq	.+20     	; 0x11fc <nrf24_csn_digitalWrite+0x26>
	{
		set_bit(RF_PORT,1);
    11e8:	88 e2       	ldi	r24, 0x28	; 40
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	28 e2       	ldi	r18, 0x28	; 40
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	f9 01       	movw	r30, r18
    11f2:	20 81       	ld	r18, Z
    11f4:	22 60       	ori	r18, 0x02	; 2
    11f6:	fc 01       	movw	r30, r24
    11f8:	20 83       	st	Z, r18
    11fa:	09 c0       	rjmp	.+18     	; 0x120e <nrf24_csn_digitalWrite+0x38>
	}
	else
	{
		clr_bit(RF_PORT,1);
    11fc:	88 e2       	ldi	r24, 0x28	; 40
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	28 e2       	ldi	r18, 0x28	; 40
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	f9 01       	movw	r30, r18
    1206:	20 81       	ld	r18, Z
    1208:	2d 7f       	andi	r18, 0xFD	; 253
    120a:	fc 01       	movw	r30, r24
    120c:	20 83       	st	Z, r18
	}
}
    120e:	0f 90       	pop	r0
    1210:	cf 91       	pop	r28
    1212:	df 91       	pop	r29
    1214:	08 95       	ret

00001216 <nrf24_sck_digitalWrite>:
/* ------------------------------------------------------------------------- */
void nrf24_sck_digitalWrite(uint8_t state)
{
    1216:	df 93       	push	r29
    1218:	cf 93       	push	r28
    121a:	0f 92       	push	r0
    121c:	cd b7       	in	r28, 0x3d	; 61
    121e:	de b7       	in	r29, 0x3e	; 62
    1220:	89 83       	std	Y+1, r24	; 0x01
	if(state)
    1222:	89 81       	ldd	r24, Y+1	; 0x01
    1224:	88 23       	and	r24, r24
    1226:	51 f0       	breq	.+20     	; 0x123c <nrf24_sck_digitalWrite+0x26>
	{
		set_bit(RF_PORT,2);
    1228:	88 e2       	ldi	r24, 0x28	; 40
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	28 e2       	ldi	r18, 0x28	; 40
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	f9 01       	movw	r30, r18
    1232:	20 81       	ld	r18, Z
    1234:	24 60       	ori	r18, 0x04	; 4
    1236:	fc 01       	movw	r30, r24
    1238:	20 83       	st	Z, r18
    123a:	09 c0       	rjmp	.+18     	; 0x124e <nrf24_sck_digitalWrite+0x38>
	}
	else
	{
		clr_bit(RF_PORT,2);
    123c:	88 e2       	ldi	r24, 0x28	; 40
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	28 e2       	ldi	r18, 0x28	; 40
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	f9 01       	movw	r30, r18
    1246:	20 81       	ld	r18, Z
    1248:	2b 7f       	andi	r18, 0xFB	; 251
    124a:	fc 01       	movw	r30, r24
    124c:	20 83       	st	Z, r18
	}
}
    124e:	0f 90       	pop	r0
    1250:	cf 91       	pop	r28
    1252:	df 91       	pop	r29
    1254:	08 95       	ret

00001256 <nrf24_mosi_digitalWrite>:
/* ------------------------------------------------------------------------- */
void nrf24_mosi_digitalWrite(uint8_t state)
{
    1256:	df 93       	push	r29
    1258:	cf 93       	push	r28
    125a:	0f 92       	push	r0
    125c:	cd b7       	in	r28, 0x3d	; 61
    125e:	de b7       	in	r29, 0x3e	; 62
    1260:	89 83       	std	Y+1, r24	; 0x01
	if(state)
    1262:	89 81       	ldd	r24, Y+1	; 0x01
    1264:	88 23       	and	r24, r24
    1266:	51 f0       	breq	.+20     	; 0x127c <nrf24_mosi_digitalWrite+0x26>
	{
		set_bit(RF_PORT,3);
    1268:	88 e2       	ldi	r24, 0x28	; 40
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	28 e2       	ldi	r18, 0x28	; 40
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	f9 01       	movw	r30, r18
    1272:	20 81       	ld	r18, Z
    1274:	28 60       	ori	r18, 0x08	; 8
    1276:	fc 01       	movw	r30, r24
    1278:	20 83       	st	Z, r18
    127a:	09 c0       	rjmp	.+18     	; 0x128e <nrf24_mosi_digitalWrite+0x38>
	}
	else
	{
		clr_bit(RF_PORT,3);
    127c:	88 e2       	ldi	r24, 0x28	; 40
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	28 e2       	ldi	r18, 0x28	; 40
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	f9 01       	movw	r30, r18
    1286:	20 81       	ld	r18, Z
    1288:	27 7f       	andi	r18, 0xF7	; 247
    128a:	fc 01       	movw	r30, r24
    128c:	20 83       	st	Z, r18
	}
}
    128e:	0f 90       	pop	r0
    1290:	cf 91       	pop	r28
    1292:	df 91       	pop	r29
    1294:	08 95       	ret

00001296 <nrf24_miso_digitalRead>:
/* ------------------------------------------------------------------------- */
uint8_t nrf24_miso_digitalRead()
{
    1296:	df 93       	push	r29
    1298:	cf 93       	push	r28
    129a:	cd b7       	in	r28, 0x3d	; 61
    129c:	de b7       	in	r29, 0x3e	; 62
	return check_bit(RF_PIN,4);
    129e:	86 e2       	ldi	r24, 0x26	; 38
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	fc 01       	movw	r30, r24
    12a4:	80 81       	ld	r24, Z
    12a6:	80 71       	andi	r24, 0x10	; 16
}
    12a8:	cf 91       	pop	r28
    12aa:	df 91       	pop	r29
    12ac:	08 95       	ret

000012ae <nrf24_initRF_SAFE>:
/* ------------------------------------------------------------------------- */

void nrf24_initRF_SAFE(uint8_t boardIndex,TransmissionMode initMode){
    12ae:	df 93       	push	r29
    12b0:	cf 93       	push	r28
    12b2:	00 d0       	rcall	.+0      	; 0x12b4 <nrf24_initRF_SAFE+0x6>
    12b4:	0f 92       	push	r0
    12b6:	cd b7       	in	r28, 0x3d	; 61
    12b8:	de b7       	in	r29, 0x3e	; 62
    12ba:	8a 83       	std	Y+2, r24	; 0x02
    12bc:	6b 83       	std	Y+3, r22	; 0x03

	initliazeMemory();
    12be:	0e 94 53 00 	call	0xa6	; 0xa6 <initliazeMemory>
	bool successfulRfInit = false;
    12c2:	19 82       	std	Y+1, r1	; 0x01
	
	while(successfulRfInit==false){
    12c4:	12 c0       	rjmp	.+36     	; 0x12ea <nrf24_initRF_SAFE+0x3c>
		nrf24_powerDown();
    12c6:	0e 94 69 07 	call	0xed2	; 0xed2 <nrf24_powerDown>
		nrf24_init();
    12ca:	0e 94 58 04 	call	0x8b0	; 0x8b0 <nrf24_init>
		nrf24_config(GENERAL_RF_CHANNEL,32);
    12ce:	80 91 83 02 	lds	r24, 0x0283
    12d2:	60 e2       	ldi	r22, 0x20	; 32
    12d4:	0e 94 67 04 	call	0x8ce	; 0x8ce <nrf24_config>
		if (nrf24_checkConfig()) { successfulRfInit = true; } else { faultyRF_Alarm(); }
    12d8:	0e 94 af 04 	call	0x95e	; 0x95e <nrf24_checkConfig>
    12dc:	88 23       	and	r24, r24
    12de:	19 f0       	breq	.+6      	; 0x12e6 <nrf24_initRF_SAFE+0x38>
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	89 83       	std	Y+1, r24	; 0x01
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <nrf24_initRF_SAFE+0x3c>
    12e6:	0e 94 4b 05 	call	0xa96	; 0xa96 <faultyRF_Alarm>
void nrf24_initRF_SAFE(uint8_t boardIndex,TransmissionMode initMode){

	initliazeMemory();
	bool successfulRfInit = false;
	
	while(successfulRfInit==false){
    12ea:	99 81       	ldd	r25, Y+1	; 0x01
    12ec:	81 e0       	ldi	r24, 0x01	; 1
    12ee:	89 27       	eor	r24, r25
    12f0:	88 23       	and	r24, r24
    12f2:	49 f7       	brne	.-46     	; 0x12c6 <nrf24_initRF_SAFE+0x18>
		nrf24_init();
		nrf24_config(GENERAL_RF_CHANNEL,32);
		if (nrf24_checkConfig()) { successfulRfInit = true; } else { faultyRF_Alarm(); }
	}
	
	if (initMode==RECEIVE){
    12f4:	8b 81       	ldd	r24, Y+3	; 0x03
    12f6:	88 23       	and	r24, r24
    12f8:	49 f5       	brne	.+82     	; 0x134c <nrf24_initRF_SAFE+0x9e>
		nrf24_tx_address(CURRENT_BOARD_ADDRESS);
    12fa:	80 91 81 02 	lds	r24, 0x0281
    12fe:	90 91 82 02 	lds	r25, 0x0282
    1302:	0e 94 97 06 	call	0xd2e	; 0xd2e <nrf24_tx_address>
		nrf24_rx_address(BOARD_ADDRESS[boardIndex]);
    1306:	8a 81       	ldd	r24, Y+2	; 0x02
    1308:	88 2f       	mov	r24, r24
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	88 0f       	add	r24, r24
    130e:	99 1f       	adc	r25, r25
    1310:	85 58       	subi	r24, 0x85	; 133
    1312:	9d 4f       	sbci	r25, 0xFD	; 253
    1314:	fc 01       	movw	r30, r24
    1316:	80 81       	ld	r24, Z
    1318:	91 81       	ldd	r25, Z+1	; 0x01
    131a:	0e 94 7e 06 	call	0xcfc	; 0xcfc <nrf24_rx_address>
		selectedTX_ADDRESS = *CURRENT_BOARD_ADDRESS;
    131e:	80 91 81 02 	lds	r24, 0x0281
    1322:	90 91 82 02 	lds	r25, 0x0282
    1326:	fc 01       	movw	r30, r24
    1328:	80 81       	ld	r24, Z
    132a:	80 93 cd 02 	sts	0x02CD, r24
		selectedRX_ADDRESS = *BOARD_ADDRESS[boardIndex];
    132e:	8a 81       	ldd	r24, Y+2	; 0x02
    1330:	88 2f       	mov	r24, r24
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	88 0f       	add	r24, r24
    1336:	99 1f       	adc	r25, r25
    1338:	85 58       	subi	r24, 0x85	; 133
    133a:	9d 4f       	sbci	r25, 0xFD	; 253
    133c:	fc 01       	movw	r30, r24
    133e:	80 81       	ld	r24, Z
    1340:	91 81       	ldd	r25, Z+1	; 0x01
    1342:	fc 01       	movw	r30, r24
    1344:	80 81       	ld	r24, Z
    1346:	80 93 cc 02 	sts	0x02CC, r24
    134a:	28 c0       	rjmp	.+80     	; 0x139c <nrf24_initRF_SAFE+0xee>
	}else{
		nrf24_tx_address(BOARD_ADDRESS[boardIndex]);
    134c:	8a 81       	ldd	r24, Y+2	; 0x02
    134e:	88 2f       	mov	r24, r24
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	88 0f       	add	r24, r24
    1354:	99 1f       	adc	r25, r25
    1356:	85 58       	subi	r24, 0x85	; 133
    1358:	9d 4f       	sbci	r25, 0xFD	; 253
    135a:	fc 01       	movw	r30, r24
    135c:	80 81       	ld	r24, Z
    135e:	91 81       	ldd	r25, Z+1	; 0x01
    1360:	0e 94 97 06 	call	0xd2e	; 0xd2e <nrf24_tx_address>
		nrf24_rx_address(CURRENT_BOARD_ADDRESS);
    1364:	80 91 81 02 	lds	r24, 0x0281
    1368:	90 91 82 02 	lds	r25, 0x0282
    136c:	0e 94 7e 06 	call	0xcfc	; 0xcfc <nrf24_rx_address>
		selectedTX_ADDRESS = *BOARD_ADDRESS[boardIndex];
    1370:	8a 81       	ldd	r24, Y+2	; 0x02
    1372:	88 2f       	mov	r24, r24
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	88 0f       	add	r24, r24
    1378:	99 1f       	adc	r25, r25
    137a:	85 58       	subi	r24, 0x85	; 133
    137c:	9d 4f       	sbci	r25, 0xFD	; 253
    137e:	fc 01       	movw	r30, r24
    1380:	80 81       	ld	r24, Z
    1382:	91 81       	ldd	r25, Z+1	; 0x01
    1384:	fc 01       	movw	r30, r24
    1386:	80 81       	ld	r24, Z
    1388:	80 93 cd 02 	sts	0x02CD, r24
		selectedRX_ADDRESS = *CURRENT_BOARD_ADDRESS;
    138c:	80 91 81 02 	lds	r24, 0x0281
    1390:	90 91 82 02 	lds	r25, 0x0282
    1394:	fc 01       	movw	r30, r24
    1396:	80 81       	ld	r24, Z
    1398:	80 93 cc 02 	sts	0x02CC, r24
	}
	nrf24_powerUpRx();
    139c:	0e 94 3c 07 	call	0xe78	; 0xe78 <nrf24_powerUpRx>
    13a0:	0f 90       	pop	r0
    13a2:	0f 90       	pop	r0
    13a4:	0f 90       	pop	r0
    13a6:	cf 91       	pop	r28
    13a8:	df 91       	pop	r29
    13aa:	08 95       	ret

000013ac <initBluetoothUart>:

uint8_t* uartBufferPos;
uint8_t* uartTxMessageEnd;
bool commandAvailable;

void initBluetoothUart(){
    13ac:	df 93       	push	r29
    13ae:	cf 93       	push	r28
    13b0:	cd b7       	in	r28, 0x3d	; 61
    13b2:	de b7       	in	r29, 0x3e	; 62
	// UART Initialization : 8-bit : No parity bit : 1 stop bit
	UBRR0H = (BRC >> 8); UBRR0L =  BRC;             // UART BAUDRATE
    13b4:	85 ec       	ldi	r24, 0xC5	; 197
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	fc 01       	movw	r30, r24
    13ba:	10 82       	st	Z, r1
    13bc:	84 ec       	ldi	r24, 0xC4	; 196
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	2f ec       	ldi	r18, 0xCF	; 207
    13c2:	fc 01       	movw	r30, r24
    13c4:	20 83       	st	Z, r18
	UCSR0A |= (1 << U2X0);                          // DOUBLE UART SPEED
    13c6:	80 ec       	ldi	r24, 0xC0	; 192
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	20 ec       	ldi	r18, 0xC0	; 192
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	f9 01       	movw	r30, r18
    13d0:	20 81       	ld	r18, Z
    13d2:	22 60       	ori	r18, 0x02	; 2
    13d4:	fc 01       	movw	r30, r24
    13d6:	20 83       	st	Z, r18
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);        // 8-BIT CHARACTER SIZE
    13d8:	82 ec       	ldi	r24, 0xC2	; 194
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	22 ec       	ldi	r18, 0xC2	; 194
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	f9 01       	movw	r30, r18
    13e2:	20 81       	ld	r18, Z
    13e4:	26 60       	ori	r18, 0x06	; 6
    13e6:	fc 01       	movw	r30, r24
    13e8:	20 83       	st	Z, r18
	
	// Setup UART buffer
	initliazeMemory();
    13ea:	0e 94 53 00 	call	0xa6	; 0xa6 <initliazeMemory>
	uartBufferPos = command_buffer;
    13ee:	80 91 ce 02 	lds	r24, 0x02CE
    13f2:	90 91 cf 02 	lds	r25, 0x02CF
    13f6:	90 93 d4 02 	sts	0x02D4, r25
    13fa:	80 93 d3 02 	sts	0x02D3, r24
}
    13fe:	cf 91       	pop	r28
    1400:	df 91       	pop	r29
    1402:	08 95       	ret

00001404 <transmitMessageSync>:
	
	uartBufferPos++;
	UDR0 = *(command_buffer);
}

void transmitMessageSync(uint8_t* message, uint8_t length){
    1404:	df 93       	push	r29
    1406:	cf 93       	push	r28
    1408:	00 d0       	rcall	.+0      	; 0x140a <transmitMessageSync+0x6>
    140a:	0f 92       	push	r0
    140c:	cd b7       	in	r28, 0x3d	; 61
    140e:	de b7       	in	r29, 0x3e	; 62
    1410:	9a 83       	std	Y+2, r25	; 0x02
    1412:	89 83       	std	Y+1, r24	; 0x01
    1414:	6b 83       	std	Y+3, r22	; 0x03
	while (!(UCSR0A & (1<<UDRE0)));
    1416:	00 00       	nop
    1418:	80 ec       	ldi	r24, 0xC0	; 192
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	fc 01       	movw	r30, r24
    141e:	80 81       	ld	r24, Z
    1420:	88 2f       	mov	r24, r24
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	80 72       	andi	r24, 0x20	; 32
    1426:	90 70       	andi	r25, 0x00	; 0
    1428:	00 97       	sbiw	r24, 0x00	; 0
    142a:	b1 f3       	breq	.-20     	; 0x1418 <transmitMessageSync+0x14>
	uartBufferPos = command_buffer;
    142c:	80 91 ce 02 	lds	r24, 0x02CE
    1430:	90 91 cf 02 	lds	r25, 0x02CF
    1434:	90 93 d4 02 	sts	0x02D4, r25
    1438:	80 93 d3 02 	sts	0x02D3, r24
	uartTxMessageEnd = (command_buffer+length);
    143c:	20 91 ce 02 	lds	r18, 0x02CE
    1440:	30 91 cf 02 	lds	r19, 0x02CF
    1444:	8b 81       	ldd	r24, Y+3	; 0x03
    1446:	88 2f       	mov	r24, r24
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	82 0f       	add	r24, r18
    144c:	93 1f       	adc	r25, r19
    144e:	90 93 d6 02 	sts	0x02D6, r25
    1452:	80 93 d5 02 	sts	0x02D5, r24
	memcpy(command_buffer, message, length);
    1456:	80 91 ce 02 	lds	r24, 0x02CE
    145a:	90 91 cf 02 	lds	r25, 0x02CF
    145e:	2b 81       	ldd	r18, Y+3	; 0x03
    1460:	22 2f       	mov	r18, r18
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	49 81       	ldd	r20, Y+1	; 0x01
    1466:	5a 81       	ldd	r21, Y+2	; 0x02
    1468:	ba 01       	movw	r22, r20
    146a:	a9 01       	movw	r20, r18
    146c:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <memcpy>
	UCSR0A |= (1<<TXC0) | (1<<RXC0);
    1470:	80 ec       	ldi	r24, 0xC0	; 192
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	20 ec       	ldi	r18, 0xC0	; 192
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	f9 01       	movw	r30, r18
    147a:	20 81       	ld	r18, Z
    147c:	20 6c       	ori	r18, 0xC0	; 192
    147e:	fc 01       	movw	r30, r24
    1480:	20 83       	st	Z, r18
	UCSR0B |= (1<<TXEN0) | (1<<TXCIE0);
    1482:	81 ec       	ldi	r24, 0xC1	; 193
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	21 ec       	ldi	r18, 0xC1	; 193
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	f9 01       	movw	r30, r18
    148c:	20 81       	ld	r18, Z
    148e:	28 64       	ori	r18, 0x48	; 72
    1490:	fc 01       	movw	r30, r24
    1492:	20 83       	st	Z, r18
	UCSR0B &=~(1<<RXEN0) &~(1<<RXCIE0);
    1494:	81 ec       	ldi	r24, 0xC1	; 193
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	21 ec       	ldi	r18, 0xC1	; 193
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	f9 01       	movw	r30, r18
    149e:	20 81       	ld	r18, Z
    14a0:	2f 76       	andi	r18, 0x6F	; 111
    14a2:	fc 01       	movw	r30, r24
    14a4:	20 83       	st	Z, r18
	
	uartBufferPos++;
    14a6:	80 91 d3 02 	lds	r24, 0x02D3
    14aa:	90 91 d4 02 	lds	r25, 0x02D4
    14ae:	01 96       	adiw	r24, 0x01	; 1
    14b0:	90 93 d4 02 	sts	0x02D4, r25
    14b4:	80 93 d3 02 	sts	0x02D3, r24
	UDR0 = *(command_buffer);
    14b8:	86 ec       	ldi	r24, 0xC6	; 198
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	20 91 ce 02 	lds	r18, 0x02CE
    14c0:	30 91 cf 02 	lds	r19, 0x02CF
    14c4:	f9 01       	movw	r30, r18
    14c6:	20 81       	ld	r18, Z
    14c8:	fc 01       	movw	r30, r24
    14ca:	20 83       	st	Z, r18

	while (transmissionState());
    14cc:	00 00       	nop
    14ce:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <transmissionState>
    14d2:	88 23       	and	r24, r24
    14d4:	e1 f7       	brne	.-8      	; 0x14ce <transmitMessageSync+0xca>

}
    14d6:	0f 90       	pop	r0
    14d8:	0f 90       	pop	r0
    14da:	0f 90       	pop	r0
    14dc:	cf 91       	pop	r28
    14de:	df 91       	pop	r29
    14e0:	08 95       	ret

000014e2 <transmissionState>:

bool transmissionState(){
    14e2:	df 93       	push	r29
    14e4:	cf 93       	push	r28
    14e6:	cd b7       	in	r28, 0x3d	; 61
    14e8:	de b7       	in	r29, 0x3e	; 62
	// True : Currently transmitting | False : Transmission finished
	if (uartBufferPos!=uartTxMessageEnd) 
    14ea:	20 91 d3 02 	lds	r18, 0x02D3
    14ee:	30 91 d4 02 	lds	r19, 0x02D4
    14f2:	80 91 d5 02 	lds	r24, 0x02D5
    14f6:	90 91 d6 02 	lds	r25, 0x02D6
    14fa:	28 17       	cp	r18, r24
    14fc:	39 07       	cpc	r19, r25
    14fe:	11 f0       	breq	.+4      	; 0x1504 <transmissionState+0x22>
	{
		return true;
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	01 c0       	rjmp	.+2      	; 0x1506 <transmissionState+0x24>
	}
	else 
	{ 
		return false; 
    1504:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    1506:	cf 91       	pop	r28
    1508:	df 91       	pop	r29
    150a:	08 95       	ret

0000150c <setupReceiveMode>:


void setupReceiveMode(){
    150c:	df 93       	push	r29
    150e:	cf 93       	push	r28
    1510:	cd b7       	in	r28, 0x3d	; 61
    1512:	de b7       	in	r29, 0x3e	; 62
	while (!(UCSR0A & (1<<UDRE0)));
    1514:	00 00       	nop
    1516:	80 ec       	ldi	r24, 0xC0	; 192
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	fc 01       	movw	r30, r24
    151c:	80 81       	ld	r24, Z
    151e:	88 2f       	mov	r24, r24
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	80 72       	andi	r24, 0x20	; 32
    1524:	90 70       	andi	r25, 0x00	; 0
    1526:	00 97       	sbiw	r24, 0x00	; 0
    1528:	b1 f3       	breq	.-20     	; 0x1516 <setupReceiveMode+0xa>
	uartBufferPos = command_buffer;
    152a:	80 91 ce 02 	lds	r24, 0x02CE
    152e:	90 91 cf 02 	lds	r25, 0x02CF
    1532:	90 93 d4 02 	sts	0x02D4, r25
    1536:	80 93 d3 02 	sts	0x02D3, r24
	
	UCSR0A |= (1<<RXC0) | (1<<TXC0);
    153a:	80 ec       	ldi	r24, 0xC0	; 192
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	20 ec       	ldi	r18, 0xC0	; 192
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	f9 01       	movw	r30, r18
    1544:	20 81       	ld	r18, Z
    1546:	20 6c       	ori	r18, 0xC0	; 192
    1548:	fc 01       	movw	r30, r24
    154a:	20 83       	st	Z, r18
	UCSR0B &=~(1<<TXEN0) &~(1<<TXCIE0);
    154c:	81 ec       	ldi	r24, 0xC1	; 193
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	21 ec       	ldi	r18, 0xC1	; 193
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	f9 01       	movw	r30, r18
    1556:	20 81       	ld	r18, Z
    1558:	27 7b       	andi	r18, 0xB7	; 183
    155a:	fc 01       	movw	r30, r24
    155c:	20 83       	st	Z, r18
	UCSR0B |= (1<<RXEN0) | (1<<RXCIE0);
    155e:	81 ec       	ldi	r24, 0xC1	; 193
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	21 ec       	ldi	r18, 0xC1	; 193
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	f9 01       	movw	r30, r18
    1568:	20 81       	ld	r18, Z
    156a:	20 69       	ori	r18, 0x90	; 144
    156c:	fc 01       	movw	r30, r24
    156e:	20 83       	st	Z, r18
}
    1570:	cf 91       	pop	r28
    1572:	df 91       	pop	r29
    1574:	08 95       	ret

00001576 <processReceivedLine>:

void processReceivedLine(){
    1576:	df 93       	push	r29
    1578:	cf 93       	push	r28
    157a:	00 d0       	rcall	.+0      	; 0x157c <processReceivedLine+0x6>
    157c:	00 d0       	rcall	.+0      	; 0x157e <processReceivedLine+0x8>
    157e:	00 d0       	rcall	.+0      	; 0x1580 <processReceivedLine+0xa>
    1580:	cd b7       	in	r28, 0x3d	; 61
    1582:	de b7       	in	r29, 0x3e	; 62
	commandAvailable = false;
    1584:	10 92 d7 02 	sts	0x02D7, r1
	
	commandType currentCommand;
	bit_set(PORTD, BIT(7));
    1588:	8b e2       	ldi	r24, 0x2B	; 43
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	2b e2       	ldi	r18, 0x2B	; 43
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	f9 01       	movw	r30, r18
    1592:	20 81       	ld	r18, Z
    1594:	20 68       	ori	r18, 0x80	; 128
    1596:	fc 01       	movw	r30, r24
    1598:	20 83       	st	Z, r18
	bool success = decomposeCommand(command_buffer, &currentCommand, parameter);
    159a:	80 91 ce 02 	lds	r24, 0x02CE
    159e:	90 91 cf 02 	lds	r25, 0x02CF
    15a2:	ae 01       	movw	r20, r28
    15a4:	4e 5f       	subi	r20, 0xFE	; 254
    15a6:	5f 4f       	sbci	r21, 0xFF	; 255
    15a8:	26 ec       	ldi	r18, 0xC6	; 198
    15aa:	32 e0       	ldi	r19, 0x02	; 2
    15ac:	ba 01       	movw	r22, r20
    15ae:	a9 01       	movw	r20, r18
    15b0:	0e 94 37 01 	call	0x26e	; 0x26e <decomposeCommand>
    15b4:	89 83       	std	Y+1, r24	; 0x01
	bit_clear(PORTD, BIT(7));
    15b6:	8b e2       	ldi	r24, 0x2B	; 43
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	2b e2       	ldi	r18, 0x2B	; 43
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	f9 01       	movw	r30, r18
    15c0:	20 81       	ld	r18, Z
    15c2:	2f 77       	andi	r18, 0x7F	; 127
    15c4:	fc 01       	movw	r30, r24
    15c6:	20 83       	st	Z, r18
	if(success) currentCommand.handlerFunction();
    15c8:	89 81       	ldd	r24, Y+1	; 0x01
    15ca:	88 23       	and	r24, r24
    15cc:	21 f0       	breq	.+8      	; 0x15d6 <processReceivedLine+0x60>
    15ce:	8d 81       	ldd	r24, Y+5	; 0x05
    15d0:	9e 81       	ldd	r25, Y+6	; 0x06
    15d2:	fc 01       	movw	r30, r24
    15d4:	09 95       	icall
}
    15d6:	26 96       	adiw	r28, 0x06	; 6
    15d8:	0f b6       	in	r0, 0x3f	; 63
    15da:	f8 94       	cli
    15dc:	de bf       	out	0x3e, r29	; 62
    15de:	0f be       	out	0x3f, r0	; 63
    15e0:	cd bf       	out	0x3d, r28	; 61
    15e2:	cf 91       	pop	r28
    15e4:	df 91       	pop	r29
    15e6:	08 95       	ret

000015e8 <disableUART>:

void disableUART(){
    15e8:	df 93       	push	r29
    15ea:	cf 93       	push	r28
    15ec:	cd b7       	in	r28, 0x3d	; 61
    15ee:	de b7       	in	r29, 0x3e	; 62
	UCSR0B &=~(1<<TXEN0) &~(1<<TXCIE0);
    15f0:	81 ec       	ldi	r24, 0xC1	; 193
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	21 ec       	ldi	r18, 0xC1	; 193
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	f9 01       	movw	r30, r18
    15fa:	20 81       	ld	r18, Z
    15fc:	27 7b       	andi	r18, 0xB7	; 183
    15fe:	fc 01       	movw	r30, r24
    1600:	20 83       	st	Z, r18
	UCSR0B &=~(1<<RXEN0) &~(1<<RXCIE0);
    1602:	81 ec       	ldi	r24, 0xC1	; 193
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	21 ec       	ldi	r18, 0xC1	; 193
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	f9 01       	movw	r30, r18
    160c:	20 81       	ld	r18, Z
    160e:	2f 76       	andi	r18, 0x6F	; 111
    1610:	fc 01       	movw	r30, r24
    1612:	20 83       	st	Z, r18
}
    1614:	cf 91       	pop	r28
    1616:	df 91       	pop	r29
    1618:	08 95       	ret

0000161a <__vector_20>:

ISR(USART_TX_vect){
    161a:	1f 92       	push	r1
    161c:	0f 92       	push	r0
    161e:	0f b6       	in	r0, 0x3f	; 63
    1620:	0f 92       	push	r0
    1622:	11 24       	eor	r1, r1
    1624:	2f 93       	push	r18
    1626:	3f 93       	push	r19
    1628:	8f 93       	push	r24
    162a:	9f 93       	push	r25
    162c:	ef 93       	push	r30
    162e:	ff 93       	push	r31
    1630:	df 93       	push	r29
    1632:	cf 93       	push	r28
    1634:	cd b7       	in	r28, 0x3d	; 61
    1636:	de b7       	in	r29, 0x3e	; 62
	if (uartBufferPos!=uartTxMessageEnd){
    1638:	20 91 d3 02 	lds	r18, 0x02D3
    163c:	30 91 d4 02 	lds	r19, 0x02D4
    1640:	80 91 d5 02 	lds	r24, 0x02D5
    1644:	90 91 d6 02 	lds	r25, 0x02D6
    1648:	28 17       	cp	r18, r24
    164a:	39 07       	cpc	r19, r25
    164c:	99 f0       	breq	.+38     	; 0x1674 <__vector_20+0x5a>
		UDR0 = *uartBufferPos;
    164e:	86 ec       	ldi	r24, 0xC6	; 198
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	20 91 d3 02 	lds	r18, 0x02D3
    1656:	30 91 d4 02 	lds	r19, 0x02D4
    165a:	f9 01       	movw	r30, r18
    165c:	20 81       	ld	r18, Z
    165e:	fc 01       	movw	r30, r24
    1660:	20 83       	st	Z, r18
		uartBufferPos++;
    1662:	80 91 d3 02 	lds	r24, 0x02D3
    1666:	90 91 d4 02 	lds	r25, 0x02D4
    166a:	01 96       	adiw	r24, 0x01	; 1
    166c:	90 93 d4 02 	sts	0x02D4, r25
    1670:	80 93 d3 02 	sts	0x02D3, r24
	}
}
    1674:	cf 91       	pop	r28
    1676:	df 91       	pop	r29
    1678:	ff 91       	pop	r31
    167a:	ef 91       	pop	r30
    167c:	9f 91       	pop	r25
    167e:	8f 91       	pop	r24
    1680:	3f 91       	pop	r19
    1682:	2f 91       	pop	r18
    1684:	0f 90       	pop	r0
    1686:	0f be       	out	0x3f, r0	; 63
    1688:	0f 90       	pop	r0
    168a:	1f 90       	pop	r1
    168c:	18 95       	reti

0000168e <__vector_18>:

ISR(USART_RX_vect){
    168e:	1f 92       	push	r1
    1690:	0f 92       	push	r0
    1692:	0f b6       	in	r0, 0x3f	; 63
    1694:	0f 92       	push	r0
    1696:	11 24       	eor	r1, r1
    1698:	2f 93       	push	r18
    169a:	3f 93       	push	r19
    169c:	4f 93       	push	r20
    169e:	5f 93       	push	r21
    16a0:	6f 93       	push	r22
    16a2:	7f 93       	push	r23
    16a4:	8f 93       	push	r24
    16a6:	9f 93       	push	r25
    16a8:	af 93       	push	r26
    16aa:	bf 93       	push	r27
    16ac:	ef 93       	push	r30
    16ae:	ff 93       	push	r31
    16b0:	df 93       	push	r29
    16b2:	cf 93       	push	r28
    16b4:	cd b7       	in	r28, 0x3d	; 61
    16b6:	de b7       	in	r29, 0x3e	; 62
	if(uartBufferPos!=(command_buffer+uartBufferSize)) {
    16b8:	80 91 ce 02 	lds	r24, 0x02CE
    16bc:	90 91 cf 02 	lds	r25, 0x02CF
    16c0:	9c 01       	movw	r18, r24
    16c2:	20 5e       	subi	r18, 0xE0	; 224
    16c4:	3f 4f       	sbci	r19, 0xFF	; 255
    16c6:	80 91 d3 02 	lds	r24, 0x02D3
    16ca:	90 91 d4 02 	lds	r25, 0x02D4
    16ce:	28 17       	cp	r18, r24
    16d0:	39 07       	cpc	r19, r25
    16d2:	99 f1       	breq	.+102    	; 0x173a <__vector_18+0xac>
		*uartBufferPos=UDR0;
    16d4:	80 91 d3 02 	lds	r24, 0x02D3
    16d8:	90 91 d4 02 	lds	r25, 0x02D4
    16dc:	26 ec       	ldi	r18, 0xC6	; 198
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	f9 01       	movw	r30, r18
    16e2:	20 81       	ld	r18, Z
    16e4:	fc 01       	movw	r30, r24
    16e6:	20 83       	st	Z, r18
		if (*uartBufferPos!=uartEndMsgChar) {
    16e8:	80 91 d3 02 	lds	r24, 0x02D3
    16ec:	90 91 d4 02 	lds	r25, 0x02D4
    16f0:	fc 01       	movw	r30, r24
    16f2:	80 81       	ld	r24, Z
    16f4:	84 32       	cpi	r24, 0x24	; 36
    16f6:	d9 f0       	breq	.+54     	; 0x172e <__vector_18+0xa0>
			if(*uartBufferPos!=uartCarriageReturnChar) {uartBufferPos++;} else { uartBufferPos = command_buffer; } 
    16f8:	80 91 d3 02 	lds	r24, 0x02D3
    16fc:	90 91 d4 02 	lds	r25, 0x02D4
    1700:	fc 01       	movw	r30, r24
    1702:	80 81       	ld	r24, Z
    1704:	8f 32       	cpi	r24, 0x2F	; 47
    1706:	51 f0       	breq	.+20     	; 0x171c <__vector_18+0x8e>
    1708:	80 91 d3 02 	lds	r24, 0x02D3
    170c:	90 91 d4 02 	lds	r25, 0x02D4
    1710:	01 96       	adiw	r24, 0x01	; 1
    1712:	90 93 d4 02 	sts	0x02D4, r25
    1716:	80 93 d3 02 	sts	0x02D3, r24
    171a:	17 c0       	rjmp	.+46     	; 0x174a <__vector_18+0xbc>
    171c:	80 91 ce 02 	lds	r24, 0x02CE
    1720:	90 91 cf 02 	lds	r25, 0x02CF
    1724:	90 93 d4 02 	sts	0x02D4, r25
    1728:	80 93 d3 02 	sts	0x02D3, r24
    172c:	0e c0       	rjmp	.+28     	; 0x174a <__vector_18+0xbc>
		}
		else { disableUART(); commandAvailable = true; }
    172e:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <disableUART>
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	80 93 d7 02 	sts	0x02D7, r24
    1738:	08 c0       	rjmp	.+16     	; 0x174a <__vector_18+0xbc>
	} else {uartBufferPos = command_buffer;}
    173a:	80 91 ce 02 	lds	r24, 0x02CE
    173e:	90 91 cf 02 	lds	r25, 0x02CF
    1742:	90 93 d4 02 	sts	0x02D4, r25
    1746:	80 93 d3 02 	sts	0x02D3, r24
    174a:	cf 91       	pop	r28
    174c:	df 91       	pop	r29
    174e:	ff 91       	pop	r31
    1750:	ef 91       	pop	r30
    1752:	bf 91       	pop	r27
    1754:	af 91       	pop	r26
    1756:	9f 91       	pop	r25
    1758:	8f 91       	pop	r24
    175a:	7f 91       	pop	r23
    175c:	6f 91       	pop	r22
    175e:	5f 91       	pop	r21
    1760:	4f 91       	pop	r20
    1762:	3f 91       	pop	r19
    1764:	2f 91       	pop	r18
    1766:	0f 90       	pop	r0
    1768:	0f be       	out	0x3f, r0	; 63
    176a:	0f 90       	pop	r0
    176c:	1f 90       	pop	r1
    176e:	18 95       	reti

00001770 <__cmpsf2>:
    1770:	2f d0       	rcall	.+94     	; 0x17d0 <__fp_cmp>
    1772:	08 f4       	brcc	.+2      	; 0x1776 <__cmpsf2+0x6>
    1774:	81 e0       	ldi	r24, 0x01	; 1
    1776:	08 95       	ret

00001778 <__fixunssfsi>:
    1778:	57 d0       	rcall	.+174    	; 0x1828 <__fp_splitA>
    177a:	88 f0       	brcs	.+34     	; 0x179e <__fixunssfsi+0x26>
    177c:	9f 57       	subi	r25, 0x7F	; 127
    177e:	90 f0       	brcs	.+36     	; 0x17a4 <__fixunssfsi+0x2c>
    1780:	b9 2f       	mov	r27, r25
    1782:	99 27       	eor	r25, r25
    1784:	b7 51       	subi	r27, 0x17	; 23
    1786:	a0 f0       	brcs	.+40     	; 0x17b0 <__fixunssfsi+0x38>
    1788:	d1 f0       	breq	.+52     	; 0x17be <__fixunssfsi+0x46>
    178a:	66 0f       	add	r22, r22
    178c:	77 1f       	adc	r23, r23
    178e:	88 1f       	adc	r24, r24
    1790:	99 1f       	adc	r25, r25
    1792:	1a f0       	brmi	.+6      	; 0x179a <__fixunssfsi+0x22>
    1794:	ba 95       	dec	r27
    1796:	c9 f7       	brne	.-14     	; 0x178a <__fixunssfsi+0x12>
    1798:	12 c0       	rjmp	.+36     	; 0x17be <__fixunssfsi+0x46>
    179a:	b1 30       	cpi	r27, 0x01	; 1
    179c:	81 f0       	breq	.+32     	; 0x17be <__fixunssfsi+0x46>
    179e:	5e d0       	rcall	.+188    	; 0x185c <__fp_zero>
    17a0:	b1 e0       	ldi	r27, 0x01	; 1
    17a2:	08 95       	ret
    17a4:	5b c0       	rjmp	.+182    	; 0x185c <__fp_zero>
    17a6:	67 2f       	mov	r22, r23
    17a8:	78 2f       	mov	r23, r24
    17aa:	88 27       	eor	r24, r24
    17ac:	b8 5f       	subi	r27, 0xF8	; 248
    17ae:	39 f0       	breq	.+14     	; 0x17be <__fixunssfsi+0x46>
    17b0:	b9 3f       	cpi	r27, 0xF9	; 249
    17b2:	cc f3       	brlt	.-14     	; 0x17a6 <__fixunssfsi+0x2e>
    17b4:	86 95       	lsr	r24
    17b6:	77 95       	ror	r23
    17b8:	67 95       	ror	r22
    17ba:	b3 95       	inc	r27
    17bc:	d9 f7       	brne	.-10     	; 0x17b4 <__fixunssfsi+0x3c>
    17be:	3e f4       	brtc	.+14     	; 0x17ce <__fixunssfsi+0x56>
    17c0:	90 95       	com	r25
    17c2:	80 95       	com	r24
    17c4:	70 95       	com	r23
    17c6:	61 95       	neg	r22
    17c8:	7f 4f       	sbci	r23, 0xFF	; 255
    17ca:	8f 4f       	sbci	r24, 0xFF	; 255
    17cc:	9f 4f       	sbci	r25, 0xFF	; 255
    17ce:	08 95       	ret

000017d0 <__fp_cmp>:
    17d0:	99 0f       	add	r25, r25
    17d2:	00 08       	sbc	r0, r0
    17d4:	55 0f       	add	r21, r21
    17d6:	aa 0b       	sbc	r26, r26
    17d8:	e0 e8       	ldi	r30, 0x80	; 128
    17da:	fe ef       	ldi	r31, 0xFE	; 254
    17dc:	16 16       	cp	r1, r22
    17de:	17 06       	cpc	r1, r23
    17e0:	e8 07       	cpc	r30, r24
    17e2:	f9 07       	cpc	r31, r25
    17e4:	c0 f0       	brcs	.+48     	; 0x1816 <__fp_cmp+0x46>
    17e6:	12 16       	cp	r1, r18
    17e8:	13 06       	cpc	r1, r19
    17ea:	e4 07       	cpc	r30, r20
    17ec:	f5 07       	cpc	r31, r21
    17ee:	98 f0       	brcs	.+38     	; 0x1816 <__fp_cmp+0x46>
    17f0:	62 1b       	sub	r22, r18
    17f2:	73 0b       	sbc	r23, r19
    17f4:	84 0b       	sbc	r24, r20
    17f6:	95 0b       	sbc	r25, r21
    17f8:	39 f4       	brne	.+14     	; 0x1808 <__fp_cmp+0x38>
    17fa:	0a 26       	eor	r0, r26
    17fc:	61 f0       	breq	.+24     	; 0x1816 <__fp_cmp+0x46>
    17fe:	23 2b       	or	r18, r19
    1800:	24 2b       	or	r18, r20
    1802:	25 2b       	or	r18, r21
    1804:	21 f4       	brne	.+8      	; 0x180e <__fp_cmp+0x3e>
    1806:	08 95       	ret
    1808:	0a 26       	eor	r0, r26
    180a:	09 f4       	brne	.+2      	; 0x180e <__fp_cmp+0x3e>
    180c:	a1 40       	sbci	r26, 0x01	; 1
    180e:	a6 95       	lsr	r26
    1810:	8f ef       	ldi	r24, 0xFF	; 255
    1812:	81 1d       	adc	r24, r1
    1814:	81 1d       	adc	r24, r1
    1816:	08 95       	ret

00001818 <__fp_split3>:
    1818:	57 fd       	sbrc	r21, 7
    181a:	90 58       	subi	r25, 0x80	; 128
    181c:	44 0f       	add	r20, r20
    181e:	55 1f       	adc	r21, r21
    1820:	59 f0       	breq	.+22     	; 0x1838 <__fp_splitA+0x10>
    1822:	5f 3f       	cpi	r21, 0xFF	; 255
    1824:	71 f0       	breq	.+28     	; 0x1842 <__fp_splitA+0x1a>
    1826:	47 95       	ror	r20

00001828 <__fp_splitA>:
    1828:	88 0f       	add	r24, r24
    182a:	97 fb       	bst	r25, 7
    182c:	99 1f       	adc	r25, r25
    182e:	61 f0       	breq	.+24     	; 0x1848 <__fp_splitA+0x20>
    1830:	9f 3f       	cpi	r25, 0xFF	; 255
    1832:	79 f0       	breq	.+30     	; 0x1852 <__fp_splitA+0x2a>
    1834:	87 95       	ror	r24
    1836:	08 95       	ret
    1838:	12 16       	cp	r1, r18
    183a:	13 06       	cpc	r1, r19
    183c:	14 06       	cpc	r1, r20
    183e:	55 1f       	adc	r21, r21
    1840:	f2 cf       	rjmp	.-28     	; 0x1826 <__fp_split3+0xe>
    1842:	46 95       	lsr	r20
    1844:	f1 df       	rcall	.-30     	; 0x1828 <__fp_splitA>
    1846:	08 c0       	rjmp	.+16     	; 0x1858 <__fp_splitA+0x30>
    1848:	16 16       	cp	r1, r22
    184a:	17 06       	cpc	r1, r23
    184c:	18 06       	cpc	r1, r24
    184e:	99 1f       	adc	r25, r25
    1850:	f1 cf       	rjmp	.-30     	; 0x1834 <__fp_splitA+0xc>
    1852:	86 95       	lsr	r24
    1854:	71 05       	cpc	r23, r1
    1856:	61 05       	cpc	r22, r1
    1858:	08 94       	sec
    185a:	08 95       	ret

0000185c <__fp_zero>:
    185c:	e8 94       	clt

0000185e <__fp_szero>:
    185e:	bb 27       	eor	r27, r27
    1860:	66 27       	eor	r22, r22
    1862:	77 27       	eor	r23, r23
    1864:	cb 01       	movw	r24, r22
    1866:	97 f9       	bld	r25, 7
    1868:	08 95       	ret

0000186a <__gesf2>:
    186a:	b2 df       	rcall	.-156    	; 0x17d0 <__fp_cmp>
    186c:	08 f4       	brcc	.+2      	; 0x1870 <__gesf2+0x6>
    186e:	8f ef       	ldi	r24, 0xFF	; 255
    1870:	08 95       	ret

00001872 <__mulsf3>:
    1872:	0b d0       	rcall	.+22     	; 0x188a <__mulsf3x>
    1874:	78 c0       	rjmp	.+240    	; 0x1966 <__fp_round>
    1876:	69 d0       	rcall	.+210    	; 0x194a <__fp_pscA>
    1878:	28 f0       	brcs	.+10     	; 0x1884 <__mulsf3+0x12>
    187a:	6e d0       	rcall	.+220    	; 0x1958 <__fp_pscB>
    187c:	18 f0       	brcs	.+6      	; 0x1884 <__mulsf3+0x12>
    187e:	95 23       	and	r25, r21
    1880:	09 f0       	breq	.+2      	; 0x1884 <__mulsf3+0x12>
    1882:	5a c0       	rjmp	.+180    	; 0x1938 <__fp_inf>
    1884:	5f c0       	rjmp	.+190    	; 0x1944 <__fp_nan>
    1886:	11 24       	eor	r1, r1
    1888:	ea cf       	rjmp	.-44     	; 0x185e <__fp_szero>

0000188a <__mulsf3x>:
    188a:	c6 df       	rcall	.-116    	; 0x1818 <__fp_split3>
    188c:	a0 f3       	brcs	.-24     	; 0x1876 <__mulsf3+0x4>

0000188e <__mulsf3_pse>:
    188e:	95 9f       	mul	r25, r21
    1890:	d1 f3       	breq	.-12     	; 0x1886 <__mulsf3+0x14>
    1892:	95 0f       	add	r25, r21
    1894:	50 e0       	ldi	r21, 0x00	; 0
    1896:	55 1f       	adc	r21, r21
    1898:	62 9f       	mul	r22, r18
    189a:	f0 01       	movw	r30, r0
    189c:	72 9f       	mul	r23, r18
    189e:	bb 27       	eor	r27, r27
    18a0:	f0 0d       	add	r31, r0
    18a2:	b1 1d       	adc	r27, r1
    18a4:	63 9f       	mul	r22, r19
    18a6:	aa 27       	eor	r26, r26
    18a8:	f0 0d       	add	r31, r0
    18aa:	b1 1d       	adc	r27, r1
    18ac:	aa 1f       	adc	r26, r26
    18ae:	64 9f       	mul	r22, r20
    18b0:	66 27       	eor	r22, r22
    18b2:	b0 0d       	add	r27, r0
    18b4:	a1 1d       	adc	r26, r1
    18b6:	66 1f       	adc	r22, r22
    18b8:	82 9f       	mul	r24, r18
    18ba:	22 27       	eor	r18, r18
    18bc:	b0 0d       	add	r27, r0
    18be:	a1 1d       	adc	r26, r1
    18c0:	62 1f       	adc	r22, r18
    18c2:	73 9f       	mul	r23, r19
    18c4:	b0 0d       	add	r27, r0
    18c6:	a1 1d       	adc	r26, r1
    18c8:	62 1f       	adc	r22, r18
    18ca:	83 9f       	mul	r24, r19
    18cc:	a0 0d       	add	r26, r0
    18ce:	61 1d       	adc	r22, r1
    18d0:	22 1f       	adc	r18, r18
    18d2:	74 9f       	mul	r23, r20
    18d4:	33 27       	eor	r19, r19
    18d6:	a0 0d       	add	r26, r0
    18d8:	61 1d       	adc	r22, r1
    18da:	23 1f       	adc	r18, r19
    18dc:	84 9f       	mul	r24, r20
    18de:	60 0d       	add	r22, r0
    18e0:	21 1d       	adc	r18, r1
    18e2:	82 2f       	mov	r24, r18
    18e4:	76 2f       	mov	r23, r22
    18e6:	6a 2f       	mov	r22, r26
    18e8:	11 24       	eor	r1, r1
    18ea:	9f 57       	subi	r25, 0x7F	; 127
    18ec:	50 40       	sbci	r21, 0x00	; 0
    18ee:	8a f0       	brmi	.+34     	; 0x1912 <__mulsf3_pse+0x84>
    18f0:	e1 f0       	breq	.+56     	; 0x192a <__mulsf3_pse+0x9c>
    18f2:	88 23       	and	r24, r24
    18f4:	4a f0       	brmi	.+18     	; 0x1908 <__mulsf3_pse+0x7a>
    18f6:	ee 0f       	add	r30, r30
    18f8:	ff 1f       	adc	r31, r31
    18fa:	bb 1f       	adc	r27, r27
    18fc:	66 1f       	adc	r22, r22
    18fe:	77 1f       	adc	r23, r23
    1900:	88 1f       	adc	r24, r24
    1902:	91 50       	subi	r25, 0x01	; 1
    1904:	50 40       	sbci	r21, 0x00	; 0
    1906:	a9 f7       	brne	.-22     	; 0x18f2 <__mulsf3_pse+0x64>
    1908:	9e 3f       	cpi	r25, 0xFE	; 254
    190a:	51 05       	cpc	r21, r1
    190c:	70 f0       	brcs	.+28     	; 0x192a <__mulsf3_pse+0x9c>
    190e:	14 c0       	rjmp	.+40     	; 0x1938 <__fp_inf>
    1910:	a6 cf       	rjmp	.-180    	; 0x185e <__fp_szero>
    1912:	5f 3f       	cpi	r21, 0xFF	; 255
    1914:	ec f3       	brlt	.-6      	; 0x1910 <__mulsf3_pse+0x82>
    1916:	98 3e       	cpi	r25, 0xE8	; 232
    1918:	dc f3       	brlt	.-10     	; 0x1910 <__mulsf3_pse+0x82>
    191a:	86 95       	lsr	r24
    191c:	77 95       	ror	r23
    191e:	67 95       	ror	r22
    1920:	b7 95       	ror	r27
    1922:	f7 95       	ror	r31
    1924:	e7 95       	ror	r30
    1926:	9f 5f       	subi	r25, 0xFF	; 255
    1928:	c1 f7       	brne	.-16     	; 0x191a <__mulsf3_pse+0x8c>
    192a:	fe 2b       	or	r31, r30
    192c:	88 0f       	add	r24, r24
    192e:	91 1d       	adc	r25, r1
    1930:	96 95       	lsr	r25
    1932:	87 95       	ror	r24
    1934:	97 f9       	bld	r25, 7
    1936:	08 95       	ret

00001938 <__fp_inf>:
    1938:	97 f9       	bld	r25, 7
    193a:	9f 67       	ori	r25, 0x7F	; 127
    193c:	80 e8       	ldi	r24, 0x80	; 128
    193e:	70 e0       	ldi	r23, 0x00	; 0
    1940:	60 e0       	ldi	r22, 0x00	; 0
    1942:	08 95       	ret

00001944 <__fp_nan>:
    1944:	9f ef       	ldi	r25, 0xFF	; 255
    1946:	80 ec       	ldi	r24, 0xC0	; 192
    1948:	08 95       	ret

0000194a <__fp_pscA>:
    194a:	00 24       	eor	r0, r0
    194c:	0a 94       	dec	r0
    194e:	16 16       	cp	r1, r22
    1950:	17 06       	cpc	r1, r23
    1952:	18 06       	cpc	r1, r24
    1954:	09 06       	cpc	r0, r25
    1956:	08 95       	ret

00001958 <__fp_pscB>:
    1958:	00 24       	eor	r0, r0
    195a:	0a 94       	dec	r0
    195c:	12 16       	cp	r1, r18
    195e:	13 06       	cpc	r1, r19
    1960:	14 06       	cpc	r1, r20
    1962:	05 06       	cpc	r0, r21
    1964:	08 95       	ret

00001966 <__fp_round>:
    1966:	09 2e       	mov	r0, r25
    1968:	03 94       	inc	r0
    196a:	00 0c       	add	r0, r0
    196c:	11 f4       	brne	.+4      	; 0x1972 <__fp_round+0xc>
    196e:	88 23       	and	r24, r24
    1970:	52 f0       	brmi	.+20     	; 0x1986 <__fp_round+0x20>
    1972:	bb 0f       	add	r27, r27
    1974:	40 f4       	brcc	.+16     	; 0x1986 <__fp_round+0x20>
    1976:	bf 2b       	or	r27, r31
    1978:	11 f4       	brne	.+4      	; 0x197e <__fp_round+0x18>
    197a:	60 ff       	sbrs	r22, 0
    197c:	04 c0       	rjmp	.+8      	; 0x1986 <__fp_round+0x20>
    197e:	6f 5f       	subi	r22, 0xFF	; 255
    1980:	7f 4f       	sbci	r23, 0xFF	; 255
    1982:	8f 4f       	sbci	r24, 0xFF	; 255
    1984:	9f 4f       	sbci	r25, 0xFF	; 255
    1986:	08 95       	ret

00001988 <calloc>:
    1988:	ef 92       	push	r14
    198a:	ff 92       	push	r15
    198c:	0f 93       	push	r16
    198e:	1f 93       	push	r17
    1990:	cf 93       	push	r28
    1992:	df 93       	push	r29
    1994:	68 9f       	mul	r22, r24
    1996:	80 01       	movw	r16, r0
    1998:	69 9f       	mul	r22, r25
    199a:	10 0d       	add	r17, r0
    199c:	78 9f       	mul	r23, r24
    199e:	10 0d       	add	r17, r0
    19a0:	11 24       	eor	r1, r1
    19a2:	c8 01       	movw	r24, r16
    19a4:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <malloc>
    19a8:	e8 2e       	mov	r14, r24
    19aa:	e7 01       	movw	r28, r14
    19ac:	7e 01       	movw	r14, r28
    19ae:	f9 2e       	mov	r15, r25
    19b0:	e7 01       	movw	r28, r14
    19b2:	20 97       	sbiw	r28, 0x00	; 0
    19b4:	31 f0       	breq	.+12     	; 0x19c2 <calloc+0x3a>
    19b6:	8e 2d       	mov	r24, r14
    19b8:	60 e0       	ldi	r22, 0x00	; 0
    19ba:	70 e0       	ldi	r23, 0x00	; 0
    19bc:	a8 01       	movw	r20, r16
    19be:	0e 94 57 0e 	call	0x1cae	; 0x1cae <memset>
    19c2:	7e 01       	movw	r14, r28
    19c4:	ce 01       	movw	r24, r28
    19c6:	cd b7       	in	r28, 0x3d	; 61
    19c8:	de b7       	in	r29, 0x3e	; 62
    19ca:	e6 e0       	ldi	r30, 0x06	; 6
    19cc:	0c 94 40 11 	jmp	0x2280	; 0x2280 <__epilogue_restores__+0x18>

000019d0 <malloc>:
    19d0:	cf 93       	push	r28
    19d2:	df 93       	push	r29
    19d4:	82 30       	cpi	r24, 0x02	; 2
    19d6:	91 05       	cpc	r25, r1
    19d8:	10 f4       	brcc	.+4      	; 0x19de <malloc+0xe>
    19da:	82 e0       	ldi	r24, 0x02	; 2
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	e0 91 da 02 	lds	r30, 0x02DA
    19e2:	f0 91 db 02 	lds	r31, 0x02DB
    19e6:	40 e0       	ldi	r20, 0x00	; 0
    19e8:	50 e0       	ldi	r21, 0x00	; 0
    19ea:	20 e0       	ldi	r18, 0x00	; 0
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	26 c0       	rjmp	.+76     	; 0x1a3c <malloc+0x6c>
    19f0:	60 81       	ld	r22, Z
    19f2:	71 81       	ldd	r23, Z+1	; 0x01
    19f4:	68 17       	cp	r22, r24
    19f6:	79 07       	cpc	r23, r25
    19f8:	e0 f0       	brcs	.+56     	; 0x1a32 <malloc+0x62>
    19fa:	68 17       	cp	r22, r24
    19fc:	79 07       	cpc	r23, r25
    19fe:	81 f4       	brne	.+32     	; 0x1a20 <malloc+0x50>
    1a00:	82 81       	ldd	r24, Z+2	; 0x02
    1a02:	93 81       	ldd	r25, Z+3	; 0x03
    1a04:	21 15       	cp	r18, r1
    1a06:	31 05       	cpc	r19, r1
    1a08:	31 f0       	breq	.+12     	; 0x1a16 <malloc+0x46>
    1a0a:	d9 01       	movw	r26, r18
    1a0c:	13 96       	adiw	r26, 0x03	; 3
    1a0e:	9c 93       	st	X, r25
    1a10:	8e 93       	st	-X, r24
    1a12:	12 97       	sbiw	r26, 0x02	; 2
    1a14:	2b c0       	rjmp	.+86     	; 0x1a6c <malloc+0x9c>
    1a16:	90 93 db 02 	sts	0x02DB, r25
    1a1a:	80 93 da 02 	sts	0x02DA, r24
    1a1e:	26 c0       	rjmp	.+76     	; 0x1a6c <malloc+0x9c>
    1a20:	41 15       	cp	r20, r1
    1a22:	51 05       	cpc	r21, r1
    1a24:	19 f0       	breq	.+6      	; 0x1a2c <malloc+0x5c>
    1a26:	64 17       	cp	r22, r20
    1a28:	75 07       	cpc	r23, r21
    1a2a:	18 f4       	brcc	.+6      	; 0x1a32 <malloc+0x62>
    1a2c:	ab 01       	movw	r20, r22
    1a2e:	e9 01       	movw	r28, r18
    1a30:	df 01       	movw	r26, r30
    1a32:	9f 01       	movw	r18, r30
    1a34:	72 81       	ldd	r23, Z+2	; 0x02
    1a36:	63 81       	ldd	r22, Z+3	; 0x03
    1a38:	e7 2f       	mov	r30, r23
    1a3a:	f6 2f       	mov	r31, r22
    1a3c:	30 97       	sbiw	r30, 0x00	; 0
    1a3e:	c1 f6       	brne	.-80     	; 0x19f0 <malloc+0x20>
    1a40:	41 15       	cp	r20, r1
    1a42:	51 05       	cpc	r21, r1
    1a44:	01 f1       	breq	.+64     	; 0x1a86 <malloc+0xb6>
    1a46:	48 1b       	sub	r20, r24
    1a48:	59 0b       	sbc	r21, r25
    1a4a:	44 30       	cpi	r20, 0x04	; 4
    1a4c:	51 05       	cpc	r21, r1
    1a4e:	80 f4       	brcc	.+32     	; 0x1a70 <malloc+0xa0>
    1a50:	12 96       	adiw	r26, 0x02	; 2
    1a52:	8d 91       	ld	r24, X+
    1a54:	9c 91       	ld	r25, X
    1a56:	13 97       	sbiw	r26, 0x03	; 3
    1a58:	20 97       	sbiw	r28, 0x00	; 0
    1a5a:	19 f0       	breq	.+6      	; 0x1a62 <malloc+0x92>
    1a5c:	9b 83       	std	Y+3, r25	; 0x03
    1a5e:	8a 83       	std	Y+2, r24	; 0x02
    1a60:	04 c0       	rjmp	.+8      	; 0x1a6a <malloc+0x9a>
    1a62:	90 93 db 02 	sts	0x02DB, r25
    1a66:	80 93 da 02 	sts	0x02DA, r24
    1a6a:	fd 01       	movw	r30, r26
    1a6c:	32 96       	adiw	r30, 0x02	; 2
    1a6e:	46 c0       	rjmp	.+140    	; 0x1afc <malloc+0x12c>
    1a70:	fd 01       	movw	r30, r26
    1a72:	e4 0f       	add	r30, r20
    1a74:	f5 1f       	adc	r31, r21
    1a76:	81 93       	st	Z+, r24
    1a78:	91 93       	st	Z+, r25
    1a7a:	42 50       	subi	r20, 0x02	; 2
    1a7c:	50 40       	sbci	r21, 0x00	; 0
    1a7e:	11 96       	adiw	r26, 0x01	; 1
    1a80:	5c 93       	st	X, r21
    1a82:	4e 93       	st	-X, r20
    1a84:	3b c0       	rjmp	.+118    	; 0x1afc <malloc+0x12c>
    1a86:	20 91 d8 02 	lds	r18, 0x02D8
    1a8a:	30 91 d9 02 	lds	r19, 0x02D9
    1a8e:	21 15       	cp	r18, r1
    1a90:	31 05       	cpc	r19, r1
    1a92:	41 f4       	brne	.+16     	; 0x1aa4 <malloc+0xd4>
    1a94:	20 91 68 02 	lds	r18, 0x0268
    1a98:	30 91 69 02 	lds	r19, 0x0269
    1a9c:	30 93 d9 02 	sts	0x02D9, r19
    1aa0:	20 93 d8 02 	sts	0x02D8, r18
    1aa4:	20 91 6a 02 	lds	r18, 0x026A
    1aa8:	30 91 6b 02 	lds	r19, 0x026B
    1aac:	21 15       	cp	r18, r1
    1aae:	31 05       	cpc	r19, r1
    1ab0:	41 f4       	brne	.+16     	; 0x1ac2 <malloc+0xf2>
    1ab2:	2d b7       	in	r18, 0x3d	; 61
    1ab4:	3e b7       	in	r19, 0x3e	; 62
    1ab6:	40 91 66 02 	lds	r20, 0x0266
    1aba:	50 91 67 02 	lds	r21, 0x0267
    1abe:	24 1b       	sub	r18, r20
    1ac0:	35 0b       	sbc	r19, r21
    1ac2:	e0 91 d8 02 	lds	r30, 0x02D8
    1ac6:	f0 91 d9 02 	lds	r31, 0x02D9
    1aca:	e2 17       	cp	r30, r18
    1acc:	f3 07       	cpc	r31, r19
    1ace:	a0 f4       	brcc	.+40     	; 0x1af8 <malloc+0x128>
    1ad0:	2e 1b       	sub	r18, r30
    1ad2:	3f 0b       	sbc	r19, r31
    1ad4:	28 17       	cp	r18, r24
    1ad6:	39 07       	cpc	r19, r25
    1ad8:	78 f0       	brcs	.+30     	; 0x1af8 <malloc+0x128>
    1ada:	ac 01       	movw	r20, r24
    1adc:	4e 5f       	subi	r20, 0xFE	; 254
    1ade:	5f 4f       	sbci	r21, 0xFF	; 255
    1ae0:	24 17       	cp	r18, r20
    1ae2:	35 07       	cpc	r19, r21
    1ae4:	48 f0       	brcs	.+18     	; 0x1af8 <malloc+0x128>
    1ae6:	4e 0f       	add	r20, r30
    1ae8:	5f 1f       	adc	r21, r31
    1aea:	50 93 d9 02 	sts	0x02D9, r21
    1aee:	40 93 d8 02 	sts	0x02D8, r20
    1af2:	81 93       	st	Z+, r24
    1af4:	91 93       	st	Z+, r25
    1af6:	02 c0       	rjmp	.+4      	; 0x1afc <malloc+0x12c>
    1af8:	e0 e0       	ldi	r30, 0x00	; 0
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	cf 01       	movw	r24, r30
    1afe:	df 91       	pop	r29
    1b00:	cf 91       	pop	r28
    1b02:	08 95       	ret

00001b04 <free>:
    1b04:	cf 93       	push	r28
    1b06:	df 93       	push	r29
    1b08:	00 97       	sbiw	r24, 0x00	; 0
    1b0a:	09 f4       	brne	.+2      	; 0x1b0e <free+0xa>
    1b0c:	91 c0       	rjmp	.+290    	; 0x1c30 <free+0x12c>
    1b0e:	fc 01       	movw	r30, r24
    1b10:	32 97       	sbiw	r30, 0x02	; 2
    1b12:	13 82       	std	Z+3, r1	; 0x03
    1b14:	12 82       	std	Z+2, r1	; 0x02
    1b16:	60 91 da 02 	lds	r22, 0x02DA
    1b1a:	70 91 db 02 	lds	r23, 0x02DB
    1b1e:	61 15       	cp	r22, r1
    1b20:	71 05       	cpc	r23, r1
    1b22:	81 f4       	brne	.+32     	; 0x1b44 <free+0x40>
    1b24:	20 81       	ld	r18, Z
    1b26:	31 81       	ldd	r19, Z+1	; 0x01
    1b28:	28 0f       	add	r18, r24
    1b2a:	39 1f       	adc	r19, r25
    1b2c:	80 91 d8 02 	lds	r24, 0x02D8
    1b30:	90 91 d9 02 	lds	r25, 0x02D9
    1b34:	82 17       	cp	r24, r18
    1b36:	93 07       	cpc	r25, r19
    1b38:	99 f5       	brne	.+102    	; 0x1ba0 <free+0x9c>
    1b3a:	f0 93 d9 02 	sts	0x02D9, r31
    1b3e:	e0 93 d8 02 	sts	0x02D8, r30
    1b42:	76 c0       	rjmp	.+236    	; 0x1c30 <free+0x12c>
    1b44:	db 01       	movw	r26, r22
    1b46:	80 e0       	ldi	r24, 0x00	; 0
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	02 c0       	rjmp	.+4      	; 0x1b50 <free+0x4c>
    1b4c:	cd 01       	movw	r24, r26
    1b4e:	d9 01       	movw	r26, r18
    1b50:	ae 17       	cp	r26, r30
    1b52:	bf 07       	cpc	r27, r31
    1b54:	48 f4       	brcc	.+18     	; 0x1b68 <free+0x64>
    1b56:	12 96       	adiw	r26, 0x02	; 2
    1b58:	2d 91       	ld	r18, X+
    1b5a:	3c 91       	ld	r19, X
    1b5c:	13 97       	sbiw	r26, 0x03	; 3
    1b5e:	21 15       	cp	r18, r1
    1b60:	31 05       	cpc	r19, r1
    1b62:	a1 f7       	brne	.-24     	; 0x1b4c <free+0x48>
    1b64:	cd 01       	movw	r24, r26
    1b66:	21 c0       	rjmp	.+66     	; 0x1baa <free+0xa6>
    1b68:	b3 83       	std	Z+3, r27	; 0x03
    1b6a:	a2 83       	std	Z+2, r26	; 0x02
    1b6c:	ef 01       	movw	r28, r30
    1b6e:	49 91       	ld	r20, Y+
    1b70:	59 91       	ld	r21, Y+
    1b72:	9e 01       	movw	r18, r28
    1b74:	24 0f       	add	r18, r20
    1b76:	35 1f       	adc	r19, r21
    1b78:	a2 17       	cp	r26, r18
    1b7a:	b3 07       	cpc	r27, r19
    1b7c:	79 f4       	brne	.+30     	; 0x1b9c <free+0x98>
    1b7e:	2d 91       	ld	r18, X+
    1b80:	3c 91       	ld	r19, X
    1b82:	11 97       	sbiw	r26, 0x01	; 1
    1b84:	24 0f       	add	r18, r20
    1b86:	35 1f       	adc	r19, r21
    1b88:	2e 5f       	subi	r18, 0xFE	; 254
    1b8a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b8c:	31 83       	std	Z+1, r19	; 0x01
    1b8e:	20 83       	st	Z, r18
    1b90:	12 96       	adiw	r26, 0x02	; 2
    1b92:	2d 91       	ld	r18, X+
    1b94:	3c 91       	ld	r19, X
    1b96:	13 97       	sbiw	r26, 0x03	; 3
    1b98:	33 83       	std	Z+3, r19	; 0x03
    1b9a:	22 83       	std	Z+2, r18	; 0x02
    1b9c:	00 97       	sbiw	r24, 0x00	; 0
    1b9e:	29 f4       	brne	.+10     	; 0x1baa <free+0xa6>
    1ba0:	f0 93 db 02 	sts	0x02DB, r31
    1ba4:	e0 93 da 02 	sts	0x02DA, r30
    1ba8:	43 c0       	rjmp	.+134    	; 0x1c30 <free+0x12c>
    1baa:	dc 01       	movw	r26, r24
    1bac:	13 96       	adiw	r26, 0x03	; 3
    1bae:	fc 93       	st	X, r31
    1bb0:	ee 93       	st	-X, r30
    1bb2:	12 97       	sbiw	r26, 0x02	; 2
    1bb4:	4d 91       	ld	r20, X+
    1bb6:	5d 91       	ld	r21, X+
    1bb8:	a4 0f       	add	r26, r20
    1bba:	b5 1f       	adc	r27, r21
    1bbc:	ea 17       	cp	r30, r26
    1bbe:	fb 07       	cpc	r31, r27
    1bc0:	69 f4       	brne	.+26     	; 0x1bdc <free+0xd8>
    1bc2:	20 81       	ld	r18, Z
    1bc4:	31 81       	ldd	r19, Z+1	; 0x01
    1bc6:	24 0f       	add	r18, r20
    1bc8:	35 1f       	adc	r19, r21
    1bca:	2e 5f       	subi	r18, 0xFE	; 254
    1bcc:	3f 4f       	sbci	r19, 0xFF	; 255
    1bce:	ec 01       	movw	r28, r24
    1bd0:	39 83       	std	Y+1, r19	; 0x01
    1bd2:	28 83       	st	Y, r18
    1bd4:	22 81       	ldd	r18, Z+2	; 0x02
    1bd6:	33 81       	ldd	r19, Z+3	; 0x03
    1bd8:	3b 83       	std	Y+3, r19	; 0x03
    1bda:	2a 83       	std	Y+2, r18	; 0x02
    1bdc:	e0 e0       	ldi	r30, 0x00	; 0
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	02 c0       	rjmp	.+4      	; 0x1be6 <free+0xe2>
    1be2:	fb 01       	movw	r30, r22
    1be4:	bc 01       	movw	r22, r24
    1be6:	db 01       	movw	r26, r22
    1be8:	12 96       	adiw	r26, 0x02	; 2
    1bea:	8d 91       	ld	r24, X+
    1bec:	9c 91       	ld	r25, X
    1bee:	13 97       	sbiw	r26, 0x03	; 3
    1bf0:	00 97       	sbiw	r24, 0x00	; 0
    1bf2:	b9 f7       	brne	.-18     	; 0x1be2 <free+0xde>
    1bf4:	9b 01       	movw	r18, r22
    1bf6:	2e 5f       	subi	r18, 0xFE	; 254
    1bf8:	3f 4f       	sbci	r19, 0xFF	; 255
    1bfa:	8d 91       	ld	r24, X+
    1bfc:	9c 91       	ld	r25, X
    1bfe:	11 97       	sbiw	r26, 0x01	; 1
    1c00:	82 0f       	add	r24, r18
    1c02:	93 1f       	adc	r25, r19
    1c04:	40 91 d8 02 	lds	r20, 0x02D8
    1c08:	50 91 d9 02 	lds	r21, 0x02D9
    1c0c:	48 17       	cp	r20, r24
    1c0e:	59 07       	cpc	r21, r25
    1c10:	79 f4       	brne	.+30     	; 0x1c30 <free+0x12c>
    1c12:	30 97       	sbiw	r30, 0x00	; 0
    1c14:	29 f4       	brne	.+10     	; 0x1c20 <free+0x11c>
    1c16:	10 92 db 02 	sts	0x02DB, r1
    1c1a:	10 92 da 02 	sts	0x02DA, r1
    1c1e:	02 c0       	rjmp	.+4      	; 0x1c24 <free+0x120>
    1c20:	13 82       	std	Z+3, r1	; 0x03
    1c22:	12 82       	std	Z+2, r1	; 0x02
    1c24:	22 50       	subi	r18, 0x02	; 2
    1c26:	30 40       	sbci	r19, 0x00	; 0
    1c28:	30 93 d9 02 	sts	0x02D9, r19
    1c2c:	20 93 d8 02 	sts	0x02D8, r18
    1c30:	df 91       	pop	r29
    1c32:	cf 91       	pop	r28
    1c34:	08 95       	ret

00001c36 <memchr>:
    1c36:	fc 01       	movw	r30, r24
    1c38:	41 50       	subi	r20, 0x01	; 1
    1c3a:	50 40       	sbci	r21, 0x00	; 0
    1c3c:	30 f0       	brcs	.+12     	; 0x1c4a <memchr+0x14>
    1c3e:	01 90       	ld	r0, Z+
    1c40:	06 16       	cp	r0, r22
    1c42:	d1 f7       	brne	.-12     	; 0x1c38 <memchr+0x2>
    1c44:	31 97       	sbiw	r30, 0x01	; 1
    1c46:	cf 01       	movw	r24, r30
    1c48:	08 95       	ret
    1c4a:	88 27       	eor	r24, r24
    1c4c:	99 27       	eor	r25, r25
    1c4e:	08 95       	ret

00001c50 <memcpy>:
    1c50:	fb 01       	movw	r30, r22
    1c52:	dc 01       	movw	r26, r24
    1c54:	02 c0       	rjmp	.+4      	; 0x1c5a <memcpy+0xa>
    1c56:	01 90       	ld	r0, Z+
    1c58:	0d 92       	st	X+, r0
    1c5a:	41 50       	subi	r20, 0x01	; 1
    1c5c:	50 40       	sbci	r21, 0x00	; 0
    1c5e:	d8 f7       	brcc	.-10     	; 0x1c56 <memcpy+0x6>
    1c60:	08 95       	ret

00001c62 <memmem>:
    1c62:	21 15       	cp	r18, r1
    1c64:	31 05       	cpc	r19, r1
    1c66:	11 f1       	breq	.+68     	; 0x1cac <memmem+0x4a>
    1c68:	1f 93       	push	r17
    1c6a:	0f 93       	push	r16
    1c6c:	24 0f       	add	r18, r20
    1c6e:	35 1f       	adc	r19, r21
    1c70:	68 0f       	add	r22, r24
    1c72:	79 1f       	adc	r23, r25
    1c74:	fa 01       	movw	r30, r20
    1c76:	11 91       	ld	r17, Z+
    1c78:	af 01       	movw	r20, r30
    1c7a:	dc 01       	movw	r26, r24
    1c7c:	a6 17       	cp	r26, r22
    1c7e:	b7 07       	cpc	r27, r23
    1c80:	80 f4       	brcc	.+32     	; 0x1ca2 <memmem+0x40>
    1c82:	0d 91       	ld	r16, X+
    1c84:	01 17       	cp	r16, r17
    1c86:	d1 f7       	brne	.-12     	; 0x1c7c <memmem+0x1a>
    1c88:	cd 01       	movw	r24, r26
    1c8a:	fa 01       	movw	r30, r20
    1c8c:	e2 17       	cp	r30, r18
    1c8e:	f3 07       	cpc	r31, r19
    1c90:	50 f4       	brcc	.+20     	; 0x1ca6 <memmem+0x44>
    1c92:	a6 17       	cp	r26, r22
    1c94:	b7 07       	cpc	r27, r23
    1c96:	28 f4       	brcc	.+10     	; 0x1ca2 <memmem+0x40>
    1c98:	0d 91       	ld	r16, X+
    1c9a:	01 90       	ld	r0, Z+
    1c9c:	00 15       	cp	r16, r0
    1c9e:	b1 f3       	breq	.-20     	; 0x1c8c <memmem+0x2a>
    1ca0:	ec cf       	rjmp	.-40     	; 0x1c7a <memmem+0x18>
    1ca2:	81 e0       	ldi	r24, 0x01	; 1
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	01 97       	sbiw	r24, 0x01	; 1
    1ca8:	0f 91       	pop	r16
    1caa:	1f 91       	pop	r17
    1cac:	08 95       	ret

00001cae <memset>:
    1cae:	dc 01       	movw	r26, r24
    1cb0:	01 c0       	rjmp	.+2      	; 0x1cb4 <memset+0x6>
    1cb2:	6d 93       	st	X+, r22
    1cb4:	41 50       	subi	r20, 0x01	; 1
    1cb6:	50 40       	sbci	r21, 0x00	; 0
    1cb8:	e0 f7       	brcc	.-8      	; 0x1cb2 <memset+0x4>
    1cba:	08 95       	ret

00001cbc <strcpy>:
    1cbc:	fb 01       	movw	r30, r22
    1cbe:	dc 01       	movw	r26, r24
    1cc0:	01 90       	ld	r0, Z+
    1cc2:	0d 92       	st	X+, r0
    1cc4:	00 20       	and	r0, r0
    1cc6:	e1 f7       	brne	.-8      	; 0x1cc0 <strcpy+0x4>
    1cc8:	08 95       	ret

00001cca <strlen>:
    1cca:	fc 01       	movw	r30, r24
    1ccc:	01 90       	ld	r0, Z+
    1cce:	00 20       	and	r0, r0
    1cd0:	e9 f7       	brne	.-6      	; 0x1ccc <strlen+0x2>
    1cd2:	80 95       	com	r24
    1cd4:	90 95       	com	r25
    1cd6:	8e 0f       	add	r24, r30
    1cd8:	9f 1f       	adc	r25, r31
    1cda:	08 95       	ret

00001cdc <sprintf>:
    1cdc:	ae e0       	ldi	r26, 0x0E	; 14
    1cde:	b0 e0       	ldi	r27, 0x00	; 0
    1ce0:	e4 e7       	ldi	r30, 0x74	; 116
    1ce2:	fe e0       	ldi	r31, 0x0E	; 14
    1ce4:	0c 94 26 11 	jmp	0x224c	; 0x224c <__prologue_saves__+0x1c>
    1ce8:	0d 89       	ldd	r16, Y+21	; 0x15
    1cea:	1e 89       	ldd	r17, Y+22	; 0x16
    1cec:	86 e0       	ldi	r24, 0x06	; 6
    1cee:	8c 83       	std	Y+4, r24	; 0x04
    1cf0:	1a 83       	std	Y+2, r17	; 0x02
    1cf2:	09 83       	std	Y+1, r16	; 0x01
    1cf4:	8f ef       	ldi	r24, 0xFF	; 255
    1cf6:	9f e7       	ldi	r25, 0x7F	; 127
    1cf8:	9e 83       	std	Y+6, r25	; 0x06
    1cfa:	8d 83       	std	Y+5, r24	; 0x05
    1cfc:	9e 01       	movw	r18, r28
    1cfe:	27 5e       	subi	r18, 0xE7	; 231
    1d00:	3f 4f       	sbci	r19, 0xFF	; 255
    1d02:	ce 01       	movw	r24, r28
    1d04:	01 96       	adiw	r24, 0x01	; 1
    1d06:	6f 89       	ldd	r22, Y+23	; 0x17
    1d08:	78 8d       	ldd	r23, Y+24	; 0x18
    1d0a:	a9 01       	movw	r20, r18
    1d0c:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <vfprintf>
    1d10:	ef 81       	ldd	r30, Y+7	; 0x07
    1d12:	f8 85       	ldd	r31, Y+8	; 0x08
    1d14:	e0 0f       	add	r30, r16
    1d16:	f1 1f       	adc	r31, r17
    1d18:	10 82       	st	Z, r1
    1d1a:	2e 96       	adiw	r28, 0x0e	; 14
    1d1c:	e4 e0       	ldi	r30, 0x04	; 4
    1d1e:	0c 94 42 11 	jmp	0x2284	; 0x2284 <__epilogue_restores__+0x1c>

00001d22 <vfprintf>:
    1d22:	ac e0       	ldi	r26, 0x0C	; 12
    1d24:	b0 e0       	ldi	r27, 0x00	; 0
    1d26:	e7 e9       	ldi	r30, 0x97	; 151
    1d28:	fe e0       	ldi	r31, 0x0E	; 14
    1d2a:	0c 94 18 11 	jmp	0x2230	; 0x2230 <__prologue_saves__>
    1d2e:	6c 01       	movw	r12, r24
    1d30:	1b 01       	movw	r2, r22
    1d32:	8a 01       	movw	r16, r20
    1d34:	fc 01       	movw	r30, r24
    1d36:	17 82       	std	Z+7, r1	; 0x07
    1d38:	16 82       	std	Z+6, r1	; 0x06
    1d3a:	83 81       	ldd	r24, Z+3	; 0x03
    1d3c:	81 ff       	sbrs	r24, 1
    1d3e:	d1 c1       	rjmp	.+930    	; 0x20e2 <vfprintf+0x3c0>
    1d40:	2e 01       	movw	r4, r28
    1d42:	08 94       	sec
    1d44:	41 1c       	adc	r4, r1
    1d46:	51 1c       	adc	r5, r1
    1d48:	f6 01       	movw	r30, r12
    1d4a:	93 81       	ldd	r25, Z+3	; 0x03
    1d4c:	f1 01       	movw	r30, r2
    1d4e:	93 fd       	sbrc	r25, 3
    1d50:	85 91       	lpm	r24, Z+
    1d52:	93 ff       	sbrs	r25, 3
    1d54:	81 91       	ld	r24, Z+
    1d56:	1f 01       	movw	r2, r30
    1d58:	88 23       	and	r24, r24
    1d5a:	09 f4       	brne	.+2      	; 0x1d5e <vfprintf+0x3c>
    1d5c:	be c1       	rjmp	.+892    	; 0x20da <vfprintf+0x3b8>
    1d5e:	85 32       	cpi	r24, 0x25	; 37
    1d60:	39 f4       	brne	.+14     	; 0x1d70 <vfprintf+0x4e>
    1d62:	93 fd       	sbrc	r25, 3
    1d64:	85 91       	lpm	r24, Z+
    1d66:	93 ff       	sbrs	r25, 3
    1d68:	81 91       	ld	r24, Z+
    1d6a:	1f 01       	movw	r2, r30
    1d6c:	85 32       	cpi	r24, 0x25	; 37
    1d6e:	29 f4       	brne	.+10     	; 0x1d7a <vfprintf+0x58>
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	b6 01       	movw	r22, r12
    1d74:	0e 94 8e 10 	call	0x211c	; 0x211c <fputc>
    1d78:	e7 cf       	rjmp	.-50     	; 0x1d48 <vfprintf+0x26>
    1d7a:	ee 24       	eor	r14, r14
    1d7c:	ff 24       	eor	r15, r15
    1d7e:	20 e0       	ldi	r18, 0x00	; 0
    1d80:	20 32       	cpi	r18, 0x20	; 32
    1d82:	b0 f4       	brcc	.+44     	; 0x1db0 <vfprintf+0x8e>
    1d84:	8b 32       	cpi	r24, 0x2B	; 43
    1d86:	69 f0       	breq	.+26     	; 0x1da2 <vfprintf+0x80>
    1d88:	8c 32       	cpi	r24, 0x2C	; 44
    1d8a:	28 f4       	brcc	.+10     	; 0x1d96 <vfprintf+0x74>
    1d8c:	80 32       	cpi	r24, 0x20	; 32
    1d8e:	51 f0       	breq	.+20     	; 0x1da4 <vfprintf+0x82>
    1d90:	83 32       	cpi	r24, 0x23	; 35
    1d92:	71 f4       	brne	.+28     	; 0x1db0 <vfprintf+0x8e>
    1d94:	0b c0       	rjmp	.+22     	; 0x1dac <vfprintf+0x8a>
    1d96:	8d 32       	cpi	r24, 0x2D	; 45
    1d98:	39 f0       	breq	.+14     	; 0x1da8 <vfprintf+0x86>
    1d9a:	80 33       	cpi	r24, 0x30	; 48
    1d9c:	49 f4       	brne	.+18     	; 0x1db0 <vfprintf+0x8e>
    1d9e:	21 60       	ori	r18, 0x01	; 1
    1da0:	2c c0       	rjmp	.+88     	; 0x1dfa <vfprintf+0xd8>
    1da2:	22 60       	ori	r18, 0x02	; 2
    1da4:	24 60       	ori	r18, 0x04	; 4
    1da6:	29 c0       	rjmp	.+82     	; 0x1dfa <vfprintf+0xd8>
    1da8:	28 60       	ori	r18, 0x08	; 8
    1daa:	27 c0       	rjmp	.+78     	; 0x1dfa <vfprintf+0xd8>
    1dac:	20 61       	ori	r18, 0x10	; 16
    1dae:	25 c0       	rjmp	.+74     	; 0x1dfa <vfprintf+0xd8>
    1db0:	27 fd       	sbrc	r18, 7
    1db2:	2c c0       	rjmp	.+88     	; 0x1e0c <vfprintf+0xea>
    1db4:	38 2f       	mov	r19, r24
    1db6:	30 53       	subi	r19, 0x30	; 48
    1db8:	3a 30       	cpi	r19, 0x0A	; 10
    1dba:	98 f4       	brcc	.+38     	; 0x1de2 <vfprintf+0xc0>
    1dbc:	26 ff       	sbrs	r18, 6
    1dbe:	08 c0       	rjmp	.+16     	; 0x1dd0 <vfprintf+0xae>
    1dc0:	8e 2d       	mov	r24, r14
    1dc2:	88 0f       	add	r24, r24
    1dc4:	e8 2e       	mov	r14, r24
    1dc6:	ee 0c       	add	r14, r14
    1dc8:	ee 0c       	add	r14, r14
    1dca:	e8 0e       	add	r14, r24
    1dcc:	e3 0e       	add	r14, r19
    1dce:	15 c0       	rjmp	.+42     	; 0x1dfa <vfprintf+0xd8>
    1dd0:	8f 2d       	mov	r24, r15
    1dd2:	88 0f       	add	r24, r24
    1dd4:	f8 2e       	mov	r15, r24
    1dd6:	ff 0c       	add	r15, r15
    1dd8:	ff 0c       	add	r15, r15
    1dda:	f8 0e       	add	r15, r24
    1ddc:	f3 0e       	add	r15, r19
    1dde:	20 62       	ori	r18, 0x20	; 32
    1de0:	0c c0       	rjmp	.+24     	; 0x1dfa <vfprintf+0xd8>
    1de2:	8e 32       	cpi	r24, 0x2E	; 46
    1de4:	21 f4       	brne	.+8      	; 0x1dee <vfprintf+0xcc>
    1de6:	26 fd       	sbrc	r18, 6
    1de8:	78 c1       	rjmp	.+752    	; 0x20da <vfprintf+0x3b8>
    1dea:	20 64       	ori	r18, 0x40	; 64
    1dec:	06 c0       	rjmp	.+12     	; 0x1dfa <vfprintf+0xd8>
    1dee:	8c 36       	cpi	r24, 0x6C	; 108
    1df0:	11 f4       	brne	.+4      	; 0x1df6 <vfprintf+0xd4>
    1df2:	20 68       	ori	r18, 0x80	; 128
    1df4:	02 c0       	rjmp	.+4      	; 0x1dfa <vfprintf+0xd8>
    1df6:	88 36       	cpi	r24, 0x68	; 104
    1df8:	49 f4       	brne	.+18     	; 0x1e0c <vfprintf+0xea>
    1dfa:	f1 01       	movw	r30, r2
    1dfc:	93 fd       	sbrc	r25, 3
    1dfe:	85 91       	lpm	r24, Z+
    1e00:	93 ff       	sbrs	r25, 3
    1e02:	81 91       	ld	r24, Z+
    1e04:	1f 01       	movw	r2, r30
    1e06:	88 23       	and	r24, r24
    1e08:	09 f0       	breq	.+2      	; 0x1e0c <vfprintf+0xea>
    1e0a:	ba cf       	rjmp	.-140    	; 0x1d80 <vfprintf+0x5e>
    1e0c:	98 2f       	mov	r25, r24
    1e0e:	95 54       	subi	r25, 0x45	; 69
    1e10:	93 30       	cpi	r25, 0x03	; 3
    1e12:	18 f0       	brcs	.+6      	; 0x1e1a <vfprintf+0xf8>
    1e14:	90 52       	subi	r25, 0x20	; 32
    1e16:	93 30       	cpi	r25, 0x03	; 3
    1e18:	28 f4       	brcc	.+10     	; 0x1e24 <vfprintf+0x102>
    1e1a:	0c 5f       	subi	r16, 0xFC	; 252
    1e1c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e1e:	ff e3       	ldi	r31, 0x3F	; 63
    1e20:	f9 83       	std	Y+1, r31	; 0x01
    1e22:	0d c0       	rjmp	.+26     	; 0x1e3e <vfprintf+0x11c>
    1e24:	83 36       	cpi	r24, 0x63	; 99
    1e26:	31 f0       	breq	.+12     	; 0x1e34 <vfprintf+0x112>
    1e28:	83 37       	cpi	r24, 0x73	; 115
    1e2a:	71 f0       	breq	.+28     	; 0x1e48 <vfprintf+0x126>
    1e2c:	83 35       	cpi	r24, 0x53	; 83
    1e2e:	09 f0       	breq	.+2      	; 0x1e32 <vfprintf+0x110>
    1e30:	60 c0       	rjmp	.+192    	; 0x1ef2 <vfprintf+0x1d0>
    1e32:	22 c0       	rjmp	.+68     	; 0x1e78 <vfprintf+0x156>
    1e34:	f8 01       	movw	r30, r16
    1e36:	80 81       	ld	r24, Z
    1e38:	89 83       	std	Y+1, r24	; 0x01
    1e3a:	0e 5f       	subi	r16, 0xFE	; 254
    1e3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e3e:	42 01       	movw	r8, r4
    1e40:	71 e0       	ldi	r23, 0x01	; 1
    1e42:	a7 2e       	mov	r10, r23
    1e44:	b1 2c       	mov	r11, r1
    1e46:	16 c0       	rjmp	.+44     	; 0x1e74 <vfprintf+0x152>
    1e48:	62 e0       	ldi	r22, 0x02	; 2
    1e4a:	66 2e       	mov	r6, r22
    1e4c:	71 2c       	mov	r7, r1
    1e4e:	60 0e       	add	r6, r16
    1e50:	71 1e       	adc	r7, r17
    1e52:	f8 01       	movw	r30, r16
    1e54:	80 80       	ld	r8, Z
    1e56:	91 80       	ldd	r9, Z+1	; 0x01
    1e58:	26 ff       	sbrs	r18, 6
    1e5a:	03 c0       	rjmp	.+6      	; 0x1e62 <vfprintf+0x140>
    1e5c:	6e 2d       	mov	r22, r14
    1e5e:	70 e0       	ldi	r23, 0x00	; 0
    1e60:	02 c0       	rjmp	.+4      	; 0x1e66 <vfprintf+0x144>
    1e62:	6f ef       	ldi	r22, 0xFF	; 255
    1e64:	7f ef       	ldi	r23, 0xFF	; 255
    1e66:	c4 01       	movw	r24, r8
    1e68:	2c 87       	std	Y+12, r18	; 0x0c
    1e6a:	0e 94 83 10 	call	0x2106	; 0x2106 <strnlen>
    1e6e:	5c 01       	movw	r10, r24
    1e70:	83 01       	movw	r16, r6
    1e72:	2c 85       	ldd	r18, Y+12	; 0x0c
    1e74:	2f 77       	andi	r18, 0x7F	; 127
    1e76:	17 c0       	rjmp	.+46     	; 0x1ea6 <vfprintf+0x184>
    1e78:	52 e0       	ldi	r21, 0x02	; 2
    1e7a:	65 2e       	mov	r6, r21
    1e7c:	71 2c       	mov	r7, r1
    1e7e:	60 0e       	add	r6, r16
    1e80:	71 1e       	adc	r7, r17
    1e82:	f8 01       	movw	r30, r16
    1e84:	80 80       	ld	r8, Z
    1e86:	91 80       	ldd	r9, Z+1	; 0x01
    1e88:	26 ff       	sbrs	r18, 6
    1e8a:	03 c0       	rjmp	.+6      	; 0x1e92 <vfprintf+0x170>
    1e8c:	6e 2d       	mov	r22, r14
    1e8e:	70 e0       	ldi	r23, 0x00	; 0
    1e90:	02 c0       	rjmp	.+4      	; 0x1e96 <vfprintf+0x174>
    1e92:	6f ef       	ldi	r22, 0xFF	; 255
    1e94:	7f ef       	ldi	r23, 0xFF	; 255
    1e96:	c4 01       	movw	r24, r8
    1e98:	2c 87       	std	Y+12, r18	; 0x0c
    1e9a:	0e 94 78 10 	call	0x20f0	; 0x20f0 <strnlen_P>
    1e9e:	5c 01       	movw	r10, r24
    1ea0:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ea2:	20 68       	ori	r18, 0x80	; 128
    1ea4:	83 01       	movw	r16, r6
    1ea6:	23 fd       	sbrc	r18, 3
    1ea8:	20 c0       	rjmp	.+64     	; 0x1eea <vfprintf+0x1c8>
    1eaa:	08 c0       	rjmp	.+16     	; 0x1ebc <vfprintf+0x19a>
    1eac:	80 e2       	ldi	r24, 0x20	; 32
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	b6 01       	movw	r22, r12
    1eb2:	2c 87       	std	Y+12, r18	; 0x0c
    1eb4:	0e 94 8e 10 	call	0x211c	; 0x211c <fputc>
    1eb8:	fa 94       	dec	r15
    1eba:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ebc:	8f 2d       	mov	r24, r15
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	a8 16       	cp	r10, r24
    1ec2:	b9 06       	cpc	r11, r25
    1ec4:	98 f3       	brcs	.-26     	; 0x1eac <vfprintf+0x18a>
    1ec6:	11 c0       	rjmp	.+34     	; 0x1eea <vfprintf+0x1c8>
    1ec8:	f4 01       	movw	r30, r8
    1eca:	27 fd       	sbrc	r18, 7
    1ecc:	85 91       	lpm	r24, Z+
    1ece:	27 ff       	sbrs	r18, 7
    1ed0:	81 91       	ld	r24, Z+
    1ed2:	4f 01       	movw	r8, r30
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	b6 01       	movw	r22, r12
    1ed8:	2c 87       	std	Y+12, r18	; 0x0c
    1eda:	0e 94 8e 10 	call	0x211c	; 0x211c <fputc>
    1ede:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ee0:	f1 10       	cpse	r15, r1
    1ee2:	fa 94       	dec	r15
    1ee4:	08 94       	sec
    1ee6:	a1 08       	sbc	r10, r1
    1ee8:	b1 08       	sbc	r11, r1
    1eea:	a1 14       	cp	r10, r1
    1eec:	b1 04       	cpc	r11, r1
    1eee:	61 f7       	brne	.-40     	; 0x1ec8 <vfprintf+0x1a6>
    1ef0:	f1 c0       	rjmp	.+482    	; 0x20d4 <vfprintf+0x3b2>
    1ef2:	84 36       	cpi	r24, 0x64	; 100
    1ef4:	11 f0       	breq	.+4      	; 0x1efa <vfprintf+0x1d8>
    1ef6:	89 36       	cpi	r24, 0x69	; 105
    1ef8:	49 f5       	brne	.+82     	; 0x1f4c <vfprintf+0x22a>
    1efa:	27 ff       	sbrs	r18, 7
    1efc:	08 c0       	rjmp	.+16     	; 0x1f0e <vfprintf+0x1ec>
    1efe:	f8 01       	movw	r30, r16
    1f00:	60 81       	ld	r22, Z
    1f02:	71 81       	ldd	r23, Z+1	; 0x01
    1f04:	82 81       	ldd	r24, Z+2	; 0x02
    1f06:	93 81       	ldd	r25, Z+3	; 0x03
    1f08:	0c 5f       	subi	r16, 0xFC	; 252
    1f0a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f0c:	09 c0       	rjmp	.+18     	; 0x1f20 <vfprintf+0x1fe>
    1f0e:	f8 01       	movw	r30, r16
    1f10:	60 81       	ld	r22, Z
    1f12:	71 81       	ldd	r23, Z+1	; 0x01
    1f14:	88 27       	eor	r24, r24
    1f16:	77 fd       	sbrc	r23, 7
    1f18:	80 95       	com	r24
    1f1a:	98 2f       	mov	r25, r24
    1f1c:	0e 5f       	subi	r16, 0xFE	; 254
    1f1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f20:	4f e6       	ldi	r20, 0x6F	; 111
    1f22:	b4 2e       	mov	r11, r20
    1f24:	b2 22       	and	r11, r18
    1f26:	97 ff       	sbrs	r25, 7
    1f28:	09 c0       	rjmp	.+18     	; 0x1f3c <vfprintf+0x21a>
    1f2a:	90 95       	com	r25
    1f2c:	80 95       	com	r24
    1f2e:	70 95       	com	r23
    1f30:	61 95       	neg	r22
    1f32:	7f 4f       	sbci	r23, 0xFF	; 255
    1f34:	8f 4f       	sbci	r24, 0xFF	; 255
    1f36:	9f 4f       	sbci	r25, 0xFF	; 255
    1f38:	f0 e8       	ldi	r31, 0x80	; 128
    1f3a:	bf 2a       	or	r11, r31
    1f3c:	a2 01       	movw	r20, r4
    1f3e:	2a e0       	ldi	r18, 0x0A	; 10
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	0e 94 ba 10 	call	0x2174	; 0x2174 <__ultoa_invert>
    1f46:	78 2e       	mov	r7, r24
    1f48:	74 18       	sub	r7, r4
    1f4a:	45 c0       	rjmp	.+138    	; 0x1fd6 <vfprintf+0x2b4>
    1f4c:	85 37       	cpi	r24, 0x75	; 117
    1f4e:	31 f4       	brne	.+12     	; 0x1f5c <vfprintf+0x23a>
    1f50:	3f ee       	ldi	r19, 0xEF	; 239
    1f52:	b3 2e       	mov	r11, r19
    1f54:	b2 22       	and	r11, r18
    1f56:	2a e0       	ldi	r18, 0x0A	; 10
    1f58:	30 e0       	ldi	r19, 0x00	; 0
    1f5a:	25 c0       	rjmp	.+74     	; 0x1fa6 <vfprintf+0x284>
    1f5c:	99 ef       	ldi	r25, 0xF9	; 249
    1f5e:	b9 2e       	mov	r11, r25
    1f60:	b2 22       	and	r11, r18
    1f62:	8f 36       	cpi	r24, 0x6F	; 111
    1f64:	c1 f0       	breq	.+48     	; 0x1f96 <vfprintf+0x274>
    1f66:	80 37       	cpi	r24, 0x70	; 112
    1f68:	20 f4       	brcc	.+8      	; 0x1f72 <vfprintf+0x250>
    1f6a:	88 35       	cpi	r24, 0x58	; 88
    1f6c:	09 f0       	breq	.+2      	; 0x1f70 <vfprintf+0x24e>
    1f6e:	b5 c0       	rjmp	.+362    	; 0x20da <vfprintf+0x3b8>
    1f70:	0d c0       	rjmp	.+26     	; 0x1f8c <vfprintf+0x26a>
    1f72:	80 37       	cpi	r24, 0x70	; 112
    1f74:	21 f0       	breq	.+8      	; 0x1f7e <vfprintf+0x25c>
    1f76:	88 37       	cpi	r24, 0x78	; 120
    1f78:	09 f0       	breq	.+2      	; 0x1f7c <vfprintf+0x25a>
    1f7a:	af c0       	rjmp	.+350    	; 0x20da <vfprintf+0x3b8>
    1f7c:	02 c0       	rjmp	.+4      	; 0x1f82 <vfprintf+0x260>
    1f7e:	20 e1       	ldi	r18, 0x10	; 16
    1f80:	b2 2a       	or	r11, r18
    1f82:	b4 fe       	sbrs	r11, 4
    1f84:	0b c0       	rjmp	.+22     	; 0x1f9c <vfprintf+0x27a>
    1f86:	84 e0       	ldi	r24, 0x04	; 4
    1f88:	b8 2a       	or	r11, r24
    1f8a:	08 c0       	rjmp	.+16     	; 0x1f9c <vfprintf+0x27a>
    1f8c:	b4 fe       	sbrs	r11, 4
    1f8e:	09 c0       	rjmp	.+18     	; 0x1fa2 <vfprintf+0x280>
    1f90:	e6 e0       	ldi	r30, 0x06	; 6
    1f92:	be 2a       	or	r11, r30
    1f94:	06 c0       	rjmp	.+12     	; 0x1fa2 <vfprintf+0x280>
    1f96:	28 e0       	ldi	r18, 0x08	; 8
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	05 c0       	rjmp	.+10     	; 0x1fa6 <vfprintf+0x284>
    1f9c:	20 e1       	ldi	r18, 0x10	; 16
    1f9e:	30 e0       	ldi	r19, 0x00	; 0
    1fa0:	02 c0       	rjmp	.+4      	; 0x1fa6 <vfprintf+0x284>
    1fa2:	20 e1       	ldi	r18, 0x10	; 16
    1fa4:	32 e0       	ldi	r19, 0x02	; 2
    1fa6:	b7 fe       	sbrs	r11, 7
    1fa8:	08 c0       	rjmp	.+16     	; 0x1fba <vfprintf+0x298>
    1faa:	f8 01       	movw	r30, r16
    1fac:	60 81       	ld	r22, Z
    1fae:	71 81       	ldd	r23, Z+1	; 0x01
    1fb0:	82 81       	ldd	r24, Z+2	; 0x02
    1fb2:	93 81       	ldd	r25, Z+3	; 0x03
    1fb4:	0c 5f       	subi	r16, 0xFC	; 252
    1fb6:	1f 4f       	sbci	r17, 0xFF	; 255
    1fb8:	07 c0       	rjmp	.+14     	; 0x1fc8 <vfprintf+0x2a6>
    1fba:	f8 01       	movw	r30, r16
    1fbc:	60 81       	ld	r22, Z
    1fbe:	71 81       	ldd	r23, Z+1	; 0x01
    1fc0:	80 e0       	ldi	r24, 0x00	; 0
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	0e 5f       	subi	r16, 0xFE	; 254
    1fc6:	1f 4f       	sbci	r17, 0xFF	; 255
    1fc8:	a2 01       	movw	r20, r4
    1fca:	0e 94 ba 10 	call	0x2174	; 0x2174 <__ultoa_invert>
    1fce:	78 2e       	mov	r7, r24
    1fd0:	74 18       	sub	r7, r4
    1fd2:	ff e7       	ldi	r31, 0x7F	; 127
    1fd4:	bf 22       	and	r11, r31
    1fd6:	b6 fe       	sbrs	r11, 6
    1fd8:	0b c0       	rjmp	.+22     	; 0x1ff0 <vfprintf+0x2ce>
    1fda:	2e ef       	ldi	r18, 0xFE	; 254
    1fdc:	b2 22       	and	r11, r18
    1fde:	7e 14       	cp	r7, r14
    1fe0:	38 f4       	brcc	.+14     	; 0x1ff0 <vfprintf+0x2ce>
    1fe2:	b4 fe       	sbrs	r11, 4
    1fe4:	07 c0       	rjmp	.+14     	; 0x1ff4 <vfprintf+0x2d2>
    1fe6:	b2 fc       	sbrc	r11, 2
    1fe8:	05 c0       	rjmp	.+10     	; 0x1ff4 <vfprintf+0x2d2>
    1fea:	8f ee       	ldi	r24, 0xEF	; 239
    1fec:	b8 22       	and	r11, r24
    1fee:	02 c0       	rjmp	.+4      	; 0x1ff4 <vfprintf+0x2d2>
    1ff0:	a7 2c       	mov	r10, r7
    1ff2:	01 c0       	rjmp	.+2      	; 0x1ff6 <vfprintf+0x2d4>
    1ff4:	ae 2c       	mov	r10, r14
    1ff6:	8b 2d       	mov	r24, r11
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	b4 fe       	sbrs	r11, 4
    1ffc:	0d c0       	rjmp	.+26     	; 0x2018 <vfprintf+0x2f6>
    1ffe:	fe 01       	movw	r30, r28
    2000:	e7 0d       	add	r30, r7
    2002:	f1 1d       	adc	r31, r1
    2004:	20 81       	ld	r18, Z
    2006:	20 33       	cpi	r18, 0x30	; 48
    2008:	19 f4       	brne	.+6      	; 0x2010 <vfprintf+0x2ee>
    200a:	e9 ee       	ldi	r30, 0xE9	; 233
    200c:	be 22       	and	r11, r30
    200e:	09 c0       	rjmp	.+18     	; 0x2022 <vfprintf+0x300>
    2010:	a3 94       	inc	r10
    2012:	b2 fe       	sbrs	r11, 2
    2014:	06 c0       	rjmp	.+12     	; 0x2022 <vfprintf+0x300>
    2016:	04 c0       	rjmp	.+8      	; 0x2020 <vfprintf+0x2fe>
    2018:	86 78       	andi	r24, 0x86	; 134
    201a:	90 70       	andi	r25, 0x00	; 0
    201c:	00 97       	sbiw	r24, 0x00	; 0
    201e:	09 f0       	breq	.+2      	; 0x2022 <vfprintf+0x300>
    2020:	a3 94       	inc	r10
    2022:	8b 2c       	mov	r8, r11
    2024:	99 24       	eor	r9, r9
    2026:	b3 fc       	sbrc	r11, 3
    2028:	14 c0       	rjmp	.+40     	; 0x2052 <vfprintf+0x330>
    202a:	b0 fe       	sbrs	r11, 0
    202c:	0f c0       	rjmp	.+30     	; 0x204c <vfprintf+0x32a>
    202e:	af 14       	cp	r10, r15
    2030:	28 f4       	brcc	.+10     	; 0x203c <vfprintf+0x31a>
    2032:	e7 2c       	mov	r14, r7
    2034:	ef 0c       	add	r14, r15
    2036:	ea 18       	sub	r14, r10
    2038:	af 2c       	mov	r10, r15
    203a:	08 c0       	rjmp	.+16     	; 0x204c <vfprintf+0x32a>
    203c:	e7 2c       	mov	r14, r7
    203e:	06 c0       	rjmp	.+12     	; 0x204c <vfprintf+0x32a>
    2040:	80 e2       	ldi	r24, 0x20	; 32
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	b6 01       	movw	r22, r12
    2046:	0e 94 8e 10 	call	0x211c	; 0x211c <fputc>
    204a:	a3 94       	inc	r10
    204c:	af 14       	cp	r10, r15
    204e:	c0 f3       	brcs	.-16     	; 0x2040 <vfprintf+0x31e>
    2050:	04 c0       	rjmp	.+8      	; 0x205a <vfprintf+0x338>
    2052:	af 14       	cp	r10, r15
    2054:	10 f4       	brcc	.+4      	; 0x205a <vfprintf+0x338>
    2056:	fa 18       	sub	r15, r10
    2058:	01 c0       	rjmp	.+2      	; 0x205c <vfprintf+0x33a>
    205a:	ff 24       	eor	r15, r15
    205c:	84 fe       	sbrs	r8, 4
    205e:	0f c0       	rjmp	.+30     	; 0x207e <vfprintf+0x35c>
    2060:	80 e3       	ldi	r24, 0x30	; 48
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	b6 01       	movw	r22, r12
    2066:	0e 94 8e 10 	call	0x211c	; 0x211c <fputc>
    206a:	82 fe       	sbrs	r8, 2
    206c:	1f c0       	rjmp	.+62     	; 0x20ac <vfprintf+0x38a>
    206e:	81 fe       	sbrs	r8, 1
    2070:	03 c0       	rjmp	.+6      	; 0x2078 <vfprintf+0x356>
    2072:	88 e5       	ldi	r24, 0x58	; 88
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	10 c0       	rjmp	.+32     	; 0x2098 <vfprintf+0x376>
    2078:	88 e7       	ldi	r24, 0x78	; 120
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	0d c0       	rjmp	.+26     	; 0x2098 <vfprintf+0x376>
    207e:	c4 01       	movw	r24, r8
    2080:	86 78       	andi	r24, 0x86	; 134
    2082:	90 70       	andi	r25, 0x00	; 0
    2084:	00 97       	sbiw	r24, 0x00	; 0
    2086:	91 f0       	breq	.+36     	; 0x20ac <vfprintf+0x38a>
    2088:	81 fc       	sbrc	r8, 1
    208a:	02 c0       	rjmp	.+4      	; 0x2090 <vfprintf+0x36e>
    208c:	80 e2       	ldi	r24, 0x20	; 32
    208e:	01 c0       	rjmp	.+2      	; 0x2092 <vfprintf+0x370>
    2090:	8b e2       	ldi	r24, 0x2B	; 43
    2092:	b7 fc       	sbrc	r11, 7
    2094:	8d e2       	ldi	r24, 0x2D	; 45
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	b6 01       	movw	r22, r12
    209a:	0e 94 8e 10 	call	0x211c	; 0x211c <fputc>
    209e:	06 c0       	rjmp	.+12     	; 0x20ac <vfprintf+0x38a>
    20a0:	80 e3       	ldi	r24, 0x30	; 48
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	b6 01       	movw	r22, r12
    20a6:	0e 94 8e 10 	call	0x211c	; 0x211c <fputc>
    20aa:	ea 94       	dec	r14
    20ac:	7e 14       	cp	r7, r14
    20ae:	c0 f3       	brcs	.-16     	; 0x20a0 <vfprintf+0x37e>
    20b0:	7a 94       	dec	r7
    20b2:	f2 01       	movw	r30, r4
    20b4:	e7 0d       	add	r30, r7
    20b6:	f1 1d       	adc	r31, r1
    20b8:	80 81       	ld	r24, Z
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	b6 01       	movw	r22, r12
    20be:	0e 94 8e 10 	call	0x211c	; 0x211c <fputc>
    20c2:	77 20       	and	r7, r7
    20c4:	a9 f7       	brne	.-22     	; 0x20b0 <vfprintf+0x38e>
    20c6:	06 c0       	rjmp	.+12     	; 0x20d4 <vfprintf+0x3b2>
    20c8:	80 e2       	ldi	r24, 0x20	; 32
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	b6 01       	movw	r22, r12
    20ce:	0e 94 8e 10 	call	0x211c	; 0x211c <fputc>
    20d2:	fa 94       	dec	r15
    20d4:	ff 20       	and	r15, r15
    20d6:	c1 f7       	brne	.-16     	; 0x20c8 <vfprintf+0x3a6>
    20d8:	37 ce       	rjmp	.-914    	; 0x1d48 <vfprintf+0x26>
    20da:	f6 01       	movw	r30, r12
    20dc:	26 81       	ldd	r18, Z+6	; 0x06
    20de:	37 81       	ldd	r19, Z+7	; 0x07
    20e0:	02 c0       	rjmp	.+4      	; 0x20e6 <vfprintf+0x3c4>
    20e2:	2f ef       	ldi	r18, 0xFF	; 255
    20e4:	3f ef       	ldi	r19, 0xFF	; 255
    20e6:	c9 01       	movw	r24, r18
    20e8:	2c 96       	adiw	r28, 0x0c	; 12
    20ea:	e2 e1       	ldi	r30, 0x12	; 18
    20ec:	0c 94 34 11 	jmp	0x2268	; 0x2268 <__epilogue_restores__>

000020f0 <strnlen_P>:
    20f0:	fc 01       	movw	r30, r24
    20f2:	05 90       	lpm	r0, Z+
    20f4:	61 50       	subi	r22, 0x01	; 1
    20f6:	70 40       	sbci	r23, 0x00	; 0
    20f8:	01 10       	cpse	r0, r1
    20fa:	d8 f7       	brcc	.-10     	; 0x20f2 <strnlen_P+0x2>
    20fc:	80 95       	com	r24
    20fe:	90 95       	com	r25
    2100:	8e 0f       	add	r24, r30
    2102:	9f 1f       	adc	r25, r31
    2104:	08 95       	ret

00002106 <strnlen>:
    2106:	fc 01       	movw	r30, r24
    2108:	61 50       	subi	r22, 0x01	; 1
    210a:	70 40       	sbci	r23, 0x00	; 0
    210c:	01 90       	ld	r0, Z+
    210e:	01 10       	cpse	r0, r1
    2110:	d8 f7       	brcc	.-10     	; 0x2108 <strnlen+0x2>
    2112:	80 95       	com	r24
    2114:	90 95       	com	r25
    2116:	8e 0f       	add	r24, r30
    2118:	9f 1f       	adc	r25, r31
    211a:	08 95       	ret

0000211c <fputc>:
    211c:	0f 93       	push	r16
    211e:	1f 93       	push	r17
    2120:	cf 93       	push	r28
    2122:	df 93       	push	r29
    2124:	8c 01       	movw	r16, r24
    2126:	eb 01       	movw	r28, r22
    2128:	8b 81       	ldd	r24, Y+3	; 0x03
    212a:	81 ff       	sbrs	r24, 1
    212c:	1b c0       	rjmp	.+54     	; 0x2164 <fputc+0x48>
    212e:	82 ff       	sbrs	r24, 2
    2130:	0d c0       	rjmp	.+26     	; 0x214c <fputc+0x30>
    2132:	2e 81       	ldd	r18, Y+6	; 0x06
    2134:	3f 81       	ldd	r19, Y+7	; 0x07
    2136:	8c 81       	ldd	r24, Y+4	; 0x04
    2138:	9d 81       	ldd	r25, Y+5	; 0x05
    213a:	28 17       	cp	r18, r24
    213c:	39 07       	cpc	r19, r25
    213e:	64 f4       	brge	.+24     	; 0x2158 <fputc+0x3c>
    2140:	e8 81       	ld	r30, Y
    2142:	f9 81       	ldd	r31, Y+1	; 0x01
    2144:	01 93       	st	Z+, r16
    2146:	f9 83       	std	Y+1, r31	; 0x01
    2148:	e8 83       	st	Y, r30
    214a:	06 c0       	rjmp	.+12     	; 0x2158 <fputc+0x3c>
    214c:	e8 85       	ldd	r30, Y+8	; 0x08
    214e:	f9 85       	ldd	r31, Y+9	; 0x09
    2150:	80 2f       	mov	r24, r16
    2152:	09 95       	icall
    2154:	00 97       	sbiw	r24, 0x00	; 0
    2156:	31 f4       	brne	.+12     	; 0x2164 <fputc+0x48>
    2158:	8e 81       	ldd	r24, Y+6	; 0x06
    215a:	9f 81       	ldd	r25, Y+7	; 0x07
    215c:	01 96       	adiw	r24, 0x01	; 1
    215e:	9f 83       	std	Y+7, r25	; 0x07
    2160:	8e 83       	std	Y+6, r24	; 0x06
    2162:	02 c0       	rjmp	.+4      	; 0x2168 <fputc+0x4c>
    2164:	0f ef       	ldi	r16, 0xFF	; 255
    2166:	1f ef       	ldi	r17, 0xFF	; 255
    2168:	c8 01       	movw	r24, r16
    216a:	df 91       	pop	r29
    216c:	cf 91       	pop	r28
    216e:	1f 91       	pop	r17
    2170:	0f 91       	pop	r16
    2172:	08 95       	ret

00002174 <__ultoa_invert>:
    2174:	fa 01       	movw	r30, r20
    2176:	aa 27       	eor	r26, r26
    2178:	28 30       	cpi	r18, 0x08	; 8
    217a:	51 f1       	breq	.+84     	; 0x21d0 <__ultoa_invert+0x5c>
    217c:	20 31       	cpi	r18, 0x10	; 16
    217e:	81 f1       	breq	.+96     	; 0x21e0 <__ultoa_invert+0x6c>
    2180:	e8 94       	clt
    2182:	6f 93       	push	r22
    2184:	6e 7f       	andi	r22, 0xFE	; 254
    2186:	6e 5f       	subi	r22, 0xFE	; 254
    2188:	7f 4f       	sbci	r23, 0xFF	; 255
    218a:	8f 4f       	sbci	r24, 0xFF	; 255
    218c:	9f 4f       	sbci	r25, 0xFF	; 255
    218e:	af 4f       	sbci	r26, 0xFF	; 255
    2190:	b1 e0       	ldi	r27, 0x01	; 1
    2192:	3e d0       	rcall	.+124    	; 0x2210 <__ultoa_invert+0x9c>
    2194:	b4 e0       	ldi	r27, 0x04	; 4
    2196:	3c d0       	rcall	.+120    	; 0x2210 <__ultoa_invert+0x9c>
    2198:	67 0f       	add	r22, r23
    219a:	78 1f       	adc	r23, r24
    219c:	89 1f       	adc	r24, r25
    219e:	9a 1f       	adc	r25, r26
    21a0:	a1 1d       	adc	r26, r1
    21a2:	68 0f       	add	r22, r24
    21a4:	79 1f       	adc	r23, r25
    21a6:	8a 1f       	adc	r24, r26
    21a8:	91 1d       	adc	r25, r1
    21aa:	a1 1d       	adc	r26, r1
    21ac:	6a 0f       	add	r22, r26
    21ae:	71 1d       	adc	r23, r1
    21b0:	81 1d       	adc	r24, r1
    21b2:	91 1d       	adc	r25, r1
    21b4:	a1 1d       	adc	r26, r1
    21b6:	20 d0       	rcall	.+64     	; 0x21f8 <__ultoa_invert+0x84>
    21b8:	09 f4       	brne	.+2      	; 0x21bc <__ultoa_invert+0x48>
    21ba:	68 94       	set
    21bc:	3f 91       	pop	r19
    21be:	2a e0       	ldi	r18, 0x0A	; 10
    21c0:	26 9f       	mul	r18, r22
    21c2:	11 24       	eor	r1, r1
    21c4:	30 19       	sub	r19, r0
    21c6:	30 5d       	subi	r19, 0xD0	; 208
    21c8:	31 93       	st	Z+, r19
    21ca:	de f6       	brtc	.-74     	; 0x2182 <__ultoa_invert+0xe>
    21cc:	cf 01       	movw	r24, r30
    21ce:	08 95       	ret
    21d0:	46 2f       	mov	r20, r22
    21d2:	47 70       	andi	r20, 0x07	; 7
    21d4:	40 5d       	subi	r20, 0xD0	; 208
    21d6:	41 93       	st	Z+, r20
    21d8:	b3 e0       	ldi	r27, 0x03	; 3
    21da:	0f d0       	rcall	.+30     	; 0x21fa <__ultoa_invert+0x86>
    21dc:	c9 f7       	brne	.-14     	; 0x21d0 <__ultoa_invert+0x5c>
    21de:	f6 cf       	rjmp	.-20     	; 0x21cc <__ultoa_invert+0x58>
    21e0:	46 2f       	mov	r20, r22
    21e2:	4f 70       	andi	r20, 0x0F	; 15
    21e4:	40 5d       	subi	r20, 0xD0	; 208
    21e6:	4a 33       	cpi	r20, 0x3A	; 58
    21e8:	18 f0       	brcs	.+6      	; 0x21f0 <__ultoa_invert+0x7c>
    21ea:	49 5d       	subi	r20, 0xD9	; 217
    21ec:	31 fd       	sbrc	r19, 1
    21ee:	40 52       	subi	r20, 0x20	; 32
    21f0:	41 93       	st	Z+, r20
    21f2:	02 d0       	rcall	.+4      	; 0x21f8 <__ultoa_invert+0x84>
    21f4:	a9 f7       	brne	.-22     	; 0x21e0 <__ultoa_invert+0x6c>
    21f6:	ea cf       	rjmp	.-44     	; 0x21cc <__ultoa_invert+0x58>
    21f8:	b4 e0       	ldi	r27, 0x04	; 4
    21fa:	a6 95       	lsr	r26
    21fc:	97 95       	ror	r25
    21fe:	87 95       	ror	r24
    2200:	77 95       	ror	r23
    2202:	67 95       	ror	r22
    2204:	ba 95       	dec	r27
    2206:	c9 f7       	brne	.-14     	; 0x21fa <__ultoa_invert+0x86>
    2208:	00 97       	sbiw	r24, 0x00	; 0
    220a:	61 05       	cpc	r22, r1
    220c:	71 05       	cpc	r23, r1
    220e:	08 95       	ret
    2210:	9b 01       	movw	r18, r22
    2212:	ac 01       	movw	r20, r24
    2214:	0a 2e       	mov	r0, r26
    2216:	06 94       	lsr	r0
    2218:	57 95       	ror	r21
    221a:	47 95       	ror	r20
    221c:	37 95       	ror	r19
    221e:	27 95       	ror	r18
    2220:	ba 95       	dec	r27
    2222:	c9 f7       	brne	.-14     	; 0x2216 <__ultoa_invert+0xa2>
    2224:	62 0f       	add	r22, r18
    2226:	73 1f       	adc	r23, r19
    2228:	84 1f       	adc	r24, r20
    222a:	95 1f       	adc	r25, r21
    222c:	a0 1d       	adc	r26, r0
    222e:	08 95       	ret

00002230 <__prologue_saves__>:
    2230:	2f 92       	push	r2
    2232:	3f 92       	push	r3
    2234:	4f 92       	push	r4
    2236:	5f 92       	push	r5
    2238:	6f 92       	push	r6
    223a:	7f 92       	push	r7
    223c:	8f 92       	push	r8
    223e:	9f 92       	push	r9
    2240:	af 92       	push	r10
    2242:	bf 92       	push	r11
    2244:	cf 92       	push	r12
    2246:	df 92       	push	r13
    2248:	ef 92       	push	r14
    224a:	ff 92       	push	r15
    224c:	0f 93       	push	r16
    224e:	1f 93       	push	r17
    2250:	cf 93       	push	r28
    2252:	df 93       	push	r29
    2254:	cd b7       	in	r28, 0x3d	; 61
    2256:	de b7       	in	r29, 0x3e	; 62
    2258:	ca 1b       	sub	r28, r26
    225a:	db 0b       	sbc	r29, r27
    225c:	0f b6       	in	r0, 0x3f	; 63
    225e:	f8 94       	cli
    2260:	de bf       	out	0x3e, r29	; 62
    2262:	0f be       	out	0x3f, r0	; 63
    2264:	cd bf       	out	0x3d, r28	; 61
    2266:	09 94       	ijmp

00002268 <__epilogue_restores__>:
    2268:	2a 88       	ldd	r2, Y+18	; 0x12
    226a:	39 88       	ldd	r3, Y+17	; 0x11
    226c:	48 88       	ldd	r4, Y+16	; 0x10
    226e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2270:	6e 84       	ldd	r6, Y+14	; 0x0e
    2272:	7d 84       	ldd	r7, Y+13	; 0x0d
    2274:	8c 84       	ldd	r8, Y+12	; 0x0c
    2276:	9b 84       	ldd	r9, Y+11	; 0x0b
    2278:	aa 84       	ldd	r10, Y+10	; 0x0a
    227a:	b9 84       	ldd	r11, Y+9	; 0x09
    227c:	c8 84       	ldd	r12, Y+8	; 0x08
    227e:	df 80       	ldd	r13, Y+7	; 0x07
    2280:	ee 80       	ldd	r14, Y+6	; 0x06
    2282:	fd 80       	ldd	r15, Y+5	; 0x05
    2284:	0c 81       	ldd	r16, Y+4	; 0x04
    2286:	1b 81       	ldd	r17, Y+3	; 0x03
    2288:	aa 81       	ldd	r26, Y+2	; 0x02
    228a:	b9 81       	ldd	r27, Y+1	; 0x01
    228c:	ce 0f       	add	r28, r30
    228e:	d1 1d       	adc	r29, r1
    2290:	0f b6       	in	r0, 0x3f	; 63
    2292:	f8 94       	cli
    2294:	de bf       	out	0x3e, r29	; 62
    2296:	0f be       	out	0x3f, r0	; 63
    2298:	cd bf       	out	0x3d, r28	; 61
    229a:	ed 01       	movw	r28, r26
    229c:	08 95       	ret

0000229e <_exit>:
    229e:	f8 94       	cli

000022a0 <__stop_program>:
    22a0:	ff cf       	rjmp	.-2      	; 0x22a0 <__stop_program>
