
Proyecto de placa principal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000130  00800100  00001c58  00001cec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c58  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  00800230  00800230  00001e1c  2**0
                  ALLOC
  3 .stab         0000207c  00000000  00000000  00001e1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000a99  00000000  00000000  00003e98  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000002a8  00000000  00000000  00004931  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000067f  00000000  00000000  00004bd9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000018da  00000000  00000000  00005258  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000a5b  00000000  00000000  00006b32  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002336  00000000  00000000  0000758d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000430  00000000  00000000  000098c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000009f0  00000000  00000000  00009cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000b82  00000000  00000000  0000a6e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000001f9  00000000  00000000  0000b266  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000248  00000000  00000000  0000b45f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
    /* Pull up chip select */
    nrf24_csn_digitalWrite(HIGH);

    /* Reset status register */
    nrf24_configRegister(STATUS,(1<<RX_DR));   
}
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 22 08 	jmp	0x1044	; 0x1044 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 e8 07 	jmp	0xfd0	; 0xfd0 <__vector_20>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e8 e5       	ldi	r30, 0x58	; 88
      7c:	fc e1       	ldi	r31, 0x1C	; 28
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a0 33       	cpi	r26, 0x30	; 48
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	12 e0       	ldi	r17, 0x02	; 2
      8c:	a0 e3       	ldi	r26, 0x30	; 48
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a3 34       	cpi	r26, 0x43	; 67
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 ce 03 	call	0x79c	; 0x79c <main>
      9e:	0c 94 2a 0e 	jmp	0x1c54	; 0x1c54 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initliazeMemory>:
	{ .commandBase = "TURN_RELAY_OFF", .nParameters = 1, .handlerFunction = &TURN_RELAY_OFF_HANDLE},
	{ .commandBase = "UART_TEST", .nParameters = 0, .handlerFunction = &UART_TEST_HANDLER},
	{ .commandBase = "BUILT_IN_LED_TEST", .nParameters = 0, .handlerFunction = &BUILT_IN_LED_TEST_HANDLER}
};

bool initliazeMemory(){
      a6:	df 93       	push	r29
      a8:	cf 93       	push	r28
      aa:	cd b7       	in	r28, 0x3d	; 61
      ac:	de b7       	in	r29, 0x3e	; 62
	if(memoryInitialized) return false;
      ae:	80 91 38 02 	lds	r24, 0x0238
      b2:	88 23       	and	r24, r24
      b4:	11 f0       	breq	.+4      	; 0xba <initliazeMemory+0x14>
      b6:	80 e0       	ldi	r24, 0x00	; 0
      b8:	46 c0       	rjmp	.+140    	; 0x146 <initliazeMemory+0xa0>
	parameter[0] = (void*)calloc(28,1);
      ba:	8c e1       	ldi	r24, 0x1C	; 28
      bc:	90 e0       	ldi	r25, 0x00	; 0
      be:	61 e0       	ldi	r22, 0x01	; 1
      c0:	70 e0       	ldi	r23, 0x00	; 0
      c2:	0e 94 9f 09 	call	0x133e	; 0x133e <calloc>
      c6:	90 93 31 02 	sts	0x0231, r25
      ca:	80 93 30 02 	sts	0x0230, r24
	parameter[1] = (void*)calloc(28,1);
      ce:	8c e1       	ldi	r24, 0x1C	; 28
      d0:	90 e0       	ldi	r25, 0x00	; 0
      d2:	61 e0       	ldi	r22, 0x01	; 1
      d4:	70 e0       	ldi	r23, 0x00	; 0
      d6:	0e 94 9f 09 	call	0x133e	; 0x133e <calloc>
      da:	90 93 33 02 	sts	0x0233, r25
      de:	80 93 32 02 	sts	0x0232, r24
	parameter[2] = (void*)calloc(28,1);
      e2:	8c e1       	ldi	r24, 0x1C	; 28
      e4:	90 e0       	ldi	r25, 0x00	; 0
      e6:	61 e0       	ldi	r22, 0x01	; 1
      e8:	70 e0       	ldi	r23, 0x00	; 0
      ea:	0e 94 9f 09 	call	0x133e	; 0x133e <calloc>
      ee:	90 93 35 02 	sts	0x0235, r25
      f2:	80 93 34 02 	sts	0x0234, r24
	command_buffer = (uint8_t*)calloc(32,1);
      f6:	80 e2       	ldi	r24, 0x20	; 32
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	61 e0       	ldi	r22, 0x01	; 1
      fc:	70 e0       	ldi	r23, 0x00	; 0
      fe:	0e 94 9f 09 	call	0x133e	; 0x133e <calloc>
     102:	90 93 37 02 	sts	0x0237, r25
     106:	80 93 36 02 	sts	0x0236, r24
	if(parameter[0]==nullptr||parameter[1]==nullptr||parameter[2]==nullptr||command_buffer==nullptr) return false;
     10a:	80 91 30 02 	lds	r24, 0x0230
     10e:	90 91 31 02 	lds	r25, 0x0231
     112:	00 97       	sbiw	r24, 0x00	; 0
     114:	91 f0       	breq	.+36     	; 0x13a <initliazeMemory+0x94>
     116:	80 91 32 02 	lds	r24, 0x0232
     11a:	90 91 33 02 	lds	r25, 0x0233
     11e:	00 97       	sbiw	r24, 0x00	; 0
     120:	61 f0       	breq	.+24     	; 0x13a <initliazeMemory+0x94>
     122:	80 91 34 02 	lds	r24, 0x0234
     126:	90 91 35 02 	lds	r25, 0x0235
     12a:	00 97       	sbiw	r24, 0x00	; 0
     12c:	31 f0       	breq	.+12     	; 0x13a <initliazeMemory+0x94>
     12e:	80 91 36 02 	lds	r24, 0x0236
     132:	90 91 37 02 	lds	r25, 0x0237
     136:	00 97       	sbiw	r24, 0x00	; 0
     138:	11 f4       	brne	.+4      	; 0x13e <initliazeMemory+0x98>
     13a:	80 e0       	ldi	r24, 0x00	; 0
     13c:	04 c0       	rjmp	.+8      	; 0x146 <initliazeMemory+0xa0>
	memoryInitialized = true;
     13e:	81 e0       	ldi	r24, 0x01	; 1
     140:	80 93 38 02 	sts	0x0238, r24
	return true;
     144:	81 e0       	ldi	r24, 0x01	; 1
}
     146:	cf 91       	pop	r28
     148:	df 91       	pop	r29
     14a:	08 95       	ret

0000014c <composeCommand>:


void composeCommand(void* output_buffer, commandType* commandT, void** inputParameter){
     14c:	0f 93       	push	r16
     14e:	1f 93       	push	r17
     150:	df 93       	push	r29
     152:	cf 93       	push	r28
     154:	cd b7       	in	r28, 0x3d	; 61
     156:	de b7       	in	r29, 0x3e	; 62
     158:	2c 97       	sbiw	r28, 0x0c	; 12
     15a:	0f b6       	in	r0, 0x3f	; 63
     15c:	f8 94       	cli
     15e:	de bf       	out	0x3e, r29	; 62
     160:	0f be       	out	0x3f, r0	; 63
     162:	cd bf       	out	0x3d, r28	; 61
     164:	98 87       	std	Y+8, r25	; 0x08
     166:	8f 83       	std	Y+7, r24	; 0x07
     168:	7a 87       	std	Y+10, r23	; 0x0a
     16a:	69 87       	std	Y+9, r22	; 0x09
     16c:	5c 87       	std	Y+12, r21	; 0x0c
     16e:	4b 87       	std	Y+11, r20	; 0x0b
	strcpy(output_buffer, commandT->commandBase);
     170:	8f 81       	ldd	r24, Y+7	; 0x07
     172:	98 85       	ldd	r25, Y+8	; 0x08
     174:	29 85       	ldd	r18, Y+9	; 0x09
     176:	3a 85       	ldd	r19, Y+10	; 0x0a
     178:	f9 01       	movw	r30, r18
     17a:	20 81       	ld	r18, Z
     17c:	31 81       	ldd	r19, Z+1	; 0x01
     17e:	b9 01       	movw	r22, r18
     180:	0e 94 39 0b 	call	0x1672	; 0x1672 <strcpy>
	char* startParamPTR = (char*)(output_buffer+strlen(commandT->commandBase));
     184:	0f 81       	ldd	r16, Y+7	; 0x07
     186:	18 85       	ldd	r17, Y+8	; 0x08
     188:	89 85       	ldd	r24, Y+9	; 0x09
     18a:	9a 85       	ldd	r25, Y+10	; 0x0a
     18c:	fc 01       	movw	r30, r24
     18e:	80 81       	ld	r24, Z
     190:	91 81       	ldd	r25, Z+1	; 0x01
     192:	0e 94 40 0b 	call	0x1680	; 0x1680 <strlen>
     196:	80 0f       	add	r24, r16
     198:	91 1f       	adc	r25, r17
     19a:	9a 83       	std	Y+2, r25	; 0x02
     19c:	89 83       	std	Y+1, r24	; 0x01
	char* endParamPTR = (char*)(startParamPTR+1+strlen(*inputParameter));
     19e:	8b 85       	ldd	r24, Y+11	; 0x0b
     1a0:	9c 85       	ldd	r25, Y+12	; 0x0c
     1a2:	fc 01       	movw	r30, r24
     1a4:	80 81       	ld	r24, Z
     1a6:	91 81       	ldd	r25, Z+1	; 0x01
     1a8:	0e 94 40 0b 	call	0x1680	; 0x1680 <strlen>
     1ac:	01 96       	adiw	r24, 0x01	; 1
     1ae:	29 81       	ldd	r18, Y+1	; 0x01
     1b0:	3a 81       	ldd	r19, Y+2	; 0x02
     1b2:	82 0f       	add	r24, r18
     1b4:	93 1f       	adc	r25, r19
     1b6:	9c 83       	std	Y+4, r25	; 0x04
     1b8:	8b 83       	std	Y+3, r24	; 0x03

	for (uint8_t index = 0; index < commandT->nParameters; index++){
     1ba:	1d 82       	std	Y+5, r1	; 0x05
     1bc:	41 c0       	rjmp	.+130    	; 0x240 <composeCommand+0xf4>
		*startParamPTR='[';
     1be:	89 81       	ldd	r24, Y+1	; 0x01
     1c0:	9a 81       	ldd	r25, Y+2	; 0x02
     1c2:	2b e5       	ldi	r18, 0x5B	; 91
     1c4:	fc 01       	movw	r30, r24
     1c6:	20 83       	st	Z, r18
		strcpy(startParamPTR+1, *inputParameter);
     1c8:	89 81       	ldd	r24, Y+1	; 0x01
     1ca:	9a 81       	ldd	r25, Y+2	; 0x02
     1cc:	01 96       	adiw	r24, 0x01	; 1
     1ce:	2b 85       	ldd	r18, Y+11	; 0x0b
     1d0:	3c 85       	ldd	r19, Y+12	; 0x0c
     1d2:	f9 01       	movw	r30, r18
     1d4:	20 81       	ld	r18, Z
     1d6:	31 81       	ldd	r19, Z+1	; 0x01
     1d8:	b9 01       	movw	r22, r18
     1da:	0e 94 39 0b 	call	0x1672	; 0x1672 <strcpy>
		*endParamPTR=']';
     1de:	8b 81       	ldd	r24, Y+3	; 0x03
     1e0:	9c 81       	ldd	r25, Y+4	; 0x04
     1e2:	2d e5       	ldi	r18, 0x5D	; 93
     1e4:	fc 01       	movw	r30, r24
     1e6:	20 83       	st	Z, r18
		startParamPTR=(endParamPTR+1);
     1e8:	8b 81       	ldd	r24, Y+3	; 0x03
     1ea:	9c 81       	ldd	r25, Y+4	; 0x04
     1ec:	01 96       	adiw	r24, 0x01	; 1
     1ee:	9a 83       	std	Y+2, r25	; 0x02
     1f0:	89 83       	std	Y+1, r24	; 0x01
		if (index!=(commandT->nParameters-1)){
     1f2:	8d 81       	ldd	r24, Y+5	; 0x05
     1f4:	28 2f       	mov	r18, r24
     1f6:	30 e0       	ldi	r19, 0x00	; 0
     1f8:	89 85       	ldd	r24, Y+9	; 0x09
     1fa:	9a 85       	ldd	r25, Y+10	; 0x0a
     1fc:	fc 01       	movw	r30, r24
     1fe:	82 81       	ldd	r24, Z+2	; 0x02
     200:	88 2f       	mov	r24, r24
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	01 97       	sbiw	r24, 0x01	; 1
     206:	28 17       	cp	r18, r24
     208:	39 07       	cpc	r19, r25
     20a:	b9 f0       	breq	.+46     	; 0x23a <composeCommand+0xee>
			inputParameter++;
     20c:	8b 85       	ldd	r24, Y+11	; 0x0b
     20e:	9c 85       	ldd	r25, Y+12	; 0x0c
     210:	02 96       	adiw	r24, 0x02	; 2
     212:	9c 87       	std	Y+12, r25	; 0x0c
     214:	8b 87       	std	Y+11, r24	; 0x0b
			uint8_t len = strlen(*inputParameter);
     216:	8b 85       	ldd	r24, Y+11	; 0x0b
     218:	9c 85       	ldd	r25, Y+12	; 0x0c
     21a:	fc 01       	movw	r30, r24
     21c:	80 81       	ld	r24, Z
     21e:	91 81       	ldd	r25, Z+1	; 0x01
     220:	0e 94 40 0b 	call	0x1680	; 0x1680 <strlen>
     224:	8e 83       	std	Y+6, r24	; 0x06
			endParamPTR = (char*)(startParamPTR+len+1);
     226:	8e 81       	ldd	r24, Y+6	; 0x06
     228:	88 2f       	mov	r24, r24
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	01 96       	adiw	r24, 0x01	; 1
     22e:	29 81       	ldd	r18, Y+1	; 0x01
     230:	3a 81       	ldd	r19, Y+2	; 0x02
     232:	82 0f       	add	r24, r18
     234:	93 1f       	adc	r25, r19
     236:	9c 83       	std	Y+4, r25	; 0x04
     238:	8b 83       	std	Y+3, r24	; 0x03
void composeCommand(void* output_buffer, commandType* commandT, void** inputParameter){
	strcpy(output_buffer, commandT->commandBase);
	char* startParamPTR = (char*)(output_buffer+strlen(commandT->commandBase));
	char* endParamPTR = (char*)(startParamPTR+1+strlen(*inputParameter));

	for (uint8_t index = 0; index < commandT->nParameters; index++){
     23a:	8d 81       	ldd	r24, Y+5	; 0x05
     23c:	8f 5f       	subi	r24, 0xFF	; 255
     23e:	8d 83       	std	Y+5, r24	; 0x05
     240:	89 85       	ldd	r24, Y+9	; 0x09
     242:	9a 85       	ldd	r25, Y+10	; 0x0a
     244:	fc 01       	movw	r30, r24
     246:	92 81       	ldd	r25, Z+2	; 0x02
     248:	8d 81       	ldd	r24, Y+5	; 0x05
     24a:	89 17       	cp	r24, r25
     24c:	08 f4       	brcc	.+2      	; 0x250 <composeCommand+0x104>
     24e:	b7 cf       	rjmp	.-146    	; 0x1be <composeCommand+0x72>
			inputParameter++;
			uint8_t len = strlen(*inputParameter);
			endParamPTR = (char*)(startParamPTR+len+1);
		}
	}
	*startParamPTR='\0';
     250:	89 81       	ldd	r24, Y+1	; 0x01
     252:	9a 81       	ldd	r25, Y+2	; 0x02
     254:	fc 01       	movw	r30, r24
     256:	10 82       	st	Z, r1
}
     258:	2c 96       	adiw	r28, 0x0c	; 12
     25a:	0f b6       	in	r0, 0x3f	; 63
     25c:	f8 94       	cli
     25e:	de bf       	out	0x3e, r29	; 62
     260:	0f be       	out	0x3f, r0	; 63
     262:	cd bf       	out	0x3d, r28	; 61
     264:	cf 91       	pop	r28
     266:	df 91       	pop	r29
     268:	1f 91       	pop	r17
     26a:	0f 91       	pop	r16
     26c:	08 95       	ret

0000026e <decomposeCommand>:

bool decomposeCommand(void* input_buffer, commandType* commandT, void** outputParameter){
     26e:	0f 93       	push	r16
     270:	1f 93       	push	r17
     272:	df 93       	push	r29
     274:	cf 93       	push	r28
     276:	cd b7       	in	r28, 0x3d	; 61
     278:	de b7       	in	r29, 0x3e	; 62
     27a:	60 97       	sbiw	r28, 0x10	; 16
     27c:	0f b6       	in	r0, 0x3f	; 63
     27e:	f8 94       	cli
     280:	de bf       	out	0x3e, r29	; 62
     282:	0f be       	out	0x3f, r0	; 63
     284:	cd bf       	out	0x3d, r28	; 61
     286:	9c 87       	std	Y+12, r25	; 0x0c
     288:	8b 87       	std	Y+11, r24	; 0x0b
     28a:	7e 87       	std	Y+14, r23	; 0x0e
     28c:	6d 87       	std	Y+13, r22	; 0x0d
     28e:	58 8b       	std	Y+16, r21	; 0x10
     290:	4f 87       	std	Y+15, r20	; 0x0f
	
	for (uint8_t index = 0; index < AVAILABLE_COMMANDS; index++){
     292:	19 82       	std	Y+1, r1	; 0x01
     294:	4e c0       	rjmp	.+156    	; 0x332 <decomposeCommand+0xc4>
		if (memmem(input_buffer, COMMAND_BUFFER_SIZE, availableCommand[index].commandBase, strlen(availableCommand[index].commandBase))!=nullptr) 
     296:	89 81       	ldd	r24, Y+1	; 0x01
     298:	28 2f       	mov	r18, r24
     29a:	30 e0       	ldi	r19, 0x00	; 0
     29c:	c9 01       	movw	r24, r18
     29e:	88 0f       	add	r24, r24
     2a0:	99 1f       	adc	r25, r25
     2a2:	88 0f       	add	r24, r24
     2a4:	99 1f       	adc	r25, r25
     2a6:	82 0f       	add	r24, r18
     2a8:	93 1f       	adc	r25, r19
     2aa:	88 5f       	subi	r24, 0xF8	; 248
     2ac:	9d 4f       	sbci	r25, 0xFD	; 253
     2ae:	fc 01       	movw	r30, r24
     2b0:	00 81       	ld	r16, Z
     2b2:	11 81       	ldd	r17, Z+1	; 0x01
     2b4:	89 81       	ldd	r24, Y+1	; 0x01
     2b6:	28 2f       	mov	r18, r24
     2b8:	30 e0       	ldi	r19, 0x00	; 0
     2ba:	c9 01       	movw	r24, r18
     2bc:	88 0f       	add	r24, r24
     2be:	99 1f       	adc	r25, r25
     2c0:	88 0f       	add	r24, r24
     2c2:	99 1f       	adc	r25, r25
     2c4:	82 0f       	add	r24, r18
     2c6:	93 1f       	adc	r25, r19
     2c8:	88 5f       	subi	r24, 0xF8	; 248
     2ca:	9d 4f       	sbci	r25, 0xFD	; 253
     2cc:	fc 01       	movw	r30, r24
     2ce:	80 81       	ld	r24, Z
     2d0:	91 81       	ldd	r25, Z+1	; 0x01
     2d2:	0e 94 40 0b 	call	0x1680	; 0x1680 <strlen>
     2d6:	9c 01       	movw	r18, r24
     2d8:	8b 85       	ldd	r24, Y+11	; 0x0b
     2da:	9c 85       	ldd	r25, Y+12	; 0x0c
     2dc:	60 e2       	ldi	r22, 0x20	; 32
     2de:	70 e0       	ldi	r23, 0x00	; 0
     2e0:	a8 01       	movw	r20, r16
     2e2:	0e 94 0c 0b 	call	0x1618	; 0x1618 <memmem>
     2e6:	00 97       	sbiw	r24, 0x00	; 0
     2e8:	e1 f0       	breq	.+56     	; 0x322 <decomposeCommand+0xb4>
		{ 
			*commandT = availableCommand[index]; break; 
     2ea:	89 81       	ldd	r24, Y+1	; 0x01
     2ec:	28 2f       	mov	r18, r24
     2ee:	30 e0       	ldi	r19, 0x00	; 0
     2f0:	4d 85       	ldd	r20, Y+13	; 0x0d
     2f2:	5e 85       	ldd	r21, Y+14	; 0x0e
     2f4:	c9 01       	movw	r24, r18
     2f6:	88 0f       	add	r24, r24
     2f8:	99 1f       	adc	r25, r25
     2fa:	88 0f       	add	r24, r24
     2fc:	99 1f       	adc	r25, r25
     2fe:	82 0f       	add	r24, r18
     300:	93 1f       	adc	r25, r19
     302:	9c 01       	movw	r18, r24
     304:	28 5f       	subi	r18, 0xF8	; 248
     306:	3d 4f       	sbci	r19, 0xFD	; 253
     308:	ca 01       	movw	r24, r20
     30a:	45 e0       	ldi	r20, 0x05	; 5
     30c:	f9 01       	movw	r30, r18
     30e:	00 80       	ld	r0, Z
     310:	2f 5f       	subi	r18, 0xFF	; 255
     312:	3f 4f       	sbci	r19, 0xFF	; 255
     314:	fc 01       	movw	r30, r24
     316:	00 82       	st	Z, r0
     318:	01 96       	adiw	r24, 0x01	; 1
     31a:	41 50       	subi	r20, 0x01	; 1
     31c:	44 23       	and	r20, r20
     31e:	b1 f7       	brne	.-20     	; 0x30c <decomposeCommand+0x9e>
     320:	0c c0       	rjmp	.+24     	; 0x33a <decomposeCommand+0xcc>
		}
		else if (index==(AVAILABLE_COMMANDS-1)) { return false;}
     322:	89 81       	ldd	r24, Y+1	; 0x01
     324:	87 30       	cpi	r24, 0x07	; 7
     326:	11 f4       	brne	.+4      	; 0x32c <decomposeCommand+0xbe>
     328:	80 e0       	ldi	r24, 0x00	; 0
     32a:	75 c0       	rjmp	.+234    	; 0x416 <decomposeCommand+0x1a8>
	*startParamPTR='\0';
}

bool decomposeCommand(void* input_buffer, commandType* commandT, void** outputParameter){
	
	for (uint8_t index = 0; index < AVAILABLE_COMMANDS; index++){
     32c:	89 81       	ldd	r24, Y+1	; 0x01
     32e:	8f 5f       	subi	r24, 0xFF	; 255
     330:	89 83       	std	Y+1, r24	; 0x01
     332:	89 81       	ldd	r24, Y+1	; 0x01
     334:	88 30       	cpi	r24, 0x08	; 8
     336:	08 f4       	brcc	.+2      	; 0x33a <decomposeCommand+0xcc>
     338:	ae cf       	rjmp	.-164    	; 0x296 <decomposeCommand+0x28>
			*commandT = availableCommand[index]; break; 
		}
		else if (index==(AVAILABLE_COMMANDS-1)) { return false;}
	}
	
	for (uint8_t x = 0; x < commandT->nParameters; x++){
     33a:	1a 82       	std	Y+2, r1	; 0x02
     33c:	61 c0       	rjmp	.+194    	; 0x400 <decomposeCommand+0x192>
		uint8_t* startNumPTR = memchr(input_buffer, '[', COMMAND_BUFFER_SIZE);
     33e:	8b 85       	ldd	r24, Y+11	; 0x0b
     340:	9c 85       	ldd	r25, Y+12	; 0x0c
     342:	6b e5       	ldi	r22, 0x5B	; 91
     344:	70 e0       	ldi	r23, 0x00	; 0
     346:	40 e2       	ldi	r20, 0x20	; 32
     348:	50 e0       	ldi	r21, 0x00	; 0
     34a:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <memchr>
     34e:	9c 83       	std	Y+4, r25	; 0x04
     350:	8b 83       	std	Y+3, r24	; 0x03
		uint8_t* endNumPTR = memchr(input_buffer, ']', COMMAND_BUFFER_SIZE);
     352:	8b 85       	ldd	r24, Y+11	; 0x0b
     354:	9c 85       	ldd	r25, Y+12	; 0x0c
     356:	6d e5       	ldi	r22, 0x5D	; 93
     358:	70 e0       	ldi	r23, 0x00	; 0
     35a:	40 e2       	ldi	r20, 0x20	; 32
     35c:	50 e0       	ldi	r21, 0x00	; 0
     35e:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <memchr>
     362:	9e 83       	std	Y+6, r25	; 0x06
     364:	8d 83       	std	Y+5, r24	; 0x05
		if (startNumPTR==nullptr||endNumPTR==nullptr) { if(x==0) return false; break; }
     366:	8b 81       	ldd	r24, Y+3	; 0x03
     368:	9c 81       	ldd	r25, Y+4	; 0x04
     36a:	00 97       	sbiw	r24, 0x00	; 0
     36c:	21 f0       	breq	.+8      	; 0x376 <decomposeCommand+0x108>
     36e:	8d 81       	ldd	r24, Y+5	; 0x05
     370:	9e 81       	ldd	r25, Y+6	; 0x06
     372:	00 97       	sbiw	r24, 0x00	; 0
     374:	31 f4       	brne	.+12     	; 0x382 <decomposeCommand+0x114>
     376:	8a 81       	ldd	r24, Y+2	; 0x02
     378:	88 23       	and	r24, r24
     37a:	09 f0       	breq	.+2      	; 0x37e <decomposeCommand+0x110>
     37c:	4a c0       	rjmp	.+148    	; 0x412 <decomposeCommand+0x1a4>
     37e:	80 e0       	ldi	r24, 0x00	; 0
     380:	4a c0       	rjmp	.+148    	; 0x416 <decomposeCommand+0x1a8>
		(*startNumPTR) = 0x20;
     382:	8b 81       	ldd	r24, Y+3	; 0x03
     384:	9c 81       	ldd	r25, Y+4	; 0x04
     386:	20 e2       	ldi	r18, 0x20	; 32
     388:	fc 01       	movw	r30, r24
     38a:	20 83       	st	Z, r18
		(*endNumPTR) = 0x20;
     38c:	8d 81       	ldd	r24, Y+5	; 0x05
     38e:	9e 81       	ldd	r25, Y+6	; 0x06
     390:	20 e2       	ldi	r18, 0x20	; 32
     392:	fc 01       	movw	r30, r24
     394:	20 83       	st	Z, r18
		startNumPTR++;
     396:	8b 81       	ldd	r24, Y+3	; 0x03
     398:	9c 81       	ldd	r25, Y+4	; 0x04
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	9c 83       	std	Y+4, r25	; 0x04
     39e:	8b 83       	std	Y+3, r24	; 0x03
		uint32_t bytes = ((endNumPTR)) - ((startNumPTR));
     3a0:	2d 81       	ldd	r18, Y+5	; 0x05
     3a2:	3e 81       	ldd	r19, Y+6	; 0x06
     3a4:	8b 81       	ldd	r24, Y+3	; 0x03
     3a6:	9c 81       	ldd	r25, Y+4	; 0x04
     3a8:	a9 01       	movw	r20, r18
     3aa:	48 1b       	sub	r20, r24
     3ac:	59 0b       	sbc	r21, r25
     3ae:	ca 01       	movw	r24, r20
     3b0:	aa 27       	eor	r26, r26
     3b2:	97 fd       	sbrc	r25, 7
     3b4:	a0 95       	com	r26
     3b6:	ba 2f       	mov	r27, r26
     3b8:	8f 83       	std	Y+7, r24	; 0x07
     3ba:	98 87       	std	Y+8, r25	; 0x08
     3bc:	a9 87       	std	Y+9, r26	; 0x09
     3be:	ba 87       	std	Y+10, r27	; 0x0a
		if (bytes>PARAMETER_BUFFER_SIZE) return false;
     3c0:	8f 81       	ldd	r24, Y+7	; 0x07
     3c2:	98 85       	ldd	r25, Y+8	; 0x08
     3c4:	a9 85       	ldd	r26, Y+9	; 0x09
     3c6:	ba 85       	ldd	r27, Y+10	; 0x0a
     3c8:	8d 31       	cpi	r24, 0x1D	; 29
     3ca:	91 05       	cpc	r25, r1
     3cc:	a1 05       	cpc	r26, r1
     3ce:	b1 05       	cpc	r27, r1
     3d0:	10 f0       	brcs	.+4      	; 0x3d6 <decomposeCommand+0x168>
     3d2:	80 e0       	ldi	r24, 0x00	; 0
     3d4:	20 c0       	rjmp	.+64     	; 0x416 <decomposeCommand+0x1a8>
		memcpy(parameter[x], startNumPTR, bytes);
     3d6:	8a 81       	ldd	r24, Y+2	; 0x02
     3d8:	88 2f       	mov	r24, r24
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	88 0f       	add	r24, r24
     3de:	99 1f       	adc	r25, r25
     3e0:	80 5d       	subi	r24, 0xD0	; 208
     3e2:	9d 4f       	sbci	r25, 0xFD	; 253
     3e4:	fc 01       	movw	r30, r24
     3e6:	80 81       	ld	r24, Z
     3e8:	91 81       	ldd	r25, Z+1	; 0x01
     3ea:	2f 81       	ldd	r18, Y+7	; 0x07
     3ec:	38 85       	ldd	r19, Y+8	; 0x08
     3ee:	4b 81       	ldd	r20, Y+3	; 0x03
     3f0:	5c 81       	ldd	r21, Y+4	; 0x04
     3f2:	ba 01       	movw	r22, r20
     3f4:	a9 01       	movw	r20, r18
     3f6:	0e 94 03 0b 	call	0x1606	; 0x1606 <memcpy>
			*commandT = availableCommand[index]; break; 
		}
		else if (index==(AVAILABLE_COMMANDS-1)) { return false;}
	}
	
	for (uint8_t x = 0; x < commandT->nParameters; x++){
     3fa:	8a 81       	ldd	r24, Y+2	; 0x02
     3fc:	8f 5f       	subi	r24, 0xFF	; 255
     3fe:	8a 83       	std	Y+2, r24	; 0x02
     400:	8d 85       	ldd	r24, Y+13	; 0x0d
     402:	9e 85       	ldd	r25, Y+14	; 0x0e
     404:	fc 01       	movw	r30, r24
     406:	92 81       	ldd	r25, Z+2	; 0x02
     408:	8a 81       	ldd	r24, Y+2	; 0x02
     40a:	89 17       	cp	r24, r25
     40c:	08 f4       	brcc	.+2      	; 0x410 <decomposeCommand+0x1a2>
     40e:	97 cf       	rjmp	.-210    	; 0x33e <decomposeCommand+0xd0>
     410:	01 c0       	rjmp	.+2      	; 0x414 <decomposeCommand+0x1a6>
		uint8_t* startNumPTR = memchr(input_buffer, '[', COMMAND_BUFFER_SIZE);
		uint8_t* endNumPTR = memchr(input_buffer, ']', COMMAND_BUFFER_SIZE);
		if (startNumPTR==nullptr||endNumPTR==nullptr) { if(x==0) return false; break; }
     412:	00 00       	nop
		uint32_t bytes = ((endNumPTR)) - ((startNumPTR));
		if (bytes>PARAMETER_BUFFER_SIZE) return false;
		memcpy(parameter[x], startNumPTR, bytes);
	}

	return true;
     414:	81 e0       	ldi	r24, 0x01	; 1
}
     416:	60 96       	adiw	r28, 0x10	; 16
     418:	0f b6       	in	r0, 0x3f	; 63
     41a:	f8 94       	cli
     41c:	de bf       	out	0x3e, r29	; 62
     41e:	0f be       	out	0x3f, r0	; 63
     420:	cd bf       	out	0x3d, r28	; 61
     422:	cf 91       	pop	r28
     424:	df 91       	pop	r29
     426:	1f 91       	pop	r17
     428:	0f 91       	pop	r16
     42a:	08 95       	ret

0000042c <ROTATE_FORWARDS_HANDLE>:
	
void ROTATE_FORWARDS_HANDLE() {}
     42c:	df 93       	push	r29
     42e:	cf 93       	push	r28
     430:	cd b7       	in	r28, 0x3d	; 61
     432:	de b7       	in	r29, 0x3e	; 62
     434:	cf 91       	pop	r28
     436:	df 91       	pop	r29
     438:	08 95       	ret

0000043a <ROTATE_BACKWARDS_HANDLE>:
	
void ROTATE_BACKWARDS_HANDLE() {}
     43a:	df 93       	push	r29
     43c:	cf 93       	push	r28
     43e:	cd b7       	in	r28, 0x3d	; 61
     440:	de b7       	in	r29, 0x3e	; 62
     442:	cf 91       	pop	r28
     444:	df 91       	pop	r29
     446:	08 95       	ret

00000448 <TURN_LED_ON_HANDLE>:
	
void TURN_LED_ON_HANDLE() {}
     448:	df 93       	push	r29
     44a:	cf 93       	push	r28
     44c:	cd b7       	in	r28, 0x3d	; 61
     44e:	de b7       	in	r29, 0x3e	; 62
     450:	cf 91       	pop	r28
     452:	df 91       	pop	r29
     454:	08 95       	ret

00000456 <TURN_LED_OFF_HANDLE>:
	
void TURN_LED_OFF_HANDLE() {}
     456:	df 93       	push	r29
     458:	cf 93       	push	r28
     45a:	cd b7       	in	r28, 0x3d	; 61
     45c:	de b7       	in	r29, 0x3e	; 62
     45e:	cf 91       	pop	r28
     460:	df 91       	pop	r29
     462:	08 95       	ret

00000464 <TURN_RELAY_ON_HANDLE>:
	
void TURN_RELAY_ON_HANDLE() {
     464:	df 93       	push	r29
     466:	cf 93       	push	r28
     468:	00 d0       	rcall	.+0      	; 0x46a <TURN_RELAY_ON_HANDLE+0x6>
     46a:	00 d0       	rcall	.+0      	; 0x46c <TURN_RELAY_ON_HANDLE+0x8>
     46c:	cd b7       	in	r28, 0x3d	; 61
     46e:	de b7       	in	r29, 0x3e	; 62
	composeCommand(command_buffer, &availableCommand[4], parameter);
     470:	80 91 36 02 	lds	r24, 0x0236
     474:	90 91 37 02 	lds	r25, 0x0237
     478:	4c e1       	ldi	r20, 0x1C	; 28
     47a:	52 e0       	ldi	r21, 0x02	; 2
     47c:	20 e3       	ldi	r18, 0x30	; 48
     47e:	32 e0       	ldi	r19, 0x02	; 2
     480:	ba 01       	movw	r22, r20
     482:	a9 01       	movw	r20, r18
     484:	0e 94 a6 00 	call	0x14c	; 0x14c <composeCommand>
	
	nrf24_send(command_buffer);
     488:	80 91 36 02 	lds	r24, 0x0236
     48c:	90 91 37 02 	lds	r25, 0x0237
     490:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <nrf24_send>
	while(nrf24_isSending());
     494:	00 00       	nop
     496:	0e 94 ff 04 	call	0x9fe	; 0x9fe <nrf24_isSending>
     49a:	88 23       	and	r24, r24
     49c:	e1 f7       	brne	.-8      	; 0x496 <TURN_RELAY_ON_HANDLE+0x32>

	uint8_t messageStatus = nrf24_lastMessageStatus();
     49e:	0e 94 29 05 	call	0xa52	; 0xa52 <nrf24_lastMessageStatus>
     4a2:	89 83       	std	Y+1, r24	; 0x01
	if(messageStatus == NRF24_TRANSMISSON_OK) { transmitMessageSync("Successful RF transmission! \n", 29); }
     4a4:	89 81       	ldd	r24, Y+1	; 0x01
     4a6:	88 23       	and	r24, r24
     4a8:	31 f4       	brne	.+12     	; 0x4b6 <TURN_RELAY_ON_HANDLE+0x52>
     4aa:	83 e7       	ldi	r24, 0x73	; 115
     4ac:	91 e0       	ldi	r25, 0x01	; 1
     4ae:	6d e1       	ldi	r22, 0x1D	; 29
     4b0:	0e 94 ef 06 	call	0xdde	; 0xdde <transmitMessageSync>
     4b4:	08 c0       	rjmp	.+16     	; 0x4c6 <TURN_RELAY_ON_HANDLE+0x62>
	else if(messageStatus == NRF24_MESSAGE_LOST) { transmitMessageSync("Failure on RF transmission! \n", 29); }
     4b6:	89 81       	ldd	r24, Y+1	; 0x01
     4b8:	81 30       	cpi	r24, 0x01	; 1
     4ba:	29 f4       	brne	.+10     	; 0x4c6 <TURN_RELAY_ON_HANDLE+0x62>
     4bc:	81 e9       	ldi	r24, 0x91	; 145
     4be:	91 e0       	ldi	r25, 0x01	; 1
     4c0:	6d e1       	ldi	r22, 0x1D	; 29
     4c2:	0e 94 ef 06 	call	0xdde	; 0xdde <transmitMessageSync>
		
	uint8_t retransmissionCount = nrf24_retransmissionCount();
     4c6:	0e 94 bd 04 	call	0x97a	; 0x97a <nrf24_retransmissionCount>
     4ca:	8a 83       	std	Y+2, r24	; 0x02
	char* retransmissionString;
	sprintf(retransmissionString, "Retransmission count: %d \n", retransmissionCount);	
     4cc:	8a 81       	ldd	r24, Y+2	; 0x02
     4ce:	28 2f       	mov	r18, r24
     4d0:	30 e0       	ldi	r19, 0x00	; 0
     4d2:	00 d0       	rcall	.+0      	; 0x4d4 <TURN_RELAY_ON_HANDLE+0x70>
     4d4:	00 d0       	rcall	.+0      	; 0x4d6 <TURN_RELAY_ON_HANDLE+0x72>
     4d6:	00 d0       	rcall	.+0      	; 0x4d8 <TURN_RELAY_ON_HANDLE+0x74>
     4d8:	8d b7       	in	r24, 0x3d	; 61
     4da:	9e b7       	in	r25, 0x3e	; 62
     4dc:	01 96       	adiw	r24, 0x01	; 1
     4de:	4b 81       	ldd	r20, Y+3	; 0x03
     4e0:	5c 81       	ldd	r21, Y+4	; 0x04
     4e2:	fc 01       	movw	r30, r24
     4e4:	51 83       	std	Z+1, r21	; 0x01
     4e6:	40 83       	st	Z, r20
     4e8:	4f ea       	ldi	r20, 0xAF	; 175
     4ea:	51 e0       	ldi	r21, 0x01	; 1
     4ec:	fc 01       	movw	r30, r24
     4ee:	53 83       	std	Z+3, r21	; 0x03
     4f0:	42 83       	std	Z+2, r20	; 0x02
     4f2:	fc 01       	movw	r30, r24
     4f4:	35 83       	std	Z+5, r19	; 0x05
     4f6:	24 83       	std	Z+4, r18	; 0x04
     4f8:	0e 94 49 0b 	call	0x1692	; 0x1692 <sprintf>
     4fc:	8d b7       	in	r24, 0x3d	; 61
     4fe:	9e b7       	in	r25, 0x3e	; 62
     500:	06 96       	adiw	r24, 0x06	; 6
     502:	0f b6       	in	r0, 0x3f	; 63
     504:	f8 94       	cli
     506:	9e bf       	out	0x3e, r25	; 62
     508:	0f be       	out	0x3f, r0	; 63
     50a:	8d bf       	out	0x3d, r24	; 61
	transmitMessageSync(retransmissionString, strlen(retransmissionString));
     50c:	8b 81       	ldd	r24, Y+3	; 0x03
     50e:	9c 81       	ldd	r25, Y+4	; 0x04
     510:	0e 94 40 0b 	call	0x1680	; 0x1680 <strlen>
     514:	28 2f       	mov	r18, r24
     516:	8b 81       	ldd	r24, Y+3	; 0x03
     518:	9c 81       	ldd	r25, Y+4	; 0x04
     51a:	62 2f       	mov	r22, r18
     51c:	0e 94 ef 06 	call	0xdde	; 0xdde <transmitMessageSync>
	
}
     520:	0f 90       	pop	r0
     522:	0f 90       	pop	r0
     524:	0f 90       	pop	r0
     526:	0f 90       	pop	r0
     528:	cf 91       	pop	r28
     52a:	df 91       	pop	r29
     52c:	08 95       	ret

0000052e <TURN_RELAY_OFF_HANDLE>:

void TURN_RELAY_OFF_HANDLE() {
     52e:	df 93       	push	r29
     530:	cf 93       	push	r28
     532:	00 d0       	rcall	.+0      	; 0x534 <TURN_RELAY_OFF_HANDLE+0x6>
     534:	00 d0       	rcall	.+0      	; 0x536 <TURN_RELAY_OFF_HANDLE+0x8>
     536:	cd b7       	in	r28, 0x3d	; 61
     538:	de b7       	in	r29, 0x3e	; 62
	composeCommand(command_buffer, &availableCommand[5], parameter);
     53a:	80 91 36 02 	lds	r24, 0x0236
     53e:	90 91 37 02 	lds	r25, 0x0237
     542:	41 e2       	ldi	r20, 0x21	; 33
     544:	52 e0       	ldi	r21, 0x02	; 2
     546:	20 e3       	ldi	r18, 0x30	; 48
     548:	32 e0       	ldi	r19, 0x02	; 2
     54a:	ba 01       	movw	r22, r20
     54c:	a9 01       	movw	r20, r18
     54e:	0e 94 a6 00 	call	0x14c	; 0x14c <composeCommand>
	
	nrf24_send(command_buffer);
     552:	80 91 36 02 	lds	r24, 0x0236
     556:	90 91 37 02 	lds	r25, 0x0237
     55a:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <nrf24_send>
	while(nrf24_isSending());
     55e:	00 00       	nop
     560:	0e 94 ff 04 	call	0x9fe	; 0x9fe <nrf24_isSending>
     564:	88 23       	and	r24, r24
     566:	e1 f7       	brne	.-8      	; 0x560 <TURN_RELAY_OFF_HANDLE+0x32>

	uint8_t messageStatus = nrf24_lastMessageStatus();
     568:	0e 94 29 05 	call	0xa52	; 0xa52 <nrf24_lastMessageStatus>
     56c:	89 83       	std	Y+1, r24	; 0x01
	if(messageStatus == NRF24_TRANSMISSON_OK) { transmitMessageSync("Successful RF transmission! \n", 29); }
     56e:	89 81       	ldd	r24, Y+1	; 0x01
     570:	88 23       	and	r24, r24
     572:	31 f4       	brne	.+12     	; 0x580 <TURN_RELAY_OFF_HANDLE+0x52>
     574:	83 e7       	ldi	r24, 0x73	; 115
     576:	91 e0       	ldi	r25, 0x01	; 1
     578:	6d e1       	ldi	r22, 0x1D	; 29
     57a:	0e 94 ef 06 	call	0xdde	; 0xdde <transmitMessageSync>
     57e:	08 c0       	rjmp	.+16     	; 0x590 <TURN_RELAY_OFF_HANDLE+0x62>
	else if(messageStatus == NRF24_MESSAGE_LOST) { transmitMessageSync("Failure on RF transmission! \n", 29); }
     580:	89 81       	ldd	r24, Y+1	; 0x01
     582:	81 30       	cpi	r24, 0x01	; 1
     584:	29 f4       	brne	.+10     	; 0x590 <TURN_RELAY_OFF_HANDLE+0x62>
     586:	81 e9       	ldi	r24, 0x91	; 145
     588:	91 e0       	ldi	r25, 0x01	; 1
     58a:	6d e1       	ldi	r22, 0x1D	; 29
     58c:	0e 94 ef 06 	call	0xdde	; 0xdde <transmitMessageSync>
	
	uint8_t retransmissionCount = nrf24_retransmissionCount();
     590:	0e 94 bd 04 	call	0x97a	; 0x97a <nrf24_retransmissionCount>
     594:	8a 83       	std	Y+2, r24	; 0x02
	char* retransmissionString;
	sprintf(retransmissionString, "Retransmission count: %d \n", retransmissionCount);
     596:	8a 81       	ldd	r24, Y+2	; 0x02
     598:	28 2f       	mov	r18, r24
     59a:	30 e0       	ldi	r19, 0x00	; 0
     59c:	00 d0       	rcall	.+0      	; 0x59e <TURN_RELAY_OFF_HANDLE+0x70>
     59e:	00 d0       	rcall	.+0      	; 0x5a0 <TURN_RELAY_OFF_HANDLE+0x72>
     5a0:	00 d0       	rcall	.+0      	; 0x5a2 <TURN_RELAY_OFF_HANDLE+0x74>
     5a2:	8d b7       	in	r24, 0x3d	; 61
     5a4:	9e b7       	in	r25, 0x3e	; 62
     5a6:	01 96       	adiw	r24, 0x01	; 1
     5a8:	4b 81       	ldd	r20, Y+3	; 0x03
     5aa:	5c 81       	ldd	r21, Y+4	; 0x04
     5ac:	fc 01       	movw	r30, r24
     5ae:	51 83       	std	Z+1, r21	; 0x01
     5b0:	40 83       	st	Z, r20
     5b2:	4f ea       	ldi	r20, 0xAF	; 175
     5b4:	51 e0       	ldi	r21, 0x01	; 1
     5b6:	fc 01       	movw	r30, r24
     5b8:	53 83       	std	Z+3, r21	; 0x03
     5ba:	42 83       	std	Z+2, r20	; 0x02
     5bc:	fc 01       	movw	r30, r24
     5be:	35 83       	std	Z+5, r19	; 0x05
     5c0:	24 83       	std	Z+4, r18	; 0x04
     5c2:	0e 94 49 0b 	call	0x1692	; 0x1692 <sprintf>
     5c6:	8d b7       	in	r24, 0x3d	; 61
     5c8:	9e b7       	in	r25, 0x3e	; 62
     5ca:	06 96       	adiw	r24, 0x06	; 6
     5cc:	0f b6       	in	r0, 0x3f	; 63
     5ce:	f8 94       	cli
     5d0:	9e bf       	out	0x3e, r25	; 62
     5d2:	0f be       	out	0x3f, r0	; 63
     5d4:	8d bf       	out	0x3d, r24	; 61
	transmitMessageSync(retransmissionString, strlen(retransmissionString));
     5d6:	8b 81       	ldd	r24, Y+3	; 0x03
     5d8:	9c 81       	ldd	r25, Y+4	; 0x04
     5da:	0e 94 40 0b 	call	0x1680	; 0x1680 <strlen>
     5de:	28 2f       	mov	r18, r24
     5e0:	8b 81       	ldd	r24, Y+3	; 0x03
     5e2:	9c 81       	ldd	r25, Y+4	; 0x04
     5e4:	62 2f       	mov	r22, r18
     5e6:	0e 94 ef 06 	call	0xdde	; 0xdde <transmitMessageSync>
}
     5ea:	0f 90       	pop	r0
     5ec:	0f 90       	pop	r0
     5ee:	0f 90       	pop	r0
     5f0:	0f 90       	pop	r0
     5f2:	cf 91       	pop	r28
     5f4:	df 91       	pop	r29
     5f6:	08 95       	ret

000005f8 <UART_TEST_HANDLER>:

void UART_TEST_HANDLER() {
     5f8:	df 93       	push	r29
     5fa:	cf 93       	push	r28
     5fc:	cd b7       	in	r28, 0x3d	; 61
     5fe:	de b7       	in	r29, 0x3e	; 62
	transmitMessageSync("Successful UART transmission!\n", 30);
     600:	8a ec       	ldi	r24, 0xCA	; 202
     602:	91 e0       	ldi	r25, 0x01	; 1
     604:	6e e1       	ldi	r22, 0x1E	; 30
     606:	0e 94 ef 06 	call	0xdde	; 0xdde <transmitMessageSync>
}
     60a:	cf 91       	pop	r28
     60c:	df 91       	pop	r29
     60e:	08 95       	ret

00000610 <BUILT_IN_LED_TEST_HANDLER>:

void BUILT_IN_LED_TEST_HANDLER(){
     610:	0f 93       	push	r16
     612:	1f 93       	push	r17
     614:	df 93       	push	r29
     616:	cf 93       	push	r28
     618:	cd b7       	in	r28, 0x3d	; 61
     61a:	de b7       	in	r29, 0x3e	; 62
     61c:	2f 97       	sbiw	r28, 0x0f	; 15
     61e:	0f b6       	in	r0, 0x3f	; 63
     620:	f8 94       	cli
     622:	de bf       	out	0x3e, r29	; 62
     624:	0f be       	out	0x3f, r0	; 63
     626:	cd bf       	out	0x3d, r28	; 61
	for (uint8_t x = 0; x < 8; x++) {
     628:	19 82       	std	Y+1, r1	; 0x01
     62a:	97 c0       	rjmp	.+302    	; 0x75a <BUILT_IN_LED_TEST_HANDLER+0x14a>
		bit_flip(PORTD, BIT(7));
     62c:	8b e2       	ldi	r24, 0x2B	; 43
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	2b e2       	ldi	r18, 0x2B	; 43
     632:	30 e0       	ldi	r19, 0x00	; 0
     634:	f9 01       	movw	r30, r18
     636:	30 81       	ld	r19, Z
     638:	20 e8       	ldi	r18, 0x80	; 128
     63a:	23 27       	eor	r18, r19
     63c:	fc 01       	movw	r30, r24
     63e:	20 83       	st	Z, r18
		bit_flip(PORTB, BIT(0));
     640:	85 e2       	ldi	r24, 0x25	; 37
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	25 e2       	ldi	r18, 0x25	; 37
     646:	30 e0       	ldi	r19, 0x00	; 0
     648:	f9 01       	movw	r30, r18
     64a:	30 81       	ld	r19, Z
     64c:	21 e0       	ldi	r18, 0x01	; 1
     64e:	23 27       	eor	r18, r19
     650:	fc 01       	movw	r30, r24
     652:	20 83       	st	Z, r18
     654:	80 e0       	ldi	r24, 0x00	; 0
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	aa e7       	ldi	r26, 0x7A	; 122
     65a:	b3 e4       	ldi	r27, 0x43	; 67
     65c:	8a 83       	std	Y+2, r24	; 0x02
     65e:	9b 83       	std	Y+3, r25	; 0x03
     660:	ac 83       	std	Y+4, r26	; 0x04
     662:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     664:	6a 81       	ldd	r22, Y+2	; 0x02
     666:	7b 81       	ldd	r23, Y+3	; 0x03
     668:	8c 81       	ldd	r24, Y+4	; 0x04
     66a:	9d 81       	ldd	r25, Y+5	; 0x05
     66c:	20 e0       	ldi	r18, 0x00	; 0
     66e:	30 e0       	ldi	r19, 0x00	; 0
     670:	4a e7       	ldi	r20, 0x7A	; 122
     672:	55 e4       	ldi	r21, 0x45	; 69
     674:	0e 94 14 09 	call	0x1228	; 0x1228 <__mulsf3>
     678:	dc 01       	movw	r26, r24
     67a:	cb 01       	movw	r24, r22
     67c:	8e 83       	std	Y+6, r24	; 0x06
     67e:	9f 83       	std	Y+7, r25	; 0x07
     680:	a8 87       	std	Y+8, r26	; 0x08
     682:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     684:	11 e0       	ldi	r17, 0x01	; 1
     686:	6e 81       	ldd	r22, Y+6	; 0x06
     688:	7f 81       	ldd	r23, Y+7	; 0x07
     68a:	88 85       	ldd	r24, Y+8	; 0x08
     68c:	99 85       	ldd	r25, Y+9	; 0x09
     68e:	20 e0       	ldi	r18, 0x00	; 0
     690:	30 e0       	ldi	r19, 0x00	; 0
     692:	40 e8       	ldi	r20, 0x80	; 128
     694:	5f e3       	ldi	r21, 0x3F	; 63
     696:	0e 94 93 08 	call	0x1126	; 0x1126 <__cmpsf2>
     69a:	88 23       	and	r24, r24
     69c:	0c f0       	brlt	.+2      	; 0x6a0 <BUILT_IN_LED_TEST_HANDLER+0x90>
     69e:	10 e0       	ldi	r17, 0x00	; 0
     6a0:	11 23       	and	r17, r17
     6a2:	29 f0       	breq	.+10     	; 0x6ae <BUILT_IN_LED_TEST_HANDLER+0x9e>
		__ticks = 1;
     6a4:	81 e0       	ldi	r24, 0x01	; 1
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	9b 87       	std	Y+11, r25	; 0x0b
     6aa:	8a 87       	std	Y+10, r24	; 0x0a
     6ac:	46 c0       	rjmp	.+140    	; 0x73a <BUILT_IN_LED_TEST_HANDLER+0x12a>
	else if (__tmp > 65535)
     6ae:	11 e0       	ldi	r17, 0x01	; 1
     6b0:	6e 81       	ldd	r22, Y+6	; 0x06
     6b2:	7f 81       	ldd	r23, Y+7	; 0x07
     6b4:	88 85       	ldd	r24, Y+8	; 0x08
     6b6:	99 85       	ldd	r25, Y+9	; 0x09
     6b8:	20 e0       	ldi	r18, 0x00	; 0
     6ba:	3f ef       	ldi	r19, 0xFF	; 255
     6bc:	4f e7       	ldi	r20, 0x7F	; 127
     6be:	57 e4       	ldi	r21, 0x47	; 71
     6c0:	0e 94 10 09 	call	0x1220	; 0x1220 <__gesf2>
     6c4:	18 16       	cp	r1, r24
     6c6:	0c f0       	brlt	.+2      	; 0x6ca <BUILT_IN_LED_TEST_HANDLER+0xba>
     6c8:	10 e0       	ldi	r17, 0x00	; 0
     6ca:	11 23       	and	r17, r17
     6cc:	61 f1       	breq	.+88     	; 0x726 <BUILT_IN_LED_TEST_HANDLER+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6ce:	6a 81       	ldd	r22, Y+2	; 0x02
     6d0:	7b 81       	ldd	r23, Y+3	; 0x03
     6d2:	8c 81       	ldd	r24, Y+4	; 0x04
     6d4:	9d 81       	ldd	r25, Y+5	; 0x05
     6d6:	20 e0       	ldi	r18, 0x00	; 0
     6d8:	30 e0       	ldi	r19, 0x00	; 0
     6da:	40 e2       	ldi	r20, 0x20	; 32
     6dc:	51 e4       	ldi	r21, 0x41	; 65
     6de:	0e 94 14 09 	call	0x1228	; 0x1228 <__mulsf3>
     6e2:	dc 01       	movw	r26, r24
     6e4:	cb 01       	movw	r24, r22
     6e6:	bc 01       	movw	r22, r24
     6e8:	cd 01       	movw	r24, r26
     6ea:	0e 94 97 08 	call	0x112e	; 0x112e <__fixunssfsi>
     6ee:	dc 01       	movw	r26, r24
     6f0:	cb 01       	movw	r24, r22
     6f2:	9b 87       	std	Y+11, r25	; 0x0b
     6f4:	8a 87       	std	Y+10, r24	; 0x0a
     6f6:	12 c0       	rjmp	.+36     	; 0x71c <BUILT_IN_LED_TEST_HANDLER+0x10c>
     6f8:	80 e9       	ldi	r24, 0x90	; 144
     6fa:	91 e0       	ldi	r25, 0x01	; 1
     6fc:	9d 87       	std	Y+13, r25	; 0x0d
     6fe:	8c 87       	std	Y+12, r24	; 0x0c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     700:	8c 85       	ldd	r24, Y+12	; 0x0c
     702:	9d 85       	ldd	r25, Y+13	; 0x0d
     704:	8c 01       	movw	r16, r24
     706:	c8 01       	movw	r24, r16
     708:	01 97       	sbiw	r24, 0x01	; 1
     70a:	f1 f7       	brne	.-4      	; 0x708 <BUILT_IN_LED_TEST_HANDLER+0xf8>
     70c:	8c 01       	movw	r16, r24
     70e:	1d 87       	std	Y+13, r17	; 0x0d
     710:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     712:	8a 85       	ldd	r24, Y+10	; 0x0a
     714:	9b 85       	ldd	r25, Y+11	; 0x0b
     716:	01 97       	sbiw	r24, 0x01	; 1
     718:	9b 87       	std	Y+11, r25	; 0x0b
     71a:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     71c:	8a 85       	ldd	r24, Y+10	; 0x0a
     71e:	9b 85       	ldd	r25, Y+11	; 0x0b
     720:	00 97       	sbiw	r24, 0x00	; 0
     722:	51 f7       	brne	.-44     	; 0x6f8 <BUILT_IN_LED_TEST_HANDLER+0xe8>
     724:	17 c0       	rjmp	.+46     	; 0x754 <BUILT_IN_LED_TEST_HANDLER+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     726:	6e 81       	ldd	r22, Y+6	; 0x06
     728:	7f 81       	ldd	r23, Y+7	; 0x07
     72a:	88 85       	ldd	r24, Y+8	; 0x08
     72c:	99 85       	ldd	r25, Y+9	; 0x09
     72e:	0e 94 97 08 	call	0x112e	; 0x112e <__fixunssfsi>
     732:	dc 01       	movw	r26, r24
     734:	cb 01       	movw	r24, r22
     736:	9b 87       	std	Y+11, r25	; 0x0b
     738:	8a 87       	std	Y+10, r24	; 0x0a
     73a:	8a 85       	ldd	r24, Y+10	; 0x0a
     73c:	9b 85       	ldd	r25, Y+11	; 0x0b
     73e:	9f 87       	std	Y+15, r25	; 0x0f
     740:	8e 87       	std	Y+14, r24	; 0x0e
     742:	8e 85       	ldd	r24, Y+14	; 0x0e
     744:	9f 85       	ldd	r25, Y+15	; 0x0f
     746:	8c 01       	movw	r16, r24
     748:	f8 01       	movw	r30, r16
     74a:	31 97       	sbiw	r30, 0x01	; 1
     74c:	f1 f7       	brne	.-4      	; 0x74a <BUILT_IN_LED_TEST_HANDLER+0x13a>
     74e:	8f 01       	movw	r16, r30
     750:	1f 87       	std	Y+15, r17	; 0x0f
     752:	0e 87       	std	Y+14, r16	; 0x0e
void UART_TEST_HANDLER() {
	transmitMessageSync("Successful UART transmission!\n", 30);
}

void BUILT_IN_LED_TEST_HANDLER(){
	for (uint8_t x = 0; x < 8; x++) {
     754:	89 81       	ldd	r24, Y+1	; 0x01
     756:	8f 5f       	subi	r24, 0xFF	; 255
     758:	89 83       	std	Y+1, r24	; 0x01
     75a:	89 81       	ldd	r24, Y+1	; 0x01
     75c:	88 30       	cpi	r24, 0x08	; 8
     75e:	08 f4       	brcc	.+2      	; 0x762 <BUILT_IN_LED_TEST_HANDLER+0x152>
     760:	65 cf       	rjmp	.-310    	; 0x62c <BUILT_IN_LED_TEST_HANDLER+0x1c>
		bit_flip(PORTD, BIT(7));
		bit_flip(PORTB, BIT(0));
		_delay_ms(250);
	}
	bit_clear(PORTD, BIT(7));
     762:	8b e2       	ldi	r24, 0x2B	; 43
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	2b e2       	ldi	r18, 0x2B	; 43
     768:	30 e0       	ldi	r19, 0x00	; 0
     76a:	f9 01       	movw	r30, r18
     76c:	20 81       	ld	r18, Z
     76e:	2f 77       	andi	r18, 0x7F	; 127
     770:	fc 01       	movw	r30, r24
     772:	20 83       	st	Z, r18
	bit_clear(PORTB, BIT(0));
     774:	85 e2       	ldi	r24, 0x25	; 37
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	25 e2       	ldi	r18, 0x25	; 37
     77a:	30 e0       	ldi	r19, 0x00	; 0
     77c:	f9 01       	movw	r30, r18
     77e:	20 81       	ld	r18, Z
     780:	2e 7f       	andi	r18, 0xFE	; 254
     782:	fc 01       	movw	r30, r24
     784:	20 83       	st	Z, r18
}
     786:	2f 96       	adiw	r28, 0x0f	; 15
     788:	0f b6       	in	r0, 0x3f	; 63
     78a:	f8 94       	cli
     78c:	de bf       	out	0x3e, r29	; 62
     78e:	0f be       	out	0x3f, r0	; 63
     790:	cd bf       	out	0x3d, r28	; 61
     792:	cf 91       	pop	r28
     794:	df 91       	pop	r29
     796:	1f 91       	pop	r17
     798:	0f 91       	pop	r16
     79a:	08 95       	ret

0000079c <main>:
void initIO();
void initRF();
char messageTest[] = "UART TESTING COMMANDS! \n";
	
int main(void)
{
     79c:	0f 93       	push	r16
     79e:	1f 93       	push	r17
     7a0:	df 93       	push	r29
     7a2:	cf 93       	push	r28
     7a4:	cd b7       	in	r28, 0x3d	; 61
     7a6:	de b7       	in	r29, 0x3e	; 62
     7a8:	2f 97       	sbiw	r28, 0x0f	; 15
     7aa:	0f b6       	in	r0, 0x3f	; 63
     7ac:	f8 94       	cli
     7ae:	de bf       	out	0x3e, r29	; 62
     7b0:	0f be       	out	0x3f, r0	; 63
     7b2:	cd bf       	out	0x3d, r28	; 61
	sei();	// Interrupts on
     7b4:	78 94       	sei
    initBluetoothUart();
     7b6:	0e 94 c3 06 	call	0xd86	; 0xd86 <initBluetoothUart>
    initIO();
     7ba:	0e 94 9e 04 	call	0x93c	; 0x93c <initIO>
	
	for (uint8_t x = 0; x < 100; x++){
     7be:	19 82       	std	Y+1, r1	; 0x01
     7c0:	aa c0       	rjmp	.+340    	; 0x916 <__stack+0x17>
		transmitMessageSync(messageTest, strlen(messageTest));
     7c2:	8f ee       	ldi	r24, 0xEF	; 239
     7c4:	91 e0       	ldi	r25, 0x01	; 1
     7c6:	0e 94 40 0b 	call	0x1680	; 0x1680 <strlen>
     7ca:	28 2f       	mov	r18, r24
     7cc:	8f ee       	ldi	r24, 0xEF	; 239
     7ce:	91 e0       	ldi	r25, 0x01	; 1
     7d0:	62 2f       	mov	r22, r18
     7d2:	0e 94 ef 06 	call	0xdde	; 0xdde <transmitMessageSync>
		if (bit_get(PINC, BIT(5))) { bit_set(PORTD, BIT(7)); } else { bit_clear(PORTD, BIT(7)); }
     7d6:	86 e2       	ldi	r24, 0x26	; 38
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	fc 01       	movw	r30, r24
     7dc:	80 81       	ld	r24, Z
     7de:	88 2f       	mov	r24, r24
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	80 72       	andi	r24, 0x20	; 32
     7e4:	90 70       	andi	r25, 0x00	; 0
     7e6:	00 97       	sbiw	r24, 0x00	; 0
     7e8:	51 f0       	breq	.+20     	; 0x7fe <main+0x62>
     7ea:	8b e2       	ldi	r24, 0x2B	; 43
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	2b e2       	ldi	r18, 0x2B	; 43
     7f0:	30 e0       	ldi	r19, 0x00	; 0
     7f2:	f9 01       	movw	r30, r18
     7f4:	20 81       	ld	r18, Z
     7f6:	20 68       	ori	r18, 0x80	; 128
     7f8:	fc 01       	movw	r30, r24
     7fa:	20 83       	st	Z, r18
     7fc:	09 c0       	rjmp	.+18     	; 0x810 <main+0x74>
     7fe:	8b e2       	ldi	r24, 0x2B	; 43
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	2b e2       	ldi	r18, 0x2B	; 43
     804:	30 e0       	ldi	r19, 0x00	; 0
     806:	f9 01       	movw	r30, r18
     808:	20 81       	ld	r18, Z
     80a:	2f 77       	andi	r18, 0x7F	; 127
     80c:	fc 01       	movw	r30, r24
     80e:	20 83       	st	Z, r18
     810:	80 e0       	ldi	r24, 0x00	; 0
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	aa e7       	ldi	r26, 0x7A	; 122
     816:	b4 e4       	ldi	r27, 0x44	; 68
     818:	8a 83       	std	Y+2, r24	; 0x02
     81a:	9b 83       	std	Y+3, r25	; 0x03
     81c:	ac 83       	std	Y+4, r26	; 0x04
     81e:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     820:	6a 81       	ldd	r22, Y+2	; 0x02
     822:	7b 81       	ldd	r23, Y+3	; 0x03
     824:	8c 81       	ldd	r24, Y+4	; 0x04
     826:	9d 81       	ldd	r25, Y+5	; 0x05
     828:	20 e0       	ldi	r18, 0x00	; 0
     82a:	30 e0       	ldi	r19, 0x00	; 0
     82c:	4a e7       	ldi	r20, 0x7A	; 122
     82e:	55 e4       	ldi	r21, 0x45	; 69
     830:	0e 94 14 09 	call	0x1228	; 0x1228 <__mulsf3>
     834:	dc 01       	movw	r26, r24
     836:	cb 01       	movw	r24, r22
     838:	8e 83       	std	Y+6, r24	; 0x06
     83a:	9f 83       	std	Y+7, r25	; 0x07
     83c:	a8 87       	std	Y+8, r26	; 0x08
     83e:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     840:	11 e0       	ldi	r17, 0x01	; 1
     842:	6e 81       	ldd	r22, Y+6	; 0x06
     844:	7f 81       	ldd	r23, Y+7	; 0x07
     846:	88 85       	ldd	r24, Y+8	; 0x08
     848:	99 85       	ldd	r25, Y+9	; 0x09
     84a:	20 e0       	ldi	r18, 0x00	; 0
     84c:	30 e0       	ldi	r19, 0x00	; 0
     84e:	40 e8       	ldi	r20, 0x80	; 128
     850:	5f e3       	ldi	r21, 0x3F	; 63
     852:	0e 94 93 08 	call	0x1126	; 0x1126 <__cmpsf2>
     856:	88 23       	and	r24, r24
     858:	0c f0       	brlt	.+2      	; 0x85c <main+0xc0>
     85a:	10 e0       	ldi	r17, 0x00	; 0
     85c:	11 23       	and	r17, r17
     85e:	29 f0       	breq	.+10     	; 0x86a <main+0xce>
		__ticks = 1;
     860:	81 e0       	ldi	r24, 0x01	; 1
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	9b 87       	std	Y+11, r25	; 0x0b
     866:	8a 87       	std	Y+10, r24	; 0x0a
     868:	46 c0       	rjmp	.+140    	; 0x8f6 <main+0x15a>
	else if (__tmp > 65535)
     86a:	11 e0       	ldi	r17, 0x01	; 1
     86c:	6e 81       	ldd	r22, Y+6	; 0x06
     86e:	7f 81       	ldd	r23, Y+7	; 0x07
     870:	88 85       	ldd	r24, Y+8	; 0x08
     872:	99 85       	ldd	r25, Y+9	; 0x09
     874:	20 e0       	ldi	r18, 0x00	; 0
     876:	3f ef       	ldi	r19, 0xFF	; 255
     878:	4f e7       	ldi	r20, 0x7F	; 127
     87a:	57 e4       	ldi	r21, 0x47	; 71
     87c:	0e 94 10 09 	call	0x1220	; 0x1220 <__gesf2>
     880:	18 16       	cp	r1, r24
     882:	0c f0       	brlt	.+2      	; 0x886 <main+0xea>
     884:	10 e0       	ldi	r17, 0x00	; 0
     886:	11 23       	and	r17, r17
     888:	61 f1       	breq	.+88     	; 0x8e2 <main+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     88a:	6a 81       	ldd	r22, Y+2	; 0x02
     88c:	7b 81       	ldd	r23, Y+3	; 0x03
     88e:	8c 81       	ldd	r24, Y+4	; 0x04
     890:	9d 81       	ldd	r25, Y+5	; 0x05
     892:	20 e0       	ldi	r18, 0x00	; 0
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	40 e2       	ldi	r20, 0x20	; 32
     898:	51 e4       	ldi	r21, 0x41	; 65
     89a:	0e 94 14 09 	call	0x1228	; 0x1228 <__mulsf3>
     89e:	dc 01       	movw	r26, r24
     8a0:	cb 01       	movw	r24, r22
     8a2:	bc 01       	movw	r22, r24
     8a4:	cd 01       	movw	r24, r26
     8a6:	0e 94 97 08 	call	0x112e	; 0x112e <__fixunssfsi>
     8aa:	dc 01       	movw	r26, r24
     8ac:	cb 01       	movw	r24, r22
     8ae:	9b 87       	std	Y+11, r25	; 0x0b
     8b0:	8a 87       	std	Y+10, r24	; 0x0a
     8b2:	12 c0       	rjmp	.+36     	; 0x8d8 <main+0x13c>
     8b4:	80 e9       	ldi	r24, 0x90	; 144
     8b6:	91 e0       	ldi	r25, 0x01	; 1
     8b8:	9d 87       	std	Y+13, r25	; 0x0d
     8ba:	8c 87       	std	Y+12, r24	; 0x0c
     8bc:	8c 85       	ldd	r24, Y+12	; 0x0c
     8be:	9d 85       	ldd	r25, Y+13	; 0x0d
     8c0:	8c 01       	movw	r16, r24
     8c2:	c8 01       	movw	r24, r16
     8c4:	01 97       	sbiw	r24, 0x01	; 1
     8c6:	f1 f7       	brne	.-4      	; 0x8c4 <main+0x128>
     8c8:	8c 01       	movw	r16, r24
     8ca:	1d 87       	std	Y+13, r17	; 0x0d
     8cc:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8ce:	8a 85       	ldd	r24, Y+10	; 0x0a
     8d0:	9b 85       	ldd	r25, Y+11	; 0x0b
     8d2:	01 97       	sbiw	r24, 0x01	; 1
     8d4:	9b 87       	std	Y+11, r25	; 0x0b
     8d6:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8d8:	8a 85       	ldd	r24, Y+10	; 0x0a
     8da:	9b 85       	ldd	r25, Y+11	; 0x0b
     8dc:	00 97       	sbiw	r24, 0x00	; 0
     8de:	51 f7       	brne	.-44     	; 0x8b4 <main+0x118>
     8e0:	17 c0       	rjmp	.+46     	; 0x910 <__stack+0x11>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8e2:	6e 81       	ldd	r22, Y+6	; 0x06
     8e4:	7f 81       	ldd	r23, Y+7	; 0x07
     8e6:	88 85       	ldd	r24, Y+8	; 0x08
     8e8:	99 85       	ldd	r25, Y+9	; 0x09
     8ea:	0e 94 97 08 	call	0x112e	; 0x112e <__fixunssfsi>
     8ee:	dc 01       	movw	r26, r24
     8f0:	cb 01       	movw	r24, r22
     8f2:	9b 87       	std	Y+11, r25	; 0x0b
     8f4:	8a 87       	std	Y+10, r24	; 0x0a
     8f6:	8a 85       	ldd	r24, Y+10	; 0x0a
     8f8:	9b 85       	ldd	r25, Y+11	; 0x0b
     8fa:	9f 87       	std	Y+15, r25	; 0x0f
     8fc:	8e 87       	std	Y+14, r24	; 0x0e
     8fe:	8e 85       	ldd	r24, Y+14	; 0x0e
     900:	9f 85       	ldd	r25, Y+15	; 0x0f
     902:	8c 01       	movw	r16, r24
     904:	f8 01       	movw	r30, r16
     906:	31 97       	sbiw	r30, 0x01	; 1
     908:	f1 f7       	brne	.-4      	; 0x906 <__stack+0x7>
     90a:	8f 01       	movw	r16, r30
     90c:	1f 87       	std	Y+15, r17	; 0x0f
     90e:	0e 87       	std	Y+14, r16	; 0x0e
{
	sei();	// Interrupts on
    initBluetoothUart();
    initIO();
	
	for (uint8_t x = 0; x < 100; x++){
     910:	89 81       	ldd	r24, Y+1	; 0x01
     912:	8f 5f       	subi	r24, 0xFF	; 255
     914:	89 83       	std	Y+1, r24	; 0x01
     916:	89 81       	ldd	r24, Y+1	; 0x01
     918:	84 36       	cpi	r24, 0x64	; 100
     91a:	08 f4       	brcc	.+2      	; 0x91e <__stack+0x1f>
     91c:	52 cf       	rjmp	.-348    	; 0x7c2 <main+0x26>
		if (bit_get(PINC, BIT(5))) { bit_set(PORTD, BIT(7)); } else { bit_clear(PORTD, BIT(7)); }
		_delay_ms(1000);
	}
	
	//initRF();
	setupReceiveMode();
     91e:	0e 94 73 07 	call	0xee6	; 0xee6 <setupReceiveMode>
	
	
	
    while (1) 
    {
		while(!commandAvailable);
     922:	00 00       	nop
     924:	90 91 3e 02 	lds	r25, 0x023E
     928:	81 e0       	ldi	r24, 0x01	; 1
     92a:	89 27       	eor	r24, r25
     92c:	88 23       	and	r24, r24
     92e:	d1 f7       	brne	.-12     	; 0x924 <__stack+0x25>
		processReceivedLine();
     930:	0e 94 a8 07 	call	0xf50	; 0xf50 <processReceivedLine>
		setupReceiveMode();
     934:	0e 94 73 07 	call	0xee6	; 0xee6 <setupReceiveMode>
    }
     938:	00 00       	nop
	
	
	
    while (1) 
    {
		while(!commandAvailable);
     93a:	f4 cf       	rjmp	.-24     	; 0x924 <__stack+0x25>

0000093c <initIO>:
		setupReceiveMode();
    }
}


void initIO(){
     93c:	df 93       	push	r29
     93e:	cf 93       	push	r28
     940:	cd b7       	in	r28, 0x3d	; 61
     942:	de b7       	in	r29, 0x3e	; 62
			CSN	 : PC1						|	OUTPUT
			MISO : PD0 (MSPIM MISO ATMEGA)	|	INPUT
			MOSI : PD1 (MSPIM MOSI ATMEGA)	|	OUTPUT
			SCK	 : PD4 (MSPIM XCK)			|	OUTPUT
	*/ 
	DDRD = 0b11111110;
     944:	8a e2       	ldi	r24, 0x2A	; 42
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	2e ef       	ldi	r18, 0xFE	; 254
     94a:	fc 01       	movw	r30, r24
     94c:	20 83       	st	Z, r18
	DDRB = 0b00101001;
     94e:	84 e2       	ldi	r24, 0x24	; 36
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	29 e2       	ldi	r18, 0x29	; 41
     954:	fc 01       	movw	r30, r24
     956:	20 83       	st	Z, r18
	DDRC = 0b11011111;
     958:	87 e2       	ldi	r24, 0x27	; 39
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	2f ed       	ldi	r18, 0xDF	; 223
     95e:	fc 01       	movw	r30, r24
     960:	20 83       	st	Z, r18
	bit_clear(PORTD, BIT(2));
     962:	8b e2       	ldi	r24, 0x2B	; 43
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	2b e2       	ldi	r18, 0x2B	; 43
     968:	30 e0       	ldi	r19, 0x00	; 0
     96a:	f9 01       	movw	r30, r18
     96c:	20 81       	ld	r18, Z
     96e:	2b 7f       	andi	r18, 0xFB	; 251
     970:	fc 01       	movw	r30, r24
     972:	20 83       	st	Z, r18
}
     974:	cf 91       	pop	r28
     976:	df 91       	pop	r29
     978:	08 95       	ret

0000097a <nrf24_retransmissionCount>:

/* Returns the number of retransmissions occured for the last message */
uint8_t nrf24_retransmissionCount()
{
     97a:	df 93       	push	r29
     97c:	cf 93       	push	r28
     97e:	0f 92       	push	r0
     980:	cd b7       	in	r28, 0x3d	; 61
     982:	de b7       	in	r29, 0x3e	; 62
    uint8_t rv;
    nrf24_readRegister(OBSERVE_TX,&rv,1);
     984:	88 e0       	ldi	r24, 0x08	; 8
     986:	9e 01       	movw	r18, r28
     988:	2f 5f       	subi	r18, 0xFF	; 255
     98a:	3f 4f       	sbci	r19, 0xFF	; 255
     98c:	b9 01       	movw	r22, r18
     98e:	41 e0       	ldi	r20, 0x01	; 1
     990:	0e 94 14 06 	call	0xc28	; 0xc28 <nrf24_readRegister>
    rv = rv & 0x0F;
     994:	89 81       	ldd	r24, Y+1	; 0x01
     996:	8f 70       	andi	r24, 0x0F	; 15
     998:	89 83       	std	Y+1, r24	; 0x01
    return rv;
     99a:	89 81       	ldd	r24, Y+1	; 0x01
}
     99c:	0f 90       	pop	r0
     99e:	cf 91       	pop	r28
     9a0:	df 91       	pop	r29
     9a2:	08 95       	ret

000009a4 <nrf24_send>:

// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
void nrf24_send(uint8_t* value) 
{    
     9a4:	df 93       	push	r29
     9a6:	cf 93       	push	r28
     9a8:	00 d0       	rcall	.+0      	; 0x9aa <nrf24_send+0x6>
     9aa:	cd b7       	in	r28, 0x3d	; 61
     9ac:	de b7       	in	r29, 0x3e	; 62
     9ae:	9a 83       	std	Y+2, r25	; 0x02
     9b0:	89 83       	std	Y+1, r24	; 0x01
    /* Go to Standby-I first */
    nrf24_ce_digitalWrite(LOW);
     9b2:	80 e0       	ldi	r24, 0x00	; 0
     9b4:	0e 94 37 06 	call	0xc6e	; 0xc6e <nrf24_ce_digitalWrite>
     
    /* Set to transmitter mode , Power up if needed */
    nrf24_powerUpTx();
     9b8:	0e 94 48 05 	call	0xa90	; 0xa90 <nrf24_powerUpTx>

    /* Do we really need to flush TX fifo each time ? */
    #if 1
        /* Pull down chip select */
        nrf24_csn_digitalWrite(LOW);           
     9bc:	80 e0       	ldi	r24, 0x00	; 0
     9be:	0e 94 57 06 	call	0xcae	; 0xcae <nrf24_csn_digitalWrite>

        /* Write cmd to flush transmit FIFO */
        spi_transfer(FLUSH_TX);     
     9c2:	81 ee       	ldi	r24, 0xE1	; 225
     9c4:	0e 94 57 05 	call	0xaae	; 0xaae <spi_transfer>

        /* Pull up chip select */
        nrf24_csn_digitalWrite(HIGH);                    
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	0e 94 57 06 	call	0xcae	; 0xcae <nrf24_csn_digitalWrite>
    #endif 

    /* Pull down chip select */
    nrf24_csn_digitalWrite(LOW);
     9ce:	80 e0       	ldi	r24, 0x00	; 0
     9d0:	0e 94 57 06 	call	0xcae	; 0xcae <nrf24_csn_digitalWrite>

    /* Write cmd to write payload */
    spi_transfer(W_TX_PAYLOAD);
     9d4:	80 ea       	ldi	r24, 0xA0	; 160
     9d6:	0e 94 57 05 	call	0xaae	; 0xaae <spi_transfer>

    /* Write payload */
    nrf24_transmitSync(value,payload_len);   
     9da:	20 91 39 02 	lds	r18, 0x0239
     9de:	89 81       	ldd	r24, Y+1	; 0x01
     9e0:	9a 81       	ldd	r25, Y+2	; 0x02
     9e2:	62 2f       	mov	r22, r18
     9e4:	0e 94 d6 05 	call	0xbac	; 0xbac <nrf24_transmitSync>

    /* Pull up chip select */
    nrf24_csn_digitalWrite(HIGH);
     9e8:	81 e0       	ldi	r24, 0x01	; 1
     9ea:	0e 94 57 06 	call	0xcae	; 0xcae <nrf24_csn_digitalWrite>

    /* Start the transmission */
    nrf24_ce_digitalWrite(HIGH);    
     9ee:	81 e0       	ldi	r24, 0x01	; 1
     9f0:	0e 94 37 06 	call	0xc6e	; 0xc6e <nrf24_ce_digitalWrite>
}
     9f4:	0f 90       	pop	r0
     9f6:	0f 90       	pop	r0
     9f8:	cf 91       	pop	r28
     9fa:	df 91       	pop	r29
     9fc:	08 95       	ret

000009fe <nrf24_isSending>:

uint8_t nrf24_isSending()
{
     9fe:	df 93       	push	r29
     a00:	cf 93       	push	r28
     a02:	0f 92       	push	r0
     a04:	cd b7       	in	r28, 0x3d	; 61
     a06:	de b7       	in	r29, 0x3e	; 62
    uint8_t status;

    /* read the current status */
    status = nrf24_getStatus();
     a08:	0e 94 15 05 	call	0xa2a	; 0xa2a <nrf24_getStatus>
     a0c:	89 83       	std	Y+1, r24	; 0x01
                
    /* if sending successful (TX_DS) or max retries exceded (MAX_RT). */
    if((status & ((1 << TX_DS)  | (1 << MAX_RT))))
     a0e:	89 81       	ldd	r24, Y+1	; 0x01
     a10:	88 2f       	mov	r24, r24
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	80 73       	andi	r24, 0x30	; 48
     a16:	90 70       	andi	r25, 0x00	; 0
     a18:	00 97       	sbiw	r24, 0x00	; 0
     a1a:	11 f0       	breq	.+4      	; 0xa20 <nrf24_isSending+0x22>
    {        
        return 0; /* false */
     a1c:	80 e0       	ldi	r24, 0x00	; 0
     a1e:	01 c0       	rjmp	.+2      	; 0xa22 <nrf24_isSending+0x24>
    }

    return 1; /* true */
     a20:	81 e0       	ldi	r24, 0x01	; 1

}
     a22:	0f 90       	pop	r0
     a24:	cf 91       	pop	r28
     a26:	df 91       	pop	r29
     a28:	08 95       	ret

00000a2a <nrf24_getStatus>:

uint8_t nrf24_getStatus()
{
     a2a:	df 93       	push	r29
     a2c:	cf 93       	push	r28
     a2e:	0f 92       	push	r0
     a30:	cd b7       	in	r28, 0x3d	; 61
     a32:	de b7       	in	r29, 0x3e	; 62
    uint8_t rv;
    nrf24_csn_digitalWrite(LOW);
     a34:	80 e0       	ldi	r24, 0x00	; 0
     a36:	0e 94 57 06 	call	0xcae	; 0xcae <nrf24_csn_digitalWrite>
    rv = spi_transfer(NOP);
     a3a:	8f ef       	ldi	r24, 0xFF	; 255
     a3c:	0e 94 57 05 	call	0xaae	; 0xaae <spi_transfer>
     a40:	89 83       	std	Y+1, r24	; 0x01
    nrf24_csn_digitalWrite(HIGH);
     a42:	81 e0       	ldi	r24, 0x01	; 1
     a44:	0e 94 57 06 	call	0xcae	; 0xcae <nrf24_csn_digitalWrite>
    return rv;
     a48:	89 81       	ldd	r24, Y+1	; 0x01
}
     a4a:	0f 90       	pop	r0
     a4c:	cf 91       	pop	r28
     a4e:	df 91       	pop	r29
     a50:	08 95       	ret

00000a52 <nrf24_lastMessageStatus>:

uint8_t nrf24_lastMessageStatus()
{
     a52:	df 93       	push	r29
     a54:	cf 93       	push	r28
     a56:	0f 92       	push	r0
     a58:	cd b7       	in	r28, 0x3d	; 61
     a5a:	de b7       	in	r29, 0x3e	; 62
    uint8_t rv;

    rv = nrf24_getStatus();
     a5c:	0e 94 15 05 	call	0xa2a	; 0xa2a <nrf24_getStatus>
     a60:	89 83       	std	Y+1, r24	; 0x01

    /* Transmission went OK */
    if((rv & ((1 << TX_DS))))
     a62:	89 81       	ldd	r24, Y+1	; 0x01
     a64:	88 2f       	mov	r24, r24
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	80 72       	andi	r24, 0x20	; 32
     a6a:	90 70       	andi	r25, 0x00	; 0
     a6c:	00 97       	sbiw	r24, 0x00	; 0
     a6e:	11 f0       	breq	.+4      	; 0xa74 <nrf24_lastMessageStatus+0x22>
    {
        return NRF24_TRANSMISSON_OK;
     a70:	80 e0       	ldi	r24, 0x00	; 0
     a72:	0a c0       	rjmp	.+20     	; 0xa88 <nrf24_lastMessageStatus+0x36>
    }
    /* Maximum retransmission count is reached */
    /* Last message probably went missing ... */
    else if((rv & ((1 << MAX_RT))))
     a74:	89 81       	ldd	r24, Y+1	; 0x01
     a76:	88 2f       	mov	r24, r24
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	80 71       	andi	r24, 0x10	; 16
     a7c:	90 70       	andi	r25, 0x00	; 0
     a7e:	00 97       	sbiw	r24, 0x00	; 0
     a80:	11 f0       	breq	.+4      	; 0xa86 <nrf24_lastMessageStatus+0x34>
    {
        return NRF24_MESSAGE_LOST;
     a82:	81 e0       	ldi	r24, 0x01	; 1
     a84:	01 c0       	rjmp	.+2      	; 0xa88 <nrf24_lastMessageStatus+0x36>
    }  
    /* Probably still sending ... */
    else
    {
        return 0xFF;
     a86:	8f ef       	ldi	r24, 0xFF	; 255
    }
}
     a88:	0f 90       	pop	r0
     a8a:	cf 91       	pop	r28
     a8c:	df 91       	pop	r29
     a8e:	08 95       	ret

00000a90 <nrf24_powerUpTx>:
    nrf24_configRegister(CONFIG,nrf24_CONFIG|((1<<PWR_UP)|(1<<PRIM_RX)));    
    nrf24_ce_digitalWrite(HIGH);
}

void nrf24_powerUpTx()
{
     a90:	df 93       	push	r29
     a92:	cf 93       	push	r28
     a94:	cd b7       	in	r28, 0x3d	; 61
     a96:	de b7       	in	r29, 0x3e	; 62
    nrf24_configRegister(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT)); 
     a98:	87 e0       	ldi	r24, 0x07	; 7
     a9a:	60 e7       	ldi	r22, 0x70	; 112
     a9c:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <nrf24_configRegister>

    nrf24_configRegister(CONFIG,nrf24_CONFIG|((1<<PWR_UP)|(0<<PRIM_RX)));
     aa0:	80 e0       	ldi	r24, 0x00	; 0
     aa2:	6a e0       	ldi	r22, 0x0A	; 10
     aa4:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <nrf24_configRegister>
}
     aa8:	cf 91       	pop	r28
     aaa:	df 91       	pop	r29
     aac:	08 95       	ret

00000aae <spi_transfer>:
    nrf24_ce_digitalWrite(LOW);
    nrf24_configRegister(CONFIG,nrf24_CONFIG);
}

uint8_t spi_transfer(uint8_t tx)
{
     aae:	df 93       	push	r29
     ab0:	cf 93       	push	r28
     ab2:	00 d0       	rcall	.+0      	; 0xab4 <spi_transfer+0x6>
     ab4:	0f 92       	push	r0
     ab6:	cd b7       	in	r28, 0x3d	; 61
     ab8:	de b7       	in	r29, 0x3e	; 62
     aba:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t i = 0;
     abc:	19 82       	std	Y+1, r1	; 0x01
    uint8_t rx = 0;
     abe:	1a 82       	std	Y+2, r1	; 0x02

    nrf24_sck_digitalWrite(LOW);
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	0e 94 77 06 	call	0xcee	; 0xcee <nrf24_sck_digitalWrite>

    for(i=0;i<8;i++)
     ac6:	19 82       	std	Y+1, r1	; 0x01
     ac8:	30 c0       	rjmp	.+96     	; 0xb2a <spi_transfer+0x7c>
    {

	    if(tx & (1<<(7-i)))
     aca:	8b 81       	ldd	r24, Y+3	; 0x03
     acc:	88 2f       	mov	r24, r24
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	29 81       	ldd	r18, Y+1	; 0x01
     ad2:	22 2f       	mov	r18, r18
     ad4:	30 e0       	ldi	r19, 0x00	; 0
     ad6:	47 e0       	ldi	r20, 0x07	; 7
     ad8:	50 e0       	ldi	r21, 0x00	; 0
     ada:	ba 01       	movw	r22, r20
     adc:	62 1b       	sub	r22, r18
     ade:	73 0b       	sbc	r23, r19
     ae0:	9b 01       	movw	r18, r22
     ae2:	02 2e       	mov	r0, r18
     ae4:	02 c0       	rjmp	.+4      	; 0xaea <spi_transfer+0x3c>
     ae6:	95 95       	asr	r25
     ae8:	87 95       	ror	r24
     aea:	0a 94       	dec	r0
     aec:	e2 f7       	brpl	.-8      	; 0xae6 <spi_transfer+0x38>
     aee:	81 70       	andi	r24, 0x01	; 1
     af0:	90 70       	andi	r25, 0x00	; 0
     af2:	88 23       	and	r24, r24
     af4:	21 f0       	breq	.+8      	; 0xafe <spi_transfer+0x50>
	    {
		    nrf24_mosi_digitalWrite(HIGH);
     af6:	81 e0       	ldi	r24, 0x01	; 1
     af8:	0e 94 97 06 	call	0xd2e	; 0xd2e <nrf24_mosi_digitalWrite>
     afc:	03 c0       	rjmp	.+6      	; 0xb04 <spi_transfer+0x56>
	    }
	    else
	    {
		    nrf24_mosi_digitalWrite(LOW);
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	0e 94 97 06 	call	0xd2e	; 0xd2e <nrf24_mosi_digitalWrite>
	    }

	    nrf24_sck_digitalWrite(HIGH);
     b04:	81 e0       	ldi	r24, 0x01	; 1
     b06:	0e 94 77 06 	call	0xcee	; 0xcee <nrf24_sck_digitalWrite>

	    rx = rx << 1;
     b0a:	8a 81       	ldd	r24, Y+2	; 0x02
     b0c:	88 0f       	add	r24, r24
     b0e:	8a 83       	std	Y+2, r24	; 0x02
	    if(nrf24_miso_digitalRead())
     b10:	0e 94 b7 06 	call	0xd6e	; 0xd6e <nrf24_miso_digitalRead>
     b14:	88 23       	and	r24, r24
     b16:	19 f0       	breq	.+6      	; 0xb1e <spi_transfer+0x70>
	    {
		    rx |= 0x01;
     b18:	8a 81       	ldd	r24, Y+2	; 0x02
     b1a:	81 60       	ori	r24, 0x01	; 1
     b1c:	8a 83       	std	Y+2, r24	; 0x02
	    }

	    nrf24_sck_digitalWrite(LOW);
     b1e:	80 e0       	ldi	r24, 0x00	; 0
     b20:	0e 94 77 06 	call	0xcee	; 0xcee <nrf24_sck_digitalWrite>
    uint8_t i = 0;
    uint8_t rx = 0;

    nrf24_sck_digitalWrite(LOW);

    for(i=0;i<8;i++)
     b24:	89 81       	ldd	r24, Y+1	; 0x01
     b26:	8f 5f       	subi	r24, 0xFF	; 255
     b28:	89 83       	std	Y+1, r24	; 0x01
     b2a:	89 81       	ldd	r24, Y+1	; 0x01
     b2c:	88 30       	cpi	r24, 0x08	; 8
     b2e:	68 f2       	brcs	.-102    	; 0xaca <spi_transfer+0x1c>

	    nrf24_sck_digitalWrite(LOW);

    }

    return rx;
     b30:	8a 81       	ldd	r24, Y+2	; 0x02
}
     b32:	0f 90       	pop	r0
     b34:	0f 90       	pop	r0
     b36:	0f 90       	pop	r0
     b38:	cf 91       	pop	r28
     b3a:	df 91       	pop	r29
     b3c:	08 95       	ret

00000b3e <nrf24_transferSync>:

/* send and receive multiple bytes over SPI */
void nrf24_transferSync(uint8_t* dataout,uint8_t* datain,uint8_t len)
{
     b3e:	0f 93       	push	r16
     b40:	1f 93       	push	r17
     b42:	df 93       	push	r29
     b44:	cf 93       	push	r28
     b46:	00 d0       	rcall	.+0      	; 0xb48 <nrf24_transferSync+0xa>
     b48:	00 d0       	rcall	.+0      	; 0xb4a <nrf24_transferSync+0xc>
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <nrf24_transferSync+0xe>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	9b 83       	std	Y+3, r25	; 0x03
     b52:	8a 83       	std	Y+2, r24	; 0x02
     b54:	7d 83       	std	Y+5, r23	; 0x05
     b56:	6c 83       	std	Y+4, r22	; 0x04
     b58:	4e 83       	std	Y+6, r20	; 0x06
    uint8_t i;

    for(i=0;i<len;i++)
     b5a:	19 82       	std	Y+1, r1	; 0x01
     b5c:	18 c0       	rjmp	.+48     	; 0xb8e <nrf24_transferSync+0x50>
    {
        datain[i] = spi_transfer(dataout[i]);
     b5e:	89 81       	ldd	r24, Y+1	; 0x01
     b60:	88 2f       	mov	r24, r24
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	2c 81       	ldd	r18, Y+4	; 0x04
     b66:	3d 81       	ldd	r19, Y+5	; 0x05
     b68:	89 01       	movw	r16, r18
     b6a:	08 0f       	add	r16, r24
     b6c:	19 1f       	adc	r17, r25
     b6e:	89 81       	ldd	r24, Y+1	; 0x01
     b70:	88 2f       	mov	r24, r24
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	2a 81       	ldd	r18, Y+2	; 0x02
     b76:	3b 81       	ldd	r19, Y+3	; 0x03
     b78:	82 0f       	add	r24, r18
     b7a:	93 1f       	adc	r25, r19
     b7c:	fc 01       	movw	r30, r24
     b7e:	80 81       	ld	r24, Z
     b80:	0e 94 57 05 	call	0xaae	; 0xaae <spi_transfer>
     b84:	f8 01       	movw	r30, r16
     b86:	80 83       	st	Z, r24
/* send and receive multiple bytes over SPI */
void nrf24_transferSync(uint8_t* dataout,uint8_t* datain,uint8_t len)
{
    uint8_t i;

    for(i=0;i<len;i++)
     b88:	89 81       	ldd	r24, Y+1	; 0x01
     b8a:	8f 5f       	subi	r24, 0xFF	; 255
     b8c:	89 83       	std	Y+1, r24	; 0x01
     b8e:	99 81       	ldd	r25, Y+1	; 0x01
     b90:	8e 81       	ldd	r24, Y+6	; 0x06
     b92:	98 17       	cp	r25, r24
     b94:	20 f3       	brcs	.-56     	; 0xb5e <nrf24_transferSync+0x20>
    {
        datain[i] = spi_transfer(dataout[i]);
    }

}
     b96:	26 96       	adiw	r28, 0x06	; 6
     b98:	0f b6       	in	r0, 0x3f	; 63
     b9a:	f8 94       	cli
     b9c:	de bf       	out	0x3e, r29	; 62
     b9e:	0f be       	out	0x3f, r0	; 63
     ba0:	cd bf       	out	0x3d, r28	; 61
     ba2:	cf 91       	pop	r28
     ba4:	df 91       	pop	r29
     ba6:	1f 91       	pop	r17
     ba8:	0f 91       	pop	r16
     baa:	08 95       	ret

00000bac <nrf24_transmitSync>:

/* send multiple bytes over SPI */
void nrf24_transmitSync(uint8_t* dataout,uint8_t len)
{
     bac:	df 93       	push	r29
     bae:	cf 93       	push	r28
     bb0:	00 d0       	rcall	.+0      	; 0xbb2 <nrf24_transmitSync+0x6>
     bb2:	00 d0       	rcall	.+0      	; 0xbb4 <nrf24_transmitSync+0x8>
     bb4:	cd b7       	in	r28, 0x3d	; 61
     bb6:	de b7       	in	r29, 0x3e	; 62
     bb8:	9b 83       	std	Y+3, r25	; 0x03
     bba:	8a 83       	std	Y+2, r24	; 0x02
     bbc:	6c 83       	std	Y+4, r22	; 0x04
    uint8_t i;
    
    for(i=0;i<len;i++)
     bbe:	19 82       	std	Y+1, r1	; 0x01
     bc0:	0e c0       	rjmp	.+28     	; 0xbde <nrf24_transmitSync+0x32>
    {
        spi_transfer(dataout[i]);
     bc2:	89 81       	ldd	r24, Y+1	; 0x01
     bc4:	88 2f       	mov	r24, r24
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	2a 81       	ldd	r18, Y+2	; 0x02
     bca:	3b 81       	ldd	r19, Y+3	; 0x03
     bcc:	82 0f       	add	r24, r18
     bce:	93 1f       	adc	r25, r19
     bd0:	fc 01       	movw	r30, r24
     bd2:	80 81       	ld	r24, Z
     bd4:	0e 94 57 05 	call	0xaae	; 0xaae <spi_transfer>
/* send multiple bytes over SPI */
void nrf24_transmitSync(uint8_t* dataout,uint8_t len)
{
    uint8_t i;
    
    for(i=0;i<len;i++)
     bd8:	89 81       	ldd	r24, Y+1	; 0x01
     bda:	8f 5f       	subi	r24, 0xFF	; 255
     bdc:	89 83       	std	Y+1, r24	; 0x01
     bde:	99 81       	ldd	r25, Y+1	; 0x01
     be0:	8c 81       	ldd	r24, Y+4	; 0x04
     be2:	98 17       	cp	r25, r24
     be4:	70 f3       	brcs	.-36     	; 0xbc2 <nrf24_transmitSync+0x16>
    {
        spi_transfer(dataout[i]);
    }

}
     be6:	0f 90       	pop	r0
     be8:	0f 90       	pop	r0
     bea:	0f 90       	pop	r0
     bec:	0f 90       	pop	r0
     bee:	cf 91       	pop	r28
     bf0:	df 91       	pop	r29
     bf2:	08 95       	ret

00000bf4 <nrf24_configRegister>:

/* Clocks only one byte into the given nrf24 register */
void nrf24_configRegister(uint8_t reg, uint8_t value)
{
     bf4:	df 93       	push	r29
     bf6:	cf 93       	push	r28
     bf8:	00 d0       	rcall	.+0      	; 0xbfa <nrf24_configRegister+0x6>
     bfa:	cd b7       	in	r28, 0x3d	; 61
     bfc:	de b7       	in	r29, 0x3e	; 62
     bfe:	89 83       	std	Y+1, r24	; 0x01
     c00:	6a 83       	std	Y+2, r22	; 0x02
    nrf24_csn_digitalWrite(LOW);
     c02:	80 e0       	ldi	r24, 0x00	; 0
     c04:	0e 94 57 06 	call	0xcae	; 0xcae <nrf24_csn_digitalWrite>
    spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
     c08:	89 81       	ldd	r24, Y+1	; 0x01
     c0a:	8f 71       	andi	r24, 0x1F	; 31
     c0c:	80 62       	ori	r24, 0x20	; 32
     c0e:	0e 94 57 05 	call	0xaae	; 0xaae <spi_transfer>
    spi_transfer(value);
     c12:	8a 81       	ldd	r24, Y+2	; 0x02
     c14:	0e 94 57 05 	call	0xaae	; 0xaae <spi_transfer>
    nrf24_csn_digitalWrite(HIGH);
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	0e 94 57 06 	call	0xcae	; 0xcae <nrf24_csn_digitalWrite>
}
     c1e:	0f 90       	pop	r0
     c20:	0f 90       	pop	r0
     c22:	cf 91       	pop	r28
     c24:	df 91       	pop	r29
     c26:	08 95       	ret

00000c28 <nrf24_readRegister>:

/* Read single register from nrf24 */
void nrf24_readRegister(uint8_t reg, uint8_t* value, uint8_t len)
{
     c28:	df 93       	push	r29
     c2a:	cf 93       	push	r28
     c2c:	00 d0       	rcall	.+0      	; 0xc2e <nrf24_readRegister+0x6>
     c2e:	00 d0       	rcall	.+0      	; 0xc30 <nrf24_readRegister+0x8>
     c30:	cd b7       	in	r28, 0x3d	; 61
     c32:	de b7       	in	r29, 0x3e	; 62
     c34:	89 83       	std	Y+1, r24	; 0x01
     c36:	7b 83       	std	Y+3, r23	; 0x03
     c38:	6a 83       	std	Y+2, r22	; 0x02
     c3a:	4c 83       	std	Y+4, r20	; 0x04
    nrf24_csn_digitalWrite(LOW);
     c3c:	80 e0       	ldi	r24, 0x00	; 0
     c3e:	0e 94 57 06 	call	0xcae	; 0xcae <nrf24_csn_digitalWrite>
    spi_transfer(R_REGISTER | (REGISTER_MASK & reg));
     c42:	89 81       	ldd	r24, Y+1	; 0x01
     c44:	8f 71       	andi	r24, 0x1F	; 31
     c46:	0e 94 57 05 	call	0xaae	; 0xaae <spi_transfer>
    nrf24_transferSync(value,value,len);
     c4a:	8a 81       	ldd	r24, Y+2	; 0x02
     c4c:	9b 81       	ldd	r25, Y+3	; 0x03
     c4e:	2a 81       	ldd	r18, Y+2	; 0x02
     c50:	3b 81       	ldd	r19, Y+3	; 0x03
     c52:	b9 01       	movw	r22, r18
     c54:	4c 81       	ldd	r20, Y+4	; 0x04
     c56:	0e 94 9f 05 	call	0xb3e	; 0xb3e <nrf24_transferSync>
    nrf24_csn_digitalWrite(HIGH);
     c5a:	81 e0       	ldi	r24, 0x01	; 1
     c5c:	0e 94 57 06 	call	0xcae	; 0xcae <nrf24_csn_digitalWrite>
}
     c60:	0f 90       	pop	r0
     c62:	0f 90       	pop	r0
     c64:	0f 90       	pop	r0
     c66:	0f 90       	pop	r0
     c68:	cf 91       	pop	r28
     c6a:	df 91       	pop	r29
     c6c:	08 95       	ret

00000c6e <nrf24_ce_digitalWrite>:
	set_bit(RF_DDR,3); // MOSI output
	clr_bit(RF_DDR,4); // MISO input
}
/* ------------------------------------------------------------------------- */
void nrf24_ce_digitalWrite(uint8_t state)
{
     c6e:	df 93       	push	r29
     c70:	cf 93       	push	r28
     c72:	0f 92       	push	r0
     c74:	cd b7       	in	r28, 0x3d	; 61
     c76:	de b7       	in	r29, 0x3e	; 62
     c78:	89 83       	std	Y+1, r24	; 0x01
	if(state)
     c7a:	89 81       	ldd	r24, Y+1	; 0x01
     c7c:	88 23       	and	r24, r24
     c7e:	51 f0       	breq	.+20     	; 0xc94 <nrf24_ce_digitalWrite+0x26>
	{
		set_bit(RF_PORT,0);
     c80:	88 e2       	ldi	r24, 0x28	; 40
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	28 e2       	ldi	r18, 0x28	; 40
     c86:	30 e0       	ldi	r19, 0x00	; 0
     c88:	f9 01       	movw	r30, r18
     c8a:	20 81       	ld	r18, Z
     c8c:	21 60       	ori	r18, 0x01	; 1
     c8e:	fc 01       	movw	r30, r24
     c90:	20 83       	st	Z, r18
     c92:	09 c0       	rjmp	.+18     	; 0xca6 <nrf24_ce_digitalWrite+0x38>
	}
	else
	{
		clr_bit(RF_PORT,0);
     c94:	88 e2       	ldi	r24, 0x28	; 40
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	28 e2       	ldi	r18, 0x28	; 40
     c9a:	30 e0       	ldi	r19, 0x00	; 0
     c9c:	f9 01       	movw	r30, r18
     c9e:	20 81       	ld	r18, Z
     ca0:	2e 7f       	andi	r18, 0xFE	; 254
     ca2:	fc 01       	movw	r30, r24
     ca4:	20 83       	st	Z, r18
	}
}
     ca6:	0f 90       	pop	r0
     ca8:	cf 91       	pop	r28
     caa:	df 91       	pop	r29
     cac:	08 95       	ret

00000cae <nrf24_csn_digitalWrite>:
/* ------------------------------------------------------------------------- */
void nrf24_csn_digitalWrite(uint8_t state)
{
     cae:	df 93       	push	r29
     cb0:	cf 93       	push	r28
     cb2:	0f 92       	push	r0
     cb4:	cd b7       	in	r28, 0x3d	; 61
     cb6:	de b7       	in	r29, 0x3e	; 62
     cb8:	89 83       	std	Y+1, r24	; 0x01
	if(state)
     cba:	89 81       	ldd	r24, Y+1	; 0x01
     cbc:	88 23       	and	r24, r24
     cbe:	51 f0       	breq	.+20     	; 0xcd4 <nrf24_csn_digitalWrite+0x26>
	{
		set_bit(RF_PORT,1);
     cc0:	88 e2       	ldi	r24, 0x28	; 40
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	28 e2       	ldi	r18, 0x28	; 40
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	f9 01       	movw	r30, r18
     cca:	20 81       	ld	r18, Z
     ccc:	22 60       	ori	r18, 0x02	; 2
     cce:	fc 01       	movw	r30, r24
     cd0:	20 83       	st	Z, r18
     cd2:	09 c0       	rjmp	.+18     	; 0xce6 <nrf24_csn_digitalWrite+0x38>
	}
	else
	{
		clr_bit(RF_PORT,1);
     cd4:	88 e2       	ldi	r24, 0x28	; 40
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	28 e2       	ldi	r18, 0x28	; 40
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	f9 01       	movw	r30, r18
     cde:	20 81       	ld	r18, Z
     ce0:	2d 7f       	andi	r18, 0xFD	; 253
     ce2:	fc 01       	movw	r30, r24
     ce4:	20 83       	st	Z, r18
	}
}
     ce6:	0f 90       	pop	r0
     ce8:	cf 91       	pop	r28
     cea:	df 91       	pop	r29
     cec:	08 95       	ret

00000cee <nrf24_sck_digitalWrite>:
/* ------------------------------------------------------------------------- */
void nrf24_sck_digitalWrite(uint8_t state)
{
     cee:	df 93       	push	r29
     cf0:	cf 93       	push	r28
     cf2:	0f 92       	push	r0
     cf4:	cd b7       	in	r28, 0x3d	; 61
     cf6:	de b7       	in	r29, 0x3e	; 62
     cf8:	89 83       	std	Y+1, r24	; 0x01
	if(state)
     cfa:	89 81       	ldd	r24, Y+1	; 0x01
     cfc:	88 23       	and	r24, r24
     cfe:	51 f0       	breq	.+20     	; 0xd14 <nrf24_sck_digitalWrite+0x26>
	{
		set_bit(RF_PORT,2);
     d00:	88 e2       	ldi	r24, 0x28	; 40
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	28 e2       	ldi	r18, 0x28	; 40
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	f9 01       	movw	r30, r18
     d0a:	20 81       	ld	r18, Z
     d0c:	24 60       	ori	r18, 0x04	; 4
     d0e:	fc 01       	movw	r30, r24
     d10:	20 83       	st	Z, r18
     d12:	09 c0       	rjmp	.+18     	; 0xd26 <nrf24_sck_digitalWrite+0x38>
	}
	else
	{
		clr_bit(RF_PORT,2);
     d14:	88 e2       	ldi	r24, 0x28	; 40
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	28 e2       	ldi	r18, 0x28	; 40
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	f9 01       	movw	r30, r18
     d1e:	20 81       	ld	r18, Z
     d20:	2b 7f       	andi	r18, 0xFB	; 251
     d22:	fc 01       	movw	r30, r24
     d24:	20 83       	st	Z, r18
	}
}
     d26:	0f 90       	pop	r0
     d28:	cf 91       	pop	r28
     d2a:	df 91       	pop	r29
     d2c:	08 95       	ret

00000d2e <nrf24_mosi_digitalWrite>:
/* ------------------------------------------------------------------------- */
void nrf24_mosi_digitalWrite(uint8_t state)
{
     d2e:	df 93       	push	r29
     d30:	cf 93       	push	r28
     d32:	0f 92       	push	r0
     d34:	cd b7       	in	r28, 0x3d	; 61
     d36:	de b7       	in	r29, 0x3e	; 62
     d38:	89 83       	std	Y+1, r24	; 0x01
	if(state)
     d3a:	89 81       	ldd	r24, Y+1	; 0x01
     d3c:	88 23       	and	r24, r24
     d3e:	51 f0       	breq	.+20     	; 0xd54 <nrf24_mosi_digitalWrite+0x26>
	{
		set_bit(RF_PORT,3);
     d40:	88 e2       	ldi	r24, 0x28	; 40
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	28 e2       	ldi	r18, 0x28	; 40
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	f9 01       	movw	r30, r18
     d4a:	20 81       	ld	r18, Z
     d4c:	28 60       	ori	r18, 0x08	; 8
     d4e:	fc 01       	movw	r30, r24
     d50:	20 83       	st	Z, r18
     d52:	09 c0       	rjmp	.+18     	; 0xd66 <nrf24_mosi_digitalWrite+0x38>
	}
	else
	{
		clr_bit(RF_PORT,3);
     d54:	88 e2       	ldi	r24, 0x28	; 40
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	28 e2       	ldi	r18, 0x28	; 40
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	f9 01       	movw	r30, r18
     d5e:	20 81       	ld	r18, Z
     d60:	27 7f       	andi	r18, 0xF7	; 247
     d62:	fc 01       	movw	r30, r24
     d64:	20 83       	st	Z, r18
	}
}
     d66:	0f 90       	pop	r0
     d68:	cf 91       	pop	r28
     d6a:	df 91       	pop	r29
     d6c:	08 95       	ret

00000d6e <nrf24_miso_digitalRead>:
/* ------------------------------------------------------------------------- */
uint8_t nrf24_miso_digitalRead()
{
     d6e:	df 93       	push	r29
     d70:	cf 93       	push	r28
     d72:	cd b7       	in	r28, 0x3d	; 61
     d74:	de b7       	in	r29, 0x3e	; 62
	return check_bit(RF_PIN,4);
     d76:	86 e2       	ldi	r24, 0x26	; 38
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	fc 01       	movw	r30, r24
     d7c:	80 81       	ld	r24, Z
     d7e:	80 71       	andi	r24, 0x10	; 16
}
     d80:	cf 91       	pop	r28
     d82:	df 91       	pop	r29
     d84:	08 95       	ret

00000d86 <initBluetoothUart>:

uint8_t* uartBufferPos;
uint8_t* uartTxMessageEnd;
bool commandAvailable;

void initBluetoothUart(){
     d86:	df 93       	push	r29
     d88:	cf 93       	push	r28
     d8a:	cd b7       	in	r28, 0x3d	; 61
     d8c:	de b7       	in	r29, 0x3e	; 62
	// UART Initialization : 8-bit : No parity bit : 1 stop bit
	UBRR0H = (BRC >> 8); UBRR0L =  BRC;             // UART BAUDRATE
     d8e:	85 ec       	ldi	r24, 0xC5	; 197
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	fc 01       	movw	r30, r24
     d94:	10 82       	st	Z, r1
     d96:	84 ec       	ldi	r24, 0xC4	; 196
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	2f ec       	ldi	r18, 0xCF	; 207
     d9c:	fc 01       	movw	r30, r24
     d9e:	20 83       	st	Z, r18
	UCSR0A |= (1 << U2X0);                          // DOUBLE UART SPEED
     da0:	80 ec       	ldi	r24, 0xC0	; 192
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	20 ec       	ldi	r18, 0xC0	; 192
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	f9 01       	movw	r30, r18
     daa:	20 81       	ld	r18, Z
     dac:	22 60       	ori	r18, 0x02	; 2
     dae:	fc 01       	movw	r30, r24
     db0:	20 83       	st	Z, r18
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);        // 8-BIT CHARACTER SIZE
     db2:	82 ec       	ldi	r24, 0xC2	; 194
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	22 ec       	ldi	r18, 0xC2	; 194
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	f9 01       	movw	r30, r18
     dbc:	20 81       	ld	r18, Z
     dbe:	26 60       	ori	r18, 0x06	; 6
     dc0:	fc 01       	movw	r30, r24
     dc2:	20 83       	st	Z, r18
	
	// Setup UART buffer
	initliazeMemory();
     dc4:	0e 94 53 00 	call	0xa6	; 0xa6 <initliazeMemory>
	uartBufferPos = command_buffer;
     dc8:	80 91 36 02 	lds	r24, 0x0236
     dcc:	90 91 37 02 	lds	r25, 0x0237
     dd0:	90 93 3b 02 	sts	0x023B, r25
     dd4:	80 93 3a 02 	sts	0x023A, r24
}
     dd8:	cf 91       	pop	r28
     dda:	df 91       	pop	r29
     ddc:	08 95       	ret

00000dde <transmitMessageSync>:
	
	uartBufferPos++;
	UDR0 = *(command_buffer);
}

void transmitMessageSync(uint8_t* message, uint8_t length){
     dde:	df 93       	push	r29
     de0:	cf 93       	push	r28
     de2:	00 d0       	rcall	.+0      	; 0xde4 <transmitMessageSync+0x6>
     de4:	0f 92       	push	r0
     de6:	cd b7       	in	r28, 0x3d	; 61
     de8:	de b7       	in	r29, 0x3e	; 62
     dea:	9a 83       	std	Y+2, r25	; 0x02
     dec:	89 83       	std	Y+1, r24	; 0x01
     dee:	6b 83       	std	Y+3, r22	; 0x03
	while (!(UCSR0A & (1<<UDRE0)));
     df0:	00 00       	nop
     df2:	80 ec       	ldi	r24, 0xC0	; 192
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	fc 01       	movw	r30, r24
     df8:	80 81       	ld	r24, Z
     dfa:	88 2f       	mov	r24, r24
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	80 72       	andi	r24, 0x20	; 32
     e00:	90 70       	andi	r25, 0x00	; 0
     e02:	00 97       	sbiw	r24, 0x00	; 0
     e04:	b1 f3       	breq	.-20     	; 0xdf2 <transmitMessageSync+0x14>
	uartBufferPos = command_buffer;
     e06:	80 91 36 02 	lds	r24, 0x0236
     e0a:	90 91 37 02 	lds	r25, 0x0237
     e0e:	90 93 3b 02 	sts	0x023B, r25
     e12:	80 93 3a 02 	sts	0x023A, r24
	uartTxMessageEnd = (command_buffer+length);
     e16:	20 91 36 02 	lds	r18, 0x0236
     e1a:	30 91 37 02 	lds	r19, 0x0237
     e1e:	8b 81       	ldd	r24, Y+3	; 0x03
     e20:	88 2f       	mov	r24, r24
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	82 0f       	add	r24, r18
     e26:	93 1f       	adc	r25, r19
     e28:	90 93 3d 02 	sts	0x023D, r25
     e2c:	80 93 3c 02 	sts	0x023C, r24
	memcpy(command_buffer, message, length);
     e30:	80 91 36 02 	lds	r24, 0x0236
     e34:	90 91 37 02 	lds	r25, 0x0237
     e38:	2b 81       	ldd	r18, Y+3	; 0x03
     e3a:	22 2f       	mov	r18, r18
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	49 81       	ldd	r20, Y+1	; 0x01
     e40:	5a 81       	ldd	r21, Y+2	; 0x02
     e42:	ba 01       	movw	r22, r20
     e44:	a9 01       	movw	r20, r18
     e46:	0e 94 03 0b 	call	0x1606	; 0x1606 <memcpy>
	UCSR0A |= (1<<TXC0) | (1<<RXC0);
     e4a:	80 ec       	ldi	r24, 0xC0	; 192
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	20 ec       	ldi	r18, 0xC0	; 192
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	f9 01       	movw	r30, r18
     e54:	20 81       	ld	r18, Z
     e56:	20 6c       	ori	r18, 0xC0	; 192
     e58:	fc 01       	movw	r30, r24
     e5a:	20 83       	st	Z, r18
	UCSR0B |= (1<<TXEN0) | (1<<TXCIE0);
     e5c:	81 ec       	ldi	r24, 0xC1	; 193
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	21 ec       	ldi	r18, 0xC1	; 193
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	f9 01       	movw	r30, r18
     e66:	20 81       	ld	r18, Z
     e68:	28 64       	ori	r18, 0x48	; 72
     e6a:	fc 01       	movw	r30, r24
     e6c:	20 83       	st	Z, r18
	UCSR0B &=~(1<<RXEN0) &~(1<<RXCIE0);
     e6e:	81 ec       	ldi	r24, 0xC1	; 193
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	21 ec       	ldi	r18, 0xC1	; 193
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	f9 01       	movw	r30, r18
     e78:	20 81       	ld	r18, Z
     e7a:	2f 76       	andi	r18, 0x6F	; 111
     e7c:	fc 01       	movw	r30, r24
     e7e:	20 83       	st	Z, r18
	
	uartBufferPos++;
     e80:	80 91 3a 02 	lds	r24, 0x023A
     e84:	90 91 3b 02 	lds	r25, 0x023B
     e88:	01 96       	adiw	r24, 0x01	; 1
     e8a:	90 93 3b 02 	sts	0x023B, r25
     e8e:	80 93 3a 02 	sts	0x023A, r24
	UDR0 = *(command_buffer);
     e92:	86 ec       	ldi	r24, 0xC6	; 198
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	20 91 36 02 	lds	r18, 0x0236
     e9a:	30 91 37 02 	lds	r19, 0x0237
     e9e:	f9 01       	movw	r30, r18
     ea0:	20 81       	ld	r18, Z
     ea2:	fc 01       	movw	r30, r24
     ea4:	20 83       	st	Z, r18

	while (transmissionState());
     ea6:	00 00       	nop
     ea8:	0e 94 5e 07 	call	0xebc	; 0xebc <transmissionState>
     eac:	88 23       	and	r24, r24
     eae:	e1 f7       	brne	.-8      	; 0xea8 <transmitMessageSync+0xca>

}
     eb0:	0f 90       	pop	r0
     eb2:	0f 90       	pop	r0
     eb4:	0f 90       	pop	r0
     eb6:	cf 91       	pop	r28
     eb8:	df 91       	pop	r29
     eba:	08 95       	ret

00000ebc <transmissionState>:

bool transmissionState(){
     ebc:	df 93       	push	r29
     ebe:	cf 93       	push	r28
     ec0:	cd b7       	in	r28, 0x3d	; 61
     ec2:	de b7       	in	r29, 0x3e	; 62
	// True : Currently transmitting | False : Transmission finished
	if (uartBufferPos!=uartTxMessageEnd) 
     ec4:	20 91 3a 02 	lds	r18, 0x023A
     ec8:	30 91 3b 02 	lds	r19, 0x023B
     ecc:	80 91 3c 02 	lds	r24, 0x023C
     ed0:	90 91 3d 02 	lds	r25, 0x023D
     ed4:	28 17       	cp	r18, r24
     ed6:	39 07       	cpc	r19, r25
     ed8:	11 f0       	breq	.+4      	; 0xede <transmissionState+0x22>
	{
		return true;
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	01 c0       	rjmp	.+2      	; 0xee0 <transmissionState+0x24>
	}
	else 
	{ 
		return false; 
     ede:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     ee0:	cf 91       	pop	r28
     ee2:	df 91       	pop	r29
     ee4:	08 95       	ret

00000ee6 <setupReceiveMode>:


void setupReceiveMode(){
     ee6:	df 93       	push	r29
     ee8:	cf 93       	push	r28
     eea:	cd b7       	in	r28, 0x3d	; 61
     eec:	de b7       	in	r29, 0x3e	; 62
	while (!(UCSR0A & (1<<UDRE0)));
     eee:	00 00       	nop
     ef0:	80 ec       	ldi	r24, 0xC0	; 192
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	fc 01       	movw	r30, r24
     ef6:	80 81       	ld	r24, Z
     ef8:	88 2f       	mov	r24, r24
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	80 72       	andi	r24, 0x20	; 32
     efe:	90 70       	andi	r25, 0x00	; 0
     f00:	00 97       	sbiw	r24, 0x00	; 0
     f02:	b1 f3       	breq	.-20     	; 0xef0 <setupReceiveMode+0xa>
	uartBufferPos = command_buffer;
     f04:	80 91 36 02 	lds	r24, 0x0236
     f08:	90 91 37 02 	lds	r25, 0x0237
     f0c:	90 93 3b 02 	sts	0x023B, r25
     f10:	80 93 3a 02 	sts	0x023A, r24
	
	UCSR0A |= (1<<RXC0) | (1<<TXC0);
     f14:	80 ec       	ldi	r24, 0xC0	; 192
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	20 ec       	ldi	r18, 0xC0	; 192
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	f9 01       	movw	r30, r18
     f1e:	20 81       	ld	r18, Z
     f20:	20 6c       	ori	r18, 0xC0	; 192
     f22:	fc 01       	movw	r30, r24
     f24:	20 83       	st	Z, r18
	UCSR0B &=~(1<<TXEN0) &~(1<<TXCIE0);
     f26:	81 ec       	ldi	r24, 0xC1	; 193
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	21 ec       	ldi	r18, 0xC1	; 193
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	f9 01       	movw	r30, r18
     f30:	20 81       	ld	r18, Z
     f32:	27 7b       	andi	r18, 0xB7	; 183
     f34:	fc 01       	movw	r30, r24
     f36:	20 83       	st	Z, r18
	UCSR0B |= (1<<RXEN0) | (1<<RXCIE0);
     f38:	81 ec       	ldi	r24, 0xC1	; 193
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	21 ec       	ldi	r18, 0xC1	; 193
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	f9 01       	movw	r30, r18
     f42:	20 81       	ld	r18, Z
     f44:	20 69       	ori	r18, 0x90	; 144
     f46:	fc 01       	movw	r30, r24
     f48:	20 83       	st	Z, r18
}
     f4a:	cf 91       	pop	r28
     f4c:	df 91       	pop	r29
     f4e:	08 95       	ret

00000f50 <processReceivedLine>:

void processReceivedLine(){
     f50:	df 93       	push	r29
     f52:	cf 93       	push	r28
     f54:	00 d0       	rcall	.+0      	; 0xf56 <processReceivedLine+0x6>
     f56:	00 d0       	rcall	.+0      	; 0xf58 <processReceivedLine+0x8>
     f58:	00 d0       	rcall	.+0      	; 0xf5a <processReceivedLine+0xa>
     f5a:	cd b7       	in	r28, 0x3d	; 61
     f5c:	de b7       	in	r29, 0x3e	; 62
	commandAvailable = false;
     f5e:	10 92 3e 02 	sts	0x023E, r1
	
	commandType currentCommand;
	bool success = decomposeCommand(command_buffer, &currentCommand, parameter);
     f62:	80 91 36 02 	lds	r24, 0x0236
     f66:	90 91 37 02 	lds	r25, 0x0237
     f6a:	ae 01       	movw	r20, r28
     f6c:	4e 5f       	subi	r20, 0xFE	; 254
     f6e:	5f 4f       	sbci	r21, 0xFF	; 255
     f70:	20 e3       	ldi	r18, 0x30	; 48
     f72:	32 e0       	ldi	r19, 0x02	; 2
     f74:	ba 01       	movw	r22, r20
     f76:	a9 01       	movw	r20, r18
     f78:	0e 94 37 01 	call	0x26e	; 0x26e <decomposeCommand>
     f7c:	89 83       	std	Y+1, r24	; 0x01
	if(success) currentCommand.handlerFunction();
     f7e:	89 81       	ldd	r24, Y+1	; 0x01
     f80:	88 23       	and	r24, r24
     f82:	21 f0       	breq	.+8      	; 0xf8c <processReceivedLine+0x3c>
     f84:	8d 81       	ldd	r24, Y+5	; 0x05
     f86:	9e 81       	ldd	r25, Y+6	; 0x06
     f88:	fc 01       	movw	r30, r24
     f8a:	09 95       	icall
}
     f8c:	26 96       	adiw	r28, 0x06	; 6
     f8e:	0f b6       	in	r0, 0x3f	; 63
     f90:	f8 94       	cli
     f92:	de bf       	out	0x3e, r29	; 62
     f94:	0f be       	out	0x3f, r0	; 63
     f96:	cd bf       	out	0x3d, r28	; 61
     f98:	cf 91       	pop	r28
     f9a:	df 91       	pop	r29
     f9c:	08 95       	ret

00000f9e <disableUART>:

void disableUART(){
     f9e:	df 93       	push	r29
     fa0:	cf 93       	push	r28
     fa2:	cd b7       	in	r28, 0x3d	; 61
     fa4:	de b7       	in	r29, 0x3e	; 62
	UCSR0B &=~(1<<TXEN0) &~(1<<TXCIE0);
     fa6:	81 ec       	ldi	r24, 0xC1	; 193
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	21 ec       	ldi	r18, 0xC1	; 193
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	f9 01       	movw	r30, r18
     fb0:	20 81       	ld	r18, Z
     fb2:	27 7b       	andi	r18, 0xB7	; 183
     fb4:	fc 01       	movw	r30, r24
     fb6:	20 83       	st	Z, r18
	UCSR0B &=~(1<<RXEN0) &~(1<<RXCIE0);
     fb8:	81 ec       	ldi	r24, 0xC1	; 193
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	21 ec       	ldi	r18, 0xC1	; 193
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	f9 01       	movw	r30, r18
     fc2:	20 81       	ld	r18, Z
     fc4:	2f 76       	andi	r18, 0x6F	; 111
     fc6:	fc 01       	movw	r30, r24
     fc8:	20 83       	st	Z, r18
}
     fca:	cf 91       	pop	r28
     fcc:	df 91       	pop	r29
     fce:	08 95       	ret

00000fd0 <__vector_20>:

ISR(USART_TX_vect){
     fd0:	1f 92       	push	r1
     fd2:	0f 92       	push	r0
     fd4:	0f b6       	in	r0, 0x3f	; 63
     fd6:	0f 92       	push	r0
     fd8:	11 24       	eor	r1, r1
     fda:	2f 93       	push	r18
     fdc:	3f 93       	push	r19
     fde:	8f 93       	push	r24
     fe0:	9f 93       	push	r25
     fe2:	ef 93       	push	r30
     fe4:	ff 93       	push	r31
     fe6:	df 93       	push	r29
     fe8:	cf 93       	push	r28
     fea:	cd b7       	in	r28, 0x3d	; 61
     fec:	de b7       	in	r29, 0x3e	; 62
	if (uartBufferPos!=uartTxMessageEnd){
     fee:	20 91 3a 02 	lds	r18, 0x023A
     ff2:	30 91 3b 02 	lds	r19, 0x023B
     ff6:	80 91 3c 02 	lds	r24, 0x023C
     ffa:	90 91 3d 02 	lds	r25, 0x023D
     ffe:	28 17       	cp	r18, r24
    1000:	39 07       	cpc	r19, r25
    1002:	99 f0       	breq	.+38     	; 0x102a <__vector_20+0x5a>
		UDR0 = *uartBufferPos;
    1004:	86 ec       	ldi	r24, 0xC6	; 198
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	20 91 3a 02 	lds	r18, 0x023A
    100c:	30 91 3b 02 	lds	r19, 0x023B
    1010:	f9 01       	movw	r30, r18
    1012:	20 81       	ld	r18, Z
    1014:	fc 01       	movw	r30, r24
    1016:	20 83       	st	Z, r18
		uartBufferPos++;
    1018:	80 91 3a 02 	lds	r24, 0x023A
    101c:	90 91 3b 02 	lds	r25, 0x023B
    1020:	01 96       	adiw	r24, 0x01	; 1
    1022:	90 93 3b 02 	sts	0x023B, r25
    1026:	80 93 3a 02 	sts	0x023A, r24
	}
}
    102a:	cf 91       	pop	r28
    102c:	df 91       	pop	r29
    102e:	ff 91       	pop	r31
    1030:	ef 91       	pop	r30
    1032:	9f 91       	pop	r25
    1034:	8f 91       	pop	r24
    1036:	3f 91       	pop	r19
    1038:	2f 91       	pop	r18
    103a:	0f 90       	pop	r0
    103c:	0f be       	out	0x3f, r0	; 63
    103e:	0f 90       	pop	r0
    1040:	1f 90       	pop	r1
    1042:	18 95       	reti

00001044 <__vector_18>:

ISR(USART_RX_vect){
    1044:	1f 92       	push	r1
    1046:	0f 92       	push	r0
    1048:	0f b6       	in	r0, 0x3f	; 63
    104a:	0f 92       	push	r0
    104c:	11 24       	eor	r1, r1
    104e:	2f 93       	push	r18
    1050:	3f 93       	push	r19
    1052:	4f 93       	push	r20
    1054:	5f 93       	push	r21
    1056:	6f 93       	push	r22
    1058:	7f 93       	push	r23
    105a:	8f 93       	push	r24
    105c:	9f 93       	push	r25
    105e:	af 93       	push	r26
    1060:	bf 93       	push	r27
    1062:	ef 93       	push	r30
    1064:	ff 93       	push	r31
    1066:	df 93       	push	r29
    1068:	cf 93       	push	r28
    106a:	cd b7       	in	r28, 0x3d	; 61
    106c:	de b7       	in	r29, 0x3e	; 62
	if(uartBufferPos!=(command_buffer+uartBufferSize)) {
    106e:	80 91 36 02 	lds	r24, 0x0236
    1072:	90 91 37 02 	lds	r25, 0x0237
    1076:	9c 01       	movw	r18, r24
    1078:	20 5e       	subi	r18, 0xE0	; 224
    107a:	3f 4f       	sbci	r19, 0xFF	; 255
    107c:	80 91 3a 02 	lds	r24, 0x023A
    1080:	90 91 3b 02 	lds	r25, 0x023B
    1084:	28 17       	cp	r18, r24
    1086:	39 07       	cpc	r19, r25
    1088:	99 f1       	breq	.+102    	; 0x10f0 <__vector_18+0xac>
		*uartBufferPos=UDR0;
    108a:	80 91 3a 02 	lds	r24, 0x023A
    108e:	90 91 3b 02 	lds	r25, 0x023B
    1092:	26 ec       	ldi	r18, 0xC6	; 198
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	f9 01       	movw	r30, r18
    1098:	20 81       	ld	r18, Z
    109a:	fc 01       	movw	r30, r24
    109c:	20 83       	st	Z, r18
		if (*uartBufferPos!=uartEndMsgChar) {
    109e:	80 91 3a 02 	lds	r24, 0x023A
    10a2:	90 91 3b 02 	lds	r25, 0x023B
    10a6:	fc 01       	movw	r30, r24
    10a8:	80 81       	ld	r24, Z
    10aa:	84 32       	cpi	r24, 0x24	; 36
    10ac:	d9 f0       	breq	.+54     	; 0x10e4 <__vector_18+0xa0>
			if(*uartBufferPos!=uartCarriageReturnChar) {uartBufferPos++;} else { uartBufferPos = command_buffer; } 
    10ae:	80 91 3a 02 	lds	r24, 0x023A
    10b2:	90 91 3b 02 	lds	r25, 0x023B
    10b6:	fc 01       	movw	r30, r24
    10b8:	80 81       	ld	r24, Z
    10ba:	8f 32       	cpi	r24, 0x2F	; 47
    10bc:	51 f0       	breq	.+20     	; 0x10d2 <__vector_18+0x8e>
    10be:	80 91 3a 02 	lds	r24, 0x023A
    10c2:	90 91 3b 02 	lds	r25, 0x023B
    10c6:	01 96       	adiw	r24, 0x01	; 1
    10c8:	90 93 3b 02 	sts	0x023B, r25
    10cc:	80 93 3a 02 	sts	0x023A, r24
    10d0:	17 c0       	rjmp	.+46     	; 0x1100 <__vector_18+0xbc>
    10d2:	80 91 36 02 	lds	r24, 0x0236
    10d6:	90 91 37 02 	lds	r25, 0x0237
    10da:	90 93 3b 02 	sts	0x023B, r25
    10de:	80 93 3a 02 	sts	0x023A, r24
    10e2:	0e c0       	rjmp	.+28     	; 0x1100 <__vector_18+0xbc>
		}
		else { disableUART(); commandAvailable = true; }
    10e4:	0e 94 cf 07 	call	0xf9e	; 0xf9e <disableUART>
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	80 93 3e 02 	sts	0x023E, r24
    10ee:	08 c0       	rjmp	.+16     	; 0x1100 <__vector_18+0xbc>
	} else {uartBufferPos = command_buffer;}
    10f0:	80 91 36 02 	lds	r24, 0x0236
    10f4:	90 91 37 02 	lds	r25, 0x0237
    10f8:	90 93 3b 02 	sts	0x023B, r25
    10fc:	80 93 3a 02 	sts	0x023A, r24
    1100:	cf 91       	pop	r28
    1102:	df 91       	pop	r29
    1104:	ff 91       	pop	r31
    1106:	ef 91       	pop	r30
    1108:	bf 91       	pop	r27
    110a:	af 91       	pop	r26
    110c:	9f 91       	pop	r25
    110e:	8f 91       	pop	r24
    1110:	7f 91       	pop	r23
    1112:	6f 91       	pop	r22
    1114:	5f 91       	pop	r21
    1116:	4f 91       	pop	r20
    1118:	3f 91       	pop	r19
    111a:	2f 91       	pop	r18
    111c:	0f 90       	pop	r0
    111e:	0f be       	out	0x3f, r0	; 63
    1120:	0f 90       	pop	r0
    1122:	1f 90       	pop	r1
    1124:	18 95       	reti

00001126 <__cmpsf2>:
    1126:	2f d0       	rcall	.+94     	; 0x1186 <__fp_cmp>
    1128:	08 f4       	brcc	.+2      	; 0x112c <__cmpsf2+0x6>
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	08 95       	ret

0000112e <__fixunssfsi>:
    112e:	57 d0       	rcall	.+174    	; 0x11de <__fp_splitA>
    1130:	88 f0       	brcs	.+34     	; 0x1154 <__fixunssfsi+0x26>
    1132:	9f 57       	subi	r25, 0x7F	; 127
    1134:	90 f0       	brcs	.+36     	; 0x115a <__fixunssfsi+0x2c>
    1136:	b9 2f       	mov	r27, r25
    1138:	99 27       	eor	r25, r25
    113a:	b7 51       	subi	r27, 0x17	; 23
    113c:	a0 f0       	brcs	.+40     	; 0x1166 <__fixunssfsi+0x38>
    113e:	d1 f0       	breq	.+52     	; 0x1174 <__fixunssfsi+0x46>
    1140:	66 0f       	add	r22, r22
    1142:	77 1f       	adc	r23, r23
    1144:	88 1f       	adc	r24, r24
    1146:	99 1f       	adc	r25, r25
    1148:	1a f0       	brmi	.+6      	; 0x1150 <__fixunssfsi+0x22>
    114a:	ba 95       	dec	r27
    114c:	c9 f7       	brne	.-14     	; 0x1140 <__fixunssfsi+0x12>
    114e:	12 c0       	rjmp	.+36     	; 0x1174 <__fixunssfsi+0x46>
    1150:	b1 30       	cpi	r27, 0x01	; 1
    1152:	81 f0       	breq	.+32     	; 0x1174 <__fixunssfsi+0x46>
    1154:	5e d0       	rcall	.+188    	; 0x1212 <__fp_zero>
    1156:	b1 e0       	ldi	r27, 0x01	; 1
    1158:	08 95       	ret
    115a:	5b c0       	rjmp	.+182    	; 0x1212 <__fp_zero>
    115c:	67 2f       	mov	r22, r23
    115e:	78 2f       	mov	r23, r24
    1160:	88 27       	eor	r24, r24
    1162:	b8 5f       	subi	r27, 0xF8	; 248
    1164:	39 f0       	breq	.+14     	; 0x1174 <__fixunssfsi+0x46>
    1166:	b9 3f       	cpi	r27, 0xF9	; 249
    1168:	cc f3       	brlt	.-14     	; 0x115c <__fixunssfsi+0x2e>
    116a:	86 95       	lsr	r24
    116c:	77 95       	ror	r23
    116e:	67 95       	ror	r22
    1170:	b3 95       	inc	r27
    1172:	d9 f7       	brne	.-10     	; 0x116a <__fixunssfsi+0x3c>
    1174:	3e f4       	brtc	.+14     	; 0x1184 <__fixunssfsi+0x56>
    1176:	90 95       	com	r25
    1178:	80 95       	com	r24
    117a:	70 95       	com	r23
    117c:	61 95       	neg	r22
    117e:	7f 4f       	sbci	r23, 0xFF	; 255
    1180:	8f 4f       	sbci	r24, 0xFF	; 255
    1182:	9f 4f       	sbci	r25, 0xFF	; 255
    1184:	08 95       	ret

00001186 <__fp_cmp>:
    1186:	99 0f       	add	r25, r25
    1188:	00 08       	sbc	r0, r0
    118a:	55 0f       	add	r21, r21
    118c:	aa 0b       	sbc	r26, r26
    118e:	e0 e8       	ldi	r30, 0x80	; 128
    1190:	fe ef       	ldi	r31, 0xFE	; 254
    1192:	16 16       	cp	r1, r22
    1194:	17 06       	cpc	r1, r23
    1196:	e8 07       	cpc	r30, r24
    1198:	f9 07       	cpc	r31, r25
    119a:	c0 f0       	brcs	.+48     	; 0x11cc <__fp_cmp+0x46>
    119c:	12 16       	cp	r1, r18
    119e:	13 06       	cpc	r1, r19
    11a0:	e4 07       	cpc	r30, r20
    11a2:	f5 07       	cpc	r31, r21
    11a4:	98 f0       	brcs	.+38     	; 0x11cc <__fp_cmp+0x46>
    11a6:	62 1b       	sub	r22, r18
    11a8:	73 0b       	sbc	r23, r19
    11aa:	84 0b       	sbc	r24, r20
    11ac:	95 0b       	sbc	r25, r21
    11ae:	39 f4       	brne	.+14     	; 0x11be <__fp_cmp+0x38>
    11b0:	0a 26       	eor	r0, r26
    11b2:	61 f0       	breq	.+24     	; 0x11cc <__fp_cmp+0x46>
    11b4:	23 2b       	or	r18, r19
    11b6:	24 2b       	or	r18, r20
    11b8:	25 2b       	or	r18, r21
    11ba:	21 f4       	brne	.+8      	; 0x11c4 <__fp_cmp+0x3e>
    11bc:	08 95       	ret
    11be:	0a 26       	eor	r0, r26
    11c0:	09 f4       	brne	.+2      	; 0x11c4 <__fp_cmp+0x3e>
    11c2:	a1 40       	sbci	r26, 0x01	; 1
    11c4:	a6 95       	lsr	r26
    11c6:	8f ef       	ldi	r24, 0xFF	; 255
    11c8:	81 1d       	adc	r24, r1
    11ca:	81 1d       	adc	r24, r1
    11cc:	08 95       	ret

000011ce <__fp_split3>:
    11ce:	57 fd       	sbrc	r21, 7
    11d0:	90 58       	subi	r25, 0x80	; 128
    11d2:	44 0f       	add	r20, r20
    11d4:	55 1f       	adc	r21, r21
    11d6:	59 f0       	breq	.+22     	; 0x11ee <__fp_splitA+0x10>
    11d8:	5f 3f       	cpi	r21, 0xFF	; 255
    11da:	71 f0       	breq	.+28     	; 0x11f8 <__fp_splitA+0x1a>
    11dc:	47 95       	ror	r20

000011de <__fp_splitA>:
    11de:	88 0f       	add	r24, r24
    11e0:	97 fb       	bst	r25, 7
    11e2:	99 1f       	adc	r25, r25
    11e4:	61 f0       	breq	.+24     	; 0x11fe <__fp_splitA+0x20>
    11e6:	9f 3f       	cpi	r25, 0xFF	; 255
    11e8:	79 f0       	breq	.+30     	; 0x1208 <__fp_splitA+0x2a>
    11ea:	87 95       	ror	r24
    11ec:	08 95       	ret
    11ee:	12 16       	cp	r1, r18
    11f0:	13 06       	cpc	r1, r19
    11f2:	14 06       	cpc	r1, r20
    11f4:	55 1f       	adc	r21, r21
    11f6:	f2 cf       	rjmp	.-28     	; 0x11dc <__fp_split3+0xe>
    11f8:	46 95       	lsr	r20
    11fa:	f1 df       	rcall	.-30     	; 0x11de <__fp_splitA>
    11fc:	08 c0       	rjmp	.+16     	; 0x120e <__fp_splitA+0x30>
    11fe:	16 16       	cp	r1, r22
    1200:	17 06       	cpc	r1, r23
    1202:	18 06       	cpc	r1, r24
    1204:	99 1f       	adc	r25, r25
    1206:	f1 cf       	rjmp	.-30     	; 0x11ea <__fp_splitA+0xc>
    1208:	86 95       	lsr	r24
    120a:	71 05       	cpc	r23, r1
    120c:	61 05       	cpc	r22, r1
    120e:	08 94       	sec
    1210:	08 95       	ret

00001212 <__fp_zero>:
    1212:	e8 94       	clt

00001214 <__fp_szero>:
    1214:	bb 27       	eor	r27, r27
    1216:	66 27       	eor	r22, r22
    1218:	77 27       	eor	r23, r23
    121a:	cb 01       	movw	r24, r22
    121c:	97 f9       	bld	r25, 7
    121e:	08 95       	ret

00001220 <__gesf2>:
    1220:	b2 df       	rcall	.-156    	; 0x1186 <__fp_cmp>
    1222:	08 f4       	brcc	.+2      	; 0x1226 <__gesf2+0x6>
    1224:	8f ef       	ldi	r24, 0xFF	; 255
    1226:	08 95       	ret

00001228 <__mulsf3>:
    1228:	0b d0       	rcall	.+22     	; 0x1240 <__mulsf3x>
    122a:	78 c0       	rjmp	.+240    	; 0x131c <__fp_round>
    122c:	69 d0       	rcall	.+210    	; 0x1300 <__fp_pscA>
    122e:	28 f0       	brcs	.+10     	; 0x123a <__mulsf3+0x12>
    1230:	6e d0       	rcall	.+220    	; 0x130e <__fp_pscB>
    1232:	18 f0       	brcs	.+6      	; 0x123a <__mulsf3+0x12>
    1234:	95 23       	and	r25, r21
    1236:	09 f0       	breq	.+2      	; 0x123a <__mulsf3+0x12>
    1238:	5a c0       	rjmp	.+180    	; 0x12ee <__fp_inf>
    123a:	5f c0       	rjmp	.+190    	; 0x12fa <__fp_nan>
    123c:	11 24       	eor	r1, r1
    123e:	ea cf       	rjmp	.-44     	; 0x1214 <__fp_szero>

00001240 <__mulsf3x>:
    1240:	c6 df       	rcall	.-116    	; 0x11ce <__fp_split3>
    1242:	a0 f3       	brcs	.-24     	; 0x122c <__mulsf3+0x4>

00001244 <__mulsf3_pse>:
    1244:	95 9f       	mul	r25, r21
    1246:	d1 f3       	breq	.-12     	; 0x123c <__mulsf3+0x14>
    1248:	95 0f       	add	r25, r21
    124a:	50 e0       	ldi	r21, 0x00	; 0
    124c:	55 1f       	adc	r21, r21
    124e:	62 9f       	mul	r22, r18
    1250:	f0 01       	movw	r30, r0
    1252:	72 9f       	mul	r23, r18
    1254:	bb 27       	eor	r27, r27
    1256:	f0 0d       	add	r31, r0
    1258:	b1 1d       	adc	r27, r1
    125a:	63 9f       	mul	r22, r19
    125c:	aa 27       	eor	r26, r26
    125e:	f0 0d       	add	r31, r0
    1260:	b1 1d       	adc	r27, r1
    1262:	aa 1f       	adc	r26, r26
    1264:	64 9f       	mul	r22, r20
    1266:	66 27       	eor	r22, r22
    1268:	b0 0d       	add	r27, r0
    126a:	a1 1d       	adc	r26, r1
    126c:	66 1f       	adc	r22, r22
    126e:	82 9f       	mul	r24, r18
    1270:	22 27       	eor	r18, r18
    1272:	b0 0d       	add	r27, r0
    1274:	a1 1d       	adc	r26, r1
    1276:	62 1f       	adc	r22, r18
    1278:	73 9f       	mul	r23, r19
    127a:	b0 0d       	add	r27, r0
    127c:	a1 1d       	adc	r26, r1
    127e:	62 1f       	adc	r22, r18
    1280:	83 9f       	mul	r24, r19
    1282:	a0 0d       	add	r26, r0
    1284:	61 1d       	adc	r22, r1
    1286:	22 1f       	adc	r18, r18
    1288:	74 9f       	mul	r23, r20
    128a:	33 27       	eor	r19, r19
    128c:	a0 0d       	add	r26, r0
    128e:	61 1d       	adc	r22, r1
    1290:	23 1f       	adc	r18, r19
    1292:	84 9f       	mul	r24, r20
    1294:	60 0d       	add	r22, r0
    1296:	21 1d       	adc	r18, r1
    1298:	82 2f       	mov	r24, r18
    129a:	76 2f       	mov	r23, r22
    129c:	6a 2f       	mov	r22, r26
    129e:	11 24       	eor	r1, r1
    12a0:	9f 57       	subi	r25, 0x7F	; 127
    12a2:	50 40       	sbci	r21, 0x00	; 0
    12a4:	8a f0       	brmi	.+34     	; 0x12c8 <__mulsf3_pse+0x84>
    12a6:	e1 f0       	breq	.+56     	; 0x12e0 <__mulsf3_pse+0x9c>
    12a8:	88 23       	and	r24, r24
    12aa:	4a f0       	brmi	.+18     	; 0x12be <__mulsf3_pse+0x7a>
    12ac:	ee 0f       	add	r30, r30
    12ae:	ff 1f       	adc	r31, r31
    12b0:	bb 1f       	adc	r27, r27
    12b2:	66 1f       	adc	r22, r22
    12b4:	77 1f       	adc	r23, r23
    12b6:	88 1f       	adc	r24, r24
    12b8:	91 50       	subi	r25, 0x01	; 1
    12ba:	50 40       	sbci	r21, 0x00	; 0
    12bc:	a9 f7       	brne	.-22     	; 0x12a8 <__mulsf3_pse+0x64>
    12be:	9e 3f       	cpi	r25, 0xFE	; 254
    12c0:	51 05       	cpc	r21, r1
    12c2:	70 f0       	brcs	.+28     	; 0x12e0 <__mulsf3_pse+0x9c>
    12c4:	14 c0       	rjmp	.+40     	; 0x12ee <__fp_inf>
    12c6:	a6 cf       	rjmp	.-180    	; 0x1214 <__fp_szero>
    12c8:	5f 3f       	cpi	r21, 0xFF	; 255
    12ca:	ec f3       	brlt	.-6      	; 0x12c6 <__mulsf3_pse+0x82>
    12cc:	98 3e       	cpi	r25, 0xE8	; 232
    12ce:	dc f3       	brlt	.-10     	; 0x12c6 <__mulsf3_pse+0x82>
    12d0:	86 95       	lsr	r24
    12d2:	77 95       	ror	r23
    12d4:	67 95       	ror	r22
    12d6:	b7 95       	ror	r27
    12d8:	f7 95       	ror	r31
    12da:	e7 95       	ror	r30
    12dc:	9f 5f       	subi	r25, 0xFF	; 255
    12de:	c1 f7       	brne	.-16     	; 0x12d0 <__mulsf3_pse+0x8c>
    12e0:	fe 2b       	or	r31, r30
    12e2:	88 0f       	add	r24, r24
    12e4:	91 1d       	adc	r25, r1
    12e6:	96 95       	lsr	r25
    12e8:	87 95       	ror	r24
    12ea:	97 f9       	bld	r25, 7
    12ec:	08 95       	ret

000012ee <__fp_inf>:
    12ee:	97 f9       	bld	r25, 7
    12f0:	9f 67       	ori	r25, 0x7F	; 127
    12f2:	80 e8       	ldi	r24, 0x80	; 128
    12f4:	70 e0       	ldi	r23, 0x00	; 0
    12f6:	60 e0       	ldi	r22, 0x00	; 0
    12f8:	08 95       	ret

000012fa <__fp_nan>:
    12fa:	9f ef       	ldi	r25, 0xFF	; 255
    12fc:	80 ec       	ldi	r24, 0xC0	; 192
    12fe:	08 95       	ret

00001300 <__fp_pscA>:
    1300:	00 24       	eor	r0, r0
    1302:	0a 94       	dec	r0
    1304:	16 16       	cp	r1, r22
    1306:	17 06       	cpc	r1, r23
    1308:	18 06       	cpc	r1, r24
    130a:	09 06       	cpc	r0, r25
    130c:	08 95       	ret

0000130e <__fp_pscB>:
    130e:	00 24       	eor	r0, r0
    1310:	0a 94       	dec	r0
    1312:	12 16       	cp	r1, r18
    1314:	13 06       	cpc	r1, r19
    1316:	14 06       	cpc	r1, r20
    1318:	05 06       	cpc	r0, r21
    131a:	08 95       	ret

0000131c <__fp_round>:
    131c:	09 2e       	mov	r0, r25
    131e:	03 94       	inc	r0
    1320:	00 0c       	add	r0, r0
    1322:	11 f4       	brne	.+4      	; 0x1328 <__fp_round+0xc>
    1324:	88 23       	and	r24, r24
    1326:	52 f0       	brmi	.+20     	; 0x133c <__fp_round+0x20>
    1328:	bb 0f       	add	r27, r27
    132a:	40 f4       	brcc	.+16     	; 0x133c <__fp_round+0x20>
    132c:	bf 2b       	or	r27, r31
    132e:	11 f4       	brne	.+4      	; 0x1334 <__fp_round+0x18>
    1330:	60 ff       	sbrs	r22, 0
    1332:	04 c0       	rjmp	.+8      	; 0x133c <__fp_round+0x20>
    1334:	6f 5f       	subi	r22, 0xFF	; 255
    1336:	7f 4f       	sbci	r23, 0xFF	; 255
    1338:	8f 4f       	sbci	r24, 0xFF	; 255
    133a:	9f 4f       	sbci	r25, 0xFF	; 255
    133c:	08 95       	ret

0000133e <calloc>:
    133e:	ef 92       	push	r14
    1340:	ff 92       	push	r15
    1342:	0f 93       	push	r16
    1344:	1f 93       	push	r17
    1346:	cf 93       	push	r28
    1348:	df 93       	push	r29
    134a:	68 9f       	mul	r22, r24
    134c:	80 01       	movw	r16, r0
    134e:	69 9f       	mul	r22, r25
    1350:	10 0d       	add	r17, r0
    1352:	78 9f       	mul	r23, r24
    1354:	10 0d       	add	r17, r0
    1356:	11 24       	eor	r1, r1
    1358:	c8 01       	movw	r24, r16
    135a:	0e 94 c3 09 	call	0x1386	; 0x1386 <malloc>
    135e:	e8 2e       	mov	r14, r24
    1360:	e7 01       	movw	r28, r14
    1362:	7e 01       	movw	r14, r28
    1364:	f9 2e       	mov	r15, r25
    1366:	e7 01       	movw	r28, r14
    1368:	20 97       	sbiw	r28, 0x00	; 0
    136a:	31 f0       	breq	.+12     	; 0x1378 <calloc+0x3a>
    136c:	8e 2d       	mov	r24, r14
    136e:	60 e0       	ldi	r22, 0x00	; 0
    1370:	70 e0       	ldi	r23, 0x00	; 0
    1372:	a8 01       	movw	r20, r16
    1374:	0e 94 32 0b 	call	0x1664	; 0x1664 <memset>
    1378:	7e 01       	movw	r14, r28
    137a:	ce 01       	movw	r24, r28
    137c:	cd b7       	in	r28, 0x3d	; 61
    137e:	de b7       	in	r29, 0x3e	; 62
    1380:	e6 e0       	ldi	r30, 0x06	; 6
    1382:	0c 94 1b 0e 	jmp	0x1c36	; 0x1c36 <__epilogue_restores__+0x18>

00001386 <malloc>:
    1386:	cf 93       	push	r28
    1388:	df 93       	push	r29
    138a:	82 30       	cpi	r24, 0x02	; 2
    138c:	91 05       	cpc	r25, r1
    138e:	10 f4       	brcc	.+4      	; 0x1394 <malloc+0xe>
    1390:	82 e0       	ldi	r24, 0x02	; 2
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	e0 91 41 02 	lds	r30, 0x0241
    1398:	f0 91 42 02 	lds	r31, 0x0242
    139c:	40 e0       	ldi	r20, 0x00	; 0
    139e:	50 e0       	ldi	r21, 0x00	; 0
    13a0:	20 e0       	ldi	r18, 0x00	; 0
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	26 c0       	rjmp	.+76     	; 0x13f2 <malloc+0x6c>
    13a6:	60 81       	ld	r22, Z
    13a8:	71 81       	ldd	r23, Z+1	; 0x01
    13aa:	68 17       	cp	r22, r24
    13ac:	79 07       	cpc	r23, r25
    13ae:	e0 f0       	brcs	.+56     	; 0x13e8 <malloc+0x62>
    13b0:	68 17       	cp	r22, r24
    13b2:	79 07       	cpc	r23, r25
    13b4:	81 f4       	brne	.+32     	; 0x13d6 <malloc+0x50>
    13b6:	82 81       	ldd	r24, Z+2	; 0x02
    13b8:	93 81       	ldd	r25, Z+3	; 0x03
    13ba:	21 15       	cp	r18, r1
    13bc:	31 05       	cpc	r19, r1
    13be:	31 f0       	breq	.+12     	; 0x13cc <malloc+0x46>
    13c0:	d9 01       	movw	r26, r18
    13c2:	13 96       	adiw	r26, 0x03	; 3
    13c4:	9c 93       	st	X, r25
    13c6:	8e 93       	st	-X, r24
    13c8:	12 97       	sbiw	r26, 0x02	; 2
    13ca:	2b c0       	rjmp	.+86     	; 0x1422 <malloc+0x9c>
    13cc:	90 93 42 02 	sts	0x0242, r25
    13d0:	80 93 41 02 	sts	0x0241, r24
    13d4:	26 c0       	rjmp	.+76     	; 0x1422 <malloc+0x9c>
    13d6:	41 15       	cp	r20, r1
    13d8:	51 05       	cpc	r21, r1
    13da:	19 f0       	breq	.+6      	; 0x13e2 <malloc+0x5c>
    13dc:	64 17       	cp	r22, r20
    13de:	75 07       	cpc	r23, r21
    13e0:	18 f4       	brcc	.+6      	; 0x13e8 <malloc+0x62>
    13e2:	ab 01       	movw	r20, r22
    13e4:	e9 01       	movw	r28, r18
    13e6:	df 01       	movw	r26, r30
    13e8:	9f 01       	movw	r18, r30
    13ea:	72 81       	ldd	r23, Z+2	; 0x02
    13ec:	63 81       	ldd	r22, Z+3	; 0x03
    13ee:	e7 2f       	mov	r30, r23
    13f0:	f6 2f       	mov	r31, r22
    13f2:	30 97       	sbiw	r30, 0x00	; 0
    13f4:	c1 f6       	brne	.-80     	; 0x13a6 <malloc+0x20>
    13f6:	41 15       	cp	r20, r1
    13f8:	51 05       	cpc	r21, r1
    13fa:	01 f1       	breq	.+64     	; 0x143c <malloc+0xb6>
    13fc:	48 1b       	sub	r20, r24
    13fe:	59 0b       	sbc	r21, r25
    1400:	44 30       	cpi	r20, 0x04	; 4
    1402:	51 05       	cpc	r21, r1
    1404:	80 f4       	brcc	.+32     	; 0x1426 <malloc+0xa0>
    1406:	12 96       	adiw	r26, 0x02	; 2
    1408:	8d 91       	ld	r24, X+
    140a:	9c 91       	ld	r25, X
    140c:	13 97       	sbiw	r26, 0x03	; 3
    140e:	20 97       	sbiw	r28, 0x00	; 0
    1410:	19 f0       	breq	.+6      	; 0x1418 <malloc+0x92>
    1412:	9b 83       	std	Y+3, r25	; 0x03
    1414:	8a 83       	std	Y+2, r24	; 0x02
    1416:	04 c0       	rjmp	.+8      	; 0x1420 <malloc+0x9a>
    1418:	90 93 42 02 	sts	0x0242, r25
    141c:	80 93 41 02 	sts	0x0241, r24
    1420:	fd 01       	movw	r30, r26
    1422:	32 96       	adiw	r30, 0x02	; 2
    1424:	46 c0       	rjmp	.+140    	; 0x14b2 <malloc+0x12c>
    1426:	fd 01       	movw	r30, r26
    1428:	e4 0f       	add	r30, r20
    142a:	f5 1f       	adc	r31, r21
    142c:	81 93       	st	Z+, r24
    142e:	91 93       	st	Z+, r25
    1430:	42 50       	subi	r20, 0x02	; 2
    1432:	50 40       	sbci	r21, 0x00	; 0
    1434:	11 96       	adiw	r26, 0x01	; 1
    1436:	5c 93       	st	X, r21
    1438:	4e 93       	st	-X, r20
    143a:	3b c0       	rjmp	.+118    	; 0x14b2 <malloc+0x12c>
    143c:	20 91 3f 02 	lds	r18, 0x023F
    1440:	30 91 40 02 	lds	r19, 0x0240
    1444:	21 15       	cp	r18, r1
    1446:	31 05       	cpc	r19, r1
    1448:	41 f4       	brne	.+16     	; 0x145a <malloc+0xd4>
    144a:	20 91 eb 01 	lds	r18, 0x01EB
    144e:	30 91 ec 01 	lds	r19, 0x01EC
    1452:	30 93 40 02 	sts	0x0240, r19
    1456:	20 93 3f 02 	sts	0x023F, r18
    145a:	20 91 ed 01 	lds	r18, 0x01ED
    145e:	30 91 ee 01 	lds	r19, 0x01EE
    1462:	21 15       	cp	r18, r1
    1464:	31 05       	cpc	r19, r1
    1466:	41 f4       	brne	.+16     	; 0x1478 <malloc+0xf2>
    1468:	2d b7       	in	r18, 0x3d	; 61
    146a:	3e b7       	in	r19, 0x3e	; 62
    146c:	40 91 e9 01 	lds	r20, 0x01E9
    1470:	50 91 ea 01 	lds	r21, 0x01EA
    1474:	24 1b       	sub	r18, r20
    1476:	35 0b       	sbc	r19, r21
    1478:	e0 91 3f 02 	lds	r30, 0x023F
    147c:	f0 91 40 02 	lds	r31, 0x0240
    1480:	e2 17       	cp	r30, r18
    1482:	f3 07       	cpc	r31, r19
    1484:	a0 f4       	brcc	.+40     	; 0x14ae <malloc+0x128>
    1486:	2e 1b       	sub	r18, r30
    1488:	3f 0b       	sbc	r19, r31
    148a:	28 17       	cp	r18, r24
    148c:	39 07       	cpc	r19, r25
    148e:	78 f0       	brcs	.+30     	; 0x14ae <malloc+0x128>
    1490:	ac 01       	movw	r20, r24
    1492:	4e 5f       	subi	r20, 0xFE	; 254
    1494:	5f 4f       	sbci	r21, 0xFF	; 255
    1496:	24 17       	cp	r18, r20
    1498:	35 07       	cpc	r19, r21
    149a:	48 f0       	brcs	.+18     	; 0x14ae <malloc+0x128>
    149c:	4e 0f       	add	r20, r30
    149e:	5f 1f       	adc	r21, r31
    14a0:	50 93 40 02 	sts	0x0240, r21
    14a4:	40 93 3f 02 	sts	0x023F, r20
    14a8:	81 93       	st	Z+, r24
    14aa:	91 93       	st	Z+, r25
    14ac:	02 c0       	rjmp	.+4      	; 0x14b2 <malloc+0x12c>
    14ae:	e0 e0       	ldi	r30, 0x00	; 0
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	cf 01       	movw	r24, r30
    14b4:	df 91       	pop	r29
    14b6:	cf 91       	pop	r28
    14b8:	08 95       	ret

000014ba <free>:
    14ba:	cf 93       	push	r28
    14bc:	df 93       	push	r29
    14be:	00 97       	sbiw	r24, 0x00	; 0
    14c0:	09 f4       	brne	.+2      	; 0x14c4 <free+0xa>
    14c2:	91 c0       	rjmp	.+290    	; 0x15e6 <free+0x12c>
    14c4:	fc 01       	movw	r30, r24
    14c6:	32 97       	sbiw	r30, 0x02	; 2
    14c8:	13 82       	std	Z+3, r1	; 0x03
    14ca:	12 82       	std	Z+2, r1	; 0x02
    14cc:	60 91 41 02 	lds	r22, 0x0241
    14d0:	70 91 42 02 	lds	r23, 0x0242
    14d4:	61 15       	cp	r22, r1
    14d6:	71 05       	cpc	r23, r1
    14d8:	81 f4       	brne	.+32     	; 0x14fa <free+0x40>
    14da:	20 81       	ld	r18, Z
    14dc:	31 81       	ldd	r19, Z+1	; 0x01
    14de:	28 0f       	add	r18, r24
    14e0:	39 1f       	adc	r19, r25
    14e2:	80 91 3f 02 	lds	r24, 0x023F
    14e6:	90 91 40 02 	lds	r25, 0x0240
    14ea:	82 17       	cp	r24, r18
    14ec:	93 07       	cpc	r25, r19
    14ee:	99 f5       	brne	.+102    	; 0x1556 <free+0x9c>
    14f0:	f0 93 40 02 	sts	0x0240, r31
    14f4:	e0 93 3f 02 	sts	0x023F, r30
    14f8:	76 c0       	rjmp	.+236    	; 0x15e6 <free+0x12c>
    14fa:	db 01       	movw	r26, r22
    14fc:	80 e0       	ldi	r24, 0x00	; 0
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	02 c0       	rjmp	.+4      	; 0x1506 <free+0x4c>
    1502:	cd 01       	movw	r24, r26
    1504:	d9 01       	movw	r26, r18
    1506:	ae 17       	cp	r26, r30
    1508:	bf 07       	cpc	r27, r31
    150a:	48 f4       	brcc	.+18     	; 0x151e <free+0x64>
    150c:	12 96       	adiw	r26, 0x02	; 2
    150e:	2d 91       	ld	r18, X+
    1510:	3c 91       	ld	r19, X
    1512:	13 97       	sbiw	r26, 0x03	; 3
    1514:	21 15       	cp	r18, r1
    1516:	31 05       	cpc	r19, r1
    1518:	a1 f7       	brne	.-24     	; 0x1502 <free+0x48>
    151a:	cd 01       	movw	r24, r26
    151c:	21 c0       	rjmp	.+66     	; 0x1560 <free+0xa6>
    151e:	b3 83       	std	Z+3, r27	; 0x03
    1520:	a2 83       	std	Z+2, r26	; 0x02
    1522:	ef 01       	movw	r28, r30
    1524:	49 91       	ld	r20, Y+
    1526:	59 91       	ld	r21, Y+
    1528:	9e 01       	movw	r18, r28
    152a:	24 0f       	add	r18, r20
    152c:	35 1f       	adc	r19, r21
    152e:	a2 17       	cp	r26, r18
    1530:	b3 07       	cpc	r27, r19
    1532:	79 f4       	brne	.+30     	; 0x1552 <free+0x98>
    1534:	2d 91       	ld	r18, X+
    1536:	3c 91       	ld	r19, X
    1538:	11 97       	sbiw	r26, 0x01	; 1
    153a:	24 0f       	add	r18, r20
    153c:	35 1f       	adc	r19, r21
    153e:	2e 5f       	subi	r18, 0xFE	; 254
    1540:	3f 4f       	sbci	r19, 0xFF	; 255
    1542:	31 83       	std	Z+1, r19	; 0x01
    1544:	20 83       	st	Z, r18
    1546:	12 96       	adiw	r26, 0x02	; 2
    1548:	2d 91       	ld	r18, X+
    154a:	3c 91       	ld	r19, X
    154c:	13 97       	sbiw	r26, 0x03	; 3
    154e:	33 83       	std	Z+3, r19	; 0x03
    1550:	22 83       	std	Z+2, r18	; 0x02
    1552:	00 97       	sbiw	r24, 0x00	; 0
    1554:	29 f4       	brne	.+10     	; 0x1560 <free+0xa6>
    1556:	f0 93 42 02 	sts	0x0242, r31
    155a:	e0 93 41 02 	sts	0x0241, r30
    155e:	43 c0       	rjmp	.+134    	; 0x15e6 <free+0x12c>
    1560:	dc 01       	movw	r26, r24
    1562:	13 96       	adiw	r26, 0x03	; 3
    1564:	fc 93       	st	X, r31
    1566:	ee 93       	st	-X, r30
    1568:	12 97       	sbiw	r26, 0x02	; 2
    156a:	4d 91       	ld	r20, X+
    156c:	5d 91       	ld	r21, X+
    156e:	a4 0f       	add	r26, r20
    1570:	b5 1f       	adc	r27, r21
    1572:	ea 17       	cp	r30, r26
    1574:	fb 07       	cpc	r31, r27
    1576:	69 f4       	brne	.+26     	; 0x1592 <free+0xd8>
    1578:	20 81       	ld	r18, Z
    157a:	31 81       	ldd	r19, Z+1	; 0x01
    157c:	24 0f       	add	r18, r20
    157e:	35 1f       	adc	r19, r21
    1580:	2e 5f       	subi	r18, 0xFE	; 254
    1582:	3f 4f       	sbci	r19, 0xFF	; 255
    1584:	ec 01       	movw	r28, r24
    1586:	39 83       	std	Y+1, r19	; 0x01
    1588:	28 83       	st	Y, r18
    158a:	22 81       	ldd	r18, Z+2	; 0x02
    158c:	33 81       	ldd	r19, Z+3	; 0x03
    158e:	3b 83       	std	Y+3, r19	; 0x03
    1590:	2a 83       	std	Y+2, r18	; 0x02
    1592:	e0 e0       	ldi	r30, 0x00	; 0
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	02 c0       	rjmp	.+4      	; 0x159c <free+0xe2>
    1598:	fb 01       	movw	r30, r22
    159a:	bc 01       	movw	r22, r24
    159c:	db 01       	movw	r26, r22
    159e:	12 96       	adiw	r26, 0x02	; 2
    15a0:	8d 91       	ld	r24, X+
    15a2:	9c 91       	ld	r25, X
    15a4:	13 97       	sbiw	r26, 0x03	; 3
    15a6:	00 97       	sbiw	r24, 0x00	; 0
    15a8:	b9 f7       	brne	.-18     	; 0x1598 <free+0xde>
    15aa:	9b 01       	movw	r18, r22
    15ac:	2e 5f       	subi	r18, 0xFE	; 254
    15ae:	3f 4f       	sbci	r19, 0xFF	; 255
    15b0:	8d 91       	ld	r24, X+
    15b2:	9c 91       	ld	r25, X
    15b4:	11 97       	sbiw	r26, 0x01	; 1
    15b6:	82 0f       	add	r24, r18
    15b8:	93 1f       	adc	r25, r19
    15ba:	40 91 3f 02 	lds	r20, 0x023F
    15be:	50 91 40 02 	lds	r21, 0x0240
    15c2:	48 17       	cp	r20, r24
    15c4:	59 07       	cpc	r21, r25
    15c6:	79 f4       	brne	.+30     	; 0x15e6 <free+0x12c>
    15c8:	30 97       	sbiw	r30, 0x00	; 0
    15ca:	29 f4       	brne	.+10     	; 0x15d6 <free+0x11c>
    15cc:	10 92 42 02 	sts	0x0242, r1
    15d0:	10 92 41 02 	sts	0x0241, r1
    15d4:	02 c0       	rjmp	.+4      	; 0x15da <free+0x120>
    15d6:	13 82       	std	Z+3, r1	; 0x03
    15d8:	12 82       	std	Z+2, r1	; 0x02
    15da:	22 50       	subi	r18, 0x02	; 2
    15dc:	30 40       	sbci	r19, 0x00	; 0
    15de:	30 93 40 02 	sts	0x0240, r19
    15e2:	20 93 3f 02 	sts	0x023F, r18
    15e6:	df 91       	pop	r29
    15e8:	cf 91       	pop	r28
    15ea:	08 95       	ret

000015ec <memchr>:
    15ec:	fc 01       	movw	r30, r24
    15ee:	41 50       	subi	r20, 0x01	; 1
    15f0:	50 40       	sbci	r21, 0x00	; 0
    15f2:	30 f0       	brcs	.+12     	; 0x1600 <memchr+0x14>
    15f4:	01 90       	ld	r0, Z+
    15f6:	06 16       	cp	r0, r22
    15f8:	d1 f7       	brne	.-12     	; 0x15ee <memchr+0x2>
    15fa:	31 97       	sbiw	r30, 0x01	; 1
    15fc:	cf 01       	movw	r24, r30
    15fe:	08 95       	ret
    1600:	88 27       	eor	r24, r24
    1602:	99 27       	eor	r25, r25
    1604:	08 95       	ret

00001606 <memcpy>:
    1606:	fb 01       	movw	r30, r22
    1608:	dc 01       	movw	r26, r24
    160a:	02 c0       	rjmp	.+4      	; 0x1610 <memcpy+0xa>
    160c:	01 90       	ld	r0, Z+
    160e:	0d 92       	st	X+, r0
    1610:	41 50       	subi	r20, 0x01	; 1
    1612:	50 40       	sbci	r21, 0x00	; 0
    1614:	d8 f7       	brcc	.-10     	; 0x160c <memcpy+0x6>
    1616:	08 95       	ret

00001618 <memmem>:
    1618:	21 15       	cp	r18, r1
    161a:	31 05       	cpc	r19, r1
    161c:	11 f1       	breq	.+68     	; 0x1662 <memmem+0x4a>
    161e:	1f 93       	push	r17
    1620:	0f 93       	push	r16
    1622:	24 0f       	add	r18, r20
    1624:	35 1f       	adc	r19, r21
    1626:	68 0f       	add	r22, r24
    1628:	79 1f       	adc	r23, r25
    162a:	fa 01       	movw	r30, r20
    162c:	11 91       	ld	r17, Z+
    162e:	af 01       	movw	r20, r30
    1630:	dc 01       	movw	r26, r24
    1632:	a6 17       	cp	r26, r22
    1634:	b7 07       	cpc	r27, r23
    1636:	80 f4       	brcc	.+32     	; 0x1658 <memmem+0x40>
    1638:	0d 91       	ld	r16, X+
    163a:	01 17       	cp	r16, r17
    163c:	d1 f7       	brne	.-12     	; 0x1632 <memmem+0x1a>
    163e:	cd 01       	movw	r24, r26
    1640:	fa 01       	movw	r30, r20
    1642:	e2 17       	cp	r30, r18
    1644:	f3 07       	cpc	r31, r19
    1646:	50 f4       	brcc	.+20     	; 0x165c <memmem+0x44>
    1648:	a6 17       	cp	r26, r22
    164a:	b7 07       	cpc	r27, r23
    164c:	28 f4       	brcc	.+10     	; 0x1658 <memmem+0x40>
    164e:	0d 91       	ld	r16, X+
    1650:	01 90       	ld	r0, Z+
    1652:	00 15       	cp	r16, r0
    1654:	b1 f3       	breq	.-20     	; 0x1642 <memmem+0x2a>
    1656:	ec cf       	rjmp	.-40     	; 0x1630 <memmem+0x18>
    1658:	81 e0       	ldi	r24, 0x01	; 1
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	01 97       	sbiw	r24, 0x01	; 1
    165e:	0f 91       	pop	r16
    1660:	1f 91       	pop	r17
    1662:	08 95       	ret

00001664 <memset>:
    1664:	dc 01       	movw	r26, r24
    1666:	01 c0       	rjmp	.+2      	; 0x166a <memset+0x6>
    1668:	6d 93       	st	X+, r22
    166a:	41 50       	subi	r20, 0x01	; 1
    166c:	50 40       	sbci	r21, 0x00	; 0
    166e:	e0 f7       	brcc	.-8      	; 0x1668 <memset+0x4>
    1670:	08 95       	ret

00001672 <strcpy>:
    1672:	fb 01       	movw	r30, r22
    1674:	dc 01       	movw	r26, r24
    1676:	01 90       	ld	r0, Z+
    1678:	0d 92       	st	X+, r0
    167a:	00 20       	and	r0, r0
    167c:	e1 f7       	brne	.-8      	; 0x1676 <strcpy+0x4>
    167e:	08 95       	ret

00001680 <strlen>:
    1680:	fc 01       	movw	r30, r24
    1682:	01 90       	ld	r0, Z+
    1684:	00 20       	and	r0, r0
    1686:	e9 f7       	brne	.-6      	; 0x1682 <strlen+0x2>
    1688:	80 95       	com	r24
    168a:	90 95       	com	r25
    168c:	8e 0f       	add	r24, r30
    168e:	9f 1f       	adc	r25, r31
    1690:	08 95       	ret

00001692 <sprintf>:
    1692:	ae e0       	ldi	r26, 0x0E	; 14
    1694:	b0 e0       	ldi	r27, 0x00	; 0
    1696:	ef e4       	ldi	r30, 0x4F	; 79
    1698:	fb e0       	ldi	r31, 0x0B	; 11
    169a:	0c 94 01 0e 	jmp	0x1c02	; 0x1c02 <__prologue_saves__+0x1c>
    169e:	0d 89       	ldd	r16, Y+21	; 0x15
    16a0:	1e 89       	ldd	r17, Y+22	; 0x16
    16a2:	86 e0       	ldi	r24, 0x06	; 6
    16a4:	8c 83       	std	Y+4, r24	; 0x04
    16a6:	1a 83       	std	Y+2, r17	; 0x02
    16a8:	09 83       	std	Y+1, r16	; 0x01
    16aa:	8f ef       	ldi	r24, 0xFF	; 255
    16ac:	9f e7       	ldi	r25, 0x7F	; 127
    16ae:	9e 83       	std	Y+6, r25	; 0x06
    16b0:	8d 83       	std	Y+5, r24	; 0x05
    16b2:	9e 01       	movw	r18, r28
    16b4:	27 5e       	subi	r18, 0xE7	; 231
    16b6:	3f 4f       	sbci	r19, 0xFF	; 255
    16b8:	ce 01       	movw	r24, r28
    16ba:	01 96       	adiw	r24, 0x01	; 1
    16bc:	6f 89       	ldd	r22, Y+23	; 0x17
    16be:	78 8d       	ldd	r23, Y+24	; 0x18
    16c0:	a9 01       	movw	r20, r18
    16c2:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <vfprintf>
    16c6:	ef 81       	ldd	r30, Y+7	; 0x07
    16c8:	f8 85       	ldd	r31, Y+8	; 0x08
    16ca:	e0 0f       	add	r30, r16
    16cc:	f1 1f       	adc	r31, r17
    16ce:	10 82       	st	Z, r1
    16d0:	2e 96       	adiw	r28, 0x0e	; 14
    16d2:	e4 e0       	ldi	r30, 0x04	; 4
    16d4:	0c 94 1d 0e 	jmp	0x1c3a	; 0x1c3a <__epilogue_restores__+0x1c>

000016d8 <vfprintf>:
    16d8:	ac e0       	ldi	r26, 0x0C	; 12
    16da:	b0 e0       	ldi	r27, 0x00	; 0
    16dc:	e2 e7       	ldi	r30, 0x72	; 114
    16de:	fb e0       	ldi	r31, 0x0B	; 11
    16e0:	0c 94 f3 0d 	jmp	0x1be6	; 0x1be6 <__prologue_saves__>
    16e4:	6c 01       	movw	r12, r24
    16e6:	1b 01       	movw	r2, r22
    16e8:	8a 01       	movw	r16, r20
    16ea:	fc 01       	movw	r30, r24
    16ec:	17 82       	std	Z+7, r1	; 0x07
    16ee:	16 82       	std	Z+6, r1	; 0x06
    16f0:	83 81       	ldd	r24, Z+3	; 0x03
    16f2:	81 ff       	sbrs	r24, 1
    16f4:	d1 c1       	rjmp	.+930    	; 0x1a98 <vfprintf+0x3c0>
    16f6:	2e 01       	movw	r4, r28
    16f8:	08 94       	sec
    16fa:	41 1c       	adc	r4, r1
    16fc:	51 1c       	adc	r5, r1
    16fe:	f6 01       	movw	r30, r12
    1700:	93 81       	ldd	r25, Z+3	; 0x03
    1702:	f1 01       	movw	r30, r2
    1704:	93 fd       	sbrc	r25, 3
    1706:	85 91       	lpm	r24, Z+
    1708:	93 ff       	sbrs	r25, 3
    170a:	81 91       	ld	r24, Z+
    170c:	1f 01       	movw	r2, r30
    170e:	88 23       	and	r24, r24
    1710:	09 f4       	brne	.+2      	; 0x1714 <vfprintf+0x3c>
    1712:	be c1       	rjmp	.+892    	; 0x1a90 <vfprintf+0x3b8>
    1714:	85 32       	cpi	r24, 0x25	; 37
    1716:	39 f4       	brne	.+14     	; 0x1726 <vfprintf+0x4e>
    1718:	93 fd       	sbrc	r25, 3
    171a:	85 91       	lpm	r24, Z+
    171c:	93 ff       	sbrs	r25, 3
    171e:	81 91       	ld	r24, Z+
    1720:	1f 01       	movw	r2, r30
    1722:	85 32       	cpi	r24, 0x25	; 37
    1724:	29 f4       	brne	.+10     	; 0x1730 <vfprintf+0x58>
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	b6 01       	movw	r22, r12
    172a:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <fputc>
    172e:	e7 cf       	rjmp	.-50     	; 0x16fe <vfprintf+0x26>
    1730:	ee 24       	eor	r14, r14
    1732:	ff 24       	eor	r15, r15
    1734:	20 e0       	ldi	r18, 0x00	; 0
    1736:	20 32       	cpi	r18, 0x20	; 32
    1738:	b0 f4       	brcc	.+44     	; 0x1766 <vfprintf+0x8e>
    173a:	8b 32       	cpi	r24, 0x2B	; 43
    173c:	69 f0       	breq	.+26     	; 0x1758 <vfprintf+0x80>
    173e:	8c 32       	cpi	r24, 0x2C	; 44
    1740:	28 f4       	brcc	.+10     	; 0x174c <vfprintf+0x74>
    1742:	80 32       	cpi	r24, 0x20	; 32
    1744:	51 f0       	breq	.+20     	; 0x175a <vfprintf+0x82>
    1746:	83 32       	cpi	r24, 0x23	; 35
    1748:	71 f4       	brne	.+28     	; 0x1766 <vfprintf+0x8e>
    174a:	0b c0       	rjmp	.+22     	; 0x1762 <vfprintf+0x8a>
    174c:	8d 32       	cpi	r24, 0x2D	; 45
    174e:	39 f0       	breq	.+14     	; 0x175e <vfprintf+0x86>
    1750:	80 33       	cpi	r24, 0x30	; 48
    1752:	49 f4       	brne	.+18     	; 0x1766 <vfprintf+0x8e>
    1754:	21 60       	ori	r18, 0x01	; 1
    1756:	2c c0       	rjmp	.+88     	; 0x17b0 <vfprintf+0xd8>
    1758:	22 60       	ori	r18, 0x02	; 2
    175a:	24 60       	ori	r18, 0x04	; 4
    175c:	29 c0       	rjmp	.+82     	; 0x17b0 <vfprintf+0xd8>
    175e:	28 60       	ori	r18, 0x08	; 8
    1760:	27 c0       	rjmp	.+78     	; 0x17b0 <vfprintf+0xd8>
    1762:	20 61       	ori	r18, 0x10	; 16
    1764:	25 c0       	rjmp	.+74     	; 0x17b0 <vfprintf+0xd8>
    1766:	27 fd       	sbrc	r18, 7
    1768:	2c c0       	rjmp	.+88     	; 0x17c2 <vfprintf+0xea>
    176a:	38 2f       	mov	r19, r24
    176c:	30 53       	subi	r19, 0x30	; 48
    176e:	3a 30       	cpi	r19, 0x0A	; 10
    1770:	98 f4       	brcc	.+38     	; 0x1798 <vfprintf+0xc0>
    1772:	26 ff       	sbrs	r18, 6
    1774:	08 c0       	rjmp	.+16     	; 0x1786 <vfprintf+0xae>
    1776:	8e 2d       	mov	r24, r14
    1778:	88 0f       	add	r24, r24
    177a:	e8 2e       	mov	r14, r24
    177c:	ee 0c       	add	r14, r14
    177e:	ee 0c       	add	r14, r14
    1780:	e8 0e       	add	r14, r24
    1782:	e3 0e       	add	r14, r19
    1784:	15 c0       	rjmp	.+42     	; 0x17b0 <vfprintf+0xd8>
    1786:	8f 2d       	mov	r24, r15
    1788:	88 0f       	add	r24, r24
    178a:	f8 2e       	mov	r15, r24
    178c:	ff 0c       	add	r15, r15
    178e:	ff 0c       	add	r15, r15
    1790:	f8 0e       	add	r15, r24
    1792:	f3 0e       	add	r15, r19
    1794:	20 62       	ori	r18, 0x20	; 32
    1796:	0c c0       	rjmp	.+24     	; 0x17b0 <vfprintf+0xd8>
    1798:	8e 32       	cpi	r24, 0x2E	; 46
    179a:	21 f4       	brne	.+8      	; 0x17a4 <vfprintf+0xcc>
    179c:	26 fd       	sbrc	r18, 6
    179e:	78 c1       	rjmp	.+752    	; 0x1a90 <vfprintf+0x3b8>
    17a0:	20 64       	ori	r18, 0x40	; 64
    17a2:	06 c0       	rjmp	.+12     	; 0x17b0 <vfprintf+0xd8>
    17a4:	8c 36       	cpi	r24, 0x6C	; 108
    17a6:	11 f4       	brne	.+4      	; 0x17ac <vfprintf+0xd4>
    17a8:	20 68       	ori	r18, 0x80	; 128
    17aa:	02 c0       	rjmp	.+4      	; 0x17b0 <vfprintf+0xd8>
    17ac:	88 36       	cpi	r24, 0x68	; 104
    17ae:	49 f4       	brne	.+18     	; 0x17c2 <vfprintf+0xea>
    17b0:	f1 01       	movw	r30, r2
    17b2:	93 fd       	sbrc	r25, 3
    17b4:	85 91       	lpm	r24, Z+
    17b6:	93 ff       	sbrs	r25, 3
    17b8:	81 91       	ld	r24, Z+
    17ba:	1f 01       	movw	r2, r30
    17bc:	88 23       	and	r24, r24
    17be:	09 f0       	breq	.+2      	; 0x17c2 <vfprintf+0xea>
    17c0:	ba cf       	rjmp	.-140    	; 0x1736 <vfprintf+0x5e>
    17c2:	98 2f       	mov	r25, r24
    17c4:	95 54       	subi	r25, 0x45	; 69
    17c6:	93 30       	cpi	r25, 0x03	; 3
    17c8:	18 f0       	brcs	.+6      	; 0x17d0 <vfprintf+0xf8>
    17ca:	90 52       	subi	r25, 0x20	; 32
    17cc:	93 30       	cpi	r25, 0x03	; 3
    17ce:	28 f4       	brcc	.+10     	; 0x17da <vfprintf+0x102>
    17d0:	0c 5f       	subi	r16, 0xFC	; 252
    17d2:	1f 4f       	sbci	r17, 0xFF	; 255
    17d4:	ff e3       	ldi	r31, 0x3F	; 63
    17d6:	f9 83       	std	Y+1, r31	; 0x01
    17d8:	0d c0       	rjmp	.+26     	; 0x17f4 <vfprintf+0x11c>
    17da:	83 36       	cpi	r24, 0x63	; 99
    17dc:	31 f0       	breq	.+12     	; 0x17ea <vfprintf+0x112>
    17de:	83 37       	cpi	r24, 0x73	; 115
    17e0:	71 f0       	breq	.+28     	; 0x17fe <vfprintf+0x126>
    17e2:	83 35       	cpi	r24, 0x53	; 83
    17e4:	09 f0       	breq	.+2      	; 0x17e8 <vfprintf+0x110>
    17e6:	60 c0       	rjmp	.+192    	; 0x18a8 <vfprintf+0x1d0>
    17e8:	22 c0       	rjmp	.+68     	; 0x182e <vfprintf+0x156>
    17ea:	f8 01       	movw	r30, r16
    17ec:	80 81       	ld	r24, Z
    17ee:	89 83       	std	Y+1, r24	; 0x01
    17f0:	0e 5f       	subi	r16, 0xFE	; 254
    17f2:	1f 4f       	sbci	r17, 0xFF	; 255
    17f4:	42 01       	movw	r8, r4
    17f6:	71 e0       	ldi	r23, 0x01	; 1
    17f8:	a7 2e       	mov	r10, r23
    17fa:	b1 2c       	mov	r11, r1
    17fc:	16 c0       	rjmp	.+44     	; 0x182a <vfprintf+0x152>
    17fe:	62 e0       	ldi	r22, 0x02	; 2
    1800:	66 2e       	mov	r6, r22
    1802:	71 2c       	mov	r7, r1
    1804:	60 0e       	add	r6, r16
    1806:	71 1e       	adc	r7, r17
    1808:	f8 01       	movw	r30, r16
    180a:	80 80       	ld	r8, Z
    180c:	91 80       	ldd	r9, Z+1	; 0x01
    180e:	26 ff       	sbrs	r18, 6
    1810:	03 c0       	rjmp	.+6      	; 0x1818 <vfprintf+0x140>
    1812:	6e 2d       	mov	r22, r14
    1814:	70 e0       	ldi	r23, 0x00	; 0
    1816:	02 c0       	rjmp	.+4      	; 0x181c <vfprintf+0x144>
    1818:	6f ef       	ldi	r22, 0xFF	; 255
    181a:	7f ef       	ldi	r23, 0xFF	; 255
    181c:	c4 01       	movw	r24, r8
    181e:	2c 87       	std	Y+12, r18	; 0x0c
    1820:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <strnlen>
    1824:	5c 01       	movw	r10, r24
    1826:	83 01       	movw	r16, r6
    1828:	2c 85       	ldd	r18, Y+12	; 0x0c
    182a:	2f 77       	andi	r18, 0x7F	; 127
    182c:	17 c0       	rjmp	.+46     	; 0x185c <vfprintf+0x184>
    182e:	52 e0       	ldi	r21, 0x02	; 2
    1830:	65 2e       	mov	r6, r21
    1832:	71 2c       	mov	r7, r1
    1834:	60 0e       	add	r6, r16
    1836:	71 1e       	adc	r7, r17
    1838:	f8 01       	movw	r30, r16
    183a:	80 80       	ld	r8, Z
    183c:	91 80       	ldd	r9, Z+1	; 0x01
    183e:	26 ff       	sbrs	r18, 6
    1840:	03 c0       	rjmp	.+6      	; 0x1848 <vfprintf+0x170>
    1842:	6e 2d       	mov	r22, r14
    1844:	70 e0       	ldi	r23, 0x00	; 0
    1846:	02 c0       	rjmp	.+4      	; 0x184c <vfprintf+0x174>
    1848:	6f ef       	ldi	r22, 0xFF	; 255
    184a:	7f ef       	ldi	r23, 0xFF	; 255
    184c:	c4 01       	movw	r24, r8
    184e:	2c 87       	std	Y+12, r18	; 0x0c
    1850:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <strnlen_P>
    1854:	5c 01       	movw	r10, r24
    1856:	2c 85       	ldd	r18, Y+12	; 0x0c
    1858:	20 68       	ori	r18, 0x80	; 128
    185a:	83 01       	movw	r16, r6
    185c:	23 fd       	sbrc	r18, 3
    185e:	20 c0       	rjmp	.+64     	; 0x18a0 <vfprintf+0x1c8>
    1860:	08 c0       	rjmp	.+16     	; 0x1872 <vfprintf+0x19a>
    1862:	80 e2       	ldi	r24, 0x20	; 32
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	b6 01       	movw	r22, r12
    1868:	2c 87       	std	Y+12, r18	; 0x0c
    186a:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <fputc>
    186e:	fa 94       	dec	r15
    1870:	2c 85       	ldd	r18, Y+12	; 0x0c
    1872:	8f 2d       	mov	r24, r15
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	a8 16       	cp	r10, r24
    1878:	b9 06       	cpc	r11, r25
    187a:	98 f3       	brcs	.-26     	; 0x1862 <vfprintf+0x18a>
    187c:	11 c0       	rjmp	.+34     	; 0x18a0 <vfprintf+0x1c8>
    187e:	f4 01       	movw	r30, r8
    1880:	27 fd       	sbrc	r18, 7
    1882:	85 91       	lpm	r24, Z+
    1884:	27 ff       	sbrs	r18, 7
    1886:	81 91       	ld	r24, Z+
    1888:	4f 01       	movw	r8, r30
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	b6 01       	movw	r22, r12
    188e:	2c 87       	std	Y+12, r18	; 0x0c
    1890:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <fputc>
    1894:	2c 85       	ldd	r18, Y+12	; 0x0c
    1896:	f1 10       	cpse	r15, r1
    1898:	fa 94       	dec	r15
    189a:	08 94       	sec
    189c:	a1 08       	sbc	r10, r1
    189e:	b1 08       	sbc	r11, r1
    18a0:	a1 14       	cp	r10, r1
    18a2:	b1 04       	cpc	r11, r1
    18a4:	61 f7       	brne	.-40     	; 0x187e <vfprintf+0x1a6>
    18a6:	f1 c0       	rjmp	.+482    	; 0x1a8a <vfprintf+0x3b2>
    18a8:	84 36       	cpi	r24, 0x64	; 100
    18aa:	11 f0       	breq	.+4      	; 0x18b0 <vfprintf+0x1d8>
    18ac:	89 36       	cpi	r24, 0x69	; 105
    18ae:	49 f5       	brne	.+82     	; 0x1902 <vfprintf+0x22a>
    18b0:	27 ff       	sbrs	r18, 7
    18b2:	08 c0       	rjmp	.+16     	; 0x18c4 <vfprintf+0x1ec>
    18b4:	f8 01       	movw	r30, r16
    18b6:	60 81       	ld	r22, Z
    18b8:	71 81       	ldd	r23, Z+1	; 0x01
    18ba:	82 81       	ldd	r24, Z+2	; 0x02
    18bc:	93 81       	ldd	r25, Z+3	; 0x03
    18be:	0c 5f       	subi	r16, 0xFC	; 252
    18c0:	1f 4f       	sbci	r17, 0xFF	; 255
    18c2:	09 c0       	rjmp	.+18     	; 0x18d6 <vfprintf+0x1fe>
    18c4:	f8 01       	movw	r30, r16
    18c6:	60 81       	ld	r22, Z
    18c8:	71 81       	ldd	r23, Z+1	; 0x01
    18ca:	88 27       	eor	r24, r24
    18cc:	77 fd       	sbrc	r23, 7
    18ce:	80 95       	com	r24
    18d0:	98 2f       	mov	r25, r24
    18d2:	0e 5f       	subi	r16, 0xFE	; 254
    18d4:	1f 4f       	sbci	r17, 0xFF	; 255
    18d6:	4f e6       	ldi	r20, 0x6F	; 111
    18d8:	b4 2e       	mov	r11, r20
    18da:	b2 22       	and	r11, r18
    18dc:	97 ff       	sbrs	r25, 7
    18de:	09 c0       	rjmp	.+18     	; 0x18f2 <vfprintf+0x21a>
    18e0:	90 95       	com	r25
    18e2:	80 95       	com	r24
    18e4:	70 95       	com	r23
    18e6:	61 95       	neg	r22
    18e8:	7f 4f       	sbci	r23, 0xFF	; 255
    18ea:	8f 4f       	sbci	r24, 0xFF	; 255
    18ec:	9f 4f       	sbci	r25, 0xFF	; 255
    18ee:	f0 e8       	ldi	r31, 0x80	; 128
    18f0:	bf 2a       	or	r11, r31
    18f2:	a2 01       	movw	r20, r4
    18f4:	2a e0       	ldi	r18, 0x0A	; 10
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <__ultoa_invert>
    18fc:	78 2e       	mov	r7, r24
    18fe:	74 18       	sub	r7, r4
    1900:	45 c0       	rjmp	.+138    	; 0x198c <vfprintf+0x2b4>
    1902:	85 37       	cpi	r24, 0x75	; 117
    1904:	31 f4       	brne	.+12     	; 0x1912 <vfprintf+0x23a>
    1906:	3f ee       	ldi	r19, 0xEF	; 239
    1908:	b3 2e       	mov	r11, r19
    190a:	b2 22       	and	r11, r18
    190c:	2a e0       	ldi	r18, 0x0A	; 10
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	25 c0       	rjmp	.+74     	; 0x195c <vfprintf+0x284>
    1912:	99 ef       	ldi	r25, 0xF9	; 249
    1914:	b9 2e       	mov	r11, r25
    1916:	b2 22       	and	r11, r18
    1918:	8f 36       	cpi	r24, 0x6F	; 111
    191a:	c1 f0       	breq	.+48     	; 0x194c <vfprintf+0x274>
    191c:	80 37       	cpi	r24, 0x70	; 112
    191e:	20 f4       	brcc	.+8      	; 0x1928 <vfprintf+0x250>
    1920:	88 35       	cpi	r24, 0x58	; 88
    1922:	09 f0       	breq	.+2      	; 0x1926 <vfprintf+0x24e>
    1924:	b5 c0       	rjmp	.+362    	; 0x1a90 <vfprintf+0x3b8>
    1926:	0d c0       	rjmp	.+26     	; 0x1942 <vfprintf+0x26a>
    1928:	80 37       	cpi	r24, 0x70	; 112
    192a:	21 f0       	breq	.+8      	; 0x1934 <vfprintf+0x25c>
    192c:	88 37       	cpi	r24, 0x78	; 120
    192e:	09 f0       	breq	.+2      	; 0x1932 <vfprintf+0x25a>
    1930:	af c0       	rjmp	.+350    	; 0x1a90 <vfprintf+0x3b8>
    1932:	02 c0       	rjmp	.+4      	; 0x1938 <vfprintf+0x260>
    1934:	20 e1       	ldi	r18, 0x10	; 16
    1936:	b2 2a       	or	r11, r18
    1938:	b4 fe       	sbrs	r11, 4
    193a:	0b c0       	rjmp	.+22     	; 0x1952 <vfprintf+0x27a>
    193c:	84 e0       	ldi	r24, 0x04	; 4
    193e:	b8 2a       	or	r11, r24
    1940:	08 c0       	rjmp	.+16     	; 0x1952 <vfprintf+0x27a>
    1942:	b4 fe       	sbrs	r11, 4
    1944:	09 c0       	rjmp	.+18     	; 0x1958 <vfprintf+0x280>
    1946:	e6 e0       	ldi	r30, 0x06	; 6
    1948:	be 2a       	or	r11, r30
    194a:	06 c0       	rjmp	.+12     	; 0x1958 <vfprintf+0x280>
    194c:	28 e0       	ldi	r18, 0x08	; 8
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	05 c0       	rjmp	.+10     	; 0x195c <vfprintf+0x284>
    1952:	20 e1       	ldi	r18, 0x10	; 16
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	02 c0       	rjmp	.+4      	; 0x195c <vfprintf+0x284>
    1958:	20 e1       	ldi	r18, 0x10	; 16
    195a:	32 e0       	ldi	r19, 0x02	; 2
    195c:	b7 fe       	sbrs	r11, 7
    195e:	08 c0       	rjmp	.+16     	; 0x1970 <vfprintf+0x298>
    1960:	f8 01       	movw	r30, r16
    1962:	60 81       	ld	r22, Z
    1964:	71 81       	ldd	r23, Z+1	; 0x01
    1966:	82 81       	ldd	r24, Z+2	; 0x02
    1968:	93 81       	ldd	r25, Z+3	; 0x03
    196a:	0c 5f       	subi	r16, 0xFC	; 252
    196c:	1f 4f       	sbci	r17, 0xFF	; 255
    196e:	07 c0       	rjmp	.+14     	; 0x197e <vfprintf+0x2a6>
    1970:	f8 01       	movw	r30, r16
    1972:	60 81       	ld	r22, Z
    1974:	71 81       	ldd	r23, Z+1	; 0x01
    1976:	80 e0       	ldi	r24, 0x00	; 0
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	0e 5f       	subi	r16, 0xFE	; 254
    197c:	1f 4f       	sbci	r17, 0xFF	; 255
    197e:	a2 01       	movw	r20, r4
    1980:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <__ultoa_invert>
    1984:	78 2e       	mov	r7, r24
    1986:	74 18       	sub	r7, r4
    1988:	ff e7       	ldi	r31, 0x7F	; 127
    198a:	bf 22       	and	r11, r31
    198c:	b6 fe       	sbrs	r11, 6
    198e:	0b c0       	rjmp	.+22     	; 0x19a6 <vfprintf+0x2ce>
    1990:	2e ef       	ldi	r18, 0xFE	; 254
    1992:	b2 22       	and	r11, r18
    1994:	7e 14       	cp	r7, r14
    1996:	38 f4       	brcc	.+14     	; 0x19a6 <vfprintf+0x2ce>
    1998:	b4 fe       	sbrs	r11, 4
    199a:	07 c0       	rjmp	.+14     	; 0x19aa <vfprintf+0x2d2>
    199c:	b2 fc       	sbrc	r11, 2
    199e:	05 c0       	rjmp	.+10     	; 0x19aa <vfprintf+0x2d2>
    19a0:	8f ee       	ldi	r24, 0xEF	; 239
    19a2:	b8 22       	and	r11, r24
    19a4:	02 c0       	rjmp	.+4      	; 0x19aa <vfprintf+0x2d2>
    19a6:	a7 2c       	mov	r10, r7
    19a8:	01 c0       	rjmp	.+2      	; 0x19ac <vfprintf+0x2d4>
    19aa:	ae 2c       	mov	r10, r14
    19ac:	8b 2d       	mov	r24, r11
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	b4 fe       	sbrs	r11, 4
    19b2:	0d c0       	rjmp	.+26     	; 0x19ce <vfprintf+0x2f6>
    19b4:	fe 01       	movw	r30, r28
    19b6:	e7 0d       	add	r30, r7
    19b8:	f1 1d       	adc	r31, r1
    19ba:	20 81       	ld	r18, Z
    19bc:	20 33       	cpi	r18, 0x30	; 48
    19be:	19 f4       	brne	.+6      	; 0x19c6 <vfprintf+0x2ee>
    19c0:	e9 ee       	ldi	r30, 0xE9	; 233
    19c2:	be 22       	and	r11, r30
    19c4:	09 c0       	rjmp	.+18     	; 0x19d8 <vfprintf+0x300>
    19c6:	a3 94       	inc	r10
    19c8:	b2 fe       	sbrs	r11, 2
    19ca:	06 c0       	rjmp	.+12     	; 0x19d8 <vfprintf+0x300>
    19cc:	04 c0       	rjmp	.+8      	; 0x19d6 <vfprintf+0x2fe>
    19ce:	86 78       	andi	r24, 0x86	; 134
    19d0:	90 70       	andi	r25, 0x00	; 0
    19d2:	00 97       	sbiw	r24, 0x00	; 0
    19d4:	09 f0       	breq	.+2      	; 0x19d8 <vfprintf+0x300>
    19d6:	a3 94       	inc	r10
    19d8:	8b 2c       	mov	r8, r11
    19da:	99 24       	eor	r9, r9
    19dc:	b3 fc       	sbrc	r11, 3
    19de:	14 c0       	rjmp	.+40     	; 0x1a08 <vfprintf+0x330>
    19e0:	b0 fe       	sbrs	r11, 0
    19e2:	0f c0       	rjmp	.+30     	; 0x1a02 <vfprintf+0x32a>
    19e4:	af 14       	cp	r10, r15
    19e6:	28 f4       	brcc	.+10     	; 0x19f2 <vfprintf+0x31a>
    19e8:	e7 2c       	mov	r14, r7
    19ea:	ef 0c       	add	r14, r15
    19ec:	ea 18       	sub	r14, r10
    19ee:	af 2c       	mov	r10, r15
    19f0:	08 c0       	rjmp	.+16     	; 0x1a02 <vfprintf+0x32a>
    19f2:	e7 2c       	mov	r14, r7
    19f4:	06 c0       	rjmp	.+12     	; 0x1a02 <vfprintf+0x32a>
    19f6:	80 e2       	ldi	r24, 0x20	; 32
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	b6 01       	movw	r22, r12
    19fc:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <fputc>
    1a00:	a3 94       	inc	r10
    1a02:	af 14       	cp	r10, r15
    1a04:	c0 f3       	brcs	.-16     	; 0x19f6 <vfprintf+0x31e>
    1a06:	04 c0       	rjmp	.+8      	; 0x1a10 <vfprintf+0x338>
    1a08:	af 14       	cp	r10, r15
    1a0a:	10 f4       	brcc	.+4      	; 0x1a10 <vfprintf+0x338>
    1a0c:	fa 18       	sub	r15, r10
    1a0e:	01 c0       	rjmp	.+2      	; 0x1a12 <vfprintf+0x33a>
    1a10:	ff 24       	eor	r15, r15
    1a12:	84 fe       	sbrs	r8, 4
    1a14:	0f c0       	rjmp	.+30     	; 0x1a34 <vfprintf+0x35c>
    1a16:	80 e3       	ldi	r24, 0x30	; 48
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	b6 01       	movw	r22, r12
    1a1c:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <fputc>
    1a20:	82 fe       	sbrs	r8, 2
    1a22:	1f c0       	rjmp	.+62     	; 0x1a62 <vfprintf+0x38a>
    1a24:	81 fe       	sbrs	r8, 1
    1a26:	03 c0       	rjmp	.+6      	; 0x1a2e <vfprintf+0x356>
    1a28:	88 e5       	ldi	r24, 0x58	; 88
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	10 c0       	rjmp	.+32     	; 0x1a4e <vfprintf+0x376>
    1a2e:	88 e7       	ldi	r24, 0x78	; 120
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	0d c0       	rjmp	.+26     	; 0x1a4e <vfprintf+0x376>
    1a34:	c4 01       	movw	r24, r8
    1a36:	86 78       	andi	r24, 0x86	; 134
    1a38:	90 70       	andi	r25, 0x00	; 0
    1a3a:	00 97       	sbiw	r24, 0x00	; 0
    1a3c:	91 f0       	breq	.+36     	; 0x1a62 <vfprintf+0x38a>
    1a3e:	81 fc       	sbrc	r8, 1
    1a40:	02 c0       	rjmp	.+4      	; 0x1a46 <vfprintf+0x36e>
    1a42:	80 e2       	ldi	r24, 0x20	; 32
    1a44:	01 c0       	rjmp	.+2      	; 0x1a48 <vfprintf+0x370>
    1a46:	8b e2       	ldi	r24, 0x2B	; 43
    1a48:	b7 fc       	sbrc	r11, 7
    1a4a:	8d e2       	ldi	r24, 0x2D	; 45
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	b6 01       	movw	r22, r12
    1a50:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <fputc>
    1a54:	06 c0       	rjmp	.+12     	; 0x1a62 <vfprintf+0x38a>
    1a56:	80 e3       	ldi	r24, 0x30	; 48
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	b6 01       	movw	r22, r12
    1a5c:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <fputc>
    1a60:	ea 94       	dec	r14
    1a62:	7e 14       	cp	r7, r14
    1a64:	c0 f3       	brcs	.-16     	; 0x1a56 <vfprintf+0x37e>
    1a66:	7a 94       	dec	r7
    1a68:	f2 01       	movw	r30, r4
    1a6a:	e7 0d       	add	r30, r7
    1a6c:	f1 1d       	adc	r31, r1
    1a6e:	80 81       	ld	r24, Z
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	b6 01       	movw	r22, r12
    1a74:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <fputc>
    1a78:	77 20       	and	r7, r7
    1a7a:	a9 f7       	brne	.-22     	; 0x1a66 <vfprintf+0x38e>
    1a7c:	06 c0       	rjmp	.+12     	; 0x1a8a <vfprintf+0x3b2>
    1a7e:	80 e2       	ldi	r24, 0x20	; 32
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	b6 01       	movw	r22, r12
    1a84:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <fputc>
    1a88:	fa 94       	dec	r15
    1a8a:	ff 20       	and	r15, r15
    1a8c:	c1 f7       	brne	.-16     	; 0x1a7e <vfprintf+0x3a6>
    1a8e:	37 ce       	rjmp	.-914    	; 0x16fe <vfprintf+0x26>
    1a90:	f6 01       	movw	r30, r12
    1a92:	26 81       	ldd	r18, Z+6	; 0x06
    1a94:	37 81       	ldd	r19, Z+7	; 0x07
    1a96:	02 c0       	rjmp	.+4      	; 0x1a9c <vfprintf+0x3c4>
    1a98:	2f ef       	ldi	r18, 0xFF	; 255
    1a9a:	3f ef       	ldi	r19, 0xFF	; 255
    1a9c:	c9 01       	movw	r24, r18
    1a9e:	2c 96       	adiw	r28, 0x0c	; 12
    1aa0:	e2 e1       	ldi	r30, 0x12	; 18
    1aa2:	0c 94 0f 0e 	jmp	0x1c1e	; 0x1c1e <__epilogue_restores__>

00001aa6 <strnlen_P>:
    1aa6:	fc 01       	movw	r30, r24
    1aa8:	05 90       	lpm	r0, Z+
    1aaa:	61 50       	subi	r22, 0x01	; 1
    1aac:	70 40       	sbci	r23, 0x00	; 0
    1aae:	01 10       	cpse	r0, r1
    1ab0:	d8 f7       	brcc	.-10     	; 0x1aa8 <strnlen_P+0x2>
    1ab2:	80 95       	com	r24
    1ab4:	90 95       	com	r25
    1ab6:	8e 0f       	add	r24, r30
    1ab8:	9f 1f       	adc	r25, r31
    1aba:	08 95       	ret

00001abc <strnlen>:
    1abc:	fc 01       	movw	r30, r24
    1abe:	61 50       	subi	r22, 0x01	; 1
    1ac0:	70 40       	sbci	r23, 0x00	; 0
    1ac2:	01 90       	ld	r0, Z+
    1ac4:	01 10       	cpse	r0, r1
    1ac6:	d8 f7       	brcc	.-10     	; 0x1abe <strnlen+0x2>
    1ac8:	80 95       	com	r24
    1aca:	90 95       	com	r25
    1acc:	8e 0f       	add	r24, r30
    1ace:	9f 1f       	adc	r25, r31
    1ad0:	08 95       	ret

00001ad2 <fputc>:
    1ad2:	0f 93       	push	r16
    1ad4:	1f 93       	push	r17
    1ad6:	cf 93       	push	r28
    1ad8:	df 93       	push	r29
    1ada:	8c 01       	movw	r16, r24
    1adc:	eb 01       	movw	r28, r22
    1ade:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae0:	81 ff       	sbrs	r24, 1
    1ae2:	1b c0       	rjmp	.+54     	; 0x1b1a <fputc+0x48>
    1ae4:	82 ff       	sbrs	r24, 2
    1ae6:	0d c0       	rjmp	.+26     	; 0x1b02 <fputc+0x30>
    1ae8:	2e 81       	ldd	r18, Y+6	; 0x06
    1aea:	3f 81       	ldd	r19, Y+7	; 0x07
    1aec:	8c 81       	ldd	r24, Y+4	; 0x04
    1aee:	9d 81       	ldd	r25, Y+5	; 0x05
    1af0:	28 17       	cp	r18, r24
    1af2:	39 07       	cpc	r19, r25
    1af4:	64 f4       	brge	.+24     	; 0x1b0e <fputc+0x3c>
    1af6:	e8 81       	ld	r30, Y
    1af8:	f9 81       	ldd	r31, Y+1	; 0x01
    1afa:	01 93       	st	Z+, r16
    1afc:	f9 83       	std	Y+1, r31	; 0x01
    1afe:	e8 83       	st	Y, r30
    1b00:	06 c0       	rjmp	.+12     	; 0x1b0e <fputc+0x3c>
    1b02:	e8 85       	ldd	r30, Y+8	; 0x08
    1b04:	f9 85       	ldd	r31, Y+9	; 0x09
    1b06:	80 2f       	mov	r24, r16
    1b08:	09 95       	icall
    1b0a:	00 97       	sbiw	r24, 0x00	; 0
    1b0c:	31 f4       	brne	.+12     	; 0x1b1a <fputc+0x48>
    1b0e:	8e 81       	ldd	r24, Y+6	; 0x06
    1b10:	9f 81       	ldd	r25, Y+7	; 0x07
    1b12:	01 96       	adiw	r24, 0x01	; 1
    1b14:	9f 83       	std	Y+7, r25	; 0x07
    1b16:	8e 83       	std	Y+6, r24	; 0x06
    1b18:	02 c0       	rjmp	.+4      	; 0x1b1e <fputc+0x4c>
    1b1a:	0f ef       	ldi	r16, 0xFF	; 255
    1b1c:	1f ef       	ldi	r17, 0xFF	; 255
    1b1e:	c8 01       	movw	r24, r16
    1b20:	df 91       	pop	r29
    1b22:	cf 91       	pop	r28
    1b24:	1f 91       	pop	r17
    1b26:	0f 91       	pop	r16
    1b28:	08 95       	ret

00001b2a <__ultoa_invert>:
    1b2a:	fa 01       	movw	r30, r20
    1b2c:	aa 27       	eor	r26, r26
    1b2e:	28 30       	cpi	r18, 0x08	; 8
    1b30:	51 f1       	breq	.+84     	; 0x1b86 <__ultoa_invert+0x5c>
    1b32:	20 31       	cpi	r18, 0x10	; 16
    1b34:	81 f1       	breq	.+96     	; 0x1b96 <__ultoa_invert+0x6c>
    1b36:	e8 94       	clt
    1b38:	6f 93       	push	r22
    1b3a:	6e 7f       	andi	r22, 0xFE	; 254
    1b3c:	6e 5f       	subi	r22, 0xFE	; 254
    1b3e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b40:	8f 4f       	sbci	r24, 0xFF	; 255
    1b42:	9f 4f       	sbci	r25, 0xFF	; 255
    1b44:	af 4f       	sbci	r26, 0xFF	; 255
    1b46:	b1 e0       	ldi	r27, 0x01	; 1
    1b48:	3e d0       	rcall	.+124    	; 0x1bc6 <__ultoa_invert+0x9c>
    1b4a:	b4 e0       	ldi	r27, 0x04	; 4
    1b4c:	3c d0       	rcall	.+120    	; 0x1bc6 <__ultoa_invert+0x9c>
    1b4e:	67 0f       	add	r22, r23
    1b50:	78 1f       	adc	r23, r24
    1b52:	89 1f       	adc	r24, r25
    1b54:	9a 1f       	adc	r25, r26
    1b56:	a1 1d       	adc	r26, r1
    1b58:	68 0f       	add	r22, r24
    1b5a:	79 1f       	adc	r23, r25
    1b5c:	8a 1f       	adc	r24, r26
    1b5e:	91 1d       	adc	r25, r1
    1b60:	a1 1d       	adc	r26, r1
    1b62:	6a 0f       	add	r22, r26
    1b64:	71 1d       	adc	r23, r1
    1b66:	81 1d       	adc	r24, r1
    1b68:	91 1d       	adc	r25, r1
    1b6a:	a1 1d       	adc	r26, r1
    1b6c:	20 d0       	rcall	.+64     	; 0x1bae <__ultoa_invert+0x84>
    1b6e:	09 f4       	brne	.+2      	; 0x1b72 <__ultoa_invert+0x48>
    1b70:	68 94       	set
    1b72:	3f 91       	pop	r19
    1b74:	2a e0       	ldi	r18, 0x0A	; 10
    1b76:	26 9f       	mul	r18, r22
    1b78:	11 24       	eor	r1, r1
    1b7a:	30 19       	sub	r19, r0
    1b7c:	30 5d       	subi	r19, 0xD0	; 208
    1b7e:	31 93       	st	Z+, r19
    1b80:	de f6       	brtc	.-74     	; 0x1b38 <__ultoa_invert+0xe>
    1b82:	cf 01       	movw	r24, r30
    1b84:	08 95       	ret
    1b86:	46 2f       	mov	r20, r22
    1b88:	47 70       	andi	r20, 0x07	; 7
    1b8a:	40 5d       	subi	r20, 0xD0	; 208
    1b8c:	41 93       	st	Z+, r20
    1b8e:	b3 e0       	ldi	r27, 0x03	; 3
    1b90:	0f d0       	rcall	.+30     	; 0x1bb0 <__ultoa_invert+0x86>
    1b92:	c9 f7       	brne	.-14     	; 0x1b86 <__ultoa_invert+0x5c>
    1b94:	f6 cf       	rjmp	.-20     	; 0x1b82 <__ultoa_invert+0x58>
    1b96:	46 2f       	mov	r20, r22
    1b98:	4f 70       	andi	r20, 0x0F	; 15
    1b9a:	40 5d       	subi	r20, 0xD0	; 208
    1b9c:	4a 33       	cpi	r20, 0x3A	; 58
    1b9e:	18 f0       	brcs	.+6      	; 0x1ba6 <__ultoa_invert+0x7c>
    1ba0:	49 5d       	subi	r20, 0xD9	; 217
    1ba2:	31 fd       	sbrc	r19, 1
    1ba4:	40 52       	subi	r20, 0x20	; 32
    1ba6:	41 93       	st	Z+, r20
    1ba8:	02 d0       	rcall	.+4      	; 0x1bae <__ultoa_invert+0x84>
    1baa:	a9 f7       	brne	.-22     	; 0x1b96 <__ultoa_invert+0x6c>
    1bac:	ea cf       	rjmp	.-44     	; 0x1b82 <__ultoa_invert+0x58>
    1bae:	b4 e0       	ldi	r27, 0x04	; 4
    1bb0:	a6 95       	lsr	r26
    1bb2:	97 95       	ror	r25
    1bb4:	87 95       	ror	r24
    1bb6:	77 95       	ror	r23
    1bb8:	67 95       	ror	r22
    1bba:	ba 95       	dec	r27
    1bbc:	c9 f7       	brne	.-14     	; 0x1bb0 <__ultoa_invert+0x86>
    1bbe:	00 97       	sbiw	r24, 0x00	; 0
    1bc0:	61 05       	cpc	r22, r1
    1bc2:	71 05       	cpc	r23, r1
    1bc4:	08 95       	ret
    1bc6:	9b 01       	movw	r18, r22
    1bc8:	ac 01       	movw	r20, r24
    1bca:	0a 2e       	mov	r0, r26
    1bcc:	06 94       	lsr	r0
    1bce:	57 95       	ror	r21
    1bd0:	47 95       	ror	r20
    1bd2:	37 95       	ror	r19
    1bd4:	27 95       	ror	r18
    1bd6:	ba 95       	dec	r27
    1bd8:	c9 f7       	brne	.-14     	; 0x1bcc <__ultoa_invert+0xa2>
    1bda:	62 0f       	add	r22, r18
    1bdc:	73 1f       	adc	r23, r19
    1bde:	84 1f       	adc	r24, r20
    1be0:	95 1f       	adc	r25, r21
    1be2:	a0 1d       	adc	r26, r0
    1be4:	08 95       	ret

00001be6 <__prologue_saves__>:
    1be6:	2f 92       	push	r2
    1be8:	3f 92       	push	r3
    1bea:	4f 92       	push	r4
    1bec:	5f 92       	push	r5
    1bee:	6f 92       	push	r6
    1bf0:	7f 92       	push	r7
    1bf2:	8f 92       	push	r8
    1bf4:	9f 92       	push	r9
    1bf6:	af 92       	push	r10
    1bf8:	bf 92       	push	r11
    1bfa:	cf 92       	push	r12
    1bfc:	df 92       	push	r13
    1bfe:	ef 92       	push	r14
    1c00:	ff 92       	push	r15
    1c02:	0f 93       	push	r16
    1c04:	1f 93       	push	r17
    1c06:	cf 93       	push	r28
    1c08:	df 93       	push	r29
    1c0a:	cd b7       	in	r28, 0x3d	; 61
    1c0c:	de b7       	in	r29, 0x3e	; 62
    1c0e:	ca 1b       	sub	r28, r26
    1c10:	db 0b       	sbc	r29, r27
    1c12:	0f b6       	in	r0, 0x3f	; 63
    1c14:	f8 94       	cli
    1c16:	de bf       	out	0x3e, r29	; 62
    1c18:	0f be       	out	0x3f, r0	; 63
    1c1a:	cd bf       	out	0x3d, r28	; 61
    1c1c:	09 94       	ijmp

00001c1e <__epilogue_restores__>:
    1c1e:	2a 88       	ldd	r2, Y+18	; 0x12
    1c20:	39 88       	ldd	r3, Y+17	; 0x11
    1c22:	48 88       	ldd	r4, Y+16	; 0x10
    1c24:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c26:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c28:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c2a:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c2c:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c2e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c30:	b9 84       	ldd	r11, Y+9	; 0x09
    1c32:	c8 84       	ldd	r12, Y+8	; 0x08
    1c34:	df 80       	ldd	r13, Y+7	; 0x07
    1c36:	ee 80       	ldd	r14, Y+6	; 0x06
    1c38:	fd 80       	ldd	r15, Y+5	; 0x05
    1c3a:	0c 81       	ldd	r16, Y+4	; 0x04
    1c3c:	1b 81       	ldd	r17, Y+3	; 0x03
    1c3e:	aa 81       	ldd	r26, Y+2	; 0x02
    1c40:	b9 81       	ldd	r27, Y+1	; 0x01
    1c42:	ce 0f       	add	r28, r30
    1c44:	d1 1d       	adc	r29, r1
    1c46:	0f b6       	in	r0, 0x3f	; 63
    1c48:	f8 94       	cli
    1c4a:	de bf       	out	0x3e, r29	; 62
    1c4c:	0f be       	out	0x3f, r0	; 63
    1c4e:	cd bf       	out	0x3d, r28	; 61
    1c50:	ed 01       	movw	r28, r26
    1c52:	08 95       	ret

00001c54 <_exit>:
    1c54:	f8 94       	cli

00001c56 <__stop_program>:
    1c56:	ff cf       	rjmp	.-2      	; 0x1c56 <__stop_program>
