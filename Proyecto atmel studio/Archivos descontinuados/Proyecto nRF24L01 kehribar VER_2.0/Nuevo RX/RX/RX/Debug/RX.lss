
RX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000003b4  00000448  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080010a  0080010a  00000452  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000452  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000484  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  000004c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013cc  00000000  00000000  000005cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008d6  00000000  00000000  00001998  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000833  00000000  00000000  0000226e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d8  00000000  00000000  00002aa4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000626  00000000  00000000  00002d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000957  00000000  00000000  000033a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00003cf9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e4 eb       	ldi	r30, 0xB4	; 180
  48:	f3 e0       	ldi	r31, 0x03	; 3
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	aa 30       	cpi	r26, 0x0A	; 10
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	aa e0       	ldi	r26, 0x0A	; 10
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a0 31       	cpi	r26, 0x10	; 16
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	5e d1       	rcall	.+700    	; 0x324 <main>
  68:	a3 c1       	rjmp	.+838    	; 0x3b0 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <nrf24_setupPins>:
}
/* ------------------------------------------------------------------------- */
uint8_t nrf24_miso_digitalRead()
{
    return check_bit(RF_PIN,4);
}
  6c:	38 9a       	sbi	0x07, 0	; 7
  6e:	39 9a       	sbi	0x07, 1	; 7
  70:	3a 9a       	sbi	0x07, 2	; 7
  72:	3b 9a       	sbi	0x07, 3	; 7
  74:	3c 98       	cbi	0x07, 4	; 7
  76:	08 95       	ret

00000078 <nrf24_ce_digitalWrite>:
  78:	88 23       	and	r24, r24
  7a:	11 f0       	breq	.+4      	; 0x80 <nrf24_ce_digitalWrite+0x8>
  7c:	40 9a       	sbi	0x08, 0	; 8
  7e:	08 95       	ret
  80:	40 98       	cbi	0x08, 0	; 8
  82:	08 95       	ret

00000084 <nrf24_csn_digitalWrite>:
  84:	88 23       	and	r24, r24
  86:	11 f0       	breq	.+4      	; 0x8c <nrf24_csn_digitalWrite+0x8>
  88:	41 9a       	sbi	0x08, 1	; 8
  8a:	08 95       	ret
  8c:	41 98       	cbi	0x08, 1	; 8
  8e:	08 95       	ret

00000090 <nrf24_init>:
  90:	ed df       	rcall	.-38     	; 0x6c <nrf24_setupPins>
  92:	80 e0       	ldi	r24, 0x00	; 0
  94:	f1 df       	rcall	.-30     	; 0x78 <nrf24_ce_digitalWrite>
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	f5 df       	rcall	.-22     	; 0x84 <nrf24_csn_digitalWrite>
  9a:	08 95       	ret

0000009c <nrf24_sck_digitalWrite>:
  9c:	88 23       	and	r24, r24
  9e:	11 f0       	breq	.+4      	; 0xa4 <nrf24_sck_digitalWrite+0x8>
  a0:	42 9a       	sbi	0x08, 2	; 8
  a2:	08 95       	ret
  a4:	42 98       	cbi	0x08, 2	; 8
  a6:	08 95       	ret

000000a8 <nrf24_mosi_digitalWrite>:
  a8:	88 23       	and	r24, r24
  aa:	11 f0       	breq	.+4      	; 0xb0 <nrf24_mosi_digitalWrite+0x8>
  ac:	43 9a       	sbi	0x08, 3	; 8
  ae:	08 95       	ret
  b0:	43 98       	cbi	0x08, 3	; 8
  b2:	08 95       	ret

000000b4 <spi_transfer>:
  b4:	ef 92       	push	r14
  b6:	ff 92       	push	r15
  b8:	1f 93       	push	r17
  ba:	cf 93       	push	r28
  bc:	df 93       	push	r29
  be:	e8 2e       	mov	r14, r24
  c0:	80 e0       	ldi	r24, 0x00	; 0
  c2:	ec df       	rcall	.-40     	; 0x9c <nrf24_sck_digitalWrite>
  c4:	c7 e0       	ldi	r28, 0x07	; 7
  c6:	d0 e0       	ldi	r29, 0x00	; 0
  c8:	10 e0       	ldi	r17, 0x00	; 0
  ca:	f1 2c       	mov	r15, r1
  cc:	97 01       	movw	r18, r14
  ce:	0c 2e       	mov	r0, r28
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <spi_transfer+0x22>
  d2:	35 95       	asr	r19
  d4:	27 95       	ror	r18
  d6:	0a 94       	dec	r0
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <spi_transfer+0x1e>
  da:	20 ff       	sbrs	r18, 0
  dc:	03 c0       	rjmp	.+6      	; 0xe4 <spi_transfer+0x30>
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	e3 df       	rcall	.-58     	; 0xa8 <nrf24_mosi_digitalWrite>
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <spi_transfer+0x34>
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	e0 df       	rcall	.-64     	; 0xa8 <nrf24_mosi_digitalWrite>
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	d8 df       	rcall	.-80     	; 0x9c <nrf24_sck_digitalWrite>
  ec:	11 0f       	add	r17, r17
  ee:	34 99       	sbic	0x06, 4	; 6
  f0:	11 60       	ori	r17, 0x01	; 1
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	d3 df       	rcall	.-90     	; 0x9c <nrf24_sck_digitalWrite>
  f6:	21 97       	sbiw	r28, 0x01	; 1
  f8:	48 f7       	brcc	.-46     	; 0xcc <spi_transfer+0x18>
  fa:	81 2f       	mov	r24, r17
  fc:	df 91       	pop	r29
  fe:	cf 91       	pop	r28
 100:	1f 91       	pop	r17
 102:	ff 90       	pop	r15
 104:	ef 90       	pop	r14
 106:	08 95       	ret

00000108 <nrf24_getStatus>:
 108:	cf 93       	push	r28
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	bb df       	rcall	.-138    	; 0x84 <nrf24_csn_digitalWrite>
 10e:	8f ef       	ldi	r24, 0xFF	; 255
 110:	d1 df       	rcall	.-94     	; 0xb4 <spi_transfer>
 112:	c8 2f       	mov	r28, r24
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	b6 df       	rcall	.-148    	; 0x84 <nrf24_csn_digitalWrite>
 118:	8c 2f       	mov	r24, r28
 11a:	cf 91       	pop	r28
 11c:	08 95       	ret

0000011e <nrf24_transferSync>:
 11e:	ef 92       	push	r14
 120:	ff 92       	push	r15
 122:	0f 93       	push	r16
 124:	1f 93       	push	r17
 126:	cf 93       	push	r28
 128:	df 93       	push	r29
 12a:	44 23       	and	r20, r20
 12c:	99 f0       	breq	.+38     	; 0x154 <nrf24_transferSync+0x36>
 12e:	ec 01       	movw	r28, r24
 130:	06 2f       	mov	r16, r22
 132:	17 2f       	mov	r17, r23
 134:	41 50       	subi	r20, 0x01	; 1
 136:	e4 2e       	mov	r14, r20
 138:	f1 2c       	mov	r15, r1
 13a:	2f ef       	ldi	r18, 0xFF	; 255
 13c:	e2 1a       	sub	r14, r18
 13e:	f2 0a       	sbc	r15, r18
 140:	e8 0e       	add	r14, r24
 142:	f9 1e       	adc	r15, r25
 144:	89 91       	ld	r24, Y+
 146:	b6 df       	rcall	.-148    	; 0xb4 <spi_transfer>
 148:	f8 01       	movw	r30, r16
 14a:	81 93       	st	Z+, r24
 14c:	8f 01       	movw	r16, r30
 14e:	ce 15       	cp	r28, r14
 150:	df 05       	cpc	r29, r15
 152:	c1 f7       	brne	.-16     	; 0x144 <nrf24_transferSync+0x26>
 154:	df 91       	pop	r29
 156:	cf 91       	pop	r28
 158:	1f 91       	pop	r17
 15a:	0f 91       	pop	r16
 15c:	ff 90       	pop	r15
 15e:	ef 90       	pop	r14
 160:	08 95       	ret

00000162 <nrf24_transmitSync>:
 162:	0f 93       	push	r16
 164:	1f 93       	push	r17
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	66 23       	and	r22, r22
 16c:	69 f0       	breq	.+26     	; 0x188 <nrf24_transmitSync+0x26>
 16e:	ec 01       	movw	r28, r24
 170:	61 50       	subi	r22, 0x01	; 1
 172:	06 2f       	mov	r16, r22
 174:	10 e0       	ldi	r17, 0x00	; 0
 176:	0f 5f       	subi	r16, 0xFF	; 255
 178:	1f 4f       	sbci	r17, 0xFF	; 255
 17a:	08 0f       	add	r16, r24
 17c:	19 1f       	adc	r17, r25
 17e:	89 91       	ld	r24, Y+
 180:	99 df       	rcall	.-206    	; 0xb4 <spi_transfer>
 182:	c0 17       	cp	r28, r16
 184:	d1 07       	cpc	r29, r17
 186:	d9 f7       	brne	.-10     	; 0x17e <nrf24_transmitSync+0x1c>
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
 18c:	1f 91       	pop	r17
 18e:	0f 91       	pop	r16
 190:	08 95       	ret

00000192 <nrf24_configRegister>:
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
 196:	c8 2f       	mov	r28, r24
 198:	d6 2f       	mov	r29, r22
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	73 df       	rcall	.-282    	; 0x84 <nrf24_csn_digitalWrite>
 19e:	8c 2f       	mov	r24, r28
 1a0:	8f 71       	andi	r24, 0x1F	; 31
 1a2:	80 62       	ori	r24, 0x20	; 32
 1a4:	87 df       	rcall	.-242    	; 0xb4 <spi_transfer>
 1a6:	8d 2f       	mov	r24, r29
 1a8:	85 df       	rcall	.-246    	; 0xb4 <spi_transfer>
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	6b df       	rcall	.-298    	; 0x84 <nrf24_csn_digitalWrite>
 1ae:	df 91       	pop	r29
 1b0:	cf 91       	pop	r28
 1b2:	08 95       	ret

000001b4 <nrf24_getData>:
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
 1b8:	ec 01       	movw	r28, r24
 1ba:	80 e0       	ldi	r24, 0x00	; 0
 1bc:	63 df       	rcall	.-314    	; 0x84 <nrf24_csn_digitalWrite>
 1be:	81 e6       	ldi	r24, 0x61	; 97
 1c0:	79 df       	rcall	.-270    	; 0xb4 <spi_transfer>
 1c2:	40 91 0f 01 	lds	r20, 0x010F	; 0x80010f <payload_len>
 1c6:	be 01       	movw	r22, r28
 1c8:	ce 01       	movw	r24, r28
 1ca:	a9 df       	rcall	.-174    	; 0x11e <nrf24_transferSync>
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	5a df       	rcall	.-332    	; 0x84 <nrf24_csn_digitalWrite>
 1d0:	60 e4       	ldi	r22, 0x40	; 64
 1d2:	87 e0       	ldi	r24, 0x07	; 7
 1d4:	de df       	rcall	.-68     	; 0x192 <nrf24_configRegister>
 1d6:	df 91       	pop	r29
 1d8:	cf 91       	pop	r28
 1da:	08 95       	ret

000001dc <nrf24_powerUpRx>:
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	52 df       	rcall	.-348    	; 0x84 <nrf24_csn_digitalWrite>
 1e0:	82 ee       	ldi	r24, 0xE2	; 226
 1e2:	68 df       	rcall	.-304    	; 0xb4 <spi_transfer>
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	4e df       	rcall	.-356    	; 0x84 <nrf24_csn_digitalWrite>
 1e8:	60 e7       	ldi	r22, 0x70	; 112
 1ea:	87 e0       	ldi	r24, 0x07	; 7
 1ec:	d2 df       	rcall	.-92     	; 0x192 <nrf24_configRegister>
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	43 df       	rcall	.-378    	; 0x78 <nrf24_ce_digitalWrite>
 1f2:	6b e0       	ldi	r22, 0x0B	; 11
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	cd df       	rcall	.-102    	; 0x192 <nrf24_configRegister>
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	3e df       	rcall	.-388    	; 0x78 <nrf24_ce_digitalWrite>
 1fc:	08 95       	ret

000001fe <nrf24_config>:
 1fe:	60 93 0f 01 	sts	0x010F, r22	; 0x80010f <payload_len>
 202:	68 2f       	mov	r22, r24
 204:	85 e0       	ldi	r24, 0x05	; 5
 206:	c5 df       	rcall	.-118    	; 0x192 <nrf24_configRegister>
 208:	60 e0       	ldi	r22, 0x00	; 0
 20a:	81 e1       	ldi	r24, 0x11	; 17
 20c:	c2 df       	rcall	.-124    	; 0x192 <nrf24_configRegister>
 20e:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <payload_len>
 212:	82 e1       	ldi	r24, 0x12	; 18
 214:	be df       	rcall	.-132    	; 0x192 <nrf24_configRegister>
 216:	60 e0       	ldi	r22, 0x00	; 0
 218:	83 e1       	ldi	r24, 0x13	; 19
 21a:	bb df       	rcall	.-138    	; 0x192 <nrf24_configRegister>
 21c:	60 e0       	ldi	r22, 0x00	; 0
 21e:	84 e1       	ldi	r24, 0x14	; 20
 220:	b8 df       	rcall	.-144    	; 0x192 <nrf24_configRegister>
 222:	60 e0       	ldi	r22, 0x00	; 0
 224:	85 e1       	ldi	r24, 0x15	; 21
 226:	b5 df       	rcall	.-150    	; 0x192 <nrf24_configRegister>
 228:	60 e0       	ldi	r22, 0x00	; 0
 22a:	86 e1       	ldi	r24, 0x16	; 22
 22c:	b2 df       	rcall	.-156    	; 0x192 <nrf24_configRegister>
 22e:	66 e0       	ldi	r22, 0x06	; 6
 230:	86 e0       	ldi	r24, 0x06	; 6
 232:	af df       	rcall	.-162    	; 0x192 <nrf24_configRegister>
 234:	68 e0       	ldi	r22, 0x08	; 8
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	ac df       	rcall	.-168    	; 0x192 <nrf24_configRegister>
 23a:	63 e0       	ldi	r22, 0x03	; 3
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	a9 df       	rcall	.-174    	; 0x192 <nrf24_configRegister>
 240:	63 e0       	ldi	r22, 0x03	; 3
 242:	82 e0       	ldi	r24, 0x02	; 2
 244:	a6 df       	rcall	.-180    	; 0x192 <nrf24_configRegister>
 246:	6f e4       	ldi	r22, 0x4F	; 79
 248:	84 e0       	ldi	r24, 0x04	; 4
 24a:	a3 df       	rcall	.-186    	; 0x192 <nrf24_configRegister>
 24c:	60 e0       	ldi	r22, 0x00	; 0
 24e:	8c e1       	ldi	r24, 0x1C	; 28
 250:	a0 df       	rcall	.-192    	; 0x192 <nrf24_configRegister>
 252:	c4 df       	rcall	.-120    	; 0x1dc <nrf24_powerUpRx>
 254:	08 95       	ret

00000256 <nrf24_readRegister>:
 256:	0f 93       	push	r16
 258:	1f 93       	push	r17
 25a:	cf 93       	push	r28
 25c:	df 93       	push	r29
 25e:	08 2f       	mov	r16, r24
 260:	eb 01       	movw	r28, r22
 262:	14 2f       	mov	r17, r20
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	0e df       	rcall	.-484    	; 0x84 <nrf24_csn_digitalWrite>
 268:	80 2f       	mov	r24, r16
 26a:	8f 71       	andi	r24, 0x1F	; 31
 26c:	23 df       	rcall	.-442    	; 0xb4 <spi_transfer>
 26e:	41 2f       	mov	r20, r17
 270:	be 01       	movw	r22, r28
 272:	ce 01       	movw	r24, r28
 274:	54 df       	rcall	.-344    	; 0x11e <nrf24_transferSync>
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	05 df       	rcall	.-502    	; 0x84 <nrf24_csn_digitalWrite>
 27a:	df 91       	pop	r29
 27c:	cf 91       	pop	r28
 27e:	1f 91       	pop	r17
 280:	0f 91       	pop	r16
 282:	08 95       	ret

00000284 <nrf24_rxFifoEmpty>:
 284:	cf 93       	push	r28
 286:	df 93       	push	r29
 288:	1f 92       	push	r1
 28a:	cd b7       	in	r28, 0x3d	; 61
 28c:	de b7       	in	r29, 0x3e	; 62
 28e:	41 e0       	ldi	r20, 0x01	; 1
 290:	be 01       	movw	r22, r28
 292:	6f 5f       	subi	r22, 0xFF	; 255
 294:	7f 4f       	sbci	r23, 0xFF	; 255
 296:	87 e1       	ldi	r24, 0x17	; 23
 298:	de df       	rcall	.-68     	; 0x256 <nrf24_readRegister>
 29a:	89 81       	ldd	r24, Y+1	; 0x01
 29c:	81 70       	andi	r24, 0x01	; 1
 29e:	0f 90       	pop	r0
 2a0:	df 91       	pop	r29
 2a2:	cf 91       	pop	r28
 2a4:	08 95       	ret

000002a6 <nrf24_dataReady>:
 2a6:	30 df       	rcall	.-416    	; 0x108 <nrf24_getStatus>
 2a8:	86 fd       	sbrc	r24, 6
 2aa:	06 c0       	rjmp	.+12     	; 0x2b8 <nrf24_dataReady+0x12>
 2ac:	eb df       	rcall	.-42     	; 0x284 <nrf24_rxFifoEmpty>
 2ae:	91 e0       	ldi	r25, 0x01	; 1
 2b0:	88 23       	and	r24, r24
 2b2:	19 f0       	breq	.+6      	; 0x2ba <nrf24_dataReady+0x14>
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	01 c0       	rjmp	.+2      	; 0x2ba <nrf24_dataReady+0x14>
 2b8:	91 e0       	ldi	r25, 0x01	; 1
 2ba:	89 2f       	mov	r24, r25
 2bc:	08 95       	ret

000002be <nrf24_writeRegister>:
 2be:	0f 93       	push	r16
 2c0:	1f 93       	push	r17
 2c2:	cf 93       	push	r28
 2c4:	df 93       	push	r29
 2c6:	c8 2f       	mov	r28, r24
 2c8:	8b 01       	movw	r16, r22
 2ca:	d4 2f       	mov	r29, r20
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	da de       	rcall	.-588    	; 0x84 <nrf24_csn_digitalWrite>
 2d0:	8c 2f       	mov	r24, r28
 2d2:	8f 71       	andi	r24, 0x1F	; 31
 2d4:	80 62       	ori	r24, 0x20	; 32
 2d6:	ee de       	rcall	.-548    	; 0xb4 <spi_transfer>
 2d8:	6d 2f       	mov	r22, r29
 2da:	c8 01       	movw	r24, r16
 2dc:	42 df       	rcall	.-380    	; 0x162 <nrf24_transmitSync>
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	d1 de       	rcall	.-606    	; 0x84 <nrf24_csn_digitalWrite>
 2e2:	df 91       	pop	r29
 2e4:	cf 91       	pop	r28
 2e6:	1f 91       	pop	r17
 2e8:	0f 91       	pop	r16
 2ea:	08 95       	ret

000002ec <nrf24_rx_address>:
 2ec:	cf 93       	push	r28
 2ee:	df 93       	push	r29
 2f0:	ec 01       	movw	r28, r24
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	c1 de       	rcall	.-638    	; 0x78 <nrf24_ce_digitalWrite>
 2f6:	45 e0       	ldi	r20, 0x05	; 5
 2f8:	be 01       	movw	r22, r28
 2fa:	8b e0       	ldi	r24, 0x0B	; 11
 2fc:	e0 df       	rcall	.-64     	; 0x2be <nrf24_writeRegister>
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	bb de       	rcall	.-650    	; 0x78 <nrf24_ce_digitalWrite>
 302:	df 91       	pop	r29
 304:	cf 91       	pop	r28
 306:	08 95       	ret

00000308 <nrf24_tx_address>:
 308:	cf 93       	push	r28
 30a:	df 93       	push	r29
 30c:	ec 01       	movw	r28, r24
 30e:	45 e0       	ldi	r20, 0x05	; 5
 310:	bc 01       	movw	r22, r24
 312:	8a e0       	ldi	r24, 0x0A	; 10
 314:	d4 df       	rcall	.-88     	; 0x2be <nrf24_writeRegister>
 316:	45 e0       	ldi	r20, 0x05	; 5
 318:	be 01       	movw	r22, r28
 31a:	80 e1       	ldi	r24, 0x10	; 16
 31c:	d0 df       	rcall	.-96     	; 0x2be <nrf24_writeRegister>
 31e:	df 91       	pop	r29
 320:	cf 91       	pop	r28
 322:	08 95       	ret

00000324 <main>:
uint8_t tx_address[5] = {0xD7,0xD7,0xD7,0xD7,0xD7};
uint8_t rx_address[5] = {0xE7,0xE7,0xE7,0xE7,0xE7};
/* ------------------------------------------------------------------------- */
int main()
{
	nrf24_init();
 324:	b5 de       	rcall	.-662    	; 0x90 <nrf24_init>
	nrf24_config(2,4);	// Channel, payload
 326:	64 e0       	ldi	r22, 0x04	; 4
 328:	82 e0       	ldi	r24, 0x02	; 2
 32a:	69 df       	rcall	.-302    	; 0x1fe <nrf24_config>
	nrf24_tx_address(tx_address);
 32c:	85 e0       	ldi	r24, 0x05	; 5
 32e:	91 e0       	ldi	r25, 0x01	; 1
 330:	eb df       	rcall	.-42     	; 0x308 <nrf24_tx_address>
	nrf24_rx_address(rx_address);
 332:	80 e0       	ldi	r24, 0x00	; 0
 334:	91 e0       	ldi	r25, 0x01	; 1
 336:	da df       	rcall	.-76     	; 0x2ec <nrf24_rx_address>

	DDRD = 0xFF;
 338:	8f ef       	ldi	r24, 0xFF	; 255
 33a:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;
 33c:	1b b8       	out	0x0b, r1	; 11
 33e:	84 e0       	ldi	r24, 0x04	; 4
	
	for (uint8_t x = 0; x < 4; x++)
	{
		PORTD^=0xFF;
 340:	9b b1       	in	r25, 0x0b	; 11
 342:	90 95       	com	r25
 344:	9b b9       	out	0x0b, r25	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 346:	2f e7       	ldi	r18, 0x7F	; 127
 348:	3a e1       	ldi	r19, 0x1A	; 26
 34a:	96 e0       	ldi	r25, 0x06	; 6
 34c:	21 50       	subi	r18, 0x01	; 1
 34e:	30 40       	sbci	r19, 0x00	; 0
 350:	90 40       	sbci	r25, 0x00	; 0
 352:	e1 f7       	brne	.-8      	; 0x34c <main+0x28>
 354:	00 c0       	rjmp	.+0      	; 0x356 <main+0x32>
 356:	00 00       	nop
 358:	81 50       	subi	r24, 0x01	; 1
	nrf24_rx_address(rx_address);

	DDRD = 0xFF;
	PORTD = 0x00;
	
	for (uint8_t x = 0; x < 4; x++)
 35a:	91 f7       	brne	.-28     	; 0x340 <main+0x1c>
	{
		if(nrf24_dataReady())
		{
			nrf24_getData(data_array);
			if (data_array[0]==0x5D||data_array[1]==0x5D||data_array[2]==0x5D||data_array[3]==0x5D) { PORTD = 0x00; }
			if (data_array[0]==0x7F||data_array[1]==0x7F||data_array[2]==0x7F||data_array[3]==0x7F) { PORTD = 0xFF; }
 35c:	cf ef       	ldi	r28, 0xFF	; 255
		_delay_ms(250);
	}

	while(1)
	{
		if(nrf24_dataReady())
 35e:	a3 df       	rcall	.-186    	; 0x2a6 <nrf24_dataReady>
 360:	88 23       	and	r24, r24
 362:	e9 f3       	breq	.-6      	; 0x35e <main+0x3a>
		{
			nrf24_getData(data_array);
 364:	8b e0       	ldi	r24, 0x0B	; 11
 366:	91 e0       	ldi	r25, 0x01	; 1
 368:	25 df       	rcall	.-438    	; 0x1b4 <nrf24_getData>
			if (data_array[0]==0x5D||data_array[1]==0x5D||data_array[2]==0x5D||data_array[3]==0x5D) { PORTD = 0x00; }
 36a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <data_array>
 36e:	8d 35       	cpi	r24, 0x5D	; 93
 370:	61 f0       	breq	.+24     	; 0x38a <main+0x66>
 372:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <data_array+0x1>
 376:	8d 35       	cpi	r24, 0x5D	; 93
 378:	41 f0       	breq	.+16     	; 0x38a <main+0x66>
 37a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <data_array+0x2>
 37e:	8d 35       	cpi	r24, 0x5D	; 93
 380:	21 f0       	breq	.+8      	; 0x38a <main+0x66>
 382:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <data_array+0x3>
 386:	8d 35       	cpi	r24, 0x5D	; 93
 388:	09 f4       	brne	.+2      	; 0x38c <main+0x68>
 38a:	1b b8       	out	0x0b, r1	; 11
			if (data_array[0]==0x7F||data_array[1]==0x7F||data_array[2]==0x7F||data_array[3]==0x7F) { PORTD = 0xFF; }
 38c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <data_array>
 390:	8f 37       	cpi	r24, 0x7F	; 127
 392:	61 f0       	breq	.+24     	; 0x3ac <main+0x88>
 394:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <data_array+0x1>
 398:	8f 37       	cpi	r24, 0x7F	; 127
 39a:	41 f0       	breq	.+16     	; 0x3ac <main+0x88>
 39c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <data_array+0x2>
 3a0:	8f 37       	cpi	r24, 0x7F	; 127
 3a2:	21 f0       	breq	.+8      	; 0x3ac <main+0x88>
 3a4:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <data_array+0x3>
 3a8:	8f 37       	cpi	r24, 0x7F	; 127
 3aa:	c9 f6       	brne	.-78     	; 0x35e <main+0x3a>
 3ac:	cb b9       	out	0x0b, r28	; 11
 3ae:	d7 cf       	rjmp	.-82     	; 0x35e <main+0x3a>

000003b0 <_exit>:
 3b0:	f8 94       	cli

000003b2 <__stop_program>:
 3b2:	ff cf       	rjmp	.-2      	; 0x3b2 <__stop_program>
