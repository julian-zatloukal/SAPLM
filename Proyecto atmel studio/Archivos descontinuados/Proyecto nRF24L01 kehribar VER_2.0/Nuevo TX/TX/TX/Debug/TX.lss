
TX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  00001134  000011c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001134  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800150  00800150  00001218  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001218  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001248  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00001288  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f85  00000000  00000000  000013d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000086f  00000000  00000000  0000235d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c5a  00000000  00000000  00002bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000056c  00000000  00000000  00003828  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000704  00000000  00000000  00003d94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b78  00000000  00000000  00004498  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
       2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
       4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
       6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
       8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
       a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
       c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
       e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
      10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
      12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
      14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
      16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
      18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
      1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
      1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
      1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
      20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
      22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
      24:	e0 c5       	rjmp	.+3008   	; 0xbe6 <__vector_18>
      26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
      28:	a1 c5       	rjmp	.+2882   	; 0xb6c <__vector_20>
      2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
      2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
      2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
      30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
      32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
      34:	11 24       	eor	r1, r1
      36:	1f be       	out	0x3f, r1	; 63
      38:	cf ef       	ldi	r28, 0xFF	; 255
      3a:	d4 e0       	ldi	r29, 0x04	; 4
      3c:	de bf       	out	0x3e, r29	; 62
      3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
      40:	11 e0       	ldi	r17, 0x01	; 1
      42:	a0 e0       	ldi	r26, 0x00	; 0
      44:	b1 e0       	ldi	r27, 0x01	; 1
      46:	e4 e3       	ldi	r30, 0x34	; 52
      48:	f1 e1       	ldi	r31, 0x11	; 17
      4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
      4c:	05 90       	lpm	r0, Z+
      4e:	0d 92       	st	X+, r0
      50:	a0 35       	cpi	r26, 0x50	; 80
      52:	b1 07       	cpc	r27, r17
      54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
      56:	21 e0       	ldi	r18, 0x01	; 1
      58:	a0 e5       	ldi	r26, 0x50	; 80
      5a:	b1 e0       	ldi	r27, 0x01	; 1
      5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
      5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
      60:	a1 36       	cpi	r26, 0x61	; 97
      62:	b2 07       	cpc	r27, r18
      64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
      66:	66 d2       	rcall	.+1228   	; 0x534 <main>
      68:	63 c8       	rjmp	.-3898   	; 0xfffff130 <__eeprom_end+0xff7ef130>

0000006a <__bad_interrupt>:
      6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <nrf24_init>:
{
    nrf24_csn_digitalWrite(LOW);
    spi_transfer(R_REGISTER | (REGISTER_MASK & reg));
    nrf24_transferSync(value,value,len);
    nrf24_csn_digitalWrite(HIGH);
}
      6c:	cf 93       	push	r28
      6e:	df 93       	push	r29
      70:	cd b7       	in	r28, 0x3d	; 61
      72:	de b7       	in	r29, 0x3e	; 62
      74:	9a d1       	rcall	.+820    	; 0x3aa <nrf24_setupPins>
      76:	80 e0       	ldi	r24, 0x00	; 0
      78:	cd d1       	rcall	.+922    	; 0x414 <nrf24_ce_digitalWrite>
      7a:	81 e0       	ldi	r24, 0x01	; 1
      7c:	ec d1       	rcall	.+984    	; 0x456 <nrf24_csn_digitalWrite>
      7e:	00 00       	nop
      80:	df 91       	pop	r29
      82:	cf 91       	pop	r28
      84:	08 95       	ret

00000086 <nrf24_config>:
      86:	cf 93       	push	r28
      88:	df 93       	push	r29
      8a:	00 d0       	rcall	.+0      	; 0x8c <nrf24_config+0x6>
      8c:	cd b7       	in	r28, 0x3d	; 61
      8e:	de b7       	in	r29, 0x3e	; 62
      90:	89 83       	std	Y+1, r24	; 0x01
      92:	6a 83       	std	Y+2, r22	; 0x02
      94:	8a 81       	ldd	r24, Y+2	; 0x02
      96:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <payload_len>
      9a:	69 81       	ldd	r22, Y+1	; 0x01
      9c:	85 e0       	ldi	r24, 0x05	; 5
      9e:	50 d1       	rcall	.+672    	; 0x340 <nrf24_configRegister>
      a0:	60 e0       	ldi	r22, 0x00	; 0
      a2:	81 e1       	ldi	r24, 0x11	; 17
      a4:	4d d1       	rcall	.+666    	; 0x340 <nrf24_configRegister>
      a6:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <payload_len>
      aa:	68 2f       	mov	r22, r24
      ac:	82 e1       	ldi	r24, 0x12	; 18
      ae:	48 d1       	rcall	.+656    	; 0x340 <nrf24_configRegister>
      b0:	60 e0       	ldi	r22, 0x00	; 0
      b2:	83 e1       	ldi	r24, 0x13	; 19
      b4:	45 d1       	rcall	.+650    	; 0x340 <nrf24_configRegister>
      b6:	60 e0       	ldi	r22, 0x00	; 0
      b8:	84 e1       	ldi	r24, 0x14	; 20
      ba:	42 d1       	rcall	.+644    	; 0x340 <nrf24_configRegister>
      bc:	60 e0       	ldi	r22, 0x00	; 0
      be:	85 e1       	ldi	r24, 0x15	; 21
      c0:	3f d1       	rcall	.+638    	; 0x340 <nrf24_configRegister>
      c2:	60 e0       	ldi	r22, 0x00	; 0
      c4:	86 e1       	ldi	r24, 0x16	; 22
      c6:	3c d1       	rcall	.+632    	; 0x340 <nrf24_configRegister>
      c8:	66 e0       	ldi	r22, 0x06	; 6
      ca:	86 e0       	ldi	r24, 0x06	; 6
      cc:	39 d1       	rcall	.+626    	; 0x340 <nrf24_configRegister>
      ce:	68 e0       	ldi	r22, 0x08	; 8
      d0:	80 e0       	ldi	r24, 0x00	; 0
      d2:	36 d1       	rcall	.+620    	; 0x340 <nrf24_configRegister>
      d4:	63 e0       	ldi	r22, 0x03	; 3
      d6:	81 e0       	ldi	r24, 0x01	; 1
      d8:	33 d1       	rcall	.+614    	; 0x340 <nrf24_configRegister>
      da:	63 e0       	ldi	r22, 0x03	; 3
      dc:	82 e0       	ldi	r24, 0x02	; 2
      de:	30 d1       	rcall	.+608    	; 0x340 <nrf24_configRegister>
      e0:	6f e4       	ldi	r22, 0x4F	; 79
      e2:	84 e0       	ldi	r24, 0x04	; 4
      e4:	2d d1       	rcall	.+602    	; 0x340 <nrf24_configRegister>
      e6:	60 e0       	ldi	r22, 0x00	; 0
      e8:	8c e1       	ldi	r24, 0x1C	; 28
      ea:	2a d1       	rcall	.+596    	; 0x340 <nrf24_configRegister>
      ec:	9e d0       	rcall	.+316    	; 0x22a <nrf24_powerUpRx>
      ee:	00 00       	nop
      f0:	0f 90       	pop	r0
      f2:	0f 90       	pop	r0
      f4:	df 91       	pop	r29
      f6:	cf 91       	pop	r28
      f8:	08 95       	ret

000000fa <nrf24_rx_address>:
      fa:	cf 93       	push	r28
      fc:	df 93       	push	r29
      fe:	00 d0       	rcall	.+0      	; 0x100 <nrf24_rx_address+0x6>
     100:	cd b7       	in	r28, 0x3d	; 61
     102:	de b7       	in	r29, 0x3e	; 62
     104:	9a 83       	std	Y+2, r25	; 0x02
     106:	89 83       	std	Y+1, r24	; 0x01
     108:	80 e0       	ldi	r24, 0x00	; 0
     10a:	84 d1       	rcall	.+776    	; 0x414 <nrf24_ce_digitalWrite>
     10c:	89 81       	ldd	r24, Y+1	; 0x01
     10e:	9a 81       	ldd	r25, Y+2	; 0x02
     110:	45 e0       	ldi	r20, 0x05	; 5
     112:	bc 01       	movw	r22, r24
     114:	8b e0       	ldi	r24, 0x0B	; 11
     116:	2b d1       	rcall	.+598    	; 0x36e <nrf24_writeRegister>
     118:	81 e0       	ldi	r24, 0x01	; 1
     11a:	7c d1       	rcall	.+760    	; 0x414 <nrf24_ce_digitalWrite>
     11c:	00 00       	nop
     11e:	0f 90       	pop	r0
     120:	0f 90       	pop	r0
     122:	df 91       	pop	r29
     124:	cf 91       	pop	r28
     126:	08 95       	ret

00000128 <nrf24_tx_address>:
     128:	cf 93       	push	r28
     12a:	df 93       	push	r29
     12c:	00 d0       	rcall	.+0      	; 0x12e <nrf24_tx_address+0x6>
     12e:	cd b7       	in	r28, 0x3d	; 61
     130:	de b7       	in	r29, 0x3e	; 62
     132:	9a 83       	std	Y+2, r25	; 0x02
     134:	89 83       	std	Y+1, r24	; 0x01
     136:	89 81       	ldd	r24, Y+1	; 0x01
     138:	9a 81       	ldd	r25, Y+2	; 0x02
     13a:	45 e0       	ldi	r20, 0x05	; 5
     13c:	bc 01       	movw	r22, r24
     13e:	8a e0       	ldi	r24, 0x0A	; 10
     140:	16 d1       	rcall	.+556    	; 0x36e <nrf24_writeRegister>
     142:	89 81       	ldd	r24, Y+1	; 0x01
     144:	9a 81       	ldd	r25, Y+2	; 0x02
     146:	45 e0       	ldi	r20, 0x05	; 5
     148:	bc 01       	movw	r22, r24
     14a:	80 e1       	ldi	r24, 0x10	; 16
     14c:	10 d1       	rcall	.+544    	; 0x36e <nrf24_writeRegister>
     14e:	00 00       	nop
     150:	0f 90       	pop	r0
     152:	0f 90       	pop	r0
     154:	df 91       	pop	r29
     156:	cf 91       	pop	r28
     158:	08 95       	ret

0000015a <nrf24_send>:
     15a:	cf 93       	push	r28
     15c:	df 93       	push	r29
     15e:	00 d0       	rcall	.+0      	; 0x160 <nrf24_send+0x6>
     160:	cd b7       	in	r28, 0x3d	; 61
     162:	de b7       	in	r29, 0x3e	; 62
     164:	9a 83       	std	Y+2, r25	; 0x02
     166:	89 83       	std	Y+1, r24	; 0x01
     168:	80 e0       	ldi	r24, 0x00	; 0
     16a:	54 d1       	rcall	.+680    	; 0x414 <nrf24_ce_digitalWrite>
     16c:	76 d0       	rcall	.+236    	; 0x25a <nrf24_powerUpTx>
     16e:	80 e0       	ldi	r24, 0x00	; 0
     170:	72 d1       	rcall	.+740    	; 0x456 <nrf24_csn_digitalWrite>
     172:	81 ee       	ldi	r24, 0xE1	; 225
     174:	80 d0       	rcall	.+256    	; 0x276 <spi_transfer>
     176:	81 e0       	ldi	r24, 0x01	; 1
     178:	6e d1       	rcall	.+732    	; 0x456 <nrf24_csn_digitalWrite>
     17a:	80 e0       	ldi	r24, 0x00	; 0
     17c:	6c d1       	rcall	.+728    	; 0x456 <nrf24_csn_digitalWrite>
     17e:	80 ea       	ldi	r24, 0xA0	; 160
     180:	7a d0       	rcall	.+244    	; 0x276 <spi_transfer>
     182:	20 91 58 01 	lds	r18, 0x0158	; 0x800158 <payload_len>
     186:	89 81       	ldd	r24, Y+1	; 0x01
     188:	9a 81       	ldd	r25, Y+2	; 0x02
     18a:	62 2f       	mov	r22, r18
     18c:	b5 d0       	rcall	.+362    	; 0x2f8 <nrf24_transmitSync>
     18e:	81 e0       	ldi	r24, 0x01	; 1
     190:	62 d1       	rcall	.+708    	; 0x456 <nrf24_csn_digitalWrite>
     192:	81 e0       	ldi	r24, 0x01	; 1
     194:	3f d1       	rcall	.+638    	; 0x414 <nrf24_ce_digitalWrite>
     196:	00 00       	nop
     198:	0f 90       	pop	r0
     19a:	0f 90       	pop	r0
     19c:	df 91       	pop	r29
     19e:	cf 91       	pop	r28
     1a0:	08 95       	ret

000001a2 <nrf24_isSending>:
     1a2:	cf 93       	push	r28
     1a4:	df 93       	push	r29
     1a6:	1f 92       	push	r1
     1a8:	cd b7       	in	r28, 0x3d	; 61
     1aa:	de b7       	in	r29, 0x3e	; 62
     1ac:	0f d0       	rcall	.+30     	; 0x1cc <nrf24_getStatus>
     1ae:	89 83       	std	Y+1, r24	; 0x01
     1b0:	89 81       	ldd	r24, Y+1	; 0x01
     1b2:	88 2f       	mov	r24, r24
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	80 73       	andi	r24, 0x30	; 48
     1b8:	99 27       	eor	r25, r25
     1ba:	89 2b       	or	r24, r25
     1bc:	11 f0       	breq	.+4      	; 0x1c2 <nrf24_isSending+0x20>
     1be:	80 e0       	ldi	r24, 0x00	; 0
     1c0:	01 c0       	rjmp	.+2      	; 0x1c4 <nrf24_isSending+0x22>
     1c2:	81 e0       	ldi	r24, 0x01	; 1
     1c4:	0f 90       	pop	r0
     1c6:	df 91       	pop	r29
     1c8:	cf 91       	pop	r28
     1ca:	08 95       	ret

000001cc <nrf24_getStatus>:
     1cc:	cf 93       	push	r28
     1ce:	df 93       	push	r29
     1d0:	1f 92       	push	r1
     1d2:	cd b7       	in	r28, 0x3d	; 61
     1d4:	de b7       	in	r29, 0x3e	; 62
     1d6:	80 e0       	ldi	r24, 0x00	; 0
     1d8:	3e d1       	rcall	.+636    	; 0x456 <nrf24_csn_digitalWrite>
     1da:	8f ef       	ldi	r24, 0xFF	; 255
     1dc:	4c d0       	rcall	.+152    	; 0x276 <spi_transfer>
     1de:	89 83       	std	Y+1, r24	; 0x01
     1e0:	81 e0       	ldi	r24, 0x01	; 1
     1e2:	39 d1       	rcall	.+626    	; 0x456 <nrf24_csn_digitalWrite>
     1e4:	89 81       	ldd	r24, Y+1	; 0x01
     1e6:	0f 90       	pop	r0
     1e8:	df 91       	pop	r29
     1ea:	cf 91       	pop	r28
     1ec:	08 95       	ret

000001ee <nrf24_lastMessageStatus>:
     1ee:	cf 93       	push	r28
     1f0:	df 93       	push	r29
     1f2:	1f 92       	push	r1
     1f4:	cd b7       	in	r28, 0x3d	; 61
     1f6:	de b7       	in	r29, 0x3e	; 62
     1f8:	e9 df       	rcall	.-46     	; 0x1cc <nrf24_getStatus>
     1fa:	89 83       	std	Y+1, r24	; 0x01
     1fc:	89 81       	ldd	r24, Y+1	; 0x01
     1fe:	88 2f       	mov	r24, r24
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	80 72       	andi	r24, 0x20	; 32
     204:	99 27       	eor	r25, r25
     206:	89 2b       	or	r24, r25
     208:	11 f0       	breq	.+4      	; 0x20e <nrf24_lastMessageStatus+0x20>
     20a:	80 e0       	ldi	r24, 0x00	; 0
     20c:	0a c0       	rjmp	.+20     	; 0x222 <nrf24_lastMessageStatus+0x34>
     20e:	89 81       	ldd	r24, Y+1	; 0x01
     210:	88 2f       	mov	r24, r24
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	80 71       	andi	r24, 0x10	; 16
     216:	99 27       	eor	r25, r25
     218:	89 2b       	or	r24, r25
     21a:	11 f0       	breq	.+4      	; 0x220 <nrf24_lastMessageStatus+0x32>
     21c:	81 e0       	ldi	r24, 0x01	; 1
     21e:	01 c0       	rjmp	.+2      	; 0x222 <nrf24_lastMessageStatus+0x34>
     220:	8f ef       	ldi	r24, 0xFF	; 255
     222:	0f 90       	pop	r0
     224:	df 91       	pop	r29
     226:	cf 91       	pop	r28
     228:	08 95       	ret

0000022a <nrf24_powerUpRx>:
     22a:	cf 93       	push	r28
     22c:	df 93       	push	r29
     22e:	cd b7       	in	r28, 0x3d	; 61
     230:	de b7       	in	r29, 0x3e	; 62
     232:	80 e0       	ldi	r24, 0x00	; 0
     234:	10 d1       	rcall	.+544    	; 0x456 <nrf24_csn_digitalWrite>
     236:	82 ee       	ldi	r24, 0xE2	; 226
     238:	1e d0       	rcall	.+60     	; 0x276 <spi_transfer>
     23a:	81 e0       	ldi	r24, 0x01	; 1
     23c:	0c d1       	rcall	.+536    	; 0x456 <nrf24_csn_digitalWrite>
     23e:	60 e7       	ldi	r22, 0x70	; 112
     240:	87 e0       	ldi	r24, 0x07	; 7
     242:	7e d0       	rcall	.+252    	; 0x340 <nrf24_configRegister>
     244:	80 e0       	ldi	r24, 0x00	; 0
     246:	e6 d0       	rcall	.+460    	; 0x414 <nrf24_ce_digitalWrite>
     248:	6b e0       	ldi	r22, 0x0B	; 11
     24a:	80 e0       	ldi	r24, 0x00	; 0
     24c:	79 d0       	rcall	.+242    	; 0x340 <nrf24_configRegister>
     24e:	81 e0       	ldi	r24, 0x01	; 1
     250:	e1 d0       	rcall	.+450    	; 0x414 <nrf24_ce_digitalWrite>
     252:	00 00       	nop
     254:	df 91       	pop	r29
     256:	cf 91       	pop	r28
     258:	08 95       	ret

0000025a <nrf24_powerUpTx>:
     25a:	cf 93       	push	r28
     25c:	df 93       	push	r29
     25e:	cd b7       	in	r28, 0x3d	; 61
     260:	de b7       	in	r29, 0x3e	; 62
     262:	60 e7       	ldi	r22, 0x70	; 112
     264:	87 e0       	ldi	r24, 0x07	; 7
     266:	6c d0       	rcall	.+216    	; 0x340 <nrf24_configRegister>
     268:	6a e0       	ldi	r22, 0x0A	; 10
     26a:	80 e0       	ldi	r24, 0x00	; 0
     26c:	69 d0       	rcall	.+210    	; 0x340 <nrf24_configRegister>
     26e:	00 00       	nop
     270:	df 91       	pop	r29
     272:	cf 91       	pop	r28
     274:	08 95       	ret

00000276 <spi_transfer>:
     276:	cf 93       	push	r28
     278:	df 93       	push	r29
     27a:	00 d0       	rcall	.+0      	; 0x27c <spi_transfer+0x6>
     27c:	1f 92       	push	r1
     27e:	cd b7       	in	r28, 0x3d	; 61
     280:	de b7       	in	r29, 0x3e	; 62
     282:	8b 83       	std	Y+3, r24	; 0x03
     284:	19 82       	std	Y+1, r1	; 0x01
     286:	1a 82       	std	Y+2, r1	; 0x02
     288:	80 e0       	ldi	r24, 0x00	; 0
     28a:	06 d1       	rcall	.+524    	; 0x498 <nrf24_sck_digitalWrite>
     28c:	19 82       	std	Y+1, r1	; 0x01
     28e:	2a c0       	rjmp	.+84     	; 0x2e4 <spi_transfer+0x6e>
     290:	8b 81       	ldd	r24, Y+3	; 0x03
     292:	88 2f       	mov	r24, r24
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	29 81       	ldd	r18, Y+1	; 0x01
     298:	22 2f       	mov	r18, r18
     29a:	30 e0       	ldi	r19, 0x00	; 0
     29c:	47 e0       	ldi	r20, 0x07	; 7
     29e:	50 e0       	ldi	r21, 0x00	; 0
     2a0:	ba 01       	movw	r22, r20
     2a2:	62 1b       	sub	r22, r18
     2a4:	73 0b       	sbc	r23, r19
     2a6:	9b 01       	movw	r18, r22
     2a8:	02 c0       	rjmp	.+4      	; 0x2ae <spi_transfer+0x38>
     2aa:	95 95       	asr	r25
     2ac:	87 95       	ror	r24
     2ae:	2a 95       	dec	r18
     2b0:	e2 f7       	brpl	.-8      	; 0x2aa <spi_transfer+0x34>
     2b2:	81 70       	andi	r24, 0x01	; 1
     2b4:	99 27       	eor	r25, r25
     2b6:	89 2b       	or	r24, r25
     2b8:	19 f0       	breq	.+6      	; 0x2c0 <spi_transfer+0x4a>
     2ba:	81 e0       	ldi	r24, 0x01	; 1
     2bc:	0e d1       	rcall	.+540    	; 0x4da <nrf24_mosi_digitalWrite>
     2be:	02 c0       	rjmp	.+4      	; 0x2c4 <spi_transfer+0x4e>
     2c0:	80 e0       	ldi	r24, 0x00	; 0
     2c2:	0b d1       	rcall	.+534    	; 0x4da <nrf24_mosi_digitalWrite>
     2c4:	81 e0       	ldi	r24, 0x01	; 1
     2c6:	e8 d0       	rcall	.+464    	; 0x498 <nrf24_sck_digitalWrite>
     2c8:	8a 81       	ldd	r24, Y+2	; 0x02
     2ca:	88 0f       	add	r24, r24
     2cc:	8a 83       	std	Y+2, r24	; 0x02
     2ce:	26 d1       	rcall	.+588    	; 0x51c <nrf24_miso_digitalRead>
     2d0:	88 23       	and	r24, r24
     2d2:	19 f0       	breq	.+6      	; 0x2da <spi_transfer+0x64>
     2d4:	8a 81       	ldd	r24, Y+2	; 0x02
     2d6:	81 60       	ori	r24, 0x01	; 1
     2d8:	8a 83       	std	Y+2, r24	; 0x02
     2da:	80 e0       	ldi	r24, 0x00	; 0
     2dc:	dd d0       	rcall	.+442    	; 0x498 <nrf24_sck_digitalWrite>
     2de:	89 81       	ldd	r24, Y+1	; 0x01
     2e0:	8f 5f       	subi	r24, 0xFF	; 255
     2e2:	89 83       	std	Y+1, r24	; 0x01
     2e4:	89 81       	ldd	r24, Y+1	; 0x01
     2e6:	88 30       	cpi	r24, 0x08	; 8
     2e8:	98 f2       	brcs	.-90     	; 0x290 <spi_transfer+0x1a>
     2ea:	8a 81       	ldd	r24, Y+2	; 0x02
     2ec:	0f 90       	pop	r0
     2ee:	0f 90       	pop	r0
     2f0:	0f 90       	pop	r0
     2f2:	df 91       	pop	r29
     2f4:	cf 91       	pop	r28
     2f6:	08 95       	ret

000002f8 <nrf24_transmitSync>:
     2f8:	cf 93       	push	r28
     2fa:	df 93       	push	r29
     2fc:	00 d0       	rcall	.+0      	; 0x2fe <nrf24_transmitSync+0x6>
     2fe:	00 d0       	rcall	.+0      	; 0x300 <nrf24_transmitSync+0x8>
     300:	cd b7       	in	r28, 0x3d	; 61
     302:	de b7       	in	r29, 0x3e	; 62
     304:	9b 83       	std	Y+3, r25	; 0x03
     306:	8a 83       	std	Y+2, r24	; 0x02
     308:	6c 83       	std	Y+4, r22	; 0x04
     30a:	19 82       	std	Y+1, r1	; 0x01
     30c:	0d c0       	rjmp	.+26     	; 0x328 <nrf24_transmitSync+0x30>
     30e:	89 81       	ldd	r24, Y+1	; 0x01
     310:	88 2f       	mov	r24, r24
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	2a 81       	ldd	r18, Y+2	; 0x02
     316:	3b 81       	ldd	r19, Y+3	; 0x03
     318:	82 0f       	add	r24, r18
     31a:	93 1f       	adc	r25, r19
     31c:	fc 01       	movw	r30, r24
     31e:	80 81       	ld	r24, Z
     320:	aa df       	rcall	.-172    	; 0x276 <spi_transfer>
     322:	89 81       	ldd	r24, Y+1	; 0x01
     324:	8f 5f       	subi	r24, 0xFF	; 255
     326:	89 83       	std	Y+1, r24	; 0x01
     328:	99 81       	ldd	r25, Y+1	; 0x01
     32a:	8c 81       	ldd	r24, Y+4	; 0x04
     32c:	98 17       	cp	r25, r24
     32e:	78 f3       	brcs	.-34     	; 0x30e <nrf24_transmitSync+0x16>
     330:	00 00       	nop
     332:	0f 90       	pop	r0
     334:	0f 90       	pop	r0
     336:	0f 90       	pop	r0
     338:	0f 90       	pop	r0
     33a:	df 91       	pop	r29
     33c:	cf 91       	pop	r28
     33e:	08 95       	ret

00000340 <nrf24_configRegister>:
     340:	cf 93       	push	r28
     342:	df 93       	push	r29
     344:	00 d0       	rcall	.+0      	; 0x346 <nrf24_configRegister+0x6>
     346:	cd b7       	in	r28, 0x3d	; 61
     348:	de b7       	in	r29, 0x3e	; 62
     34a:	89 83       	std	Y+1, r24	; 0x01
     34c:	6a 83       	std	Y+2, r22	; 0x02
     34e:	80 e0       	ldi	r24, 0x00	; 0
     350:	82 d0       	rcall	.+260    	; 0x456 <nrf24_csn_digitalWrite>
     352:	89 81       	ldd	r24, Y+1	; 0x01
     354:	8f 71       	andi	r24, 0x1F	; 31
     356:	80 62       	ori	r24, 0x20	; 32
     358:	8e df       	rcall	.-228    	; 0x276 <spi_transfer>
     35a:	8a 81       	ldd	r24, Y+2	; 0x02
     35c:	8c df       	rcall	.-232    	; 0x276 <spi_transfer>
     35e:	81 e0       	ldi	r24, 0x01	; 1
     360:	7a d0       	rcall	.+244    	; 0x456 <nrf24_csn_digitalWrite>
     362:	00 00       	nop
     364:	0f 90       	pop	r0
     366:	0f 90       	pop	r0
     368:	df 91       	pop	r29
     36a:	cf 91       	pop	r28
     36c:	08 95       	ret

0000036e <nrf24_writeRegister>:

/* Write to a single register of nrf24 */
void nrf24_writeRegister(uint8_t reg, uint8_t* value, uint8_t len) 
{
     36e:	cf 93       	push	r28
     370:	df 93       	push	r29
     372:	00 d0       	rcall	.+0      	; 0x374 <nrf24_writeRegister+0x6>
     374:	00 d0       	rcall	.+0      	; 0x376 <nrf24_writeRegister+0x8>
     376:	cd b7       	in	r28, 0x3d	; 61
     378:	de b7       	in	r29, 0x3e	; 62
     37a:	89 83       	std	Y+1, r24	; 0x01
     37c:	7b 83       	std	Y+3, r23	; 0x03
     37e:	6a 83       	std	Y+2, r22	; 0x02
     380:	4c 83       	std	Y+4, r20	; 0x04
    nrf24_csn_digitalWrite(LOW);
     382:	80 e0       	ldi	r24, 0x00	; 0
     384:	68 d0       	rcall	.+208    	; 0x456 <nrf24_csn_digitalWrite>
    spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
     386:	89 81       	ldd	r24, Y+1	; 0x01
     388:	8f 71       	andi	r24, 0x1F	; 31
     38a:	80 62       	ori	r24, 0x20	; 32
     38c:	74 df       	rcall	.-280    	; 0x276 <spi_transfer>
    nrf24_transmitSync(value,len);
     38e:	8a 81       	ldd	r24, Y+2	; 0x02
     390:	9b 81       	ldd	r25, Y+3	; 0x03
     392:	6c 81       	ldd	r22, Y+4	; 0x04
     394:	b1 df       	rcall	.-158    	; 0x2f8 <nrf24_transmitSync>
    nrf24_csn_digitalWrite(HIGH);
     396:	81 e0       	ldi	r24, 0x01	; 1
     398:	5e d0       	rcall	.+188    	; 0x456 <nrf24_csn_digitalWrite>
}
     39a:	00 00       	nop
     39c:	0f 90       	pop	r0
     39e:	0f 90       	pop	r0
     3a0:	0f 90       	pop	r0
     3a2:	0f 90       	pop	r0
     3a4:	df 91       	pop	r29
     3a6:	cf 91       	pop	r28
     3a8:	08 95       	ret

000003aa <nrf24_setupPins>:
#define check_bit(reg,bit) (reg&(1<<bit))

/* ------------------------------------------------------------------------- */

void nrf24_setupPins()
{
     3aa:	cf 93       	push	r28
     3ac:	df 93       	push	r29
     3ae:	cd b7       	in	r28, 0x3d	; 61
     3b0:	de b7       	in	r29, 0x3e	; 62
    set_bit(RF_DDR,0); // CE output
     3b2:	87 e2       	ldi	r24, 0x27	; 39
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	27 e2       	ldi	r18, 0x27	; 39
     3b8:	30 e0       	ldi	r19, 0x00	; 0
     3ba:	f9 01       	movw	r30, r18
     3bc:	20 81       	ld	r18, Z
     3be:	21 60       	ori	r18, 0x01	; 1
     3c0:	fc 01       	movw	r30, r24
     3c2:	20 83       	st	Z, r18
    set_bit(RF_DDR,1); // CSN output
     3c4:	87 e2       	ldi	r24, 0x27	; 39
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	27 e2       	ldi	r18, 0x27	; 39
     3ca:	30 e0       	ldi	r19, 0x00	; 0
     3cc:	f9 01       	movw	r30, r18
     3ce:	20 81       	ld	r18, Z
     3d0:	22 60       	ori	r18, 0x02	; 2
     3d2:	fc 01       	movw	r30, r24
     3d4:	20 83       	st	Z, r18
    set_bit(RF_DDR,2); // SCK output
     3d6:	87 e2       	ldi	r24, 0x27	; 39
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	27 e2       	ldi	r18, 0x27	; 39
     3dc:	30 e0       	ldi	r19, 0x00	; 0
     3de:	f9 01       	movw	r30, r18
     3e0:	20 81       	ld	r18, Z
     3e2:	24 60       	ori	r18, 0x04	; 4
     3e4:	fc 01       	movw	r30, r24
     3e6:	20 83       	st	Z, r18
    set_bit(RF_DDR,3); // MOSI output
     3e8:	87 e2       	ldi	r24, 0x27	; 39
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	27 e2       	ldi	r18, 0x27	; 39
     3ee:	30 e0       	ldi	r19, 0x00	; 0
     3f0:	f9 01       	movw	r30, r18
     3f2:	20 81       	ld	r18, Z
     3f4:	28 60       	ori	r18, 0x08	; 8
     3f6:	fc 01       	movw	r30, r24
     3f8:	20 83       	st	Z, r18
    clr_bit(RF_DDR,4); // MISO input
     3fa:	87 e2       	ldi	r24, 0x27	; 39
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	27 e2       	ldi	r18, 0x27	; 39
     400:	30 e0       	ldi	r19, 0x00	; 0
     402:	f9 01       	movw	r30, r18
     404:	20 81       	ld	r18, Z
     406:	2f 7e       	andi	r18, 0xEF	; 239
     408:	fc 01       	movw	r30, r24
     40a:	20 83       	st	Z, r18
}
     40c:	00 00       	nop
     40e:	df 91       	pop	r29
     410:	cf 91       	pop	r28
     412:	08 95       	ret

00000414 <nrf24_ce_digitalWrite>:
/* ------------------------------------------------------------------------- */
void nrf24_ce_digitalWrite(uint8_t state)
{
     414:	cf 93       	push	r28
     416:	df 93       	push	r29
     418:	1f 92       	push	r1
     41a:	cd b7       	in	r28, 0x3d	; 61
     41c:	de b7       	in	r29, 0x3e	; 62
     41e:	89 83       	std	Y+1, r24	; 0x01
    if(state)
     420:	89 81       	ldd	r24, Y+1	; 0x01
     422:	88 23       	and	r24, r24
     424:	51 f0       	breq	.+20     	; 0x43a <nrf24_ce_digitalWrite+0x26>
    {
        set_bit(RF_PORT,0);
     426:	88 e2       	ldi	r24, 0x28	; 40
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	28 e2       	ldi	r18, 0x28	; 40
     42c:	30 e0       	ldi	r19, 0x00	; 0
     42e:	f9 01       	movw	r30, r18
     430:	20 81       	ld	r18, Z
     432:	21 60       	ori	r18, 0x01	; 1
     434:	fc 01       	movw	r30, r24
     436:	20 83       	st	Z, r18
    }
    else
    {
        clr_bit(RF_PORT,0);
    }
}
     438:	09 c0       	rjmp	.+18     	; 0x44c <nrf24_ce_digitalWrite+0x38>
    {
        set_bit(RF_PORT,0);
    }
    else
    {
        clr_bit(RF_PORT,0);
     43a:	88 e2       	ldi	r24, 0x28	; 40
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	28 e2       	ldi	r18, 0x28	; 40
     440:	30 e0       	ldi	r19, 0x00	; 0
     442:	f9 01       	movw	r30, r18
     444:	20 81       	ld	r18, Z
     446:	2e 7f       	andi	r18, 0xFE	; 254
     448:	fc 01       	movw	r30, r24
     44a:	20 83       	st	Z, r18
    }
}
     44c:	00 00       	nop
     44e:	0f 90       	pop	r0
     450:	df 91       	pop	r29
     452:	cf 91       	pop	r28
     454:	08 95       	ret

00000456 <nrf24_csn_digitalWrite>:
/* ------------------------------------------------------------------------- */
void nrf24_csn_digitalWrite(uint8_t state)
{
     456:	cf 93       	push	r28
     458:	df 93       	push	r29
     45a:	1f 92       	push	r1
     45c:	cd b7       	in	r28, 0x3d	; 61
     45e:	de b7       	in	r29, 0x3e	; 62
     460:	89 83       	std	Y+1, r24	; 0x01
    if(state)
     462:	89 81       	ldd	r24, Y+1	; 0x01
     464:	88 23       	and	r24, r24
     466:	51 f0       	breq	.+20     	; 0x47c <nrf24_csn_digitalWrite+0x26>
    {
        set_bit(RF_PORT,1);
     468:	88 e2       	ldi	r24, 0x28	; 40
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	28 e2       	ldi	r18, 0x28	; 40
     46e:	30 e0       	ldi	r19, 0x00	; 0
     470:	f9 01       	movw	r30, r18
     472:	20 81       	ld	r18, Z
     474:	22 60       	ori	r18, 0x02	; 2
     476:	fc 01       	movw	r30, r24
     478:	20 83       	st	Z, r18
    }
    else
    {
        clr_bit(RF_PORT,1);
    }
}
     47a:	09 c0       	rjmp	.+18     	; 0x48e <nrf24_csn_digitalWrite+0x38>
    {
        set_bit(RF_PORT,1);
    }
    else
    {
        clr_bit(RF_PORT,1);
     47c:	88 e2       	ldi	r24, 0x28	; 40
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	28 e2       	ldi	r18, 0x28	; 40
     482:	30 e0       	ldi	r19, 0x00	; 0
     484:	f9 01       	movw	r30, r18
     486:	20 81       	ld	r18, Z
     488:	2d 7f       	andi	r18, 0xFD	; 253
     48a:	fc 01       	movw	r30, r24
     48c:	20 83       	st	Z, r18
    }
}
     48e:	00 00       	nop
     490:	0f 90       	pop	r0
     492:	df 91       	pop	r29
     494:	cf 91       	pop	r28
     496:	08 95       	ret

00000498 <nrf24_sck_digitalWrite>:
/* ------------------------------------------------------------------------- */
void nrf24_sck_digitalWrite(uint8_t state)
{
     498:	cf 93       	push	r28
     49a:	df 93       	push	r29
     49c:	1f 92       	push	r1
     49e:	cd b7       	in	r28, 0x3d	; 61
     4a0:	de b7       	in	r29, 0x3e	; 62
     4a2:	89 83       	std	Y+1, r24	; 0x01
    if(state)
     4a4:	89 81       	ldd	r24, Y+1	; 0x01
     4a6:	88 23       	and	r24, r24
     4a8:	51 f0       	breq	.+20     	; 0x4be <nrf24_sck_digitalWrite+0x26>
    {
        set_bit(RF_PORT,2);
     4aa:	88 e2       	ldi	r24, 0x28	; 40
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	28 e2       	ldi	r18, 0x28	; 40
     4b0:	30 e0       	ldi	r19, 0x00	; 0
     4b2:	f9 01       	movw	r30, r18
     4b4:	20 81       	ld	r18, Z
     4b6:	24 60       	ori	r18, 0x04	; 4
     4b8:	fc 01       	movw	r30, r24
     4ba:	20 83       	st	Z, r18
    }
    else
    {
        clr_bit(RF_PORT,2);
    }
}
     4bc:	09 c0       	rjmp	.+18     	; 0x4d0 <nrf24_sck_digitalWrite+0x38>
    {
        set_bit(RF_PORT,2);
    }
    else
    {
        clr_bit(RF_PORT,2);
     4be:	88 e2       	ldi	r24, 0x28	; 40
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	28 e2       	ldi	r18, 0x28	; 40
     4c4:	30 e0       	ldi	r19, 0x00	; 0
     4c6:	f9 01       	movw	r30, r18
     4c8:	20 81       	ld	r18, Z
     4ca:	2b 7f       	andi	r18, 0xFB	; 251
     4cc:	fc 01       	movw	r30, r24
     4ce:	20 83       	st	Z, r18
    }
}
     4d0:	00 00       	nop
     4d2:	0f 90       	pop	r0
     4d4:	df 91       	pop	r29
     4d6:	cf 91       	pop	r28
     4d8:	08 95       	ret

000004da <nrf24_mosi_digitalWrite>:
/* ------------------------------------------------------------------------- */
void nrf24_mosi_digitalWrite(uint8_t state)
{
     4da:	cf 93       	push	r28
     4dc:	df 93       	push	r29
     4de:	1f 92       	push	r1
     4e0:	cd b7       	in	r28, 0x3d	; 61
     4e2:	de b7       	in	r29, 0x3e	; 62
     4e4:	89 83       	std	Y+1, r24	; 0x01
    if(state)
     4e6:	89 81       	ldd	r24, Y+1	; 0x01
     4e8:	88 23       	and	r24, r24
     4ea:	51 f0       	breq	.+20     	; 0x500 <__stack+0x1>
    {
        set_bit(RF_PORT,3);
     4ec:	88 e2       	ldi	r24, 0x28	; 40
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	28 e2       	ldi	r18, 0x28	; 40
     4f2:	30 e0       	ldi	r19, 0x00	; 0
     4f4:	f9 01       	movw	r30, r18
     4f6:	20 81       	ld	r18, Z
     4f8:	28 60       	ori	r18, 0x08	; 8
     4fa:	fc 01       	movw	r30, r24
     4fc:	20 83       	st	Z, r18
    }
    else
    {
        clr_bit(RF_PORT,3);
    }
}
     4fe:	09 c0       	rjmp	.+18     	; 0x512 <__stack+0x13>
    {
        set_bit(RF_PORT,3);
    }
    else
    {
        clr_bit(RF_PORT,3);
     500:	88 e2       	ldi	r24, 0x28	; 40
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	28 e2       	ldi	r18, 0x28	; 40
     506:	30 e0       	ldi	r19, 0x00	; 0
     508:	f9 01       	movw	r30, r18
     50a:	20 81       	ld	r18, Z
     50c:	27 7f       	andi	r18, 0xF7	; 247
     50e:	fc 01       	movw	r30, r24
     510:	20 83       	st	Z, r18
    }
}
     512:	00 00       	nop
     514:	0f 90       	pop	r0
     516:	df 91       	pop	r29
     518:	cf 91       	pop	r28
     51a:	08 95       	ret

0000051c <nrf24_miso_digitalRead>:
/* ------------------------------------------------------------------------- */
uint8_t nrf24_miso_digitalRead()
{
     51c:	cf 93       	push	r28
     51e:	df 93       	push	r29
     520:	cd b7       	in	r28, 0x3d	; 61
     522:	de b7       	in	r29, 0x3e	; 62
    return check_bit(RF_PIN,4);
     524:	86 e2       	ldi	r24, 0x26	; 38
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	fc 01       	movw	r30, r24
     52a:	80 81       	ld	r24, Z
     52c:	80 71       	andi	r24, 0x10	; 16
}
     52e:	df 91       	pop	r29
     530:	cf 91       	pop	r28
     532:	08 95       	ret

00000534 <main>:
void setupReceiveMode();
void processReceivedLine();
void disableUART();
/* ------------------------------------------------------------------------- */
int main()
{
     534:	cf 93       	push	r28
     536:	df 93       	push	r29
     538:	cd b7       	in	r28, 0x3d	; 61
     53a:	de b7       	in	r29, 0x3e	; 62
     53c:	2f 97       	sbiw	r28, 0x0f	; 15
     53e:	0f b6       	in	r0, 0x3f	; 63
     540:	f8 94       	cli
     542:	de bf       	out	0x3e, r29	; 62
     544:	0f be       	out	0x3f, r0	; 63
     546:	cd bf       	out	0x3d, r28	; 61
	sei();
     548:	78 94       	sei
	initUart();
     54a:	9e d0       	rcall	.+316    	; 0x688 <initUart>
	initIO();
     54c:	cf d0       	rcall	.+414    	; 0x6ec <initIO>
	setupReceiveMode();
     54e:	47 d1       	rcall	.+654    	; 0x7de <setupReceiveMode>
	
	// 0x5D PRENDER LED; 0x7F APAGAR LED
	data_array[0] = 0x5D; data_array[1] = 0x5D; data_array[2] = 0x5D; data_array[3] = 0x5D; 
     550:	8d e5       	ldi	r24, 0x5D	; 93
     552:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <data_array>
     556:	8d e5       	ldi	r24, 0x5D	; 93
     558:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <data_array+0x1>
     55c:	8d e5       	ldi	r24, 0x5D	; 93
     55e:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <data_array+0x2>
     562:	8d e5       	ldi	r24, 0x5D	; 93
     564:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <data_array+0x3>
	nrf24_init();
     568:	81 dd       	rcall	.-1278   	; 0x6c <nrf24_init>
	nrf24_config(2,4);	// Channel, payload
     56a:	64 e0       	ldi	r22, 0x04	; 4
     56c:	82 e0       	ldi	r24, 0x02	; 2
     56e:	8b dd       	rcall	.-1258   	; 0x86 <nrf24_config>
	nrf24_tx_address(tx_address);
     570:	86 e4       	ldi	r24, 0x46	; 70
     572:	91 e0       	ldi	r25, 0x01	; 1
     574:	d9 dd       	rcall	.-1102   	; 0x128 <nrf24_tx_address>
	nrf24_rx_address(rx_address);
     576:	8b e4       	ldi	r24, 0x4B	; 75
     578:	91 e0       	ldi	r25, 0x01	; 1
     57a:	bf dd       	rcall	.-1154   	; 0xfa <nrf24_rx_address>
	
	for (uint8_t x = 0; x < 4; x++)
     57c:	19 82       	std	Y+1, r1	; 0x01
     57e:	78 c0       	rjmp	.+240    	; 0x670 <main+0x13c>
	{
		PORTD^=0xFF;
     580:	8b e2       	ldi	r24, 0x2B	; 43
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	2b e2       	ldi	r18, 0x2B	; 43
     586:	30 e0       	ldi	r19, 0x00	; 0
     588:	f9 01       	movw	r30, r18
     58a:	20 81       	ld	r18, Z
     58c:	20 95       	com	r18
     58e:	fc 01       	movw	r30, r24
     590:	20 83       	st	Z, r18
     592:	80 e0       	ldi	r24, 0x00	; 0
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	aa e7       	ldi	r26, 0x7A	; 122
     598:	b3 e4       	ldi	r27, 0x43	; 67
     59a:	8a 83       	std	Y+2, r24	; 0x02
     59c:	9b 83       	std	Y+3, r25	; 0x03
     59e:	ac 83       	std	Y+4, r26	; 0x04
     5a0:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     5a2:	20 e0       	ldi	r18, 0x00	; 0
     5a4:	30 e0       	ldi	r19, 0x00	; 0
     5a6:	4a ef       	ldi	r20, 0xFA	; 250
     5a8:	54 e4       	ldi	r21, 0x44	; 68
     5aa:	6a 81       	ldd	r22, Y+2	; 0x02
     5ac:	7b 81       	ldd	r23, Y+3	; 0x03
     5ae:	8c 81       	ldd	r24, Y+4	; 0x04
     5b0:	9d 81       	ldd	r25, Y+5	; 0x05
     5b2:	fc d3       	rcall	.+2040   	; 0xdac <__mulsf3>
     5b4:	dc 01       	movw	r26, r24
     5b6:	cb 01       	movw	r24, r22
     5b8:	8e 83       	std	Y+6, r24	; 0x06
     5ba:	9f 83       	std	Y+7, r25	; 0x07
     5bc:	a8 87       	std	Y+8, r26	; 0x08
     5be:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     5c0:	20 e0       	ldi	r18, 0x00	; 0
     5c2:	30 e0       	ldi	r19, 0x00	; 0
     5c4:	40 e8       	ldi	r20, 0x80	; 128
     5c6:	5f e3       	ldi	r21, 0x3F	; 63
     5c8:	6e 81       	ldd	r22, Y+6	; 0x06
     5ca:	7f 81       	ldd	r23, Y+7	; 0x07
     5cc:	88 85       	ldd	r24, Y+8	; 0x08
     5ce:	99 85       	ldd	r25, Y+9	; 0x09
     5d0:	6c d3       	rcall	.+1752   	; 0xcaa <__cmpsf2>
     5d2:	88 23       	and	r24, r24
     5d4:	2c f4       	brge	.+10     	; 0x5e0 <main+0xac>
		__ticks = 1;
     5d6:	81 e0       	ldi	r24, 0x01	; 1
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	9b 87       	std	Y+11, r25	; 0x0b
     5dc:	8a 87       	std	Y+10, r24	; 0x0a
     5de:	3b c0       	rjmp	.+118    	; 0x656 <main+0x122>
	else if (__tmp > 65535)
     5e0:	20 e0       	ldi	r18, 0x00	; 0
     5e2:	3f ef       	ldi	r19, 0xFF	; 255
     5e4:	4f e7       	ldi	r20, 0x7F	; 127
     5e6:	57 e4       	ldi	r21, 0x47	; 71
     5e8:	6e 81       	ldd	r22, Y+6	; 0x06
     5ea:	7f 81       	ldd	r23, Y+7	; 0x07
     5ec:	88 85       	ldd	r24, Y+8	; 0x08
     5ee:	99 85       	ldd	r25, Y+9	; 0x09
     5f0:	d9 d3       	rcall	.+1970   	; 0xda4 <__gesf2>
     5f2:	18 16       	cp	r1, r24
     5f4:	3c f5       	brge	.+78     	; 0x644 <main+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5f6:	20 e0       	ldi	r18, 0x00	; 0
     5f8:	30 e0       	ldi	r19, 0x00	; 0
     5fa:	40 e2       	ldi	r20, 0x20	; 32
     5fc:	51 e4       	ldi	r21, 0x41	; 65
     5fe:	6a 81       	ldd	r22, Y+2	; 0x02
     600:	7b 81       	ldd	r23, Y+3	; 0x03
     602:	8c 81       	ldd	r24, Y+4	; 0x04
     604:	9d 81       	ldd	r25, Y+5	; 0x05
     606:	d2 d3       	rcall	.+1956   	; 0xdac <__mulsf3>
     608:	dc 01       	movw	r26, r24
     60a:	cb 01       	movw	r24, r22
     60c:	bc 01       	movw	r22, r24
     60e:	cd 01       	movw	r24, r26
     610:	50 d3       	rcall	.+1696   	; 0xcb2 <__fixunssfsi>
     612:	dc 01       	movw	r26, r24
     614:	cb 01       	movw	r24, r22
     616:	9b 87       	std	Y+11, r25	; 0x0b
     618:	8a 87       	std	Y+10, r24	; 0x0a
     61a:	0f c0       	rjmp	.+30     	; 0x63a <main+0x106>
     61c:	88 ec       	ldi	r24, 0xC8	; 200
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	9d 87       	std	Y+13, r25	; 0x0d
     622:	8c 87       	std	Y+12, r24	; 0x0c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     624:	8c 85       	ldd	r24, Y+12	; 0x0c
     626:	9d 85       	ldd	r25, Y+13	; 0x0d
     628:	01 97       	sbiw	r24, 0x01	; 1
     62a:	f1 f7       	brne	.-4      	; 0x628 <main+0xf4>
     62c:	9d 87       	std	Y+13, r25	; 0x0d
     62e:	8c 87       	std	Y+12, r24	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     630:	8a 85       	ldd	r24, Y+10	; 0x0a
     632:	9b 85       	ldd	r25, Y+11	; 0x0b
     634:	01 97       	sbiw	r24, 0x01	; 1
     636:	9b 87       	std	Y+11, r25	; 0x0b
     638:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     63a:	8a 85       	ldd	r24, Y+10	; 0x0a
     63c:	9b 85       	ldd	r25, Y+11	; 0x0b
     63e:	89 2b       	or	r24, r25
     640:	69 f7       	brne	.-38     	; 0x61c <main+0xe8>
     642:	13 c0       	rjmp	.+38     	; 0x66a <main+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     644:	6e 81       	ldd	r22, Y+6	; 0x06
     646:	7f 81       	ldd	r23, Y+7	; 0x07
     648:	88 85       	ldd	r24, Y+8	; 0x08
     64a:	99 85       	ldd	r25, Y+9	; 0x09
     64c:	32 d3       	rcall	.+1636   	; 0xcb2 <__fixunssfsi>
     64e:	dc 01       	movw	r26, r24
     650:	cb 01       	movw	r24, r22
     652:	9b 87       	std	Y+11, r25	; 0x0b
     654:	8a 87       	std	Y+10, r24	; 0x0a
     656:	8a 85       	ldd	r24, Y+10	; 0x0a
     658:	9b 85       	ldd	r25, Y+11	; 0x0b
     65a:	9f 87       	std	Y+15, r25	; 0x0f
     65c:	8e 87       	std	Y+14, r24	; 0x0e
     65e:	8e 85       	ldd	r24, Y+14	; 0x0e
     660:	9f 85       	ldd	r25, Y+15	; 0x0f
     662:	01 97       	sbiw	r24, 0x01	; 1
     664:	f1 f7       	brne	.-4      	; 0x662 <main+0x12e>
     666:	9f 87       	std	Y+15, r25	; 0x0f
     668:	8e 87       	std	Y+14, r24	; 0x0e
	nrf24_init();
	nrf24_config(2,4);	// Channel, payload
	nrf24_tx_address(tx_address);
	nrf24_rx_address(rx_address);
	
	for (uint8_t x = 0; x < 4; x++)
     66a:	89 81       	ldd	r24, Y+1	; 0x01
     66c:	8f 5f       	subi	r24, 0xFF	; 255
     66e:	89 83       	std	Y+1, r24	; 0x01
     670:	89 81       	ldd	r24, Y+1	; 0x01
     672:	84 30       	cpi	r24, 0x04	; 4
     674:	08 f4       	brcc	.+2      	; 0x678 <main+0x144>
     676:	84 cf       	rjmp	.-248    	; 0x580 <main+0x4c>
		_delay_ms(250);
	}

	while(1)
	{
		if (commandAvailable==true) { commandAvailable = false; processReceivedLine();  }
     678:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <__data_end>
     67c:	88 23       	and	r24, r24
     67e:	e1 f3       	breq	.-8      	; 0x678 <main+0x144>
     680:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <__data_end>
     684:	ce d0       	rcall	.+412    	; 0x822 <processReceivedLine>
	}
     686:	f8 cf       	rjmp	.-16     	; 0x678 <main+0x144>

00000688 <initUart>:
}

void initUart(){
     688:	cf 93       	push	r28
     68a:	df 93       	push	r29
     68c:	cd b7       	in	r28, 0x3d	; 61
     68e:	de b7       	in	r29, 0x3e	; 62
	// UART Initialization : 8-bit : No parity bit : 1 stop bit
	UBRR0H = (BRC >> 8); UBRR0L =  BRC;             // UART BAUDRATE
     690:	85 ec       	ldi	r24, 0xC5	; 197
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	fc 01       	movw	r30, r24
     696:	10 82       	st	Z, r1
     698:	84 ec       	ldi	r24, 0xC4	; 196
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	27 e6       	ldi	r18, 0x67	; 103
     69e:	fc 01       	movw	r30, r24
     6a0:	20 83       	st	Z, r18
	UCSR0A |= (1 << U2X0);                          // DOUBLE UART SPEED
     6a2:	80 ec       	ldi	r24, 0xC0	; 192
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	20 ec       	ldi	r18, 0xC0	; 192
     6a8:	30 e0       	ldi	r19, 0x00	; 0
     6aa:	f9 01       	movw	r30, r18
     6ac:	20 81       	ld	r18, Z
     6ae:	22 60       	ori	r18, 0x02	; 2
     6b0:	fc 01       	movw	r30, r24
     6b2:	20 83       	st	Z, r18
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);        // 8-BIT CHARACTER SIZE
     6b4:	82 ec       	ldi	r24, 0xC2	; 194
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	22 ec       	ldi	r18, 0xC2	; 194
     6ba:	30 e0       	ldi	r19, 0x00	; 0
     6bc:	f9 01       	movw	r30, r18
     6be:	20 81       	ld	r18, Z
     6c0:	26 60       	ori	r18, 0x06	; 6
     6c2:	fc 01       	movw	r30, r24
     6c4:	20 83       	st	Z, r18
	
	// Setup UART buffer
	uartBuffer = (uint8_t*)malloc(uartBufferSize);
     6c6:	80 e2       	ldi	r24, 0x20	; 32
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	fb d3       	rcall	.+2038   	; 0xec2 <malloc>
     6cc:	90 93 5c 01 	sts	0x015C, r25	; 0x80015c <uartBuffer+0x1>
     6d0:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <uartBuffer>
	uartBufferPos = uartBuffer;
     6d4:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <uartBuffer>
     6d8:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <uartBuffer+0x1>
     6dc:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <uartBufferPos+0x1>
     6e0:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <uartBufferPos>
}
     6e4:	00 00       	nop
     6e6:	df 91       	pop	r29
     6e8:	cf 91       	pop	r28
     6ea:	08 95       	ret

000006ec <initIO>:

void initIO(){
     6ec:	cf 93       	push	r28
     6ee:	df 93       	push	r29
     6f0:	cd b7       	in	r28, 0x3d	; 61
     6f2:	de b7       	in	r29, 0x3e	; 62
	// Input/Output pin initialization
	// 1 : OUTPUT | 0 : INPUT | 0b76543210 Bit order
	DDRD = 0b11000010;
     6f4:	8a e2       	ldi	r24, 0x2A	; 42
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	22 ec       	ldi	r18, 0xC2	; 194
     6fa:	fc 01       	movw	r30, r24
     6fc:	20 83       	st	Z, r18
}
     6fe:	00 00       	nop
     700:	df 91       	pop	r29
     702:	cf 91       	pop	r28
     704:	08 95       	ret

00000706 <transmitMessage>:


void transmitMessage(uint8_t* message, uint8_t length){
     706:	cf 93       	push	r28
     708:	df 93       	push	r29
     70a:	00 d0       	rcall	.+0      	; 0x70c <transmitMessage+0x6>
     70c:	1f 92       	push	r1
     70e:	cd b7       	in	r28, 0x3d	; 61
     710:	de b7       	in	r29, 0x3e	; 62
     712:	9a 83       	std	Y+2, r25	; 0x02
     714:	89 83       	std	Y+1, r24	; 0x01
     716:	6b 83       	std	Y+3, r22	; 0x03
	uartBufferPos = uartBuffer;
     718:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <uartBuffer>
     71c:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <uartBuffer+0x1>
     720:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <uartBufferPos+0x1>
     724:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <uartBufferPos>
	uartTxMessageEnd = (uartBuffer+length);
     728:	20 91 5b 01 	lds	r18, 0x015B	; 0x80015b <uartBuffer>
     72c:	30 91 5c 01 	lds	r19, 0x015C	; 0x80015c <uartBuffer+0x1>
     730:	8b 81       	ldd	r24, Y+3	; 0x03
     732:	88 2f       	mov	r24, r24
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	82 0f       	add	r24, r18
     738:	93 1f       	adc	r25, r19
     73a:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <uartTxMessageEnd+0x1>
     73e:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <uartTxMessageEnd>
	memcpy(uartBuffer, message, length);
     742:	8b 81       	ldd	r24, Y+3	; 0x03
     744:	48 2f       	mov	r20, r24
     746:	50 e0       	ldi	r21, 0x00	; 0
     748:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <uartBuffer>
     74c:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <uartBuffer+0x1>
     750:	29 81       	ldd	r18, Y+1	; 0x01
     752:	3a 81       	ldd	r19, Y+2	; 0x02
     754:	b9 01       	movw	r22, r18
     756:	e3 d4       	rcall	.+2502   	; 0x111e <memcpy>
	UCSR0B |= (1<<TXEN0) | (1<<TXCIE0);
     758:	81 ec       	ldi	r24, 0xC1	; 193
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	21 ec       	ldi	r18, 0xC1	; 193
     75e:	30 e0       	ldi	r19, 0x00	; 0
     760:	f9 01       	movw	r30, r18
     762:	20 81       	ld	r18, Z
     764:	28 64       	ori	r18, 0x48	; 72
     766:	fc 01       	movw	r30, r24
     768:	20 83       	st	Z, r18
	UCSR0B &=~(1<<RXEN0) &~(1<<RXCIE0);
     76a:	81 ec       	ldi	r24, 0xC1	; 193
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	21 ec       	ldi	r18, 0xC1	; 193
     770:	30 e0       	ldi	r19, 0x00	; 0
     772:	f9 01       	movw	r30, r18
     774:	20 81       	ld	r18, Z
     776:	2f 76       	andi	r18, 0x6F	; 111
     778:	fc 01       	movw	r30, r24
     77a:	20 83       	st	Z, r18
	
	uartBufferPos++;
     77c:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <uartBufferPos>
     780:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <uartBufferPos+0x1>
     784:	01 96       	adiw	r24, 0x01	; 1
     786:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <uartBufferPos+0x1>
     78a:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <uartBufferPos>
	UDR0 = *(uartBufferPos-1);
     78e:	86 ec       	ldi	r24, 0xC6	; 198
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	20 91 51 01 	lds	r18, 0x0151	; 0x800151 <uartBufferPos>
     796:	30 91 52 01 	lds	r19, 0x0152	; 0x800152 <uartBufferPos+0x1>
     79a:	21 50       	subi	r18, 0x01	; 1
     79c:	31 09       	sbc	r19, r1
     79e:	f9 01       	movw	r30, r18
     7a0:	20 81       	ld	r18, Z
     7a2:	fc 01       	movw	r30, r24
     7a4:	20 83       	st	Z, r18
}
     7a6:	00 00       	nop
     7a8:	0f 90       	pop	r0
     7aa:	0f 90       	pop	r0
     7ac:	0f 90       	pop	r0
     7ae:	df 91       	pop	r29
     7b0:	cf 91       	pop	r28
     7b2:	08 95       	ret

000007b4 <transmissionState>:

bool transmissionState(){
     7b4:	cf 93       	push	r28
     7b6:	df 93       	push	r29
     7b8:	cd b7       	in	r28, 0x3d	; 61
     7ba:	de b7       	in	r29, 0x3e	; 62
	// True : Currently transmitting | False : Transmission finished
	if (uartBufferPos!=uartTxMessageEnd) {return true;}
     7bc:	20 91 51 01 	lds	r18, 0x0151	; 0x800151 <uartBufferPos>
     7c0:	30 91 52 01 	lds	r19, 0x0152	; 0x800152 <uartBufferPos+0x1>
     7c4:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <uartTxMessageEnd>
     7c8:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <uartTxMessageEnd+0x1>
     7cc:	28 17       	cp	r18, r24
     7ce:	39 07       	cpc	r19, r25
     7d0:	11 f0       	breq	.+4      	; 0x7d6 <transmissionState+0x22>
     7d2:	81 e0       	ldi	r24, 0x01	; 1
     7d4:	01 c0       	rjmp	.+2      	; 0x7d8 <transmissionState+0x24>
	else { return false; }
     7d6:	80 e0       	ldi	r24, 0x00	; 0
}
     7d8:	df 91       	pop	r29
     7da:	cf 91       	pop	r28
     7dc:	08 95       	ret

000007de <setupReceiveMode>:


void setupReceiveMode(){
     7de:	cf 93       	push	r28
     7e0:	df 93       	push	r29
     7e2:	cd b7       	in	r28, 0x3d	; 61
     7e4:	de b7       	in	r29, 0x3e	; 62
	uartBufferPos = uartBuffer;
     7e6:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <uartBuffer>
     7ea:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <uartBuffer+0x1>
     7ee:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <uartBufferPos+0x1>
     7f2:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <uartBufferPos>
	UCSR0B &=~(1<<TXEN0) &~(1<<TXCIE0);
     7f6:	81 ec       	ldi	r24, 0xC1	; 193
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	21 ec       	ldi	r18, 0xC1	; 193
     7fc:	30 e0       	ldi	r19, 0x00	; 0
     7fe:	f9 01       	movw	r30, r18
     800:	20 81       	ld	r18, Z
     802:	27 7b       	andi	r18, 0xB7	; 183
     804:	fc 01       	movw	r30, r24
     806:	20 83       	st	Z, r18
	UCSR0B |= (1<<RXEN0) | (1<<RXCIE0);
     808:	81 ec       	ldi	r24, 0xC1	; 193
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	21 ec       	ldi	r18, 0xC1	; 193
     80e:	30 e0       	ldi	r19, 0x00	; 0
     810:	f9 01       	movw	r30, r18
     812:	20 81       	ld	r18, Z
     814:	20 69       	ori	r18, 0x90	; 144
     816:	fc 01       	movw	r30, r24
     818:	20 83       	st	Z, r18
}
     81a:	00 00       	nop
     81c:	df 91       	pop	r29
     81e:	cf 91       	pop	r28
     820:	08 95       	ret

00000822 <processReceivedLine>:

void processReceivedLine(){
     822:	cf 93       	push	r28
     824:	df 93       	push	r29
     826:	cd b7       	in	r28, 0x3d	; 61
     828:	de b7       	in	r29, 0x3e	; 62
     82a:	6e 97       	sbiw	r28, 0x1e	; 30
     82c:	0f b6       	in	r0, 0x3f	; 63
     82e:	f8 94       	cli
     830:	de bf       	out	0x3e, r29	; 62
     832:	0f be       	out	0x3f, r0	; 63
     834:	cd bf       	out	0x3d, r28	; 61
	
	if(memcmp(&messageArray[0][0], uartBuffer, 11)==0) {
     836:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <uartBuffer>
     83a:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <uartBuffer+0x1>
     83e:	4b e0       	ldi	r20, 0x0B	; 11
     840:	50 e0       	ldi	r21, 0x00	; 0
     842:	bc 01       	movw	r22, r24
     844:	86 e0       	ldi	r24, 0x06	; 6
     846:	91 e0       	ldi	r25, 0x01	; 1
     848:	5d d4       	rcall	.+2234   	; 0x1104 <memcmp>
     84a:	89 2b       	or	r24, r25
     84c:	09 f0       	breq	.+2      	; 0x850 <processReceivedLine+0x2e>
     84e:	aa c0       	rjmp	.+340    	; 0x9a4 <processReceivedLine+0x182>
		transmitMessage(&messageReply[0][0], 17);
     850:	61 e1       	ldi	r22, 0x11	; 17
     852:	80 e2       	ldi	r24, 0x20	; 32
     854:	91 e0       	ldi	r25, 0x01	; 1
     856:	57 df       	rcall	.-338    	; 0x706 <transmitMessage>
		while(transmissionState()) {}
     858:	00 00       	nop
     85a:	ac df       	rcall	.-168    	; 0x7b4 <transmissionState>
     85c:	88 23       	and	r24, r24
     85e:	e9 f7       	brne	.-6      	; 0x85a <processReceivedLine+0x38>
		bit_set(PORTD, BIT(7));
     860:	8b e2       	ldi	r24, 0x2B	; 43
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	2b e2       	ldi	r18, 0x2B	; 43
     866:	30 e0       	ldi	r19, 0x00	; 0
     868:	f9 01       	movw	r30, r18
     86a:	20 81       	ld	r18, Z
     86c:	20 68       	ori	r18, 0x80	; 128
     86e:	fc 01       	movw	r30, r24
     870:	20 83       	st	Z, r18

		data_array[0] = 0x7F; data_array[1] = 0x7F; data_array[2] = 0x7F; data_array[3] = 0x7F; 
     872:	8f e7       	ldi	r24, 0x7F	; 127
     874:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <data_array>
     878:	8f e7       	ldi	r24, 0x7F	; 127
     87a:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <data_array+0x1>
     87e:	8f e7       	ldi	r24, 0x7F	; 127
     880:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <data_array+0x2>
     884:	8f e7       	ldi	r24, 0x7F	; 127
     886:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <data_array+0x3>
		nrf24_send(data_array);
     88a:	84 e5       	ldi	r24, 0x54	; 84
     88c:	91 e0       	ldi	r25, 0x01	; 1
     88e:	65 dc       	rcall	.-1846   	; 0x15a <nrf24_send>
		while(nrf24_isSending());
     890:	00 00       	nop
     892:	87 dc       	rcall	.-1778   	; 0x1a2 <nrf24_isSending>
     894:	88 23       	and	r24, r24
     896:	e9 f7       	brne	.-6      	; 0x892 <processReceivedLine+0x70>
		temp = nrf24_lastMessageStatus();
     898:	aa dc       	rcall	.-1708   	; 0x1ee <nrf24_lastMessageStatus>
     89a:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <temp>
		if(temp == NRF24_TRANSMISSON_OK)
     89e:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <temp>
     8a2:	88 23       	and	r24, r24
     8a4:	09 f0       	breq	.+2      	; 0x8a8 <processReceivedLine+0x86>
     8a6:	7e c0       	rjmp	.+252    	; 0x9a4 <processReceivedLine+0x182>
		{
			for (uint8_t x = 0; x < 4; x++)
     8a8:	19 82       	std	Y+1, r1	; 0x01
     8aa:	78 c0       	rjmp	.+240    	; 0x99c <processReceivedLine+0x17a>
			{
				PORTD^=0xFF;
     8ac:	8b e2       	ldi	r24, 0x2B	; 43
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	2b e2       	ldi	r18, 0x2B	; 43
     8b2:	30 e0       	ldi	r19, 0x00	; 0
     8b4:	f9 01       	movw	r30, r18
     8b6:	20 81       	ld	r18, Z
     8b8:	20 95       	com	r18
     8ba:	fc 01       	movw	r30, r24
     8bc:	20 83       	st	Z, r18
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	aa e7       	ldi	r26, 0x7A	; 122
     8c4:	b3 e4       	ldi	r27, 0x43	; 67
     8c6:	8f 83       	std	Y+7, r24	; 0x07
     8c8:	98 87       	std	Y+8, r25	; 0x08
     8ca:	a9 87       	std	Y+9, r26	; 0x09
     8cc:	ba 87       	std	Y+10, r27	; 0x0a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     8ce:	20 e0       	ldi	r18, 0x00	; 0
     8d0:	30 e0       	ldi	r19, 0x00	; 0
     8d2:	4a ef       	ldi	r20, 0xFA	; 250
     8d4:	54 e4       	ldi	r21, 0x44	; 68
     8d6:	6f 81       	ldd	r22, Y+7	; 0x07
     8d8:	78 85       	ldd	r23, Y+8	; 0x08
     8da:	89 85       	ldd	r24, Y+9	; 0x09
     8dc:	9a 85       	ldd	r25, Y+10	; 0x0a
     8de:	66 d2       	rcall	.+1228   	; 0xdac <__mulsf3>
     8e0:	dc 01       	movw	r26, r24
     8e2:	cb 01       	movw	r24, r22
     8e4:	8b 87       	std	Y+11, r24	; 0x0b
     8e6:	9c 87       	std	Y+12, r25	; 0x0c
     8e8:	ad 87       	std	Y+13, r26	; 0x0d
     8ea:	be 87       	std	Y+14, r27	; 0x0e
	if (__tmp < 1.0)
     8ec:	20 e0       	ldi	r18, 0x00	; 0
     8ee:	30 e0       	ldi	r19, 0x00	; 0
     8f0:	40 e8       	ldi	r20, 0x80	; 128
     8f2:	5f e3       	ldi	r21, 0x3F	; 63
     8f4:	6b 85       	ldd	r22, Y+11	; 0x0b
     8f6:	7c 85       	ldd	r23, Y+12	; 0x0c
     8f8:	8d 85       	ldd	r24, Y+13	; 0x0d
     8fa:	9e 85       	ldd	r25, Y+14	; 0x0e
     8fc:	d6 d1       	rcall	.+940    	; 0xcaa <__cmpsf2>
     8fe:	88 23       	and	r24, r24
     900:	2c f4       	brge	.+10     	; 0x90c <processReceivedLine+0xea>
		__ticks = 1;
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	98 8b       	std	Y+16, r25	; 0x10
     908:	8f 87       	std	Y+15, r24	; 0x0f
     90a:	3b c0       	rjmp	.+118    	; 0x982 <processReceivedLine+0x160>
	else if (__tmp > 65535)
     90c:	20 e0       	ldi	r18, 0x00	; 0
     90e:	3f ef       	ldi	r19, 0xFF	; 255
     910:	4f e7       	ldi	r20, 0x7F	; 127
     912:	57 e4       	ldi	r21, 0x47	; 71
     914:	6b 85       	ldd	r22, Y+11	; 0x0b
     916:	7c 85       	ldd	r23, Y+12	; 0x0c
     918:	8d 85       	ldd	r24, Y+13	; 0x0d
     91a:	9e 85       	ldd	r25, Y+14	; 0x0e
     91c:	43 d2       	rcall	.+1158   	; 0xda4 <__gesf2>
     91e:	18 16       	cp	r1, r24
     920:	3c f5       	brge	.+78     	; 0x970 <processReceivedLine+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     922:	20 e0       	ldi	r18, 0x00	; 0
     924:	30 e0       	ldi	r19, 0x00	; 0
     926:	40 e2       	ldi	r20, 0x20	; 32
     928:	51 e4       	ldi	r21, 0x41	; 65
     92a:	6f 81       	ldd	r22, Y+7	; 0x07
     92c:	78 85       	ldd	r23, Y+8	; 0x08
     92e:	89 85       	ldd	r24, Y+9	; 0x09
     930:	9a 85       	ldd	r25, Y+10	; 0x0a
     932:	3c d2       	rcall	.+1144   	; 0xdac <__mulsf3>
     934:	dc 01       	movw	r26, r24
     936:	cb 01       	movw	r24, r22
     938:	bc 01       	movw	r22, r24
     93a:	cd 01       	movw	r24, r26
     93c:	ba d1       	rcall	.+884    	; 0xcb2 <__fixunssfsi>
     93e:	dc 01       	movw	r26, r24
     940:	cb 01       	movw	r24, r22
     942:	98 8b       	std	Y+16, r25	; 0x10
     944:	8f 87       	std	Y+15, r24	; 0x0f
     946:	0f c0       	rjmp	.+30     	; 0x966 <processReceivedLine+0x144>
     948:	88 ec       	ldi	r24, 0xC8	; 200
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	9a 8b       	std	Y+18, r25	; 0x12
     94e:	89 8b       	std	Y+17, r24	; 0x11
     950:	89 89       	ldd	r24, Y+17	; 0x11
     952:	9a 89       	ldd	r25, Y+18	; 0x12
     954:	01 97       	sbiw	r24, 0x01	; 1
     956:	f1 f7       	brne	.-4      	; 0x954 <processReceivedLine+0x132>
     958:	9a 8b       	std	Y+18, r25	; 0x12
     95a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     95c:	8f 85       	ldd	r24, Y+15	; 0x0f
     95e:	98 89       	ldd	r25, Y+16	; 0x10
     960:	01 97       	sbiw	r24, 0x01	; 1
     962:	98 8b       	std	Y+16, r25	; 0x10
     964:	8f 87       	std	Y+15, r24	; 0x0f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     966:	8f 85       	ldd	r24, Y+15	; 0x0f
     968:	98 89       	ldd	r25, Y+16	; 0x10
     96a:	89 2b       	or	r24, r25
     96c:	69 f7       	brne	.-38     	; 0x948 <processReceivedLine+0x126>
     96e:	13 c0       	rjmp	.+38     	; 0x996 <processReceivedLine+0x174>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     970:	6b 85       	ldd	r22, Y+11	; 0x0b
     972:	7c 85       	ldd	r23, Y+12	; 0x0c
     974:	8d 85       	ldd	r24, Y+13	; 0x0d
     976:	9e 85       	ldd	r25, Y+14	; 0x0e
     978:	9c d1       	rcall	.+824    	; 0xcb2 <__fixunssfsi>
     97a:	dc 01       	movw	r26, r24
     97c:	cb 01       	movw	r24, r22
     97e:	98 8b       	std	Y+16, r25	; 0x10
     980:	8f 87       	std	Y+15, r24	; 0x0f
     982:	8f 85       	ldd	r24, Y+15	; 0x0f
     984:	98 89       	ldd	r25, Y+16	; 0x10
     986:	9c 8b       	std	Y+20, r25	; 0x14
     988:	8b 8b       	std	Y+19, r24	; 0x13
     98a:	8b 89       	ldd	r24, Y+19	; 0x13
     98c:	9c 89       	ldd	r25, Y+20	; 0x14
     98e:	01 97       	sbiw	r24, 0x01	; 1
     990:	f1 f7       	brne	.-4      	; 0x98e <processReceivedLine+0x16c>
     992:	9c 8b       	std	Y+20, r25	; 0x14
     994:	8b 8b       	std	Y+19, r24	; 0x13
		nrf24_send(data_array);
		while(nrf24_isSending());
		temp = nrf24_lastMessageStatus();
		if(temp == NRF24_TRANSMISSON_OK)
		{
			for (uint8_t x = 0; x < 4; x++)
     996:	89 81       	ldd	r24, Y+1	; 0x01
     998:	8f 5f       	subi	r24, 0xFF	; 255
     99a:	89 83       	std	Y+1, r24	; 0x01
     99c:	89 81       	ldd	r24, Y+1	; 0x01
     99e:	84 30       	cpi	r24, 0x04	; 4
     9a0:	08 f4       	brcc	.+2      	; 0x9a4 <processReceivedLine+0x182>
     9a2:	84 cf       	rjmp	.-248    	; 0x8ac <processReceivedLine+0x8a>
		{
			
		}	
	}
	
	if(memcmp(&messageArray[1][0], uartBuffer, 12)==0) {
     9a4:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <uartBuffer>
     9a8:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <uartBuffer+0x1>
     9ac:	4c e0       	ldi	r20, 0x0C	; 12
     9ae:	50 e0       	ldi	r21, 0x00	; 0
     9b0:	bc 01       	movw	r22, r24
     9b2:	83 e1       	ldi	r24, 0x13	; 19
     9b4:	91 e0       	ldi	r25, 0x01	; 1
     9b6:	a6 d3       	rcall	.+1868   	; 0x1104 <memcmp>
     9b8:	89 2b       	or	r24, r25
     9ba:	09 f0       	breq	.+2      	; 0x9be <processReceivedLine+0x19c>
     9bc:	aa c0       	rjmp	.+340    	; 0xb12 <processReceivedLine+0x2f0>
		transmitMessage(&messageReply[1][0], 18);
     9be:	62 e1       	ldi	r22, 0x12	; 18
     9c0:	83 e3       	ldi	r24, 0x33	; 51
     9c2:	91 e0       	ldi	r25, 0x01	; 1
     9c4:	a0 de       	rcall	.-704    	; 0x706 <transmitMessage>
		while(transmissionState()) {}
     9c6:	00 00       	nop
     9c8:	f5 de       	rcall	.-534    	; 0x7b4 <transmissionState>
     9ca:	88 23       	and	r24, r24
     9cc:	e9 f7       	brne	.-6      	; 0x9c8 <processReceivedLine+0x1a6>
		bit_clear(PORTD, BIT(7));
     9ce:	8b e2       	ldi	r24, 0x2B	; 43
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	2b e2       	ldi	r18, 0x2B	; 43
     9d4:	30 e0       	ldi	r19, 0x00	; 0
     9d6:	f9 01       	movw	r30, r18
     9d8:	20 81       	ld	r18, Z
     9da:	2f 77       	andi	r18, 0x7F	; 127
     9dc:	fc 01       	movw	r30, r24
     9de:	20 83       	st	Z, r18
		
		data_array[0] = 0x5D; data_array[1] = 0x5D; data_array[2] = 0x5D; data_array[3] = 0x5D;
     9e0:	8d e5       	ldi	r24, 0x5D	; 93
     9e2:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <data_array>
     9e6:	8d e5       	ldi	r24, 0x5D	; 93
     9e8:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <data_array+0x1>
     9ec:	8d e5       	ldi	r24, 0x5D	; 93
     9ee:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <data_array+0x2>
     9f2:	8d e5       	ldi	r24, 0x5D	; 93
     9f4:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <data_array+0x3>
		nrf24_send(data_array);
     9f8:	84 e5       	ldi	r24, 0x54	; 84
     9fa:	91 e0       	ldi	r25, 0x01	; 1
     9fc:	ae db       	rcall	.-2212   	; 0x15a <nrf24_send>
		while(nrf24_isSending());
     9fe:	00 00       	nop
     a00:	d0 db       	rcall	.-2144   	; 0x1a2 <nrf24_isSending>
     a02:	88 23       	and	r24, r24
     a04:	e9 f7       	brne	.-6      	; 0xa00 <processReceivedLine+0x1de>
		temp = nrf24_lastMessageStatus();
     a06:	f3 db       	rcall	.-2074   	; 0x1ee <nrf24_lastMessageStatus>
     a08:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <temp>
		if(temp == NRF24_TRANSMISSON_OK)
     a0c:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <temp>
     a10:	88 23       	and	r24, r24
     a12:	09 f0       	breq	.+2      	; 0xa16 <processReceivedLine+0x1f4>
     a14:	7e c0       	rjmp	.+252    	; 0xb12 <processReceivedLine+0x2f0>
		{
			for (uint8_t x = 0; x < 4; x++)
     a16:	1a 82       	std	Y+2, r1	; 0x02
     a18:	78 c0       	rjmp	.+240    	; 0xb0a <processReceivedLine+0x2e8>
			{
				PORTD^=0xFF;
     a1a:	8b e2       	ldi	r24, 0x2B	; 43
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	2b e2       	ldi	r18, 0x2B	; 43
     a20:	30 e0       	ldi	r19, 0x00	; 0
     a22:	f9 01       	movw	r30, r18
     a24:	20 81       	ld	r18, Z
     a26:	20 95       	com	r18
     a28:	fc 01       	movw	r30, r24
     a2a:	20 83       	st	Z, r18
     a2c:	80 e0       	ldi	r24, 0x00	; 0
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	aa e7       	ldi	r26, 0x7A	; 122
     a32:	b3 e4       	ldi	r27, 0x43	; 67
     a34:	8b 83       	std	Y+3, r24	; 0x03
     a36:	9c 83       	std	Y+4, r25	; 0x04
     a38:	ad 83       	std	Y+5, r26	; 0x05
     a3a:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     a3c:	20 e0       	ldi	r18, 0x00	; 0
     a3e:	30 e0       	ldi	r19, 0x00	; 0
     a40:	4a ef       	ldi	r20, 0xFA	; 250
     a42:	54 e4       	ldi	r21, 0x44	; 68
     a44:	6b 81       	ldd	r22, Y+3	; 0x03
     a46:	7c 81       	ldd	r23, Y+4	; 0x04
     a48:	8d 81       	ldd	r24, Y+5	; 0x05
     a4a:	9e 81       	ldd	r25, Y+6	; 0x06
     a4c:	af d1       	rcall	.+862    	; 0xdac <__mulsf3>
     a4e:	dc 01       	movw	r26, r24
     a50:	cb 01       	movw	r24, r22
     a52:	8d 8b       	std	Y+21, r24	; 0x15
     a54:	9e 8b       	std	Y+22, r25	; 0x16
     a56:	af 8b       	std	Y+23, r26	; 0x17
     a58:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	40 e8       	ldi	r20, 0x80	; 128
     a60:	5f e3       	ldi	r21, 0x3F	; 63
     a62:	6d 89       	ldd	r22, Y+21	; 0x15
     a64:	7e 89       	ldd	r23, Y+22	; 0x16
     a66:	8f 89       	ldd	r24, Y+23	; 0x17
     a68:	98 8d       	ldd	r25, Y+24	; 0x18
     a6a:	1f d1       	rcall	.+574    	; 0xcaa <__cmpsf2>
     a6c:	88 23       	and	r24, r24
     a6e:	2c f4       	brge	.+10     	; 0xa7a <processReceivedLine+0x258>
		__ticks = 1;
     a70:	81 e0       	ldi	r24, 0x01	; 1
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	9a 8f       	std	Y+26, r25	; 0x1a
     a76:	89 8f       	std	Y+25, r24	; 0x19
     a78:	3b c0       	rjmp	.+118    	; 0xaf0 <processReceivedLine+0x2ce>
	else if (__tmp > 65535)
     a7a:	20 e0       	ldi	r18, 0x00	; 0
     a7c:	3f ef       	ldi	r19, 0xFF	; 255
     a7e:	4f e7       	ldi	r20, 0x7F	; 127
     a80:	57 e4       	ldi	r21, 0x47	; 71
     a82:	6d 89       	ldd	r22, Y+21	; 0x15
     a84:	7e 89       	ldd	r23, Y+22	; 0x16
     a86:	8f 89       	ldd	r24, Y+23	; 0x17
     a88:	98 8d       	ldd	r25, Y+24	; 0x18
     a8a:	8c d1       	rcall	.+792    	; 0xda4 <__gesf2>
     a8c:	18 16       	cp	r1, r24
     a8e:	3c f5       	brge	.+78     	; 0xade <processReceivedLine+0x2bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a90:	20 e0       	ldi	r18, 0x00	; 0
     a92:	30 e0       	ldi	r19, 0x00	; 0
     a94:	40 e2       	ldi	r20, 0x20	; 32
     a96:	51 e4       	ldi	r21, 0x41	; 65
     a98:	6b 81       	ldd	r22, Y+3	; 0x03
     a9a:	7c 81       	ldd	r23, Y+4	; 0x04
     a9c:	8d 81       	ldd	r24, Y+5	; 0x05
     a9e:	9e 81       	ldd	r25, Y+6	; 0x06
     aa0:	85 d1       	rcall	.+778    	; 0xdac <__mulsf3>
     aa2:	dc 01       	movw	r26, r24
     aa4:	cb 01       	movw	r24, r22
     aa6:	bc 01       	movw	r22, r24
     aa8:	cd 01       	movw	r24, r26
     aaa:	03 d1       	rcall	.+518    	; 0xcb2 <__fixunssfsi>
     aac:	dc 01       	movw	r26, r24
     aae:	cb 01       	movw	r24, r22
     ab0:	9a 8f       	std	Y+26, r25	; 0x1a
     ab2:	89 8f       	std	Y+25, r24	; 0x19
     ab4:	0f c0       	rjmp	.+30     	; 0xad4 <processReceivedLine+0x2b2>
     ab6:	88 ec       	ldi	r24, 0xC8	; 200
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	9c 8f       	std	Y+28, r25	; 0x1c
     abc:	8b 8f       	std	Y+27, r24	; 0x1b
     abe:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ac0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ac2:	01 97       	sbiw	r24, 0x01	; 1
     ac4:	f1 f7       	brne	.-4      	; 0xac2 <processReceivedLine+0x2a0>
     ac6:	9c 8f       	std	Y+28, r25	; 0x1c
     ac8:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     aca:	89 8d       	ldd	r24, Y+25	; 0x19
     acc:	9a 8d       	ldd	r25, Y+26	; 0x1a
     ace:	01 97       	sbiw	r24, 0x01	; 1
     ad0:	9a 8f       	std	Y+26, r25	; 0x1a
     ad2:	89 8f       	std	Y+25, r24	; 0x19
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ad4:	89 8d       	ldd	r24, Y+25	; 0x19
     ad6:	9a 8d       	ldd	r25, Y+26	; 0x1a
     ad8:	89 2b       	or	r24, r25
     ada:	69 f7       	brne	.-38     	; 0xab6 <processReceivedLine+0x294>
     adc:	13 c0       	rjmp	.+38     	; 0xb04 <processReceivedLine+0x2e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ade:	6d 89       	ldd	r22, Y+21	; 0x15
     ae0:	7e 89       	ldd	r23, Y+22	; 0x16
     ae2:	8f 89       	ldd	r24, Y+23	; 0x17
     ae4:	98 8d       	ldd	r25, Y+24	; 0x18
     ae6:	e5 d0       	rcall	.+458    	; 0xcb2 <__fixunssfsi>
     ae8:	dc 01       	movw	r26, r24
     aea:	cb 01       	movw	r24, r22
     aec:	9a 8f       	std	Y+26, r25	; 0x1a
     aee:	89 8f       	std	Y+25, r24	; 0x19
     af0:	89 8d       	ldd	r24, Y+25	; 0x19
     af2:	9a 8d       	ldd	r25, Y+26	; 0x1a
     af4:	9e 8f       	std	Y+30, r25	; 0x1e
     af6:	8d 8f       	std	Y+29, r24	; 0x1d
     af8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     afa:	9e 8d       	ldd	r25, Y+30	; 0x1e
     afc:	01 97       	sbiw	r24, 0x01	; 1
     afe:	f1 f7       	brne	.-4      	; 0xafc <processReceivedLine+0x2da>
     b00:	9e 8f       	std	Y+30, r25	; 0x1e
     b02:	8d 8f       	std	Y+29, r24	; 0x1d
		nrf24_send(data_array);
		while(nrf24_isSending());
		temp = nrf24_lastMessageStatus();
		if(temp == NRF24_TRANSMISSON_OK)
		{
			for (uint8_t x = 0; x < 4; x++)
     b04:	8a 81       	ldd	r24, Y+2	; 0x02
     b06:	8f 5f       	subi	r24, 0xFF	; 255
     b08:	8a 83       	std	Y+2, r24	; 0x02
     b0a:	8a 81       	ldd	r24, Y+2	; 0x02
     b0c:	84 30       	cpi	r24, 0x04	; 4
     b0e:	08 f4       	brcc	.+2      	; 0xb12 <processReceivedLine+0x2f0>
     b10:	84 cf       	rjmp	.-248    	; 0xa1a <processReceivedLine+0x1f8>
		else if(temp == NRF24_MESSAGE_LOST)
		{
			
		}
	}
	setupReceiveMode();
     b12:	65 de       	rcall	.-822    	; 0x7de <setupReceiveMode>
	uartBufferPos = uartBuffer;
     b14:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <uartBuffer>
     b18:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <uartBuffer+0x1>
     b1c:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <uartBufferPos+0x1>
     b20:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <uartBufferPos>
}
     b24:	00 00       	nop
     b26:	6e 96       	adiw	r28, 0x1e	; 30
     b28:	0f b6       	in	r0, 0x3f	; 63
     b2a:	f8 94       	cli
     b2c:	de bf       	out	0x3e, r29	; 62
     b2e:	0f be       	out	0x3f, r0	; 63
     b30:	cd bf       	out	0x3d, r28	; 61
     b32:	df 91       	pop	r29
     b34:	cf 91       	pop	r28
     b36:	08 95       	ret

00000b38 <disableUART>:


void disableUART(){
     b38:	cf 93       	push	r28
     b3a:	df 93       	push	r29
     b3c:	cd b7       	in	r28, 0x3d	; 61
     b3e:	de b7       	in	r29, 0x3e	; 62
	UCSR0B &=~(1<<TXEN0) &~(1<<TXCIE0);
     b40:	81 ec       	ldi	r24, 0xC1	; 193
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	21 ec       	ldi	r18, 0xC1	; 193
     b46:	30 e0       	ldi	r19, 0x00	; 0
     b48:	f9 01       	movw	r30, r18
     b4a:	20 81       	ld	r18, Z
     b4c:	27 7b       	andi	r18, 0xB7	; 183
     b4e:	fc 01       	movw	r30, r24
     b50:	20 83       	st	Z, r18
	UCSR0B &=~(1<<RXEN0) &~(1<<RXCIE0);
     b52:	81 ec       	ldi	r24, 0xC1	; 193
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	21 ec       	ldi	r18, 0xC1	; 193
     b58:	30 e0       	ldi	r19, 0x00	; 0
     b5a:	f9 01       	movw	r30, r18
     b5c:	20 81       	ld	r18, Z
     b5e:	2f 76       	andi	r18, 0x6F	; 111
     b60:	fc 01       	movw	r30, r24
     b62:	20 83       	st	Z, r18
}
     b64:	00 00       	nop
     b66:	df 91       	pop	r29
     b68:	cf 91       	pop	r28
     b6a:	08 95       	ret

00000b6c <__vector_20>:


ISR(USART_TX_vect){
     b6c:	1f 92       	push	r1
     b6e:	0f 92       	push	r0
     b70:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__EEPROM_REGION_LENGTH__+0x7f005f>
     b74:	0f 92       	push	r0
     b76:	11 24       	eor	r1, r1
     b78:	2f 93       	push	r18
     b7a:	3f 93       	push	r19
     b7c:	8f 93       	push	r24
     b7e:	9f 93       	push	r25
     b80:	ef 93       	push	r30
     b82:	ff 93       	push	r31
     b84:	cf 93       	push	r28
     b86:	df 93       	push	r29
     b88:	cd b7       	in	r28, 0x3d	; 61
     b8a:	de b7       	in	r29, 0x3e	; 62
	if (uartBufferPos!=uartTxMessageEnd){
     b8c:	20 91 51 01 	lds	r18, 0x0151	; 0x800151 <uartBufferPos>
     b90:	30 91 52 01 	lds	r19, 0x0152	; 0x800152 <uartBufferPos+0x1>
     b94:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <uartTxMessageEnd>
     b98:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <uartTxMessageEnd+0x1>
     b9c:	28 17       	cp	r18, r24
     b9e:	39 07       	cpc	r19, r25
     ba0:	99 f0       	breq	.+38     	; 0xbc8 <__vector_20+0x5c>
		UDR0 = *uartBufferPos;
     ba2:	86 ec       	ldi	r24, 0xC6	; 198
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	20 91 51 01 	lds	r18, 0x0151	; 0x800151 <uartBufferPos>
     baa:	30 91 52 01 	lds	r19, 0x0152	; 0x800152 <uartBufferPos+0x1>
     bae:	f9 01       	movw	r30, r18
     bb0:	20 81       	ld	r18, Z
     bb2:	fc 01       	movw	r30, r24
     bb4:	20 83       	st	Z, r18
		uartBufferPos++;
     bb6:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <uartBufferPos>
     bba:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <uartBufferPos+0x1>
     bbe:	01 96       	adiw	r24, 0x01	; 1
     bc0:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <uartBufferPos+0x1>
     bc4:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <uartBufferPos>
	}
}
     bc8:	00 00       	nop
     bca:	df 91       	pop	r29
     bcc:	cf 91       	pop	r28
     bce:	ff 91       	pop	r31
     bd0:	ef 91       	pop	r30
     bd2:	9f 91       	pop	r25
     bd4:	8f 91       	pop	r24
     bd6:	3f 91       	pop	r19
     bd8:	2f 91       	pop	r18
     bda:	0f 90       	pop	r0
     bdc:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__EEPROM_REGION_LENGTH__+0x7f005f>
     be0:	0f 90       	pop	r0
     be2:	1f 90       	pop	r1
     be4:	18 95       	reti

00000be6 <__vector_18>:

ISR(USART_RX_vect){
     be6:	1f 92       	push	r1
     be8:	0f 92       	push	r0
     bea:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__EEPROM_REGION_LENGTH__+0x7f005f>
     bee:	0f 92       	push	r0
     bf0:	11 24       	eor	r1, r1
     bf2:	2f 93       	push	r18
     bf4:	3f 93       	push	r19
     bf6:	4f 93       	push	r20
     bf8:	5f 93       	push	r21
     bfa:	6f 93       	push	r22
     bfc:	7f 93       	push	r23
     bfe:	8f 93       	push	r24
     c00:	9f 93       	push	r25
     c02:	af 93       	push	r26
     c04:	bf 93       	push	r27
     c06:	ef 93       	push	r30
     c08:	ff 93       	push	r31
     c0a:	cf 93       	push	r28
     c0c:	df 93       	push	r29
     c0e:	cd b7       	in	r28, 0x3d	; 61
     c10:	de b7       	in	r29, 0x3e	; 62
	if(uartBufferPos!=(uartBuffer+uartBufferSize)) {
     c12:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <uartBuffer>
     c16:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <uartBuffer+0x1>
     c1a:	9c 01       	movw	r18, r24
     c1c:	20 5e       	subi	r18, 0xE0	; 224
     c1e:	3f 4f       	sbci	r19, 0xFF	; 255
     c20:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <uartBufferPos>
     c24:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <uartBufferPos+0x1>
     c28:	28 17       	cp	r18, r24
     c2a:	39 07       	cpc	r19, r25
     c2c:	09 f1       	breq	.+66     	; 0xc70 <__vector_18+0x8a>
		*uartBufferPos=UDR0;
     c2e:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <uartBufferPos>
     c32:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <uartBufferPos+0x1>
     c36:	26 ec       	ldi	r18, 0xC6	; 198
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	f9 01       	movw	r30, r18
     c3c:	20 81       	ld	r18, Z
     c3e:	fc 01       	movw	r30, r24
     c40:	20 83       	st	Z, r18
		if (*uartBufferPos!=uartEndMsgChar) { uartBufferPos++; }
     c42:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <uartBufferPos>
     c46:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <uartBufferPos+0x1>
     c4a:	fc 01       	movw	r30, r24
     c4c:	80 81       	ld	r24, Z
     c4e:	84 32       	cpi	r24, 0x24	; 36
     c50:	51 f0       	breq	.+20     	; 0xc66 <__vector_18+0x80>
     c52:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <uartBufferPos>
     c56:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <uartBufferPos+0x1>
     c5a:	01 96       	adiw	r24, 0x01	; 1
     c5c:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <uartBufferPos+0x1>
     c60:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <uartBufferPos>
		else { disableUART(); commandAvailable = true; }
		} else {uartBufferPos = uartBuffer;}
	}
     c64:	0d c0       	rjmp	.+26     	; 0xc80 <__vector_18+0x9a>

ISR(USART_RX_vect){
	if(uartBufferPos!=(uartBuffer+uartBufferSize)) {
		*uartBufferPos=UDR0;
		if (*uartBufferPos!=uartEndMsgChar) { uartBufferPos++; }
		else { disableUART(); commandAvailable = true; }
     c66:	68 df       	rcall	.-304    	; 0xb38 <disableUART>
     c68:	81 e0       	ldi	r24, 0x01	; 1
     c6a:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__data_end>
		} else {uartBufferPos = uartBuffer;}
	}
     c6e:	08 c0       	rjmp	.+16     	; 0xc80 <__vector_18+0x9a>
ISR(USART_RX_vect){
	if(uartBufferPos!=(uartBuffer+uartBufferSize)) {
		*uartBufferPos=UDR0;
		if (*uartBufferPos!=uartEndMsgChar) { uartBufferPos++; }
		else { disableUART(); commandAvailable = true; }
		} else {uartBufferPos = uartBuffer;}
     c70:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <uartBuffer>
     c74:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <uartBuffer+0x1>
     c78:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <uartBufferPos+0x1>
     c7c:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <uartBufferPos>
	}
     c80:	00 00       	nop
     c82:	df 91       	pop	r29
     c84:	cf 91       	pop	r28
     c86:	ff 91       	pop	r31
     c88:	ef 91       	pop	r30
     c8a:	bf 91       	pop	r27
     c8c:	af 91       	pop	r26
     c8e:	9f 91       	pop	r25
     c90:	8f 91       	pop	r24
     c92:	7f 91       	pop	r23
     c94:	6f 91       	pop	r22
     c96:	5f 91       	pop	r21
     c98:	4f 91       	pop	r20
     c9a:	3f 91       	pop	r19
     c9c:	2f 91       	pop	r18
     c9e:	0f 90       	pop	r0
     ca0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__EEPROM_REGION_LENGTH__+0x7f005f>
     ca4:	0f 90       	pop	r0
     ca6:	1f 90       	pop	r1
     ca8:	18 95       	reti

00000caa <__cmpsf2>:
     caa:	2f d0       	rcall	.+94     	; 0xd0a <__fp_cmp>
     cac:	08 f4       	brcc	.+2      	; 0xcb0 <__cmpsf2+0x6>
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	08 95       	ret

00000cb2 <__fixunssfsi>:
     cb2:	57 d0       	rcall	.+174    	; 0xd62 <__fp_splitA>
     cb4:	88 f0       	brcs	.+34     	; 0xcd8 <__fixunssfsi+0x26>
     cb6:	9f 57       	subi	r25, 0x7F	; 127
     cb8:	90 f0       	brcs	.+36     	; 0xcde <__fixunssfsi+0x2c>
     cba:	b9 2f       	mov	r27, r25
     cbc:	99 27       	eor	r25, r25
     cbe:	b7 51       	subi	r27, 0x17	; 23
     cc0:	a0 f0       	brcs	.+40     	; 0xcea <__fixunssfsi+0x38>
     cc2:	d1 f0       	breq	.+52     	; 0xcf8 <__fixunssfsi+0x46>
     cc4:	66 0f       	add	r22, r22
     cc6:	77 1f       	adc	r23, r23
     cc8:	88 1f       	adc	r24, r24
     cca:	99 1f       	adc	r25, r25
     ccc:	1a f0       	brmi	.+6      	; 0xcd4 <__fixunssfsi+0x22>
     cce:	ba 95       	dec	r27
     cd0:	c9 f7       	brne	.-14     	; 0xcc4 <__fixunssfsi+0x12>
     cd2:	12 c0       	rjmp	.+36     	; 0xcf8 <__fixunssfsi+0x46>
     cd4:	b1 30       	cpi	r27, 0x01	; 1
     cd6:	81 f0       	breq	.+32     	; 0xcf8 <__fixunssfsi+0x46>
     cd8:	5e d0       	rcall	.+188    	; 0xd96 <__fp_zero>
     cda:	b1 e0       	ldi	r27, 0x01	; 1
     cdc:	08 95       	ret
     cde:	5b c0       	rjmp	.+182    	; 0xd96 <__fp_zero>
     ce0:	67 2f       	mov	r22, r23
     ce2:	78 2f       	mov	r23, r24
     ce4:	88 27       	eor	r24, r24
     ce6:	b8 5f       	subi	r27, 0xF8	; 248
     ce8:	39 f0       	breq	.+14     	; 0xcf8 <__fixunssfsi+0x46>
     cea:	b9 3f       	cpi	r27, 0xF9	; 249
     cec:	cc f3       	brlt	.-14     	; 0xce0 <__fixunssfsi+0x2e>
     cee:	86 95       	lsr	r24
     cf0:	77 95       	ror	r23
     cf2:	67 95       	ror	r22
     cf4:	b3 95       	inc	r27
     cf6:	d9 f7       	brne	.-10     	; 0xcee <__fixunssfsi+0x3c>
     cf8:	3e f4       	brtc	.+14     	; 0xd08 <__fixunssfsi+0x56>
     cfa:	90 95       	com	r25
     cfc:	80 95       	com	r24
     cfe:	70 95       	com	r23
     d00:	61 95       	neg	r22
     d02:	7f 4f       	sbci	r23, 0xFF	; 255
     d04:	8f 4f       	sbci	r24, 0xFF	; 255
     d06:	9f 4f       	sbci	r25, 0xFF	; 255
     d08:	08 95       	ret

00000d0a <__fp_cmp>:
     d0a:	99 0f       	add	r25, r25
     d0c:	00 08       	sbc	r0, r0
     d0e:	55 0f       	add	r21, r21
     d10:	aa 0b       	sbc	r26, r26
     d12:	e0 e8       	ldi	r30, 0x80	; 128
     d14:	fe ef       	ldi	r31, 0xFE	; 254
     d16:	16 16       	cp	r1, r22
     d18:	17 06       	cpc	r1, r23
     d1a:	e8 07       	cpc	r30, r24
     d1c:	f9 07       	cpc	r31, r25
     d1e:	c0 f0       	brcs	.+48     	; 0xd50 <__fp_cmp+0x46>
     d20:	12 16       	cp	r1, r18
     d22:	13 06       	cpc	r1, r19
     d24:	e4 07       	cpc	r30, r20
     d26:	f5 07       	cpc	r31, r21
     d28:	98 f0       	brcs	.+38     	; 0xd50 <__fp_cmp+0x46>
     d2a:	62 1b       	sub	r22, r18
     d2c:	73 0b       	sbc	r23, r19
     d2e:	84 0b       	sbc	r24, r20
     d30:	95 0b       	sbc	r25, r21
     d32:	39 f4       	brne	.+14     	; 0xd42 <__fp_cmp+0x38>
     d34:	0a 26       	eor	r0, r26
     d36:	61 f0       	breq	.+24     	; 0xd50 <__fp_cmp+0x46>
     d38:	23 2b       	or	r18, r19
     d3a:	24 2b       	or	r18, r20
     d3c:	25 2b       	or	r18, r21
     d3e:	21 f4       	brne	.+8      	; 0xd48 <__fp_cmp+0x3e>
     d40:	08 95       	ret
     d42:	0a 26       	eor	r0, r26
     d44:	09 f4       	brne	.+2      	; 0xd48 <__fp_cmp+0x3e>
     d46:	a1 40       	sbci	r26, 0x01	; 1
     d48:	a6 95       	lsr	r26
     d4a:	8f ef       	ldi	r24, 0xFF	; 255
     d4c:	81 1d       	adc	r24, r1
     d4e:	81 1d       	adc	r24, r1
     d50:	08 95       	ret

00000d52 <__fp_split3>:
     d52:	57 fd       	sbrc	r21, 7
     d54:	90 58       	subi	r25, 0x80	; 128
     d56:	44 0f       	add	r20, r20
     d58:	55 1f       	adc	r21, r21
     d5a:	59 f0       	breq	.+22     	; 0xd72 <__fp_splitA+0x10>
     d5c:	5f 3f       	cpi	r21, 0xFF	; 255
     d5e:	71 f0       	breq	.+28     	; 0xd7c <__fp_splitA+0x1a>
     d60:	47 95       	ror	r20

00000d62 <__fp_splitA>:
     d62:	88 0f       	add	r24, r24
     d64:	97 fb       	bst	r25, 7
     d66:	99 1f       	adc	r25, r25
     d68:	61 f0       	breq	.+24     	; 0xd82 <__fp_splitA+0x20>
     d6a:	9f 3f       	cpi	r25, 0xFF	; 255
     d6c:	79 f0       	breq	.+30     	; 0xd8c <__fp_splitA+0x2a>
     d6e:	87 95       	ror	r24
     d70:	08 95       	ret
     d72:	12 16       	cp	r1, r18
     d74:	13 06       	cpc	r1, r19
     d76:	14 06       	cpc	r1, r20
     d78:	55 1f       	adc	r21, r21
     d7a:	f2 cf       	rjmp	.-28     	; 0xd60 <__fp_split3+0xe>
     d7c:	46 95       	lsr	r20
     d7e:	f1 df       	rcall	.-30     	; 0xd62 <__fp_splitA>
     d80:	08 c0       	rjmp	.+16     	; 0xd92 <__fp_splitA+0x30>
     d82:	16 16       	cp	r1, r22
     d84:	17 06       	cpc	r1, r23
     d86:	18 06       	cpc	r1, r24
     d88:	99 1f       	adc	r25, r25
     d8a:	f1 cf       	rjmp	.-30     	; 0xd6e <__fp_splitA+0xc>
     d8c:	86 95       	lsr	r24
     d8e:	71 05       	cpc	r23, r1
     d90:	61 05       	cpc	r22, r1
     d92:	08 94       	sec
     d94:	08 95       	ret

00000d96 <__fp_zero>:
     d96:	e8 94       	clt

00000d98 <__fp_szero>:
     d98:	bb 27       	eor	r27, r27
     d9a:	66 27       	eor	r22, r22
     d9c:	77 27       	eor	r23, r23
     d9e:	cb 01       	movw	r24, r22
     da0:	97 f9       	bld	r25, 7
     da2:	08 95       	ret

00000da4 <__gesf2>:
     da4:	b2 df       	rcall	.-156    	; 0xd0a <__fp_cmp>
     da6:	08 f4       	brcc	.+2      	; 0xdaa <__gesf2+0x6>
     da8:	8f ef       	ldi	r24, 0xFF	; 255
     daa:	08 95       	ret

00000dac <__mulsf3>:
     dac:	0b d0       	rcall	.+22     	; 0xdc4 <__mulsf3x>
     dae:	78 c0       	rjmp	.+240    	; 0xea0 <__fp_round>
     db0:	69 d0       	rcall	.+210    	; 0xe84 <__fp_pscA>
     db2:	28 f0       	brcs	.+10     	; 0xdbe <__mulsf3+0x12>
     db4:	6e d0       	rcall	.+220    	; 0xe92 <__fp_pscB>
     db6:	18 f0       	brcs	.+6      	; 0xdbe <__mulsf3+0x12>
     db8:	95 23       	and	r25, r21
     dba:	09 f0       	breq	.+2      	; 0xdbe <__mulsf3+0x12>
     dbc:	5a c0       	rjmp	.+180    	; 0xe72 <__fp_inf>
     dbe:	5f c0       	rjmp	.+190    	; 0xe7e <__fp_nan>
     dc0:	11 24       	eor	r1, r1
     dc2:	ea cf       	rjmp	.-44     	; 0xd98 <__fp_szero>

00000dc4 <__mulsf3x>:
     dc4:	c6 df       	rcall	.-116    	; 0xd52 <__fp_split3>
     dc6:	a0 f3       	brcs	.-24     	; 0xdb0 <__mulsf3+0x4>

00000dc8 <__mulsf3_pse>:
     dc8:	95 9f       	mul	r25, r21
     dca:	d1 f3       	breq	.-12     	; 0xdc0 <__mulsf3+0x14>
     dcc:	95 0f       	add	r25, r21
     dce:	50 e0       	ldi	r21, 0x00	; 0
     dd0:	55 1f       	adc	r21, r21
     dd2:	62 9f       	mul	r22, r18
     dd4:	f0 01       	movw	r30, r0
     dd6:	72 9f       	mul	r23, r18
     dd8:	bb 27       	eor	r27, r27
     dda:	f0 0d       	add	r31, r0
     ddc:	b1 1d       	adc	r27, r1
     dde:	63 9f       	mul	r22, r19
     de0:	aa 27       	eor	r26, r26
     de2:	f0 0d       	add	r31, r0
     de4:	b1 1d       	adc	r27, r1
     de6:	aa 1f       	adc	r26, r26
     de8:	64 9f       	mul	r22, r20
     dea:	66 27       	eor	r22, r22
     dec:	b0 0d       	add	r27, r0
     dee:	a1 1d       	adc	r26, r1
     df0:	66 1f       	adc	r22, r22
     df2:	82 9f       	mul	r24, r18
     df4:	22 27       	eor	r18, r18
     df6:	b0 0d       	add	r27, r0
     df8:	a1 1d       	adc	r26, r1
     dfa:	62 1f       	adc	r22, r18
     dfc:	73 9f       	mul	r23, r19
     dfe:	b0 0d       	add	r27, r0
     e00:	a1 1d       	adc	r26, r1
     e02:	62 1f       	adc	r22, r18
     e04:	83 9f       	mul	r24, r19
     e06:	a0 0d       	add	r26, r0
     e08:	61 1d       	adc	r22, r1
     e0a:	22 1f       	adc	r18, r18
     e0c:	74 9f       	mul	r23, r20
     e0e:	33 27       	eor	r19, r19
     e10:	a0 0d       	add	r26, r0
     e12:	61 1d       	adc	r22, r1
     e14:	23 1f       	adc	r18, r19
     e16:	84 9f       	mul	r24, r20
     e18:	60 0d       	add	r22, r0
     e1a:	21 1d       	adc	r18, r1
     e1c:	82 2f       	mov	r24, r18
     e1e:	76 2f       	mov	r23, r22
     e20:	6a 2f       	mov	r22, r26
     e22:	11 24       	eor	r1, r1
     e24:	9f 57       	subi	r25, 0x7F	; 127
     e26:	50 40       	sbci	r21, 0x00	; 0
     e28:	8a f0       	brmi	.+34     	; 0xe4c <__mulsf3_pse+0x84>
     e2a:	e1 f0       	breq	.+56     	; 0xe64 <__mulsf3_pse+0x9c>
     e2c:	88 23       	and	r24, r24
     e2e:	4a f0       	brmi	.+18     	; 0xe42 <__mulsf3_pse+0x7a>
     e30:	ee 0f       	add	r30, r30
     e32:	ff 1f       	adc	r31, r31
     e34:	bb 1f       	adc	r27, r27
     e36:	66 1f       	adc	r22, r22
     e38:	77 1f       	adc	r23, r23
     e3a:	88 1f       	adc	r24, r24
     e3c:	91 50       	subi	r25, 0x01	; 1
     e3e:	50 40       	sbci	r21, 0x00	; 0
     e40:	a9 f7       	brne	.-22     	; 0xe2c <__mulsf3_pse+0x64>
     e42:	9e 3f       	cpi	r25, 0xFE	; 254
     e44:	51 05       	cpc	r21, r1
     e46:	70 f0       	brcs	.+28     	; 0xe64 <__mulsf3_pse+0x9c>
     e48:	14 c0       	rjmp	.+40     	; 0xe72 <__fp_inf>
     e4a:	a6 cf       	rjmp	.-180    	; 0xd98 <__fp_szero>
     e4c:	5f 3f       	cpi	r21, 0xFF	; 255
     e4e:	ec f3       	brlt	.-6      	; 0xe4a <__mulsf3_pse+0x82>
     e50:	98 3e       	cpi	r25, 0xE8	; 232
     e52:	dc f3       	brlt	.-10     	; 0xe4a <__mulsf3_pse+0x82>
     e54:	86 95       	lsr	r24
     e56:	77 95       	ror	r23
     e58:	67 95       	ror	r22
     e5a:	b7 95       	ror	r27
     e5c:	f7 95       	ror	r31
     e5e:	e7 95       	ror	r30
     e60:	9f 5f       	subi	r25, 0xFF	; 255
     e62:	c1 f7       	brne	.-16     	; 0xe54 <__mulsf3_pse+0x8c>
     e64:	fe 2b       	or	r31, r30
     e66:	88 0f       	add	r24, r24
     e68:	91 1d       	adc	r25, r1
     e6a:	96 95       	lsr	r25
     e6c:	87 95       	ror	r24
     e6e:	97 f9       	bld	r25, 7
     e70:	08 95       	ret

00000e72 <__fp_inf>:
     e72:	97 f9       	bld	r25, 7
     e74:	9f 67       	ori	r25, 0x7F	; 127
     e76:	80 e8       	ldi	r24, 0x80	; 128
     e78:	70 e0       	ldi	r23, 0x00	; 0
     e7a:	60 e0       	ldi	r22, 0x00	; 0
     e7c:	08 95       	ret

00000e7e <__fp_nan>:
     e7e:	9f ef       	ldi	r25, 0xFF	; 255
     e80:	80 ec       	ldi	r24, 0xC0	; 192
     e82:	08 95       	ret

00000e84 <__fp_pscA>:
     e84:	00 24       	eor	r0, r0
     e86:	0a 94       	dec	r0
     e88:	16 16       	cp	r1, r22
     e8a:	17 06       	cpc	r1, r23
     e8c:	18 06       	cpc	r1, r24
     e8e:	09 06       	cpc	r0, r25
     e90:	08 95       	ret

00000e92 <__fp_pscB>:
     e92:	00 24       	eor	r0, r0
     e94:	0a 94       	dec	r0
     e96:	12 16       	cp	r1, r18
     e98:	13 06       	cpc	r1, r19
     e9a:	14 06       	cpc	r1, r20
     e9c:	05 06       	cpc	r0, r21
     e9e:	08 95       	ret

00000ea0 <__fp_round>:
     ea0:	09 2e       	mov	r0, r25
     ea2:	03 94       	inc	r0
     ea4:	00 0c       	add	r0, r0
     ea6:	11 f4       	brne	.+4      	; 0xeac <__fp_round+0xc>
     ea8:	88 23       	and	r24, r24
     eaa:	52 f0       	brmi	.+20     	; 0xec0 <__fp_round+0x20>
     eac:	bb 0f       	add	r27, r27
     eae:	40 f4       	brcc	.+16     	; 0xec0 <__fp_round+0x20>
     eb0:	bf 2b       	or	r27, r31
     eb2:	11 f4       	brne	.+4      	; 0xeb8 <__fp_round+0x18>
     eb4:	60 ff       	sbrs	r22, 0
     eb6:	04 c0       	rjmp	.+8      	; 0xec0 <__fp_round+0x20>
     eb8:	6f 5f       	subi	r22, 0xFF	; 255
     eba:	7f 4f       	sbci	r23, 0xFF	; 255
     ebc:	8f 4f       	sbci	r24, 0xFF	; 255
     ebe:	9f 4f       	sbci	r25, 0xFF	; 255
     ec0:	08 95       	ret

00000ec2 <malloc>:
     ec2:	0f 93       	push	r16
     ec4:	1f 93       	push	r17
     ec6:	cf 93       	push	r28
     ec8:	df 93       	push	r29
     eca:	82 30       	cpi	r24, 0x02	; 2
     ecc:	91 05       	cpc	r25, r1
     ece:	10 f4       	brcc	.+4      	; 0xed4 <malloc+0x12>
     ed0:	82 e0       	ldi	r24, 0x02	; 2
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	e0 91 5f 01 	lds	r30, 0x015F	; 0x80015f <__flp>
     ed8:	f0 91 60 01 	lds	r31, 0x0160	; 0x800160 <__flp+0x1>
     edc:	20 e0       	ldi	r18, 0x00	; 0
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	a0 e0       	ldi	r26, 0x00	; 0
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	30 97       	sbiw	r30, 0x00	; 0
     ee6:	19 f1       	breq	.+70     	; 0xf2e <malloc+0x6c>
     ee8:	40 81       	ld	r20, Z
     eea:	51 81       	ldd	r21, Z+1	; 0x01
     eec:	02 81       	ldd	r16, Z+2	; 0x02
     eee:	13 81       	ldd	r17, Z+3	; 0x03
     ef0:	48 17       	cp	r20, r24
     ef2:	59 07       	cpc	r21, r25
     ef4:	c8 f0       	brcs	.+50     	; 0xf28 <malloc+0x66>
     ef6:	84 17       	cp	r24, r20
     ef8:	95 07       	cpc	r25, r21
     efa:	69 f4       	brne	.+26     	; 0xf16 <malloc+0x54>
     efc:	10 97       	sbiw	r26, 0x00	; 0
     efe:	31 f0       	breq	.+12     	; 0xf0c <malloc+0x4a>
     f00:	12 96       	adiw	r26, 0x02	; 2
     f02:	0c 93       	st	X, r16
     f04:	12 97       	sbiw	r26, 0x02	; 2
     f06:	13 96       	adiw	r26, 0x03	; 3
     f08:	1c 93       	st	X, r17
     f0a:	27 c0       	rjmp	.+78     	; 0xf5a <malloc+0x98>
     f0c:	00 93 5f 01 	sts	0x015F, r16	; 0x80015f <__flp>
     f10:	10 93 60 01 	sts	0x0160, r17	; 0x800160 <__flp+0x1>
     f14:	22 c0       	rjmp	.+68     	; 0xf5a <malloc+0x98>
     f16:	21 15       	cp	r18, r1
     f18:	31 05       	cpc	r19, r1
     f1a:	19 f0       	breq	.+6      	; 0xf22 <malloc+0x60>
     f1c:	42 17       	cp	r20, r18
     f1e:	53 07       	cpc	r21, r19
     f20:	18 f4       	brcc	.+6      	; 0xf28 <malloc+0x66>
     f22:	9a 01       	movw	r18, r20
     f24:	bd 01       	movw	r22, r26
     f26:	ef 01       	movw	r28, r30
     f28:	df 01       	movw	r26, r30
     f2a:	f8 01       	movw	r30, r16
     f2c:	db cf       	rjmp	.-74     	; 0xee4 <malloc+0x22>
     f2e:	21 15       	cp	r18, r1
     f30:	31 05       	cpc	r19, r1
     f32:	f9 f0       	breq	.+62     	; 0xf72 <malloc+0xb0>
     f34:	28 1b       	sub	r18, r24
     f36:	39 0b       	sbc	r19, r25
     f38:	24 30       	cpi	r18, 0x04	; 4
     f3a:	31 05       	cpc	r19, r1
     f3c:	80 f4       	brcc	.+32     	; 0xf5e <malloc+0x9c>
     f3e:	8a 81       	ldd	r24, Y+2	; 0x02
     f40:	9b 81       	ldd	r25, Y+3	; 0x03
     f42:	61 15       	cp	r22, r1
     f44:	71 05       	cpc	r23, r1
     f46:	21 f0       	breq	.+8      	; 0xf50 <malloc+0x8e>
     f48:	fb 01       	movw	r30, r22
     f4a:	93 83       	std	Z+3, r25	; 0x03
     f4c:	82 83       	std	Z+2, r24	; 0x02
     f4e:	04 c0       	rjmp	.+8      	; 0xf58 <malloc+0x96>
     f50:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <__flp+0x1>
     f54:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <__flp>
     f58:	fe 01       	movw	r30, r28
     f5a:	32 96       	adiw	r30, 0x02	; 2
     f5c:	44 c0       	rjmp	.+136    	; 0xfe6 <malloc+0x124>
     f5e:	fe 01       	movw	r30, r28
     f60:	e2 0f       	add	r30, r18
     f62:	f3 1f       	adc	r31, r19
     f64:	81 93       	st	Z+, r24
     f66:	91 93       	st	Z+, r25
     f68:	22 50       	subi	r18, 0x02	; 2
     f6a:	31 09       	sbc	r19, r1
     f6c:	39 83       	std	Y+1, r19	; 0x01
     f6e:	28 83       	st	Y, r18
     f70:	3a c0       	rjmp	.+116    	; 0xfe6 <malloc+0x124>
     f72:	20 91 5d 01 	lds	r18, 0x015D	; 0x80015d <__brkval>
     f76:	30 91 5e 01 	lds	r19, 0x015E	; 0x80015e <__brkval+0x1>
     f7a:	23 2b       	or	r18, r19
     f7c:	41 f4       	brne	.+16     	; 0xf8e <malloc+0xcc>
     f7e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
     f82:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
     f86:	30 93 5e 01 	sts	0x015E, r19	; 0x80015e <__brkval+0x1>
     f8a:	20 93 5d 01 	sts	0x015D, r18	; 0x80015d <__brkval>
     f8e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     f92:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     f96:	21 15       	cp	r18, r1
     f98:	31 05       	cpc	r19, r1
     f9a:	41 f4       	brne	.+16     	; 0xfac <malloc+0xea>
     f9c:	2d b7       	in	r18, 0x3d	; 61
     f9e:	3e b7       	in	r19, 0x3e	; 62
     fa0:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
     fa4:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
     fa8:	24 1b       	sub	r18, r20
     faa:	35 0b       	sbc	r19, r21
     fac:	e0 91 5d 01 	lds	r30, 0x015D	; 0x80015d <__brkval>
     fb0:	f0 91 5e 01 	lds	r31, 0x015E	; 0x80015e <__brkval+0x1>
     fb4:	e2 17       	cp	r30, r18
     fb6:	f3 07       	cpc	r31, r19
     fb8:	a0 f4       	brcc	.+40     	; 0xfe2 <malloc+0x120>
     fba:	2e 1b       	sub	r18, r30
     fbc:	3f 0b       	sbc	r19, r31
     fbe:	28 17       	cp	r18, r24
     fc0:	39 07       	cpc	r19, r25
     fc2:	78 f0       	brcs	.+30     	; 0xfe2 <malloc+0x120>
     fc4:	ac 01       	movw	r20, r24
     fc6:	4e 5f       	subi	r20, 0xFE	; 254
     fc8:	5f 4f       	sbci	r21, 0xFF	; 255
     fca:	24 17       	cp	r18, r20
     fcc:	35 07       	cpc	r19, r21
     fce:	48 f0       	brcs	.+18     	; 0xfe2 <malloc+0x120>
     fd0:	4e 0f       	add	r20, r30
     fd2:	5f 1f       	adc	r21, r31
     fd4:	50 93 5e 01 	sts	0x015E, r21	; 0x80015e <__brkval+0x1>
     fd8:	40 93 5d 01 	sts	0x015D, r20	; 0x80015d <__brkval>
     fdc:	81 93       	st	Z+, r24
     fde:	91 93       	st	Z+, r25
     fe0:	02 c0       	rjmp	.+4      	; 0xfe6 <malloc+0x124>
     fe2:	e0 e0       	ldi	r30, 0x00	; 0
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	cf 01       	movw	r24, r30
     fe8:	df 91       	pop	r29
     fea:	cf 91       	pop	r28
     fec:	1f 91       	pop	r17
     fee:	0f 91       	pop	r16
     ff0:	08 95       	ret

00000ff2 <free>:
     ff2:	cf 93       	push	r28
     ff4:	df 93       	push	r29
     ff6:	00 97       	sbiw	r24, 0x00	; 0
     ff8:	09 f4       	brne	.+2      	; 0xffc <free+0xa>
     ffa:	81 c0       	rjmp	.+258    	; 0x10fe <free+0x10c>
     ffc:	fc 01       	movw	r30, r24
     ffe:	32 97       	sbiw	r30, 0x02	; 2
    1000:	13 82       	std	Z+3, r1	; 0x03
    1002:	12 82       	std	Z+2, r1	; 0x02
    1004:	a0 91 5f 01 	lds	r26, 0x015F	; 0x80015f <__flp>
    1008:	b0 91 60 01 	lds	r27, 0x0160	; 0x800160 <__flp+0x1>
    100c:	10 97       	sbiw	r26, 0x00	; 0
    100e:	81 f4       	brne	.+32     	; 0x1030 <free+0x3e>
    1010:	20 81       	ld	r18, Z
    1012:	31 81       	ldd	r19, Z+1	; 0x01
    1014:	82 0f       	add	r24, r18
    1016:	93 1f       	adc	r25, r19
    1018:	20 91 5d 01 	lds	r18, 0x015D	; 0x80015d <__brkval>
    101c:	30 91 5e 01 	lds	r19, 0x015E	; 0x80015e <__brkval+0x1>
    1020:	28 17       	cp	r18, r24
    1022:	39 07       	cpc	r19, r25
    1024:	51 f5       	brne	.+84     	; 0x107a <free+0x88>
    1026:	f0 93 5e 01 	sts	0x015E, r31	; 0x80015e <__brkval+0x1>
    102a:	e0 93 5d 01 	sts	0x015D, r30	; 0x80015d <__brkval>
    102e:	67 c0       	rjmp	.+206    	; 0x10fe <free+0x10c>
    1030:	ed 01       	movw	r28, r26
    1032:	20 e0       	ldi	r18, 0x00	; 0
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	ce 17       	cp	r28, r30
    1038:	df 07       	cpc	r29, r31
    103a:	40 f4       	brcc	.+16     	; 0x104c <free+0x5a>
    103c:	4a 81       	ldd	r20, Y+2	; 0x02
    103e:	5b 81       	ldd	r21, Y+3	; 0x03
    1040:	9e 01       	movw	r18, r28
    1042:	41 15       	cp	r20, r1
    1044:	51 05       	cpc	r21, r1
    1046:	f1 f0       	breq	.+60     	; 0x1084 <free+0x92>
    1048:	ea 01       	movw	r28, r20
    104a:	f5 cf       	rjmp	.-22     	; 0x1036 <free+0x44>
    104c:	d3 83       	std	Z+3, r29	; 0x03
    104e:	c2 83       	std	Z+2, r28	; 0x02
    1050:	40 81       	ld	r20, Z
    1052:	51 81       	ldd	r21, Z+1	; 0x01
    1054:	84 0f       	add	r24, r20
    1056:	95 1f       	adc	r25, r21
    1058:	c8 17       	cp	r28, r24
    105a:	d9 07       	cpc	r29, r25
    105c:	59 f4       	brne	.+22     	; 0x1074 <free+0x82>
    105e:	88 81       	ld	r24, Y
    1060:	99 81       	ldd	r25, Y+1	; 0x01
    1062:	84 0f       	add	r24, r20
    1064:	95 1f       	adc	r25, r21
    1066:	02 96       	adiw	r24, 0x02	; 2
    1068:	91 83       	std	Z+1, r25	; 0x01
    106a:	80 83       	st	Z, r24
    106c:	8a 81       	ldd	r24, Y+2	; 0x02
    106e:	9b 81       	ldd	r25, Y+3	; 0x03
    1070:	93 83       	std	Z+3, r25	; 0x03
    1072:	82 83       	std	Z+2, r24	; 0x02
    1074:	21 15       	cp	r18, r1
    1076:	31 05       	cpc	r19, r1
    1078:	29 f4       	brne	.+10     	; 0x1084 <free+0x92>
    107a:	f0 93 60 01 	sts	0x0160, r31	; 0x800160 <__flp+0x1>
    107e:	e0 93 5f 01 	sts	0x015F, r30	; 0x80015f <__flp>
    1082:	3d c0       	rjmp	.+122    	; 0x10fe <free+0x10c>
    1084:	e9 01       	movw	r28, r18
    1086:	fb 83       	std	Y+3, r31	; 0x03
    1088:	ea 83       	std	Y+2, r30	; 0x02
    108a:	49 91       	ld	r20, Y+
    108c:	59 91       	ld	r21, Y+
    108e:	c4 0f       	add	r28, r20
    1090:	d5 1f       	adc	r29, r21
    1092:	ec 17       	cp	r30, r28
    1094:	fd 07       	cpc	r31, r29
    1096:	61 f4       	brne	.+24     	; 0x10b0 <free+0xbe>
    1098:	80 81       	ld	r24, Z
    109a:	91 81       	ldd	r25, Z+1	; 0x01
    109c:	84 0f       	add	r24, r20
    109e:	95 1f       	adc	r25, r21
    10a0:	02 96       	adiw	r24, 0x02	; 2
    10a2:	e9 01       	movw	r28, r18
    10a4:	99 83       	std	Y+1, r25	; 0x01
    10a6:	88 83       	st	Y, r24
    10a8:	82 81       	ldd	r24, Z+2	; 0x02
    10aa:	93 81       	ldd	r25, Z+3	; 0x03
    10ac:	9b 83       	std	Y+3, r25	; 0x03
    10ae:	8a 83       	std	Y+2, r24	; 0x02
    10b0:	e0 e0       	ldi	r30, 0x00	; 0
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	12 96       	adiw	r26, 0x02	; 2
    10b6:	8d 91       	ld	r24, X+
    10b8:	9c 91       	ld	r25, X
    10ba:	13 97       	sbiw	r26, 0x03	; 3
    10bc:	00 97       	sbiw	r24, 0x00	; 0
    10be:	19 f0       	breq	.+6      	; 0x10c6 <free+0xd4>
    10c0:	fd 01       	movw	r30, r26
    10c2:	dc 01       	movw	r26, r24
    10c4:	f7 cf       	rjmp	.-18     	; 0x10b4 <free+0xc2>
    10c6:	8d 91       	ld	r24, X+
    10c8:	9c 91       	ld	r25, X
    10ca:	11 97       	sbiw	r26, 0x01	; 1
    10cc:	9d 01       	movw	r18, r26
    10ce:	2e 5f       	subi	r18, 0xFE	; 254
    10d0:	3f 4f       	sbci	r19, 0xFF	; 255
    10d2:	82 0f       	add	r24, r18
    10d4:	93 1f       	adc	r25, r19
    10d6:	20 91 5d 01 	lds	r18, 0x015D	; 0x80015d <__brkval>
    10da:	30 91 5e 01 	lds	r19, 0x015E	; 0x80015e <__brkval+0x1>
    10de:	28 17       	cp	r18, r24
    10e0:	39 07       	cpc	r19, r25
    10e2:	69 f4       	brne	.+26     	; 0x10fe <free+0x10c>
    10e4:	30 97       	sbiw	r30, 0x00	; 0
    10e6:	29 f4       	brne	.+10     	; 0x10f2 <free+0x100>
    10e8:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <__flp+0x1>
    10ec:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <__flp>
    10f0:	02 c0       	rjmp	.+4      	; 0x10f6 <free+0x104>
    10f2:	13 82       	std	Z+3, r1	; 0x03
    10f4:	12 82       	std	Z+2, r1	; 0x02
    10f6:	b0 93 5e 01 	sts	0x015E, r27	; 0x80015e <__brkval+0x1>
    10fa:	a0 93 5d 01 	sts	0x015D, r26	; 0x80015d <__brkval>
    10fe:	df 91       	pop	r29
    1100:	cf 91       	pop	r28
    1102:	08 95       	ret

00001104 <memcmp>:
    1104:	fb 01       	movw	r30, r22
    1106:	dc 01       	movw	r26, r24
    1108:	04 c0       	rjmp	.+8      	; 0x1112 <memcmp+0xe>
    110a:	8d 91       	ld	r24, X+
    110c:	01 90       	ld	r0, Z+
    110e:	80 19       	sub	r24, r0
    1110:	21 f4       	brne	.+8      	; 0x111a <memcmp+0x16>
    1112:	41 50       	subi	r20, 0x01	; 1
    1114:	50 40       	sbci	r21, 0x00	; 0
    1116:	c8 f7       	brcc	.-14     	; 0x110a <memcmp+0x6>
    1118:	88 1b       	sub	r24, r24
    111a:	99 0b       	sbc	r25, r25
    111c:	08 95       	ret

0000111e <memcpy>:
    111e:	fb 01       	movw	r30, r22
    1120:	dc 01       	movw	r26, r24
    1122:	02 c0       	rjmp	.+4      	; 0x1128 <memcpy+0xa>
    1124:	01 90       	ld	r0, Z+
    1126:	0d 92       	st	X+, r0
    1128:	41 50       	subi	r20, 0x01	; 1
    112a:	50 40       	sbci	r21, 0x00	; 0
    112c:	d8 f7       	brcc	.-10     	; 0x1124 <memcpy+0x6>
    112e:	08 95       	ret

00001130 <_exit>:
    1130:	f8 94       	cli

00001132 <__stop_program>:
    1132:	ff cf       	rjmp	.-2      	; 0x1132 <__stop_program>
