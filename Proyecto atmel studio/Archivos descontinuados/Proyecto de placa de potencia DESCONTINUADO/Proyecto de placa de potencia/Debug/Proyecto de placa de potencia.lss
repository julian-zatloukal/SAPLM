
Proyecto de placa de potencia.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000090  00800100  00001e90  00001f24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e90  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800190  00800190  00001fb4  2**0
                  ALLOC
  3 .stab         00001cb0  00000000  00000000  00001fb4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000a15  00000000  00000000  00003c64  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001f8  00000000  00000000  00004679  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000055d  00000000  00000000  00004871  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000014a8  00000000  00000000  00004dce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000006dd  00000000  00000000  00006276  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001b81  00000000  00000000  00006953  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000350  00000000  00000000  000084d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000786  00000000  00000000  00008824  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000491  00000000  00000000  00008faa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000124  00000000  00000000  0000943b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000001c0  00000000  00000000  0000955f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
       2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
       4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
       6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
       8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
       a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
       c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
       e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
      10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
      12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
      14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
      16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
      18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
      1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
      1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
      1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
      20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
      22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
      24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
      26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
      28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
      2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
      2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
      2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
      30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
      32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
      34:	11 24       	eor	r1, r1
      36:	1f be       	out	0x3f, r1	; 63
      38:	cf ef       	ldi	r28, 0xFF	; 255
      3a:	d4 e0       	ldi	r29, 0x04	; 4
      3c:	de bf       	out	0x3e, r29	; 62
      3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
      40:	11 e0       	ldi	r17, 0x01	; 1
      42:	a0 e0       	ldi	r26, 0x00	; 0
      44:	b1 e0       	ldi	r27, 0x01	; 1
      46:	e0 e9       	ldi	r30, 0x90	; 144
      48:	fe e1       	ldi	r31, 0x1E	; 30
      4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
      4c:	05 90       	lpm	r0, Z+
      4e:	0d 92       	st	X+, r0
      50:	a0 39       	cpi	r26, 0x90	; 144
      52:	b1 07       	cpc	r27, r17
      54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
      56:	11 e0       	ldi	r17, 0x01	; 1
      58:	a0 e9       	ldi	r26, 0x90	; 144
      5a:	b1 e0       	ldi	r27, 0x01	; 1
      5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
      5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
      60:	af 39       	cpi	r26, 0x9F	; 159
      62:	b1 07       	cpc	r27, r17
      64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
      66:	cb d5       	rcall	.+2966   	; 0xbfe <main>
      68:	11 cf       	rjmp	.-478    	; 0xfffffe8c <__eeprom_end+0xff7efe8c>

0000006a <__bad_interrupt>:
      6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <initliazeMemory>:
	{ .commandBase = "TURN_EVERYTHING_ON", .nParameters = 0, .handlerFunction = &TURN_EVERYTHING_ON_HANDLER},
	{ .commandBase = "TURN_EVERYTHING_OFF", .nParameters = 0, .handlerFunction = &TURN_EVERYTHING_OFF_HANDLER},
	{ .commandBase = "CALL_NURSE", .nParameters = 0, .handlerFunction = &CALL_NURSE_HANDLE}
};

bool initliazeMemory(){
      6c:	df 93       	push	r29
      6e:	cf 93       	push	r28
      70:	cd b7       	in	r28, 0x3d	; 61
      72:	de b7       	in	r29, 0x3e	; 62
	if(memoryInitialized) return false;
      74:	80 91 98 01 	lds	r24, 0x0198
      78:	88 23       	and	r24, r24
      7a:	11 f0       	breq	.+4      	; 0x80 <initliazeMemory+0x14>
      7c:	80 e0       	ldi	r24, 0x00	; 0
      7e:	42 c0       	rjmp	.+132    	; 0x104 <initliazeMemory+0x98>
	parameter[0] = (void*)calloc(28,1);
      80:	8c e1       	ldi	r24, 0x1C	; 28
      82:	90 e0       	ldi	r25, 0x00	; 0
      84:	61 e0       	ldi	r22, 0x01	; 1
      86:	70 e0       	ldi	r23, 0x00	; 0
      88:	21 dd       	rcall	.-1470   	; 0xfffffacc <__eeprom_end+0xff7efacc>
      8a:	90 93 91 01 	sts	0x0191, r25
      8e:	80 93 90 01 	sts	0x0190, r24
	parameter[1] = (void*)calloc(28,1);
      92:	8c e1       	ldi	r24, 0x1C	; 28
      94:	90 e0       	ldi	r25, 0x00	; 0
      96:	61 e0       	ldi	r22, 0x01	; 1
      98:	70 e0       	ldi	r23, 0x00	; 0
      9a:	18 dd       	rcall	.-1488   	; 0xfffffacc <__eeprom_end+0xff7efacc>
      9c:	90 93 93 01 	sts	0x0193, r25
      a0:	80 93 92 01 	sts	0x0192, r24
	parameter[2] = (void*)calloc(28,1);
      a4:	8c e1       	ldi	r24, 0x1C	; 28
      a6:	90 e0       	ldi	r25, 0x00	; 0
      a8:	61 e0       	ldi	r22, 0x01	; 1
      aa:	70 e0       	ldi	r23, 0x00	; 0
      ac:	0f dd       	rcall	.-1506   	; 0xfffffacc <__eeprom_end+0xff7efacc>
      ae:	90 93 95 01 	sts	0x0195, r25
      b2:	80 93 94 01 	sts	0x0194, r24
	command_buffer = (uint8_t*)calloc(32,1);
      b6:	80 e2       	ldi	r24, 0x20	; 32
      b8:	90 e0       	ldi	r25, 0x00	; 0
      ba:	61 e0       	ldi	r22, 0x01	; 1
      bc:	70 e0       	ldi	r23, 0x00	; 0
      be:	06 dd       	rcall	.-1524   	; 0xfffffacc <__eeprom_end+0xff7efacc>
      c0:	90 93 97 01 	sts	0x0197, r25
      c4:	80 93 96 01 	sts	0x0196, r24
	if(parameter[0]==nullptr||parameter[1]==nullptr||parameter[2]==nullptr||command_buffer==nullptr) return false;
      c8:	80 91 90 01 	lds	r24, 0x0190
      cc:	90 91 91 01 	lds	r25, 0x0191
      d0:	00 97       	sbiw	r24, 0x00	; 0
      d2:	91 f0       	breq	.+36     	; 0xf8 <initliazeMemory+0x8c>
      d4:	80 91 92 01 	lds	r24, 0x0192
      d8:	90 91 93 01 	lds	r25, 0x0193
      dc:	00 97       	sbiw	r24, 0x00	; 0
      de:	61 f0       	breq	.+24     	; 0xf8 <initliazeMemory+0x8c>
      e0:	80 91 94 01 	lds	r24, 0x0194
      e4:	90 91 95 01 	lds	r25, 0x0195
      e8:	00 97       	sbiw	r24, 0x00	; 0
      ea:	31 f0       	breq	.+12     	; 0xf8 <initliazeMemory+0x8c>
      ec:	80 91 96 01 	lds	r24, 0x0196
      f0:	90 91 97 01 	lds	r25, 0x0197
      f4:	00 97       	sbiw	r24, 0x00	; 0
      f6:	11 f4       	brne	.+4      	; 0xfc <initliazeMemory+0x90>
      f8:	80 e0       	ldi	r24, 0x00	; 0
      fa:	04 c0       	rjmp	.+8      	; 0x104 <initliazeMemory+0x98>
	memoryInitialized = true;
      fc:	81 e0       	ldi	r24, 0x01	; 1
      fe:	80 93 98 01 	sts	0x0198, r24
	return true;
     102:	81 e0       	ldi	r24, 0x01	; 1
}
     104:	cf 91       	pop	r28
     106:	df 91       	pop	r29
     108:	08 95       	ret

0000010a <decomposeCommand>:
		}
	}
	*startParamPTR='\0';
}

bool decomposeCommand(void* input_buffer, commandType* commandT, void** outputParameter){
     10a:	0f 93       	push	r16
     10c:	1f 93       	push	r17
     10e:	df 93       	push	r29
     110:	cf 93       	push	r28
     112:	cd b7       	in	r28, 0x3d	; 61
     114:	de b7       	in	r29, 0x3e	; 62
     116:	60 97       	sbiw	r28, 0x10	; 16
     118:	0f b6       	in	r0, 0x3f	; 63
     11a:	f8 94       	cli
     11c:	de bf       	out	0x3e, r29	; 62
     11e:	0f be       	out	0x3f, r0	; 63
     120:	cd bf       	out	0x3d, r28	; 61
     122:	9c 87       	std	Y+12, r25	; 0x0c
     124:	8b 87       	std	Y+11, r24	; 0x0b
     126:	7e 87       	std	Y+14, r23	; 0x0e
     128:	6d 87       	std	Y+13, r22	; 0x0d
     12a:	58 8b       	std	Y+16, r21	; 0x10
     12c:	4f 87       	std	Y+15, r20	; 0x0f
	
	for (uint8_t index = 0; index < AVAILABLE_COMMANDS; index++){
     12e:	19 82       	std	Y+1, r1	; 0x01
     130:	4c c0       	rjmp	.+152    	; 0x1ca <decomposeCommand+0xc0>
		if (memmem(input_buffer, COMMAND_BUFFER_SIZE, availableCommand[index].commandBase, strlen(availableCommand[index].commandBase))!=nullptr) 
     132:	89 81       	ldd	r24, Y+1	; 0x01
     134:	28 2f       	mov	r18, r24
     136:	30 e0       	ldi	r19, 0x00	; 0
     138:	c9 01       	movw	r24, r18
     13a:	88 0f       	add	r24, r24
     13c:	99 1f       	adc	r25, r25
     13e:	88 0f       	add	r24, r24
     140:	99 1f       	adc	r25, r25
     142:	82 0f       	add	r24, r18
     144:	93 1f       	adc	r25, r19
     146:	89 59       	subi	r24, 0x99	; 153
     148:	9e 4f       	sbci	r25, 0xFE	; 254
     14a:	fc 01       	movw	r30, r24
     14c:	00 81       	ld	r16, Z
     14e:	11 81       	ldd	r17, Z+1	; 0x01
     150:	89 81       	ldd	r24, Y+1	; 0x01
     152:	28 2f       	mov	r18, r24
     154:	30 e0       	ldi	r19, 0x00	; 0
     156:	c9 01       	movw	r24, r18
     158:	88 0f       	add	r24, r24
     15a:	99 1f       	adc	r25, r25
     15c:	88 0f       	add	r24, r24
     15e:	99 1f       	adc	r25, r25
     160:	82 0f       	add	r24, r18
     162:	93 1f       	adc	r25, r19
     164:	89 59       	subi	r24, 0x99	; 153
     166:	9e 4f       	sbci	r25, 0xFE	; 254
     168:	fc 01       	movw	r30, r24
     16a:	80 81       	ld	r24, Z
     16c:	91 81       	ldd	r25, Z+1	; 0x01
     16e:	62 de       	rcall	.-828    	; 0xfffffe34 <__eeprom_end+0xff7efe34>
     170:	9c 01       	movw	r18, r24
     172:	8b 85       	ldd	r24, Y+11	; 0x0b
     174:	9c 85       	ldd	r25, Y+12	; 0x0c
     176:	60 e2       	ldi	r22, 0x20	; 32
     178:	70 e0       	ldi	r23, 0x00	; 0
     17a:	a8 01       	movw	r20, r16
     17c:	2e de       	rcall	.-932    	; 0xfffffdda <__eeprom_end+0xff7efdda>
     17e:	00 97       	sbiw	r24, 0x00	; 0
     180:	e1 f0       	breq	.+56     	; 0x1ba <decomposeCommand+0xb0>
		{ 
			*commandT = availableCommand[index]; break; 
     182:	89 81       	ldd	r24, Y+1	; 0x01
     184:	28 2f       	mov	r18, r24
     186:	30 e0       	ldi	r19, 0x00	; 0
     188:	4d 85       	ldd	r20, Y+13	; 0x0d
     18a:	5e 85       	ldd	r21, Y+14	; 0x0e
     18c:	c9 01       	movw	r24, r18
     18e:	88 0f       	add	r24, r24
     190:	99 1f       	adc	r25, r25
     192:	88 0f       	add	r24, r24
     194:	99 1f       	adc	r25, r25
     196:	82 0f       	add	r24, r18
     198:	93 1f       	adc	r25, r19
     19a:	9c 01       	movw	r18, r24
     19c:	29 59       	subi	r18, 0x99	; 153
     19e:	3e 4f       	sbci	r19, 0xFE	; 254
     1a0:	ca 01       	movw	r24, r20
     1a2:	45 e0       	ldi	r20, 0x05	; 5
     1a4:	f9 01       	movw	r30, r18
     1a6:	00 80       	ld	r0, Z
     1a8:	2f 5f       	subi	r18, 0xFF	; 255
     1aa:	3f 4f       	sbci	r19, 0xFF	; 255
     1ac:	fc 01       	movw	r30, r24
     1ae:	00 82       	st	Z, r0
     1b0:	01 96       	adiw	r24, 0x01	; 1
     1b2:	41 50       	subi	r20, 0x01	; 1
     1b4:	44 23       	and	r20, r20
     1b6:	b1 f7       	brne	.-20     	; 0x1a4 <decomposeCommand+0x9a>
     1b8:	0c c0       	rjmp	.+24     	; 0x1d2 <decomposeCommand+0xc8>
		}
		else if (index==(AVAILABLE_COMMANDS-1)) { return false;}
     1ba:	89 81       	ldd	r24, Y+1	; 0x01
     1bc:	85 30       	cpi	r24, 0x05	; 5
     1be:	11 f4       	brne	.+4      	; 0x1c4 <decomposeCommand+0xba>
     1c0:	80 e0       	ldi	r24, 0x00	; 0
     1c2:	74 c0       	rjmp	.+232    	; 0x2ac <decomposeCommand+0x1a2>
	*startParamPTR='\0';
}

bool decomposeCommand(void* input_buffer, commandType* commandT, void** outputParameter){
	
	for (uint8_t index = 0; index < AVAILABLE_COMMANDS; index++){
     1c4:	89 81       	ldd	r24, Y+1	; 0x01
     1c6:	8f 5f       	subi	r24, 0xFF	; 255
     1c8:	89 83       	std	Y+1, r24	; 0x01
     1ca:	89 81       	ldd	r24, Y+1	; 0x01
     1cc:	86 30       	cpi	r24, 0x06	; 6
     1ce:	08 f4       	brcc	.+2      	; 0x1d2 <decomposeCommand+0xc8>
     1d0:	b0 cf       	rjmp	.-160    	; 0x132 <decomposeCommand+0x28>
			*commandT = availableCommand[index]; break; 
		}
		else if (index==(AVAILABLE_COMMANDS-1)) { return false;}
	}
	
	for (uint8_t x = 0; x < commandT->nParameters; x++){
     1d2:	1a 82       	std	Y+2, r1	; 0x02
     1d4:	60 c0       	rjmp	.+192    	; 0x296 <decomposeCommand+0x18c>
		uint8_t* startNumPTR = memchr(input_buffer, '[', COMMAND_BUFFER_SIZE);
     1d6:	8b 85       	ldd	r24, Y+11	; 0x0b
     1d8:	9c 85       	ldd	r25, Y+12	; 0x0c
     1da:	6b e5       	ldi	r22, 0x5B	; 91
     1dc:	70 e0       	ldi	r23, 0x00	; 0
     1de:	40 e2       	ldi	r20, 0x20	; 32
     1e0:	50 e0       	ldi	r21, 0x00	; 0
     1e2:	e5 dd       	rcall	.-1078   	; 0xfffffdae <__eeprom_end+0xff7efdae>
     1e4:	9c 83       	std	Y+4, r25	; 0x04
     1e6:	8b 83       	std	Y+3, r24	; 0x03
		uint8_t* endNumPTR = memchr(input_buffer, ']', COMMAND_BUFFER_SIZE);
     1e8:	8b 85       	ldd	r24, Y+11	; 0x0b
     1ea:	9c 85       	ldd	r25, Y+12	; 0x0c
     1ec:	6d e5       	ldi	r22, 0x5D	; 93
     1ee:	70 e0       	ldi	r23, 0x00	; 0
     1f0:	40 e2       	ldi	r20, 0x20	; 32
     1f2:	50 e0       	ldi	r21, 0x00	; 0
     1f4:	dc dd       	rcall	.-1096   	; 0xfffffdae <__eeprom_end+0xff7efdae>
     1f6:	9e 83       	std	Y+6, r25	; 0x06
     1f8:	8d 83       	std	Y+5, r24	; 0x05
		if (startNumPTR==nullptr||endNumPTR==nullptr) { if(x==0) return false; break; }
     1fa:	8b 81       	ldd	r24, Y+3	; 0x03
     1fc:	9c 81       	ldd	r25, Y+4	; 0x04
     1fe:	00 97       	sbiw	r24, 0x00	; 0
     200:	21 f0       	breq	.+8      	; 0x20a <decomposeCommand+0x100>
     202:	8d 81       	ldd	r24, Y+5	; 0x05
     204:	9e 81       	ldd	r25, Y+6	; 0x06
     206:	00 97       	sbiw	r24, 0x00	; 0
     208:	31 f4       	brne	.+12     	; 0x216 <decomposeCommand+0x10c>
     20a:	8a 81       	ldd	r24, Y+2	; 0x02
     20c:	88 23       	and	r24, r24
     20e:	09 f0       	breq	.+2      	; 0x212 <decomposeCommand+0x108>
     210:	4b c0       	rjmp	.+150    	; 0x2a8 <decomposeCommand+0x19e>
     212:	80 e0       	ldi	r24, 0x00	; 0
     214:	4b c0       	rjmp	.+150    	; 0x2ac <decomposeCommand+0x1a2>
		(*startNumPTR) = 0x20;
     216:	8b 81       	ldd	r24, Y+3	; 0x03
     218:	9c 81       	ldd	r25, Y+4	; 0x04
     21a:	20 e2       	ldi	r18, 0x20	; 32
     21c:	fc 01       	movw	r30, r24
     21e:	20 83       	st	Z, r18
		(*endNumPTR) = 0x20;
     220:	8d 81       	ldd	r24, Y+5	; 0x05
     222:	9e 81       	ldd	r25, Y+6	; 0x06
     224:	20 e2       	ldi	r18, 0x20	; 32
     226:	fc 01       	movw	r30, r24
     228:	20 83       	st	Z, r18
		startNumPTR++;
     22a:	8b 81       	ldd	r24, Y+3	; 0x03
     22c:	9c 81       	ldd	r25, Y+4	; 0x04
     22e:	01 96       	adiw	r24, 0x01	; 1
     230:	9c 83       	std	Y+4, r25	; 0x04
     232:	8b 83       	std	Y+3, r24	; 0x03
		uint32_t bytes = ((endNumPTR)) - ((startNumPTR));
     234:	2d 81       	ldd	r18, Y+5	; 0x05
     236:	3e 81       	ldd	r19, Y+6	; 0x06
     238:	8b 81       	ldd	r24, Y+3	; 0x03
     23a:	9c 81       	ldd	r25, Y+4	; 0x04
     23c:	a9 01       	movw	r20, r18
     23e:	48 1b       	sub	r20, r24
     240:	59 0b       	sbc	r21, r25
     242:	ca 01       	movw	r24, r20
     244:	aa 27       	eor	r26, r26
     246:	97 fd       	sbrc	r25, 7
     248:	a0 95       	com	r26
     24a:	ba 2f       	mov	r27, r26
     24c:	8f 83       	std	Y+7, r24	; 0x07
     24e:	98 87       	std	Y+8, r25	; 0x08
     250:	a9 87       	std	Y+9, r26	; 0x09
     252:	ba 87       	std	Y+10, r27	; 0x0a
		if (bytes>PARAMETER_BUFFER_SIZE) return false;
     254:	8f 81       	ldd	r24, Y+7	; 0x07
     256:	98 85       	ldd	r25, Y+8	; 0x08
     258:	a9 85       	ldd	r26, Y+9	; 0x09
     25a:	ba 85       	ldd	r27, Y+10	; 0x0a
     25c:	8d 31       	cpi	r24, 0x1D	; 29
     25e:	91 05       	cpc	r25, r1
     260:	a1 05       	cpc	r26, r1
     262:	b1 05       	cpc	r27, r1
     264:	10 f0       	brcs	.+4      	; 0x26a <decomposeCommand+0x160>
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	21 c0       	rjmp	.+66     	; 0x2ac <decomposeCommand+0x1a2>
		memcpy(outputParameter[x], startNumPTR, bytes);
     26a:	8a 81       	ldd	r24, Y+2	; 0x02
     26c:	88 2f       	mov	r24, r24
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	88 0f       	add	r24, r24
     272:	99 1f       	adc	r25, r25
     274:	2f 85       	ldd	r18, Y+15	; 0x0f
     276:	38 89       	ldd	r19, Y+16	; 0x10
     278:	82 0f       	add	r24, r18
     27a:	93 1f       	adc	r25, r19
     27c:	fc 01       	movw	r30, r24
     27e:	80 81       	ld	r24, Z
     280:	91 81       	ldd	r25, Z+1	; 0x01
     282:	2f 81       	ldd	r18, Y+7	; 0x07
     284:	38 85       	ldd	r19, Y+8	; 0x08
     286:	4b 81       	ldd	r20, Y+3	; 0x03
     288:	5c 81       	ldd	r21, Y+4	; 0x04
     28a:	ba 01       	movw	r22, r20
     28c:	a9 01       	movw	r20, r18
     28e:	9c dd       	rcall	.-1224   	; 0xfffffdc8 <__eeprom_end+0xff7efdc8>
			*commandT = availableCommand[index]; break; 
		}
		else if (index==(AVAILABLE_COMMANDS-1)) { return false;}
	}
	
	for (uint8_t x = 0; x < commandT->nParameters; x++){
     290:	8a 81       	ldd	r24, Y+2	; 0x02
     292:	8f 5f       	subi	r24, 0xFF	; 255
     294:	8a 83       	std	Y+2, r24	; 0x02
     296:	8d 85       	ldd	r24, Y+13	; 0x0d
     298:	9e 85       	ldd	r25, Y+14	; 0x0e
     29a:	fc 01       	movw	r30, r24
     29c:	92 81       	ldd	r25, Z+2	; 0x02
     29e:	8a 81       	ldd	r24, Y+2	; 0x02
     2a0:	89 17       	cp	r24, r25
     2a2:	08 f4       	brcc	.+2      	; 0x2a6 <decomposeCommand+0x19c>
     2a4:	98 cf       	rjmp	.-208    	; 0x1d6 <decomposeCommand+0xcc>
     2a6:	01 c0       	rjmp	.+2      	; 0x2aa <decomposeCommand+0x1a0>
		uint8_t* startNumPTR = memchr(input_buffer, '[', COMMAND_BUFFER_SIZE);
		uint8_t* endNumPTR = memchr(input_buffer, ']', COMMAND_BUFFER_SIZE);
		if (startNumPTR==nullptr||endNumPTR==nullptr) { if(x==0) return false; break; }
     2a8:	00 00       	nop
		uint32_t bytes = ((endNumPTR)) - ((startNumPTR));
		if (bytes>PARAMETER_BUFFER_SIZE) return false;
		memcpy(outputParameter[x], startNumPTR, bytes);
	}

	return true;
     2aa:	81 e0       	ldi	r24, 0x01	; 1
}
     2ac:	60 96       	adiw	r28, 0x10	; 16
     2ae:	0f b6       	in	r0, 0x3f	; 63
     2b0:	f8 94       	cli
     2b2:	de bf       	out	0x3e, r29	; 62
     2b4:	0f be       	out	0x3f, r0	; 63
     2b6:	cd bf       	out	0x3d, r28	; 61
     2b8:	cf 91       	pop	r28
     2ba:	df 91       	pop	r29
     2bc:	1f 91       	pop	r17
     2be:	0f 91       	pop	r16
     2c0:	08 95       	ret

000002c2 <TURN_RELAY_ON_HANDLE>:

void TURN_RELAY_ON_HANDLE() {
     2c2:	df 93       	push	r29
     2c4:	cf 93       	push	r28
     2c6:	0f 92       	push	r0
     2c8:	cd b7       	in	r28, 0x3d	; 61
     2ca:	de b7       	in	r29, 0x3e	; 62
	uint8_t relayIndex =  atoi(parameter[0]);
     2cc:	80 91 90 01 	lds	r24, 0x0190
     2d0:	90 91 91 01 	lds	r25, 0x0191
     2d4:	4f dd       	rcall	.-1378   	; 0xfffffd74 <__eeprom_end+0xff7efd74>
     2d6:	89 83       	std	Y+1, r24	; 0x01
	switch (relayIndex) {
     2d8:	89 81       	ldd	r24, Y+1	; 0x01
     2da:	88 2f       	mov	r24, r24
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	81 30       	cpi	r24, 0x01	; 1
     2e0:	91 05       	cpc	r25, r1
     2e2:	b9 f0       	breq	.+46     	; 0x312 <TURN_RELAY_ON_HANDLE+0x50>
     2e4:	82 30       	cpi	r24, 0x02	; 2
     2e6:	91 05       	cpc	r25, r1
     2e8:	1c f4       	brge	.+6      	; 0x2f0 <TURN_RELAY_ON_HANDLE+0x2e>
     2ea:	00 97       	sbiw	r24, 0x00	; 0
     2ec:	41 f0       	breq	.+16     	; 0x2fe <TURN_RELAY_ON_HANDLE+0x3c>
     2ee:	2f c0       	rjmp	.+94     	; 0x34e <TURN_RELAY_ON_HANDLE+0x8c>
     2f0:	82 30       	cpi	r24, 0x02	; 2
     2f2:	91 05       	cpc	r25, r1
     2f4:	c1 f0       	breq	.+48     	; 0x326 <TURN_RELAY_ON_HANDLE+0x64>
     2f6:	83 30       	cpi	r24, 0x03	; 3
     2f8:	91 05       	cpc	r25, r1
     2fa:	f9 f0       	breq	.+62     	; 0x33a <TURN_RELAY_ON_HANDLE+0x78>
     2fc:	28 c0       	rjmp	.+80     	; 0x34e <TURN_RELAY_ON_HANDLE+0x8c>
		case 0:
		bit_set(PORTD, BIT(3));
     2fe:	8b e2       	ldi	r24, 0x2B	; 43
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	2b e2       	ldi	r18, 0x2B	; 43
     304:	30 e0       	ldi	r19, 0x00	; 0
     306:	f9 01       	movw	r30, r18
     308:	20 81       	ld	r18, Z
     30a:	28 60       	ori	r18, 0x08	; 8
     30c:	fc 01       	movw	r30, r24
     30e:	20 83       	st	Z, r18
		break;
     310:	1e c0       	rjmp	.+60     	; 0x34e <TURN_RELAY_ON_HANDLE+0x8c>
		case 1:
		bit_set(PORTD, BIT(2));
     312:	8b e2       	ldi	r24, 0x2B	; 43
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	2b e2       	ldi	r18, 0x2B	; 43
     318:	30 e0       	ldi	r19, 0x00	; 0
     31a:	f9 01       	movw	r30, r18
     31c:	20 81       	ld	r18, Z
     31e:	24 60       	ori	r18, 0x04	; 4
     320:	fc 01       	movw	r30, r24
     322:	20 83       	st	Z, r18
		break;
     324:	14 c0       	rjmp	.+40     	; 0x34e <TURN_RELAY_ON_HANDLE+0x8c>
		case 2:
		bit_set(PORTD, BIT(6));
     326:	8b e2       	ldi	r24, 0x2B	; 43
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	2b e2       	ldi	r18, 0x2B	; 43
     32c:	30 e0       	ldi	r19, 0x00	; 0
     32e:	f9 01       	movw	r30, r18
     330:	20 81       	ld	r18, Z
     332:	20 64       	ori	r18, 0x40	; 64
     334:	fc 01       	movw	r30, r24
     336:	20 83       	st	Z, r18
		break;
     338:	0a c0       	rjmp	.+20     	; 0x34e <TURN_RELAY_ON_HANDLE+0x8c>
		case 3:
		bit_set(PORTD, BIT(5));
     33a:	8b e2       	ldi	r24, 0x2B	; 43
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	2b e2       	ldi	r18, 0x2B	; 43
     340:	30 e0       	ldi	r19, 0x00	; 0
     342:	f9 01       	movw	r30, r18
     344:	20 81       	ld	r18, Z
     346:	20 62       	ori	r18, 0x20	; 32
     348:	fc 01       	movw	r30, r24
     34a:	20 83       	st	Z, r18
		break;
     34c:	00 00       	nop
	}
}
     34e:	0f 90       	pop	r0
     350:	cf 91       	pop	r28
     352:	df 91       	pop	r29
     354:	08 95       	ret

00000356 <TURN_RELAY_OFF_HANDLE>:

void TURN_RELAY_OFF_HANDLE() {
     356:	df 93       	push	r29
     358:	cf 93       	push	r28
     35a:	0f 92       	push	r0
     35c:	cd b7       	in	r28, 0x3d	; 61
     35e:	de b7       	in	r29, 0x3e	; 62
	uint8_t relayIndex =  atoi(parameter[0]);
     360:	80 91 90 01 	lds	r24, 0x0190
     364:	90 91 91 01 	lds	r25, 0x0191
     368:	05 dd       	rcall	.-1526   	; 0xfffffd74 <__eeprom_end+0xff7efd74>
     36a:	89 83       	std	Y+1, r24	; 0x01
	switch (relayIndex) {
     36c:	89 81       	ldd	r24, Y+1	; 0x01
     36e:	88 2f       	mov	r24, r24
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	81 30       	cpi	r24, 0x01	; 1
     374:	91 05       	cpc	r25, r1
     376:	b9 f0       	breq	.+46     	; 0x3a6 <TURN_RELAY_OFF_HANDLE+0x50>
     378:	82 30       	cpi	r24, 0x02	; 2
     37a:	91 05       	cpc	r25, r1
     37c:	1c f4       	brge	.+6      	; 0x384 <TURN_RELAY_OFF_HANDLE+0x2e>
     37e:	00 97       	sbiw	r24, 0x00	; 0
     380:	41 f0       	breq	.+16     	; 0x392 <TURN_RELAY_OFF_HANDLE+0x3c>
     382:	2f c0       	rjmp	.+94     	; 0x3e2 <TURN_RELAY_OFF_HANDLE+0x8c>
     384:	82 30       	cpi	r24, 0x02	; 2
     386:	91 05       	cpc	r25, r1
     388:	c1 f0       	breq	.+48     	; 0x3ba <TURN_RELAY_OFF_HANDLE+0x64>
     38a:	83 30       	cpi	r24, 0x03	; 3
     38c:	91 05       	cpc	r25, r1
     38e:	f9 f0       	breq	.+62     	; 0x3ce <TURN_RELAY_OFF_HANDLE+0x78>
     390:	28 c0       	rjmp	.+80     	; 0x3e2 <TURN_RELAY_OFF_HANDLE+0x8c>
		case 0:
		bit_clear(PORTD, BIT(3));
     392:	8b e2       	ldi	r24, 0x2B	; 43
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	2b e2       	ldi	r18, 0x2B	; 43
     398:	30 e0       	ldi	r19, 0x00	; 0
     39a:	f9 01       	movw	r30, r18
     39c:	20 81       	ld	r18, Z
     39e:	27 7f       	andi	r18, 0xF7	; 247
     3a0:	fc 01       	movw	r30, r24
     3a2:	20 83       	st	Z, r18
		break;
     3a4:	1e c0       	rjmp	.+60     	; 0x3e2 <TURN_RELAY_OFF_HANDLE+0x8c>
		case 1:
		bit_clear(PORTD, BIT(2));
     3a6:	8b e2       	ldi	r24, 0x2B	; 43
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	2b e2       	ldi	r18, 0x2B	; 43
     3ac:	30 e0       	ldi	r19, 0x00	; 0
     3ae:	f9 01       	movw	r30, r18
     3b0:	20 81       	ld	r18, Z
     3b2:	2b 7f       	andi	r18, 0xFB	; 251
     3b4:	fc 01       	movw	r30, r24
     3b6:	20 83       	st	Z, r18
		break;
     3b8:	14 c0       	rjmp	.+40     	; 0x3e2 <TURN_RELAY_OFF_HANDLE+0x8c>
		case 2:
		bit_clear(PORTD, BIT(6));
     3ba:	8b e2       	ldi	r24, 0x2B	; 43
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	2b e2       	ldi	r18, 0x2B	; 43
     3c0:	30 e0       	ldi	r19, 0x00	; 0
     3c2:	f9 01       	movw	r30, r18
     3c4:	20 81       	ld	r18, Z
     3c6:	2f 7b       	andi	r18, 0xBF	; 191
     3c8:	fc 01       	movw	r30, r24
     3ca:	20 83       	st	Z, r18
		break;
     3cc:	0a c0       	rjmp	.+20     	; 0x3e2 <TURN_RELAY_OFF_HANDLE+0x8c>
		case 3:
		bit_clear(PORTD, BIT(5));
     3ce:	8b e2       	ldi	r24, 0x2B	; 43
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	2b e2       	ldi	r18, 0x2B	; 43
     3d4:	30 e0       	ldi	r19, 0x00	; 0
     3d6:	f9 01       	movw	r30, r18
     3d8:	20 81       	ld	r18, Z
     3da:	2f 7d       	andi	r18, 0xDF	; 223
     3dc:	fc 01       	movw	r30, r24
     3de:	20 83       	st	Z, r18
		break;
     3e0:	00 00       	nop
	}
}
     3e2:	0f 90       	pop	r0
     3e4:	cf 91       	pop	r28
     3e6:	df 91       	pop	r29
     3e8:	08 95       	ret

000003ea <BUILT_IN_LED_TEST_HANDLER>:

void BUILT_IN_LED_TEST_HANDLER(){
     3ea:	0f 93       	push	r16
     3ec:	1f 93       	push	r17
     3ee:	df 93       	push	r29
     3f0:	cf 93       	push	r28
     3f2:	cd b7       	in	r28, 0x3d	; 61
     3f4:	de b7       	in	r29, 0x3e	; 62
     3f6:	2f 97       	sbiw	r28, 0x0f	; 15
     3f8:	0f b6       	in	r0, 0x3f	; 63
     3fa:	f8 94       	cli
     3fc:	de bf       	out	0x3e, r29	; 62
     3fe:	0f be       	out	0x3f, r0	; 63
     400:	cd bf       	out	0x3d, r28	; 61
	for (uint8_t x = 0; x < 8; x++) {
     402:	19 82       	std	Y+1, r1	; 0x01
     404:	91 c0       	rjmp	.+290    	; 0x528 <__stack+0x29>
		bit_flip(PORTD, BIT(7));
     406:	8b e2       	ldi	r24, 0x2B	; 43
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	2b e2       	ldi	r18, 0x2B	; 43
     40c:	30 e0       	ldi	r19, 0x00	; 0
     40e:	f9 01       	movw	r30, r18
     410:	30 81       	ld	r19, Z
     412:	20 e8       	ldi	r18, 0x80	; 128
     414:	23 27       	eor	r18, r19
     416:	fc 01       	movw	r30, r24
     418:	20 83       	st	Z, r18
		bit_flip(PORTB, BIT(0));
     41a:	85 e2       	ldi	r24, 0x25	; 37
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	25 e2       	ldi	r18, 0x25	; 37
     420:	30 e0       	ldi	r19, 0x00	; 0
     422:	f9 01       	movw	r30, r18
     424:	30 81       	ld	r19, Z
     426:	21 e0       	ldi	r18, 0x01	; 1
     428:	23 27       	eor	r18, r19
     42a:	fc 01       	movw	r30, r24
     42c:	20 83       	st	Z, r18
     42e:	80 e0       	ldi	r24, 0x00	; 0
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	aa e7       	ldi	r26, 0x7A	; 122
     434:	b3 e4       	ldi	r27, 0x43	; 67
     436:	8a 83       	std	Y+2, r24	; 0x02
     438:	9b 83       	std	Y+3, r25	; 0x03
     43a:	ac 83       	std	Y+4, r26	; 0x04
     43c:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     43e:	6a 81       	ldd	r22, Y+2	; 0x02
     440:	7b 81       	ldd	r23, Y+3	; 0x03
     442:	8c 81       	ldd	r24, Y+4	; 0x04
     444:	9d 81       	ldd	r25, Y+5	; 0x05
     446:	20 e0       	ldi	r18, 0x00	; 0
     448:	30 e0       	ldi	r19, 0x00	; 0
     44a:	4a e7       	ldi	r20, 0x7A	; 122
     44c:	55 e4       	ldi	r21, 0x45	; 69
     44e:	b3 da       	rcall	.-2714   	; 0xfffff9b6 <__eeprom_end+0xff7ef9b6>
     450:	dc 01       	movw	r26, r24
     452:	cb 01       	movw	r24, r22
     454:	8e 83       	std	Y+6, r24	; 0x06
     456:	9f 83       	std	Y+7, r25	; 0x07
     458:	a8 87       	std	Y+8, r26	; 0x08
     45a:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     45c:	11 e0       	ldi	r17, 0x01	; 1
     45e:	6e 81       	ldd	r22, Y+6	; 0x06
     460:	7f 81       	ldd	r23, Y+7	; 0x07
     462:	88 85       	ldd	r24, Y+8	; 0x08
     464:	99 85       	ldd	r25, Y+9	; 0x09
     466:	20 e0       	ldi	r18, 0x00	; 0
     468:	30 e0       	ldi	r19, 0x00	; 0
     46a:	40 e8       	ldi	r20, 0x80	; 128
     46c:	5f e3       	ldi	r21, 0x3F	; 63
     46e:	22 da       	rcall	.-3004   	; 0xfffff8b4 <__eeprom_end+0xff7ef8b4>
     470:	88 23       	and	r24, r24
     472:	0c f0       	brlt	.+2      	; 0x476 <BUILT_IN_LED_TEST_HANDLER+0x8c>
     474:	10 e0       	ldi	r17, 0x00	; 0
     476:	11 23       	and	r17, r17
     478:	29 f0       	breq	.+10     	; 0x484 <BUILT_IN_LED_TEST_HANDLER+0x9a>
		__ticks = 1;
     47a:	81 e0       	ldi	r24, 0x01	; 1
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	9b 87       	std	Y+11, r25	; 0x0b
     480:	8a 87       	std	Y+10, r24	; 0x0a
     482:	42 c0       	rjmp	.+132    	; 0x508 <__stack+0x9>
	else if (__tmp > 65535)
     484:	11 e0       	ldi	r17, 0x01	; 1
     486:	6e 81       	ldd	r22, Y+6	; 0x06
     488:	7f 81       	ldd	r23, Y+7	; 0x07
     48a:	88 85       	ldd	r24, Y+8	; 0x08
     48c:	99 85       	ldd	r25, Y+9	; 0x09
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	3f ef       	ldi	r19, 0xFF	; 255
     492:	4f e7       	ldi	r20, 0x7F	; 127
     494:	57 e4       	ldi	r21, 0x47	; 71
     496:	8b da       	rcall	.-2794   	; 0xfffff9ae <__eeprom_end+0xff7ef9ae>
     498:	18 16       	cp	r1, r24
     49a:	0c f0       	brlt	.+2      	; 0x49e <BUILT_IN_LED_TEST_HANDLER+0xb4>
     49c:	10 e0       	ldi	r17, 0x00	; 0
     49e:	11 23       	and	r17, r17
     4a0:	51 f1       	breq	.+84     	; 0x4f6 <BUILT_IN_LED_TEST_HANDLER+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4a2:	6a 81       	ldd	r22, Y+2	; 0x02
     4a4:	7b 81       	ldd	r23, Y+3	; 0x03
     4a6:	8c 81       	ldd	r24, Y+4	; 0x04
     4a8:	9d 81       	ldd	r25, Y+5	; 0x05
     4aa:	20 e0       	ldi	r18, 0x00	; 0
     4ac:	30 e0       	ldi	r19, 0x00	; 0
     4ae:	40 e2       	ldi	r20, 0x20	; 32
     4b0:	51 e4       	ldi	r21, 0x41	; 65
     4b2:	81 da       	rcall	.-2814   	; 0xfffff9b6 <__eeprom_end+0xff7ef9b6>
     4b4:	dc 01       	movw	r26, r24
     4b6:	cb 01       	movw	r24, r22
     4b8:	bc 01       	movw	r22, r24
     4ba:	cd 01       	movw	r24, r26
     4bc:	ff d9       	rcall	.-3074   	; 0xfffff8bc <__eeprom_end+0xff7ef8bc>
     4be:	dc 01       	movw	r26, r24
     4c0:	cb 01       	movw	r24, r22
     4c2:	9b 87       	std	Y+11, r25	; 0x0b
     4c4:	8a 87       	std	Y+10, r24	; 0x0a
     4c6:	12 c0       	rjmp	.+36     	; 0x4ec <BUILT_IN_LED_TEST_HANDLER+0x102>
     4c8:	80 e9       	ldi	r24, 0x90	; 144
     4ca:	91 e0       	ldi	r25, 0x01	; 1
     4cc:	9d 87       	std	Y+13, r25	; 0x0d
     4ce:	8c 87       	std	Y+12, r24	; 0x0c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     4d0:	8c 85       	ldd	r24, Y+12	; 0x0c
     4d2:	9d 85       	ldd	r25, Y+13	; 0x0d
     4d4:	8c 01       	movw	r16, r24
     4d6:	c8 01       	movw	r24, r16
     4d8:	01 97       	sbiw	r24, 0x01	; 1
     4da:	f1 f7       	brne	.-4      	; 0x4d8 <BUILT_IN_LED_TEST_HANDLER+0xee>
     4dc:	8c 01       	movw	r16, r24
     4de:	1d 87       	std	Y+13, r17	; 0x0d
     4e0:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4e2:	8a 85       	ldd	r24, Y+10	; 0x0a
     4e4:	9b 85       	ldd	r25, Y+11	; 0x0b
     4e6:	01 97       	sbiw	r24, 0x01	; 1
     4e8:	9b 87       	std	Y+11, r25	; 0x0b
     4ea:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4ec:	8a 85       	ldd	r24, Y+10	; 0x0a
     4ee:	9b 85       	ldd	r25, Y+11	; 0x0b
     4f0:	00 97       	sbiw	r24, 0x00	; 0
     4f2:	51 f7       	brne	.-44     	; 0x4c8 <BUILT_IN_LED_TEST_HANDLER+0xde>
     4f4:	16 c0       	rjmp	.+44     	; 0x522 <__stack+0x23>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     4f6:	6e 81       	ldd	r22, Y+6	; 0x06
     4f8:	7f 81       	ldd	r23, Y+7	; 0x07
     4fa:	88 85       	ldd	r24, Y+8	; 0x08
     4fc:	99 85       	ldd	r25, Y+9	; 0x09
     4fe:	de d9       	rcall	.-3140   	; 0xfffff8bc <__eeprom_end+0xff7ef8bc>
     500:	dc 01       	movw	r26, r24
     502:	cb 01       	movw	r24, r22
     504:	9b 87       	std	Y+11, r25	; 0x0b
     506:	8a 87       	std	Y+10, r24	; 0x0a
     508:	8a 85       	ldd	r24, Y+10	; 0x0a
     50a:	9b 85       	ldd	r25, Y+11	; 0x0b
     50c:	9f 87       	std	Y+15, r25	; 0x0f
     50e:	8e 87       	std	Y+14, r24	; 0x0e
     510:	8e 85       	ldd	r24, Y+14	; 0x0e
     512:	9f 85       	ldd	r25, Y+15	; 0x0f
     514:	8c 01       	movw	r16, r24
     516:	f8 01       	movw	r30, r16
     518:	31 97       	sbiw	r30, 0x01	; 1
     51a:	f1 f7       	brne	.-4      	; 0x518 <__stack+0x19>
     51c:	8f 01       	movw	r16, r30
     51e:	1f 87       	std	Y+15, r17	; 0x0f
     520:	0e 87       	std	Y+14, r16	; 0x0e
		break;
	}
}

void BUILT_IN_LED_TEST_HANDLER(){
	for (uint8_t x = 0; x < 8; x++) {
     522:	89 81       	ldd	r24, Y+1	; 0x01
     524:	8f 5f       	subi	r24, 0xFF	; 255
     526:	89 83       	std	Y+1, r24	; 0x01
     528:	89 81       	ldd	r24, Y+1	; 0x01
     52a:	88 30       	cpi	r24, 0x08	; 8
     52c:	08 f4       	brcc	.+2      	; 0x530 <__stack+0x31>
     52e:	6b cf       	rjmp	.-298    	; 0x406 <BUILT_IN_LED_TEST_HANDLER+0x1c>
		bit_flip(PORTD, BIT(7));
		bit_flip(PORTB, BIT(0));
		_delay_ms(250);
	}
	bit_clear(PORTD, BIT(7));
     530:	8b e2       	ldi	r24, 0x2B	; 43
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	2b e2       	ldi	r18, 0x2B	; 43
     536:	30 e0       	ldi	r19, 0x00	; 0
     538:	f9 01       	movw	r30, r18
     53a:	20 81       	ld	r18, Z
     53c:	2f 77       	andi	r18, 0x7F	; 127
     53e:	fc 01       	movw	r30, r24
     540:	20 83       	st	Z, r18
	bit_clear(PORTB, BIT(0));
     542:	85 e2       	ldi	r24, 0x25	; 37
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	25 e2       	ldi	r18, 0x25	; 37
     548:	30 e0       	ldi	r19, 0x00	; 0
     54a:	f9 01       	movw	r30, r18
     54c:	20 81       	ld	r18, Z
     54e:	2e 7f       	andi	r18, 0xFE	; 254
     550:	fc 01       	movw	r30, r24
     552:	20 83       	st	Z, r18
}
     554:	2f 96       	adiw	r28, 0x0f	; 15
     556:	0f b6       	in	r0, 0x3f	; 63
     558:	f8 94       	cli
     55a:	de bf       	out	0x3e, r29	; 62
     55c:	0f be       	out	0x3f, r0	; 63
     55e:	cd bf       	out	0x3d, r28	; 61
     560:	cf 91       	pop	r28
     562:	df 91       	pop	r29
     564:	1f 91       	pop	r17
     566:	0f 91       	pop	r16
     568:	08 95       	ret

0000056a <TURN_EVERYTHING_ON_HANDLER>:

void TURN_EVERYTHING_ON_HANDLER(){
     56a:	df 93       	push	r29
     56c:	cf 93       	push	r28
     56e:	cd b7       	in	r28, 0x3d	; 61
     570:	de b7       	in	r29, 0x3e	; 62
	bit_set(PORTD, BIT(3));
     572:	8b e2       	ldi	r24, 0x2B	; 43
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	2b e2       	ldi	r18, 0x2B	; 43
     578:	30 e0       	ldi	r19, 0x00	; 0
     57a:	f9 01       	movw	r30, r18
     57c:	20 81       	ld	r18, Z
     57e:	28 60       	ori	r18, 0x08	; 8
     580:	fc 01       	movw	r30, r24
     582:	20 83       	st	Z, r18
	bit_set(PORTD, BIT(2));
     584:	8b e2       	ldi	r24, 0x2B	; 43
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	2b e2       	ldi	r18, 0x2B	; 43
     58a:	30 e0       	ldi	r19, 0x00	; 0
     58c:	f9 01       	movw	r30, r18
     58e:	20 81       	ld	r18, Z
     590:	24 60       	ori	r18, 0x04	; 4
     592:	fc 01       	movw	r30, r24
     594:	20 83       	st	Z, r18
	bit_set(PORTD, BIT(6));
     596:	8b e2       	ldi	r24, 0x2B	; 43
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	2b e2       	ldi	r18, 0x2B	; 43
     59c:	30 e0       	ldi	r19, 0x00	; 0
     59e:	f9 01       	movw	r30, r18
     5a0:	20 81       	ld	r18, Z
     5a2:	20 64       	ori	r18, 0x40	; 64
     5a4:	fc 01       	movw	r30, r24
     5a6:	20 83       	st	Z, r18
	bit_set(PORTD, BIT(5));
     5a8:	8b e2       	ldi	r24, 0x2B	; 43
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	2b e2       	ldi	r18, 0x2B	; 43
     5ae:	30 e0       	ldi	r19, 0x00	; 0
     5b0:	f9 01       	movw	r30, r18
     5b2:	20 81       	ld	r18, Z
     5b4:	20 62       	ori	r18, 0x20	; 32
     5b6:	fc 01       	movw	r30, r24
     5b8:	20 83       	st	Z, r18
}
     5ba:	cf 91       	pop	r28
     5bc:	df 91       	pop	r29
     5be:	08 95       	ret

000005c0 <TURN_EVERYTHING_OFF_HANDLER>:

void TURN_EVERYTHING_OFF_HANDLER(){
     5c0:	df 93       	push	r29
     5c2:	cf 93       	push	r28
     5c4:	cd b7       	in	r28, 0x3d	; 61
     5c6:	de b7       	in	r29, 0x3e	; 62
	bit_clear(PORTD, BIT(3));
     5c8:	8b e2       	ldi	r24, 0x2B	; 43
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	2b e2       	ldi	r18, 0x2B	; 43
     5ce:	30 e0       	ldi	r19, 0x00	; 0
     5d0:	f9 01       	movw	r30, r18
     5d2:	20 81       	ld	r18, Z
     5d4:	27 7f       	andi	r18, 0xF7	; 247
     5d6:	fc 01       	movw	r30, r24
     5d8:	20 83       	st	Z, r18
	bit_clear(PORTD, BIT(2));
     5da:	8b e2       	ldi	r24, 0x2B	; 43
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	2b e2       	ldi	r18, 0x2B	; 43
     5e0:	30 e0       	ldi	r19, 0x00	; 0
     5e2:	f9 01       	movw	r30, r18
     5e4:	20 81       	ld	r18, Z
     5e6:	2b 7f       	andi	r18, 0xFB	; 251
     5e8:	fc 01       	movw	r30, r24
     5ea:	20 83       	st	Z, r18
	bit_clear(PORTD, BIT(6));
     5ec:	8b e2       	ldi	r24, 0x2B	; 43
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	2b e2       	ldi	r18, 0x2B	; 43
     5f2:	30 e0       	ldi	r19, 0x00	; 0
     5f4:	f9 01       	movw	r30, r18
     5f6:	20 81       	ld	r18, Z
     5f8:	2f 7b       	andi	r18, 0xBF	; 191
     5fa:	fc 01       	movw	r30, r24
     5fc:	20 83       	st	Z, r18
	bit_clear(PORTD, BIT(5));
     5fe:	8b e2       	ldi	r24, 0x2B	; 43
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	2b e2       	ldi	r18, 0x2B	; 43
     604:	30 e0       	ldi	r19, 0x00	; 0
     606:	f9 01       	movw	r30, r18
     608:	20 81       	ld	r18, Z
     60a:	2f 7d       	andi	r18, 0xDF	; 223
     60c:	fc 01       	movw	r30, r24
     60e:	20 83       	st	Z, r18
}
     610:	cf 91       	pop	r28
     612:	df 91       	pop	r29
     614:	08 95       	ret

00000616 <CALL_NURSE_HANDLE>:

void CALL_NURSE_HANDLE(){
     616:	0f 93       	push	r16
     618:	1f 93       	push	r17
     61a:	df 93       	push	r29
     61c:	cf 93       	push	r28
     61e:	cd b7       	in	r28, 0x3d	; 61
     620:	de b7       	in	r29, 0x3e	; 62
     622:	c6 54       	subi	r28, 0x46	; 70
     624:	d0 40       	sbci	r29, 0x00	; 0
     626:	0f b6       	in	r0, 0x3f	; 63
     628:	f8 94       	cli
     62a:	de bf       	out	0x3e, r29	; 62
     62c:	0f be       	out	0x3f, r0	; 63
     62e:	cd bf       	out	0x3d, r28	; 61
	bit_set(PORTD, BIT(5));
     630:	8b e2       	ldi	r24, 0x2B	; 43
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	2b e2       	ldi	r18, 0x2B	; 43
     636:	30 e0       	ldi	r19, 0x00	; 0
     638:	f9 01       	movw	r30, r18
     63a:	20 81       	ld	r18, Z
     63c:	20 62       	ori	r18, 0x20	; 32
     63e:	fc 01       	movw	r30, r24
     640:	20 83       	st	Z, r18
     642:	80 e0       	ldi	r24, 0x00	; 0
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	aa ef       	ldi	r26, 0xFA	; 250
     648:	b3 e4       	ldi	r27, 0x43	; 67
     64a:	89 83       	std	Y+1, r24	; 0x01
     64c:	9a 83       	std	Y+2, r25	; 0x02
     64e:	ab 83       	std	Y+3, r26	; 0x03
     650:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     652:	69 81       	ldd	r22, Y+1	; 0x01
     654:	7a 81       	ldd	r23, Y+2	; 0x02
     656:	8b 81       	ldd	r24, Y+3	; 0x03
     658:	9c 81       	ldd	r25, Y+4	; 0x04
     65a:	20 e0       	ldi	r18, 0x00	; 0
     65c:	30 e0       	ldi	r19, 0x00	; 0
     65e:	4a e7       	ldi	r20, 0x7A	; 122
     660:	55 e4       	ldi	r21, 0x45	; 69
     662:	a9 d9       	rcall	.-3246   	; 0xfffff9b6 <__eeprom_end+0xff7ef9b6>
     664:	dc 01       	movw	r26, r24
     666:	cb 01       	movw	r24, r22
     668:	8d 83       	std	Y+5, r24	; 0x05
     66a:	9e 83       	std	Y+6, r25	; 0x06
     66c:	af 83       	std	Y+7, r26	; 0x07
     66e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     670:	11 e0       	ldi	r17, 0x01	; 1
     672:	6d 81       	ldd	r22, Y+5	; 0x05
     674:	7e 81       	ldd	r23, Y+6	; 0x06
     676:	8f 81       	ldd	r24, Y+7	; 0x07
     678:	98 85       	ldd	r25, Y+8	; 0x08
     67a:	20 e0       	ldi	r18, 0x00	; 0
     67c:	30 e0       	ldi	r19, 0x00	; 0
     67e:	40 e8       	ldi	r20, 0x80	; 128
     680:	5f e3       	ldi	r21, 0x3F	; 63
     682:	18 d9       	rcall	.-3536   	; 0xfffff8b4 <__eeprom_end+0xff7ef8b4>
     684:	88 23       	and	r24, r24
     686:	0c f0       	brlt	.+2      	; 0x68a <CALL_NURSE_HANDLE+0x74>
     688:	10 e0       	ldi	r17, 0x00	; 0
     68a:	11 23       	and	r17, r17
     68c:	29 f0       	breq	.+10     	; 0x698 <CALL_NURSE_HANDLE+0x82>
		__ticks = 1;
     68e:	81 e0       	ldi	r24, 0x01	; 1
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	9a 87       	std	Y+10, r25	; 0x0a
     694:	89 87       	std	Y+9, r24	; 0x09
     696:	42 c0       	rjmp	.+132    	; 0x71c <CALL_NURSE_HANDLE+0x106>
	else if (__tmp > 65535)
     698:	11 e0       	ldi	r17, 0x01	; 1
     69a:	6d 81       	ldd	r22, Y+5	; 0x05
     69c:	7e 81       	ldd	r23, Y+6	; 0x06
     69e:	8f 81       	ldd	r24, Y+7	; 0x07
     6a0:	98 85       	ldd	r25, Y+8	; 0x08
     6a2:	20 e0       	ldi	r18, 0x00	; 0
     6a4:	3f ef       	ldi	r19, 0xFF	; 255
     6a6:	4f e7       	ldi	r20, 0x7F	; 127
     6a8:	57 e4       	ldi	r21, 0x47	; 71
     6aa:	81 d9       	rcall	.-3326   	; 0xfffff9ae <__eeprom_end+0xff7ef9ae>
     6ac:	18 16       	cp	r1, r24
     6ae:	0c f0       	brlt	.+2      	; 0x6b2 <CALL_NURSE_HANDLE+0x9c>
     6b0:	10 e0       	ldi	r17, 0x00	; 0
     6b2:	11 23       	and	r17, r17
     6b4:	51 f1       	breq	.+84     	; 0x70a <CALL_NURSE_HANDLE+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6b6:	69 81       	ldd	r22, Y+1	; 0x01
     6b8:	7a 81       	ldd	r23, Y+2	; 0x02
     6ba:	8b 81       	ldd	r24, Y+3	; 0x03
     6bc:	9c 81       	ldd	r25, Y+4	; 0x04
     6be:	20 e0       	ldi	r18, 0x00	; 0
     6c0:	30 e0       	ldi	r19, 0x00	; 0
     6c2:	40 e2       	ldi	r20, 0x20	; 32
     6c4:	51 e4       	ldi	r21, 0x41	; 65
     6c6:	77 d9       	rcall	.-3346   	; 0xfffff9b6 <__eeprom_end+0xff7ef9b6>
     6c8:	dc 01       	movw	r26, r24
     6ca:	cb 01       	movw	r24, r22
     6cc:	bc 01       	movw	r22, r24
     6ce:	cd 01       	movw	r24, r26
     6d0:	f5 d8       	rcall	.-3606   	; 0xfffff8bc <__eeprom_end+0xff7ef8bc>
     6d2:	dc 01       	movw	r26, r24
     6d4:	cb 01       	movw	r24, r22
     6d6:	9a 87       	std	Y+10, r25	; 0x0a
     6d8:	89 87       	std	Y+9, r24	; 0x09
     6da:	12 c0       	rjmp	.+36     	; 0x700 <CALL_NURSE_HANDLE+0xea>
     6dc:	80 e9       	ldi	r24, 0x90	; 144
     6de:	91 e0       	ldi	r25, 0x01	; 1
     6e0:	9c 87       	std	Y+12, r25	; 0x0c
     6e2:	8b 87       	std	Y+11, r24	; 0x0b
     6e4:	8b 85       	ldd	r24, Y+11	; 0x0b
     6e6:	9c 85       	ldd	r25, Y+12	; 0x0c
     6e8:	8c 01       	movw	r16, r24
     6ea:	c8 01       	movw	r24, r16
     6ec:	01 97       	sbiw	r24, 0x01	; 1
     6ee:	f1 f7       	brne	.-4      	; 0x6ec <CALL_NURSE_HANDLE+0xd6>
     6f0:	8c 01       	movw	r16, r24
     6f2:	1c 87       	std	Y+12, r17	; 0x0c
     6f4:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6f6:	89 85       	ldd	r24, Y+9	; 0x09
     6f8:	9a 85       	ldd	r25, Y+10	; 0x0a
     6fa:	01 97       	sbiw	r24, 0x01	; 1
     6fc:	9a 87       	std	Y+10, r25	; 0x0a
     6fe:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     700:	89 85       	ldd	r24, Y+9	; 0x09
     702:	9a 85       	ldd	r25, Y+10	; 0x0a
     704:	00 97       	sbiw	r24, 0x00	; 0
     706:	51 f7       	brne	.-44     	; 0x6dc <CALL_NURSE_HANDLE+0xc6>
     708:	16 c0       	rjmp	.+44     	; 0x736 <CALL_NURSE_HANDLE+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     70a:	6d 81       	ldd	r22, Y+5	; 0x05
     70c:	7e 81       	ldd	r23, Y+6	; 0x06
     70e:	8f 81       	ldd	r24, Y+7	; 0x07
     710:	98 85       	ldd	r25, Y+8	; 0x08
     712:	d4 d8       	rcall	.-3672   	; 0xfffff8bc <__eeprom_end+0xff7ef8bc>
     714:	dc 01       	movw	r26, r24
     716:	cb 01       	movw	r24, r22
     718:	9a 87       	std	Y+10, r25	; 0x0a
     71a:	89 87       	std	Y+9, r24	; 0x09
     71c:	89 85       	ldd	r24, Y+9	; 0x09
     71e:	9a 85       	ldd	r25, Y+10	; 0x0a
     720:	9e 87       	std	Y+14, r25	; 0x0e
     722:	8d 87       	std	Y+13, r24	; 0x0d
     724:	8d 85       	ldd	r24, Y+13	; 0x0d
     726:	9e 85       	ldd	r25, Y+14	; 0x0e
     728:	8c 01       	movw	r16, r24
     72a:	f8 01       	movw	r30, r16
     72c:	31 97       	sbiw	r30, 0x01	; 1
     72e:	f1 f7       	brne	.-4      	; 0x72c <CALL_NURSE_HANDLE+0x116>
     730:	8f 01       	movw	r16, r30
     732:	1e 87       	std	Y+14, r17	; 0x0e
     734:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(500);
	bit_clear(PORTD, BIT(5));
     736:	8b e2       	ldi	r24, 0x2B	; 43
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	2b e2       	ldi	r18, 0x2B	; 43
     73c:	30 e0       	ldi	r19, 0x00	; 0
     73e:	f9 01       	movw	r30, r18
     740:	20 81       	ld	r18, Z
     742:	2f 7d       	andi	r18, 0xDF	; 223
     744:	fc 01       	movw	r30, r24
     746:	20 83       	st	Z, r18
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	aa ef       	ldi	r26, 0xFA	; 250
     74e:	b3 e4       	ldi	r27, 0x43	; 67
     750:	8f 87       	std	Y+15, r24	; 0x0f
     752:	98 8b       	std	Y+16, r25	; 0x10
     754:	a9 8b       	std	Y+17, r26	; 0x11
     756:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     758:	6f 85       	ldd	r22, Y+15	; 0x0f
     75a:	78 89       	ldd	r23, Y+16	; 0x10
     75c:	89 89       	ldd	r24, Y+17	; 0x11
     75e:	9a 89       	ldd	r25, Y+18	; 0x12
     760:	20 e0       	ldi	r18, 0x00	; 0
     762:	30 e0       	ldi	r19, 0x00	; 0
     764:	4a e7       	ldi	r20, 0x7A	; 122
     766:	55 e4       	ldi	r21, 0x45	; 69
     768:	26 d9       	rcall	.-3508   	; 0xfffff9b6 <__eeprom_end+0xff7ef9b6>
     76a:	dc 01       	movw	r26, r24
     76c:	cb 01       	movw	r24, r22
     76e:	8b 8b       	std	Y+19, r24	; 0x13
     770:	9c 8b       	std	Y+20, r25	; 0x14
     772:	ad 8b       	std	Y+21, r26	; 0x15
     774:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     776:	11 e0       	ldi	r17, 0x01	; 1
     778:	6b 89       	ldd	r22, Y+19	; 0x13
     77a:	7c 89       	ldd	r23, Y+20	; 0x14
     77c:	8d 89       	ldd	r24, Y+21	; 0x15
     77e:	9e 89       	ldd	r25, Y+22	; 0x16
     780:	20 e0       	ldi	r18, 0x00	; 0
     782:	30 e0       	ldi	r19, 0x00	; 0
     784:	40 e8       	ldi	r20, 0x80	; 128
     786:	5f e3       	ldi	r21, 0x3F	; 63
     788:	95 d8       	rcall	.-3798   	; 0xfffff8b4 <__eeprom_end+0xff7ef8b4>
     78a:	88 23       	and	r24, r24
     78c:	0c f0       	brlt	.+2      	; 0x790 <CALL_NURSE_HANDLE+0x17a>
     78e:	10 e0       	ldi	r17, 0x00	; 0
     790:	11 23       	and	r17, r17
     792:	29 f0       	breq	.+10     	; 0x79e <CALL_NURSE_HANDLE+0x188>
		__ticks = 1;
     794:	81 e0       	ldi	r24, 0x01	; 1
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	98 8f       	std	Y+24, r25	; 0x18
     79a:	8f 8b       	std	Y+23, r24	; 0x17
     79c:	42 c0       	rjmp	.+132    	; 0x822 <CALL_NURSE_HANDLE+0x20c>
	else if (__tmp > 65535)
     79e:	11 e0       	ldi	r17, 0x01	; 1
     7a0:	6b 89       	ldd	r22, Y+19	; 0x13
     7a2:	7c 89       	ldd	r23, Y+20	; 0x14
     7a4:	8d 89       	ldd	r24, Y+21	; 0x15
     7a6:	9e 89       	ldd	r25, Y+22	; 0x16
     7a8:	20 e0       	ldi	r18, 0x00	; 0
     7aa:	3f ef       	ldi	r19, 0xFF	; 255
     7ac:	4f e7       	ldi	r20, 0x7F	; 127
     7ae:	57 e4       	ldi	r21, 0x47	; 71
     7b0:	fe d8       	rcall	.-3588   	; 0xfffff9ae <__eeprom_end+0xff7ef9ae>
     7b2:	18 16       	cp	r1, r24
     7b4:	0c f0       	brlt	.+2      	; 0x7b8 <CALL_NURSE_HANDLE+0x1a2>
     7b6:	10 e0       	ldi	r17, 0x00	; 0
     7b8:	11 23       	and	r17, r17
     7ba:	51 f1       	breq	.+84     	; 0x810 <CALL_NURSE_HANDLE+0x1fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7bc:	6f 85       	ldd	r22, Y+15	; 0x0f
     7be:	78 89       	ldd	r23, Y+16	; 0x10
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	9a 89       	ldd	r25, Y+18	; 0x12
     7c4:	20 e0       	ldi	r18, 0x00	; 0
     7c6:	30 e0       	ldi	r19, 0x00	; 0
     7c8:	40 e2       	ldi	r20, 0x20	; 32
     7ca:	51 e4       	ldi	r21, 0x41	; 65
     7cc:	f4 d8       	rcall	.-3608   	; 0xfffff9b6 <__eeprom_end+0xff7ef9b6>
     7ce:	dc 01       	movw	r26, r24
     7d0:	cb 01       	movw	r24, r22
     7d2:	bc 01       	movw	r22, r24
     7d4:	cd 01       	movw	r24, r26
     7d6:	72 d8       	rcall	.-3868   	; 0xfffff8bc <__eeprom_end+0xff7ef8bc>
     7d8:	dc 01       	movw	r26, r24
     7da:	cb 01       	movw	r24, r22
     7dc:	98 8f       	std	Y+24, r25	; 0x18
     7de:	8f 8b       	std	Y+23, r24	; 0x17
     7e0:	12 c0       	rjmp	.+36     	; 0x806 <CALL_NURSE_HANDLE+0x1f0>
     7e2:	80 e9       	ldi	r24, 0x90	; 144
     7e4:	91 e0       	ldi	r25, 0x01	; 1
     7e6:	9a 8f       	std	Y+26, r25	; 0x1a
     7e8:	89 8f       	std	Y+25, r24	; 0x19
     7ea:	89 8d       	ldd	r24, Y+25	; 0x19
     7ec:	9a 8d       	ldd	r25, Y+26	; 0x1a
     7ee:	8c 01       	movw	r16, r24
     7f0:	c8 01       	movw	r24, r16
     7f2:	01 97       	sbiw	r24, 0x01	; 1
     7f4:	f1 f7       	brne	.-4      	; 0x7f2 <CALL_NURSE_HANDLE+0x1dc>
     7f6:	8c 01       	movw	r16, r24
     7f8:	1a 8f       	std	Y+26, r17	; 0x1a
     7fa:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7fc:	8f 89       	ldd	r24, Y+23	; 0x17
     7fe:	98 8d       	ldd	r25, Y+24	; 0x18
     800:	01 97       	sbiw	r24, 0x01	; 1
     802:	98 8f       	std	Y+24, r25	; 0x18
     804:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     806:	8f 89       	ldd	r24, Y+23	; 0x17
     808:	98 8d       	ldd	r25, Y+24	; 0x18
     80a:	00 97       	sbiw	r24, 0x00	; 0
     80c:	51 f7       	brne	.-44     	; 0x7e2 <CALL_NURSE_HANDLE+0x1cc>
     80e:	16 c0       	rjmp	.+44     	; 0x83c <CALL_NURSE_HANDLE+0x226>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     810:	6b 89       	ldd	r22, Y+19	; 0x13
     812:	7c 89       	ldd	r23, Y+20	; 0x14
     814:	8d 89       	ldd	r24, Y+21	; 0x15
     816:	9e 89       	ldd	r25, Y+22	; 0x16
     818:	51 d8       	rcall	.-3934   	; 0xfffff8bc <__eeprom_end+0xff7ef8bc>
     81a:	dc 01       	movw	r26, r24
     81c:	cb 01       	movw	r24, r22
     81e:	98 8f       	std	Y+24, r25	; 0x18
     820:	8f 8b       	std	Y+23, r24	; 0x17
     822:	8f 89       	ldd	r24, Y+23	; 0x17
     824:	98 8d       	ldd	r25, Y+24	; 0x18
     826:	9c 8f       	std	Y+28, r25	; 0x1c
     828:	8b 8f       	std	Y+27, r24	; 0x1b
     82a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     82c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     82e:	8c 01       	movw	r16, r24
     830:	f8 01       	movw	r30, r16
     832:	31 97       	sbiw	r30, 0x01	; 1
     834:	f1 f7       	brne	.-4      	; 0x832 <CALL_NURSE_HANDLE+0x21c>
     836:	8f 01       	movw	r16, r30
     838:	1c 8f       	std	Y+28, r17	; 0x1c
     83a:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(500);
	bit_set(PORTD, BIT(5));
     83c:	8b e2       	ldi	r24, 0x2B	; 43
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	2b e2       	ldi	r18, 0x2B	; 43
     842:	30 e0       	ldi	r19, 0x00	; 0
     844:	f9 01       	movw	r30, r18
     846:	20 81       	ld	r18, Z
     848:	20 62       	ori	r18, 0x20	; 32
     84a:	fc 01       	movw	r30, r24
     84c:	20 83       	st	Z, r18
     84e:	80 e0       	ldi	r24, 0x00	; 0
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	aa ef       	ldi	r26, 0xFA	; 250
     854:	b3 e4       	ldi	r27, 0x43	; 67
     856:	8d 8f       	std	Y+29, r24	; 0x1d
     858:	9e 8f       	std	Y+30, r25	; 0x1e
     85a:	af 8f       	std	Y+31, r26	; 0x1f
     85c:	b8 a3       	std	Y+32, r27	; 0x20
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     85e:	6d 8d       	ldd	r22, Y+29	; 0x1d
     860:	7e 8d       	ldd	r23, Y+30	; 0x1e
     862:	8f 8d       	ldd	r24, Y+31	; 0x1f
     864:	98 a1       	ldd	r25, Y+32	; 0x20
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	4a e7       	ldi	r20, 0x7A	; 122
     86c:	55 e4       	ldi	r21, 0x45	; 69
     86e:	a3 d8       	rcall	.-3770   	; 0xfffff9b6 <__eeprom_end+0xff7ef9b6>
     870:	dc 01       	movw	r26, r24
     872:	cb 01       	movw	r24, r22
     874:	89 a3       	std	Y+33, r24	; 0x21
     876:	9a a3       	std	Y+34, r25	; 0x22
     878:	ab a3       	std	Y+35, r26	; 0x23
     87a:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
     87c:	11 e0       	ldi	r17, 0x01	; 1
     87e:	69 a1       	ldd	r22, Y+33	; 0x21
     880:	7a a1       	ldd	r23, Y+34	; 0x22
     882:	8b a1       	ldd	r24, Y+35	; 0x23
     884:	9c a1       	ldd	r25, Y+36	; 0x24
     886:	20 e0       	ldi	r18, 0x00	; 0
     888:	30 e0       	ldi	r19, 0x00	; 0
     88a:	40 e8       	ldi	r20, 0x80	; 128
     88c:	5f e3       	ldi	r21, 0x3F	; 63
     88e:	12 d8       	rcall	.-4060   	; 0xfffff8b4 <__eeprom_end+0xff7ef8b4>
     890:	88 23       	and	r24, r24
     892:	0c f0       	brlt	.+2      	; 0x896 <CALL_NURSE_HANDLE+0x280>
     894:	10 e0       	ldi	r17, 0x00	; 0
     896:	11 23       	and	r17, r17
     898:	29 f0       	breq	.+10     	; 0x8a4 <CALL_NURSE_HANDLE+0x28e>
		__ticks = 1;
     89a:	81 e0       	ldi	r24, 0x01	; 1
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	9e a3       	std	Y+38, r25	; 0x26
     8a0:	8d a3       	std	Y+37, r24	; 0x25
     8a2:	42 c0       	rjmp	.+132    	; 0x928 <CALL_NURSE_HANDLE+0x312>
	else if (__tmp > 65535)
     8a4:	11 e0       	ldi	r17, 0x01	; 1
     8a6:	69 a1       	ldd	r22, Y+33	; 0x21
     8a8:	7a a1       	ldd	r23, Y+34	; 0x22
     8aa:	8b a1       	ldd	r24, Y+35	; 0x23
     8ac:	9c a1       	ldd	r25, Y+36	; 0x24
     8ae:	20 e0       	ldi	r18, 0x00	; 0
     8b0:	3f ef       	ldi	r19, 0xFF	; 255
     8b2:	4f e7       	ldi	r20, 0x7F	; 127
     8b4:	57 e4       	ldi	r21, 0x47	; 71
     8b6:	7b d8       	rcall	.-3850   	; 0xfffff9ae <__eeprom_end+0xff7ef9ae>
     8b8:	18 16       	cp	r1, r24
     8ba:	0c f0       	brlt	.+2      	; 0x8be <CALL_NURSE_HANDLE+0x2a8>
     8bc:	10 e0       	ldi	r17, 0x00	; 0
     8be:	11 23       	and	r17, r17
     8c0:	51 f1       	breq	.+84     	; 0x916 <CALL_NURSE_HANDLE+0x300>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8c2:	6d 8d       	ldd	r22, Y+29	; 0x1d
     8c4:	7e 8d       	ldd	r23, Y+30	; 0x1e
     8c6:	8f 8d       	ldd	r24, Y+31	; 0x1f
     8c8:	98 a1       	ldd	r25, Y+32	; 0x20
     8ca:	20 e0       	ldi	r18, 0x00	; 0
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	40 e2       	ldi	r20, 0x20	; 32
     8d0:	51 e4       	ldi	r21, 0x41	; 65
     8d2:	71 d8       	rcall	.-3870   	; 0xfffff9b6 <__eeprom_end+0xff7ef9b6>
     8d4:	dc 01       	movw	r26, r24
     8d6:	cb 01       	movw	r24, r22
     8d8:	bc 01       	movw	r22, r24
     8da:	cd 01       	movw	r24, r26
     8dc:	ef d7       	rcall	.+4062   	; 0x18bc <__fixunssfsi>
     8de:	dc 01       	movw	r26, r24
     8e0:	cb 01       	movw	r24, r22
     8e2:	9e a3       	std	Y+38, r25	; 0x26
     8e4:	8d a3       	std	Y+37, r24	; 0x25
     8e6:	12 c0       	rjmp	.+36     	; 0x90c <CALL_NURSE_HANDLE+0x2f6>
     8e8:	80 e9       	ldi	r24, 0x90	; 144
     8ea:	91 e0       	ldi	r25, 0x01	; 1
     8ec:	98 a7       	std	Y+40, r25	; 0x28
     8ee:	8f a3       	std	Y+39, r24	; 0x27
     8f0:	8f a1       	ldd	r24, Y+39	; 0x27
     8f2:	98 a5       	ldd	r25, Y+40	; 0x28
     8f4:	8c 01       	movw	r16, r24
     8f6:	c8 01       	movw	r24, r16
     8f8:	01 97       	sbiw	r24, 0x01	; 1
     8fa:	f1 f7       	brne	.-4      	; 0x8f8 <CALL_NURSE_HANDLE+0x2e2>
     8fc:	8c 01       	movw	r16, r24
     8fe:	18 a7       	std	Y+40, r17	; 0x28
     900:	0f a3       	std	Y+39, r16	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     902:	8d a1       	ldd	r24, Y+37	; 0x25
     904:	9e a1       	ldd	r25, Y+38	; 0x26
     906:	01 97       	sbiw	r24, 0x01	; 1
     908:	9e a3       	std	Y+38, r25	; 0x26
     90a:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     90c:	8d a1       	ldd	r24, Y+37	; 0x25
     90e:	9e a1       	ldd	r25, Y+38	; 0x26
     910:	00 97       	sbiw	r24, 0x00	; 0
     912:	51 f7       	brne	.-44     	; 0x8e8 <CALL_NURSE_HANDLE+0x2d2>
     914:	16 c0       	rjmp	.+44     	; 0x942 <CALL_NURSE_HANDLE+0x32c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     916:	69 a1       	ldd	r22, Y+33	; 0x21
     918:	7a a1       	ldd	r23, Y+34	; 0x22
     91a:	8b a1       	ldd	r24, Y+35	; 0x23
     91c:	9c a1       	ldd	r25, Y+36	; 0x24
     91e:	ce d7       	rcall	.+3996   	; 0x18bc <__fixunssfsi>
     920:	dc 01       	movw	r26, r24
     922:	cb 01       	movw	r24, r22
     924:	9e a3       	std	Y+38, r25	; 0x26
     926:	8d a3       	std	Y+37, r24	; 0x25
     928:	8d a1       	ldd	r24, Y+37	; 0x25
     92a:	9e a1       	ldd	r25, Y+38	; 0x26
     92c:	9a a7       	std	Y+42, r25	; 0x2a
     92e:	89 a7       	std	Y+41, r24	; 0x29
     930:	89 a5       	ldd	r24, Y+41	; 0x29
     932:	9a a5       	ldd	r25, Y+42	; 0x2a
     934:	8c 01       	movw	r16, r24
     936:	f8 01       	movw	r30, r16
     938:	31 97       	sbiw	r30, 0x01	; 1
     93a:	f1 f7       	brne	.-4      	; 0x938 <CALL_NURSE_HANDLE+0x322>
     93c:	8f 01       	movw	r16, r30
     93e:	1a a7       	std	Y+42, r17	; 0x2a
     940:	09 a7       	std	Y+41, r16	; 0x29
	_delay_ms(500);
	bit_clear(PORTD, BIT(5));
     942:	8b e2       	ldi	r24, 0x2B	; 43
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	2b e2       	ldi	r18, 0x2B	; 43
     948:	30 e0       	ldi	r19, 0x00	; 0
     94a:	f9 01       	movw	r30, r18
     94c:	20 81       	ld	r18, Z
     94e:	2f 7d       	andi	r18, 0xDF	; 223
     950:	fc 01       	movw	r30, r24
     952:	20 83       	st	Z, r18
     954:	80 e0       	ldi	r24, 0x00	; 0
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	aa ef       	ldi	r26, 0xFA	; 250
     95a:	b3 e4       	ldi	r27, 0x43	; 67
     95c:	8b a7       	std	Y+43, r24	; 0x2b
     95e:	9c a7       	std	Y+44, r25	; 0x2c
     960:	ad a7       	std	Y+45, r26	; 0x2d
     962:	be a7       	std	Y+46, r27	; 0x2e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     964:	6b a5       	ldd	r22, Y+43	; 0x2b
     966:	7c a5       	ldd	r23, Y+44	; 0x2c
     968:	8d a5       	ldd	r24, Y+45	; 0x2d
     96a:	9e a5       	ldd	r25, Y+46	; 0x2e
     96c:	20 e0       	ldi	r18, 0x00	; 0
     96e:	30 e0       	ldi	r19, 0x00	; 0
     970:	4a e7       	ldi	r20, 0x7A	; 122
     972:	55 e4       	ldi	r21, 0x45	; 69
     974:	20 d8       	rcall	.-4032   	; 0xfffff9b6 <__eeprom_end+0xff7ef9b6>
     976:	dc 01       	movw	r26, r24
     978:	cb 01       	movw	r24, r22
     97a:	8f a7       	std	Y+47, r24	; 0x2f
     97c:	98 ab       	std	Y+48, r25	; 0x30
     97e:	a9 ab       	std	Y+49, r26	; 0x31
     980:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
     982:	11 e0       	ldi	r17, 0x01	; 1
     984:	6f a5       	ldd	r22, Y+47	; 0x2f
     986:	78 a9       	ldd	r23, Y+48	; 0x30
     988:	89 a9       	ldd	r24, Y+49	; 0x31
     98a:	9a a9       	ldd	r25, Y+50	; 0x32
     98c:	20 e0       	ldi	r18, 0x00	; 0
     98e:	30 e0       	ldi	r19, 0x00	; 0
     990:	40 e8       	ldi	r20, 0x80	; 128
     992:	5f e3       	ldi	r21, 0x3F	; 63
     994:	8f d7       	rcall	.+3870   	; 0x18b4 <__cmpsf2>
     996:	88 23       	and	r24, r24
     998:	0c f0       	brlt	.+2      	; 0x99c <CALL_NURSE_HANDLE+0x386>
     99a:	10 e0       	ldi	r17, 0x00	; 0
     99c:	11 23       	and	r17, r17
     99e:	29 f0       	breq	.+10     	; 0x9aa <CALL_NURSE_HANDLE+0x394>
		__ticks = 1;
     9a0:	81 e0       	ldi	r24, 0x01	; 1
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	9c ab       	std	Y+52, r25	; 0x34
     9a6:	8b ab       	std	Y+51, r24	; 0x33
     9a8:	42 c0       	rjmp	.+132    	; 0xa2e <CALL_NURSE_HANDLE+0x418>
	else if (__tmp > 65535)
     9aa:	11 e0       	ldi	r17, 0x01	; 1
     9ac:	6f a5       	ldd	r22, Y+47	; 0x2f
     9ae:	78 a9       	ldd	r23, Y+48	; 0x30
     9b0:	89 a9       	ldd	r24, Y+49	; 0x31
     9b2:	9a a9       	ldd	r25, Y+50	; 0x32
     9b4:	20 e0       	ldi	r18, 0x00	; 0
     9b6:	3f ef       	ldi	r19, 0xFF	; 255
     9b8:	4f e7       	ldi	r20, 0x7F	; 127
     9ba:	57 e4       	ldi	r21, 0x47	; 71
     9bc:	f8 d7       	rcall	.+4080   	; 0x19ae <__gesf2>
     9be:	18 16       	cp	r1, r24
     9c0:	0c f0       	brlt	.+2      	; 0x9c4 <CALL_NURSE_HANDLE+0x3ae>
     9c2:	10 e0       	ldi	r17, 0x00	; 0
     9c4:	11 23       	and	r17, r17
     9c6:	51 f1       	breq	.+84     	; 0xa1c <CALL_NURSE_HANDLE+0x406>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9c8:	6b a5       	ldd	r22, Y+43	; 0x2b
     9ca:	7c a5       	ldd	r23, Y+44	; 0x2c
     9cc:	8d a5       	ldd	r24, Y+45	; 0x2d
     9ce:	9e a5       	ldd	r25, Y+46	; 0x2e
     9d0:	20 e0       	ldi	r18, 0x00	; 0
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	40 e2       	ldi	r20, 0x20	; 32
     9d6:	51 e4       	ldi	r21, 0x41	; 65
     9d8:	ee d7       	rcall	.+4060   	; 0x19b6 <__mulsf3>
     9da:	dc 01       	movw	r26, r24
     9dc:	cb 01       	movw	r24, r22
     9de:	bc 01       	movw	r22, r24
     9e0:	cd 01       	movw	r24, r26
     9e2:	6c d7       	rcall	.+3800   	; 0x18bc <__fixunssfsi>
     9e4:	dc 01       	movw	r26, r24
     9e6:	cb 01       	movw	r24, r22
     9e8:	9c ab       	std	Y+52, r25	; 0x34
     9ea:	8b ab       	std	Y+51, r24	; 0x33
     9ec:	12 c0       	rjmp	.+36     	; 0xa12 <CALL_NURSE_HANDLE+0x3fc>
     9ee:	80 e9       	ldi	r24, 0x90	; 144
     9f0:	91 e0       	ldi	r25, 0x01	; 1
     9f2:	9e ab       	std	Y+54, r25	; 0x36
     9f4:	8d ab       	std	Y+53, r24	; 0x35
     9f6:	8d a9       	ldd	r24, Y+53	; 0x35
     9f8:	9e a9       	ldd	r25, Y+54	; 0x36
     9fa:	8c 01       	movw	r16, r24
     9fc:	c8 01       	movw	r24, r16
     9fe:	01 97       	sbiw	r24, 0x01	; 1
     a00:	f1 f7       	brne	.-4      	; 0x9fe <CALL_NURSE_HANDLE+0x3e8>
     a02:	8c 01       	movw	r16, r24
     a04:	1e ab       	std	Y+54, r17	; 0x36
     a06:	0d ab       	std	Y+53, r16	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a08:	8b a9       	ldd	r24, Y+51	; 0x33
     a0a:	9c a9       	ldd	r25, Y+52	; 0x34
     a0c:	01 97       	sbiw	r24, 0x01	; 1
     a0e:	9c ab       	std	Y+52, r25	; 0x34
     a10:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a12:	8b a9       	ldd	r24, Y+51	; 0x33
     a14:	9c a9       	ldd	r25, Y+52	; 0x34
     a16:	00 97       	sbiw	r24, 0x00	; 0
     a18:	51 f7       	brne	.-44     	; 0x9ee <CALL_NURSE_HANDLE+0x3d8>
     a1a:	16 c0       	rjmp	.+44     	; 0xa48 <CALL_NURSE_HANDLE+0x432>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a1c:	6f a5       	ldd	r22, Y+47	; 0x2f
     a1e:	78 a9       	ldd	r23, Y+48	; 0x30
     a20:	89 a9       	ldd	r24, Y+49	; 0x31
     a22:	9a a9       	ldd	r25, Y+50	; 0x32
     a24:	4b d7       	rcall	.+3734   	; 0x18bc <__fixunssfsi>
     a26:	dc 01       	movw	r26, r24
     a28:	cb 01       	movw	r24, r22
     a2a:	9c ab       	std	Y+52, r25	; 0x34
     a2c:	8b ab       	std	Y+51, r24	; 0x33
     a2e:	8b a9       	ldd	r24, Y+51	; 0x33
     a30:	9c a9       	ldd	r25, Y+52	; 0x34
     a32:	98 af       	std	Y+56, r25	; 0x38
     a34:	8f ab       	std	Y+55, r24	; 0x37
     a36:	8f a9       	ldd	r24, Y+55	; 0x37
     a38:	98 ad       	ldd	r25, Y+56	; 0x38
     a3a:	8c 01       	movw	r16, r24
     a3c:	f8 01       	movw	r30, r16
     a3e:	31 97       	sbiw	r30, 0x01	; 1
     a40:	f1 f7       	brne	.-4      	; 0xa3e <CALL_NURSE_HANDLE+0x428>
     a42:	8f 01       	movw	r16, r30
     a44:	18 af       	std	Y+56, r17	; 0x38
     a46:	0f ab       	std	Y+55, r16	; 0x37
	_delay_ms(500);
	bit_set(PORTD, BIT(5));
     a48:	8b e2       	ldi	r24, 0x2B	; 43
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	2b e2       	ldi	r18, 0x2B	; 43
     a4e:	30 e0       	ldi	r19, 0x00	; 0
     a50:	f9 01       	movw	r30, r18
     a52:	20 81       	ld	r18, Z
     a54:	20 62       	ori	r18, 0x20	; 32
     a56:	fc 01       	movw	r30, r24
     a58:	20 83       	st	Z, r18
     a5a:	80 e0       	ldi	r24, 0x00	; 0
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	aa ef       	ldi	r26, 0xFA	; 250
     a60:	b3 e4       	ldi	r27, 0x43	; 67
     a62:	89 af       	std	Y+57, r24	; 0x39
     a64:	9a af       	std	Y+58, r25	; 0x3a
     a66:	ab af       	std	Y+59, r26	; 0x3b
     a68:	bc af       	std	Y+60, r27	; 0x3c
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     a6a:	69 ad       	ldd	r22, Y+57	; 0x39
     a6c:	7a ad       	ldd	r23, Y+58	; 0x3a
     a6e:	8b ad       	ldd	r24, Y+59	; 0x3b
     a70:	9c ad       	ldd	r25, Y+60	; 0x3c
     a72:	20 e0       	ldi	r18, 0x00	; 0
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	4a e7       	ldi	r20, 0x7A	; 122
     a78:	55 e4       	ldi	r21, 0x45	; 69
     a7a:	9d d7       	rcall	.+3898   	; 0x19b6 <__mulsf3>
     a7c:	dc 01       	movw	r26, r24
     a7e:	cb 01       	movw	r24, r22
     a80:	9e 01       	movw	r18, r28
     a82:	23 5c       	subi	r18, 0xC3	; 195
     a84:	3f 4f       	sbci	r19, 0xFF	; 255
     a86:	f9 01       	movw	r30, r18
     a88:	80 83       	st	Z, r24
     a8a:	91 83       	std	Z+1, r25	; 0x01
     a8c:	a2 83       	std	Z+2, r26	; 0x02
     a8e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     a90:	11 e0       	ldi	r17, 0x01	; 1
     a92:	ce 01       	movw	r24, r28
     a94:	cd 96       	adiw	r24, 0x3d	; 61
     a96:	fc 01       	movw	r30, r24
     a98:	60 81       	ld	r22, Z
     a9a:	71 81       	ldd	r23, Z+1	; 0x01
     a9c:	82 81       	ldd	r24, Z+2	; 0x02
     a9e:	93 81       	ldd	r25, Z+3	; 0x03
     aa0:	20 e0       	ldi	r18, 0x00	; 0
     aa2:	30 e0       	ldi	r19, 0x00	; 0
     aa4:	40 e8       	ldi	r20, 0x80	; 128
     aa6:	5f e3       	ldi	r21, 0x3F	; 63
     aa8:	05 d7       	rcall	.+3594   	; 0x18b4 <__cmpsf2>
     aaa:	88 23       	and	r24, r24
     aac:	0c f0       	brlt	.+2      	; 0xab0 <CALL_NURSE_HANDLE+0x49a>
     aae:	10 e0       	ldi	r17, 0x00	; 0
     ab0:	11 23       	and	r17, r17
     ab2:	49 f0       	breq	.+18     	; 0xac6 <CALL_NURSE_HANDLE+0x4b0>
		__ticks = 1;
     ab4:	ce 01       	movw	r24, r28
     ab6:	8f 5b       	subi	r24, 0xBF	; 191
     ab8:	9f 4f       	sbci	r25, 0xFF	; 255
     aba:	21 e0       	ldi	r18, 0x01	; 1
     abc:	30 e0       	ldi	r19, 0x00	; 0
     abe:	fc 01       	movw	r30, r24
     ac0:	31 83       	std	Z+1, r19	; 0x01
     ac2:	20 83       	st	Z, r18
     ac4:	6a c0       	rjmp	.+212    	; 0xb9a <CALL_NURSE_HANDLE+0x584>
	else if (__tmp > 65535)
     ac6:	11 e0       	ldi	r17, 0x01	; 1
     ac8:	ce 01       	movw	r24, r28
     aca:	cd 96       	adiw	r24, 0x3d	; 61
     acc:	fc 01       	movw	r30, r24
     ace:	60 81       	ld	r22, Z
     ad0:	71 81       	ldd	r23, Z+1	; 0x01
     ad2:	82 81       	ldd	r24, Z+2	; 0x02
     ad4:	93 81       	ldd	r25, Z+3	; 0x03
     ad6:	20 e0       	ldi	r18, 0x00	; 0
     ad8:	3f ef       	ldi	r19, 0xFF	; 255
     ada:	4f e7       	ldi	r20, 0x7F	; 127
     adc:	57 e4       	ldi	r21, 0x47	; 71
     ade:	67 d7       	rcall	.+3790   	; 0x19ae <__gesf2>
     ae0:	18 16       	cp	r1, r24
     ae2:	0c f0       	brlt	.+2      	; 0xae6 <CALL_NURSE_HANDLE+0x4d0>
     ae4:	10 e0       	ldi	r17, 0x00	; 0
     ae6:	11 23       	and	r17, r17
     ae8:	09 f4       	brne	.+2      	; 0xaec <CALL_NURSE_HANDLE+0x4d6>
     aea:	47 c0       	rjmp	.+142    	; 0xb7a <CALL_NURSE_HANDLE+0x564>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     aec:	69 ad       	ldd	r22, Y+57	; 0x39
     aee:	7a ad       	ldd	r23, Y+58	; 0x3a
     af0:	8b ad       	ldd	r24, Y+59	; 0x3b
     af2:	9c ad       	ldd	r25, Y+60	; 0x3c
     af4:	20 e0       	ldi	r18, 0x00	; 0
     af6:	30 e0       	ldi	r19, 0x00	; 0
     af8:	40 e2       	ldi	r20, 0x20	; 32
     afa:	51 e4       	ldi	r21, 0x41	; 65
     afc:	5c d7       	rcall	.+3768   	; 0x19b6 <__mulsf3>
     afe:	dc 01       	movw	r26, r24
     b00:	cb 01       	movw	r24, r22
     b02:	8e 01       	movw	r16, r28
     b04:	0f 5b       	subi	r16, 0xBF	; 191
     b06:	1f 4f       	sbci	r17, 0xFF	; 255
     b08:	bc 01       	movw	r22, r24
     b0a:	cd 01       	movw	r24, r26
     b0c:	d7 d6       	rcall	.+3502   	; 0x18bc <__fixunssfsi>
     b0e:	dc 01       	movw	r26, r24
     b10:	cb 01       	movw	r24, r22
     b12:	f8 01       	movw	r30, r16
     b14:	91 83       	std	Z+1, r25	; 0x01
     b16:	80 83       	st	Z, r24
     b18:	27 c0       	rjmp	.+78     	; 0xb68 <CALL_NURSE_HANDLE+0x552>
     b1a:	ce 01       	movw	r24, r28
     b1c:	8d 5b       	subi	r24, 0xBD	; 189
     b1e:	9f 4f       	sbci	r25, 0xFF	; 255
     b20:	20 e9       	ldi	r18, 0x90	; 144
     b22:	31 e0       	ldi	r19, 0x01	; 1
     b24:	fc 01       	movw	r30, r24
     b26:	31 83       	std	Z+1, r19	; 0x01
     b28:	20 83       	st	Z, r18
     b2a:	ce 01       	movw	r24, r28
     b2c:	8d 5b       	subi	r24, 0xBD	; 189
     b2e:	9f 4f       	sbci	r25, 0xFF	; 255
     b30:	fc 01       	movw	r30, r24
     b32:	80 81       	ld	r24, Z
     b34:	91 81       	ldd	r25, Z+1	; 0x01
     b36:	8c 01       	movw	r16, r24
     b38:	c8 01       	movw	r24, r16
     b3a:	01 97       	sbiw	r24, 0x01	; 1
     b3c:	f1 f7       	brne	.-4      	; 0xb3a <CALL_NURSE_HANDLE+0x524>
     b3e:	8c 01       	movw	r16, r24
     b40:	ce 01       	movw	r24, r28
     b42:	8d 5b       	subi	r24, 0xBD	; 189
     b44:	9f 4f       	sbci	r25, 0xFF	; 255
     b46:	fc 01       	movw	r30, r24
     b48:	11 83       	std	Z+1, r17	; 0x01
     b4a:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b4c:	ce 01       	movw	r24, r28
     b4e:	8f 5b       	subi	r24, 0xBF	; 191
     b50:	9f 4f       	sbci	r25, 0xFF	; 255
     b52:	9e 01       	movw	r18, r28
     b54:	2f 5b       	subi	r18, 0xBF	; 191
     b56:	3f 4f       	sbci	r19, 0xFF	; 255
     b58:	f9 01       	movw	r30, r18
     b5a:	20 81       	ld	r18, Z
     b5c:	31 81       	ldd	r19, Z+1	; 0x01
     b5e:	21 50       	subi	r18, 0x01	; 1
     b60:	30 40       	sbci	r19, 0x00	; 0
     b62:	fc 01       	movw	r30, r24
     b64:	31 83       	std	Z+1, r19	; 0x01
     b66:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b68:	ce 01       	movw	r24, r28
     b6a:	8f 5b       	subi	r24, 0xBF	; 191
     b6c:	9f 4f       	sbci	r25, 0xFF	; 255
     b6e:	fc 01       	movw	r30, r24
     b70:	80 81       	ld	r24, Z
     b72:	91 81       	ldd	r25, Z+1	; 0x01
     b74:	00 97       	sbiw	r24, 0x00	; 0
     b76:	89 f6       	brne	.-94     	; 0xb1a <CALL_NURSE_HANDLE+0x504>
     b78:	2d c0       	rjmp	.+90     	; 0xbd4 <CALL_NURSE_HANDLE+0x5be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b7a:	8e 01       	movw	r16, r28
     b7c:	0f 5b       	subi	r16, 0xBF	; 191
     b7e:	1f 4f       	sbci	r17, 0xFF	; 255
     b80:	ce 01       	movw	r24, r28
     b82:	cd 96       	adiw	r24, 0x3d	; 61
     b84:	fc 01       	movw	r30, r24
     b86:	60 81       	ld	r22, Z
     b88:	71 81       	ldd	r23, Z+1	; 0x01
     b8a:	82 81       	ldd	r24, Z+2	; 0x02
     b8c:	93 81       	ldd	r25, Z+3	; 0x03
     b8e:	96 d6       	rcall	.+3372   	; 0x18bc <__fixunssfsi>
     b90:	dc 01       	movw	r26, r24
     b92:	cb 01       	movw	r24, r22
     b94:	f8 01       	movw	r30, r16
     b96:	91 83       	std	Z+1, r25	; 0x01
     b98:	80 83       	st	Z, r24
     b9a:	ce 01       	movw	r24, r28
     b9c:	8b 5b       	subi	r24, 0xBB	; 187
     b9e:	9f 4f       	sbci	r25, 0xFF	; 255
     ba0:	9e 01       	movw	r18, r28
     ba2:	2f 5b       	subi	r18, 0xBF	; 191
     ba4:	3f 4f       	sbci	r19, 0xFF	; 255
     ba6:	f9 01       	movw	r30, r18
     ba8:	20 81       	ld	r18, Z
     baa:	31 81       	ldd	r19, Z+1	; 0x01
     bac:	fc 01       	movw	r30, r24
     bae:	31 83       	std	Z+1, r19	; 0x01
     bb0:	20 83       	st	Z, r18
     bb2:	ce 01       	movw	r24, r28
     bb4:	8b 5b       	subi	r24, 0xBB	; 187
     bb6:	9f 4f       	sbci	r25, 0xFF	; 255
     bb8:	fc 01       	movw	r30, r24
     bba:	80 81       	ld	r24, Z
     bbc:	91 81       	ldd	r25, Z+1	; 0x01
     bbe:	8c 01       	movw	r16, r24
     bc0:	c8 01       	movw	r24, r16
     bc2:	01 97       	sbiw	r24, 0x01	; 1
     bc4:	f1 f7       	brne	.-4      	; 0xbc2 <CALL_NURSE_HANDLE+0x5ac>
     bc6:	8c 01       	movw	r16, r24
     bc8:	ce 01       	movw	r24, r28
     bca:	8b 5b       	subi	r24, 0xBB	; 187
     bcc:	9f 4f       	sbci	r25, 0xFF	; 255
     bce:	fc 01       	movw	r30, r24
     bd0:	11 83       	std	Z+1, r17	; 0x01
     bd2:	00 83       	st	Z, r16
	_delay_ms(500);
	bit_clear(PORTD, BIT(5));
     bd4:	8b e2       	ldi	r24, 0x2B	; 43
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	2b e2       	ldi	r18, 0x2B	; 43
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	f9 01       	movw	r30, r18
     bde:	20 81       	ld	r18, Z
     be0:	2f 7d       	andi	r18, 0xDF	; 223
     be2:	fc 01       	movw	r30, r24
     be4:	20 83       	st	Z, r18
}
     be6:	ca 5b       	subi	r28, 0xBA	; 186
     be8:	df 4f       	sbci	r29, 0xFF	; 255
     bea:	0f b6       	in	r0, 0x3f	; 63
     bec:	f8 94       	cli
     bee:	de bf       	out	0x3e, r29	; 62
     bf0:	0f be       	out	0x3f, r0	; 63
     bf2:	cd bf       	out	0x3d, r28	; 61
     bf4:	cf 91       	pop	r28
     bf6:	df 91       	pop	r29
     bf8:	1f 91       	pop	r17
     bfa:	0f 91       	pop	r16
     bfc:	08 95       	ret

00000bfe <main>:
bool initRF();
void initIO();
void faultyRF_Alarm();

int main(void)
{
     bfe:	0f 93       	push	r16
     c00:	1f 93       	push	r17
     c02:	df 93       	push	r29
     c04:	cf 93       	push	r28
     c06:	cd b7       	in	r28, 0x3d	; 61
     c08:	de b7       	in	r29, 0x3e	; 62
     c0a:	64 97       	sbiw	r28, 0x14	; 20
     c0c:	0f b6       	in	r0, 0x3f	; 63
     c0e:	f8 94       	cli
     c10:	de bf       	out	0x3e, r29	; 62
     c12:	0f be       	out	0x3f, r0	; 63
     c14:	cd bf       	out	0x3d, r28	; 61
	initIO();
     c16:	c4 d0       	rcall	.+392    	; 0xda0 <initIO>
	initRF();
     c18:	e5 d0       	rcall	.+458    	; 0xde4 <initRF>
     c1a:	01 c0       	rjmp	.+2      	; 0xc1e <main+0x20>
			if (success) { currentCommand.handlerFunction(); }
			bit_clear(PORTD, BIT(7));
		}
		
		if (nrf24_checkAvailability()==false) { while(initRF()==false); } 
	}
     c1c:	00 00       	nop
	initIO();
	initRF();
	
	while (1)
	{
		if(nrf24_dataReady())
     c1e:	ee d2       	rcall	.+1500   	; 0x11fc <nrf24_dataReady>
     c20:	88 23       	and	r24, r24
     c22:	09 f4       	brne	.+2      	; 0xc26 <main+0x28>
     c24:	ae c0       	rjmp	.+348    	; 0xd82 <main+0x184>
		{
			bit_clear(PORTB, BIT(0));
     c26:	85 e2       	ldi	r24, 0x25	; 37
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	25 e2       	ldi	r18, 0x25	; 37
     c2c:	30 e0       	ldi	r19, 0x00	; 0
     c2e:	f9 01       	movw	r30, r18
     c30:	20 81       	ld	r18, Z
     c32:	2e 7f       	andi	r18, 0xFE	; 254
     c34:	fc 01       	movw	r30, r24
     c36:	20 83       	st	Z, r18

			nrf24_getData(command_buffer);
     c38:	80 91 96 01 	lds	r24, 0x0196
     c3c:	90 91 97 01 	lds	r25, 0x0197
     c40:	09 d3       	rcall	.+1554   	; 0x1254 <nrf24_getData>
			
			bit_set(PORTD, BIT(7));
     c42:	8b e2       	ldi	r24, 0x2B	; 43
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	2b e2       	ldi	r18, 0x2B	; 43
     c48:	30 e0       	ldi	r19, 0x00	; 0
     c4a:	f9 01       	movw	r30, r18
     c4c:	20 81       	ld	r18, Z
     c4e:	20 68       	ori	r18, 0x80	; 128
     c50:	fc 01       	movw	r30, r24
     c52:	20 83       	st	Z, r18
     c54:	80 e0       	ldi	r24, 0x00	; 0
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	aa ef       	ldi	r26, 0xFA	; 250
     c5a:	b3 e4       	ldi	r27, 0x43	; 67
     c5c:	8a 83       	std	Y+2, r24	; 0x02
     c5e:	9b 83       	std	Y+3, r25	; 0x03
     c60:	ac 83       	std	Y+4, r26	; 0x04
     c62:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     c64:	6a 81       	ldd	r22, Y+2	; 0x02
     c66:	7b 81       	ldd	r23, Y+3	; 0x03
     c68:	8c 81       	ldd	r24, Y+4	; 0x04
     c6a:	9d 81       	ldd	r25, Y+5	; 0x05
     c6c:	20 e0       	ldi	r18, 0x00	; 0
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	4a e7       	ldi	r20, 0x7A	; 122
     c72:	55 e4       	ldi	r21, 0x45	; 69
     c74:	a0 d6       	rcall	.+3392   	; 0x19b6 <__mulsf3>
     c76:	dc 01       	movw	r26, r24
     c78:	cb 01       	movw	r24, r22
     c7a:	8e 83       	std	Y+6, r24	; 0x06
     c7c:	9f 83       	std	Y+7, r25	; 0x07
     c7e:	a8 87       	std	Y+8, r26	; 0x08
     c80:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     c82:	11 e0       	ldi	r17, 0x01	; 1
     c84:	6e 81       	ldd	r22, Y+6	; 0x06
     c86:	7f 81       	ldd	r23, Y+7	; 0x07
     c88:	88 85       	ldd	r24, Y+8	; 0x08
     c8a:	99 85       	ldd	r25, Y+9	; 0x09
     c8c:	20 e0       	ldi	r18, 0x00	; 0
     c8e:	30 e0       	ldi	r19, 0x00	; 0
     c90:	40 e8       	ldi	r20, 0x80	; 128
     c92:	5f e3       	ldi	r21, 0x3F	; 63
     c94:	0f d6       	rcall	.+3102   	; 0x18b4 <__cmpsf2>
     c96:	88 23       	and	r24, r24
     c98:	0c f0       	brlt	.+2      	; 0xc9c <main+0x9e>
     c9a:	10 e0       	ldi	r17, 0x00	; 0
     c9c:	11 23       	and	r17, r17
     c9e:	29 f0       	breq	.+10     	; 0xcaa <main+0xac>
		__ticks = 1;
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	9b 87       	std	Y+11, r25	; 0x0b
     ca6:	8a 87       	std	Y+10, r24	; 0x0a
     ca8:	42 c0       	rjmp	.+132    	; 0xd2e <main+0x130>
	else if (__tmp > 65535)
     caa:	11 e0       	ldi	r17, 0x01	; 1
     cac:	6e 81       	ldd	r22, Y+6	; 0x06
     cae:	7f 81       	ldd	r23, Y+7	; 0x07
     cb0:	88 85       	ldd	r24, Y+8	; 0x08
     cb2:	99 85       	ldd	r25, Y+9	; 0x09
     cb4:	20 e0       	ldi	r18, 0x00	; 0
     cb6:	3f ef       	ldi	r19, 0xFF	; 255
     cb8:	4f e7       	ldi	r20, 0x7F	; 127
     cba:	57 e4       	ldi	r21, 0x47	; 71
     cbc:	78 d6       	rcall	.+3312   	; 0x19ae <__gesf2>
     cbe:	18 16       	cp	r1, r24
     cc0:	0c f0       	brlt	.+2      	; 0xcc4 <main+0xc6>
     cc2:	10 e0       	ldi	r17, 0x00	; 0
     cc4:	11 23       	and	r17, r17
     cc6:	51 f1       	breq	.+84     	; 0xd1c <main+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cc8:	6a 81       	ldd	r22, Y+2	; 0x02
     cca:	7b 81       	ldd	r23, Y+3	; 0x03
     ccc:	8c 81       	ldd	r24, Y+4	; 0x04
     cce:	9d 81       	ldd	r25, Y+5	; 0x05
     cd0:	20 e0       	ldi	r18, 0x00	; 0
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	40 e2       	ldi	r20, 0x20	; 32
     cd6:	51 e4       	ldi	r21, 0x41	; 65
     cd8:	6e d6       	rcall	.+3292   	; 0x19b6 <__mulsf3>
     cda:	dc 01       	movw	r26, r24
     cdc:	cb 01       	movw	r24, r22
     cde:	bc 01       	movw	r22, r24
     ce0:	cd 01       	movw	r24, r26
     ce2:	ec d5       	rcall	.+3032   	; 0x18bc <__fixunssfsi>
     ce4:	dc 01       	movw	r26, r24
     ce6:	cb 01       	movw	r24, r22
     ce8:	9b 87       	std	Y+11, r25	; 0x0b
     cea:	8a 87       	std	Y+10, r24	; 0x0a
     cec:	12 c0       	rjmp	.+36     	; 0xd12 <main+0x114>
     cee:	80 e9       	ldi	r24, 0x90	; 144
     cf0:	91 e0       	ldi	r25, 0x01	; 1
     cf2:	9d 87       	std	Y+13, r25	; 0x0d
     cf4:	8c 87       	std	Y+12, r24	; 0x0c
     cf6:	8c 85       	ldd	r24, Y+12	; 0x0c
     cf8:	9d 85       	ldd	r25, Y+13	; 0x0d
     cfa:	8c 01       	movw	r16, r24
     cfc:	c8 01       	movw	r24, r16
     cfe:	01 97       	sbiw	r24, 0x01	; 1
     d00:	f1 f7       	brne	.-4      	; 0xcfe <main+0x100>
     d02:	8c 01       	movw	r16, r24
     d04:	1d 87       	std	Y+13, r17	; 0x0d
     d06:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d08:	8a 85       	ldd	r24, Y+10	; 0x0a
     d0a:	9b 85       	ldd	r25, Y+11	; 0x0b
     d0c:	01 97       	sbiw	r24, 0x01	; 1
     d0e:	9b 87       	std	Y+11, r25	; 0x0b
     d10:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d12:	8a 85       	ldd	r24, Y+10	; 0x0a
     d14:	9b 85       	ldd	r25, Y+11	; 0x0b
     d16:	00 97       	sbiw	r24, 0x00	; 0
     d18:	51 f7       	brne	.-44     	; 0xcee <main+0xf0>
     d1a:	16 c0       	rjmp	.+44     	; 0xd48 <main+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d1c:	6e 81       	ldd	r22, Y+6	; 0x06
     d1e:	7f 81       	ldd	r23, Y+7	; 0x07
     d20:	88 85       	ldd	r24, Y+8	; 0x08
     d22:	99 85       	ldd	r25, Y+9	; 0x09
     d24:	cb d5       	rcall	.+2966   	; 0x18bc <__fixunssfsi>
     d26:	dc 01       	movw	r26, r24
     d28:	cb 01       	movw	r24, r22
     d2a:	9b 87       	std	Y+11, r25	; 0x0b
     d2c:	8a 87       	std	Y+10, r24	; 0x0a
     d2e:	8a 85       	ldd	r24, Y+10	; 0x0a
     d30:	9b 85       	ldd	r25, Y+11	; 0x0b
     d32:	9f 87       	std	Y+15, r25	; 0x0f
     d34:	8e 87       	std	Y+14, r24	; 0x0e
     d36:	8e 85       	ldd	r24, Y+14	; 0x0e
     d38:	9f 85       	ldd	r25, Y+15	; 0x0f
     d3a:	8c 01       	movw	r16, r24
     d3c:	f8 01       	movw	r30, r16
     d3e:	31 97       	sbiw	r30, 0x01	; 1
     d40:	f1 f7       	brne	.-4      	; 0xd3e <main+0x140>
     d42:	8f 01       	movw	r16, r30
     d44:	1f 87       	std	Y+15, r17	; 0x0f
     d46:	0e 87       	std	Y+14, r16	; 0x0e
			_delay_ms(500);
			commandType currentCommand;
			bool success = decomposeCommand(command_buffer, &currentCommand, parameter);
     d48:	80 91 96 01 	lds	r24, 0x0196
     d4c:	90 91 97 01 	lds	r25, 0x0197
     d50:	ae 01       	movw	r20, r28
     d52:	40 5f       	subi	r20, 0xF0	; 240
     d54:	5f 4f       	sbci	r21, 0xFF	; 255
     d56:	20 e9       	ldi	r18, 0x90	; 144
     d58:	31 e0       	ldi	r19, 0x01	; 1
     d5a:	ba 01       	movw	r22, r20
     d5c:	a9 01       	movw	r20, r18
     d5e:	d5 d9       	rcall	.-3158   	; 0x10a <decomposeCommand>
     d60:	89 83       	std	Y+1, r24	; 0x01
			if (success) { currentCommand.handlerFunction(); }
     d62:	89 81       	ldd	r24, Y+1	; 0x01
     d64:	88 23       	and	r24, r24
     d66:	21 f0       	breq	.+8      	; 0xd70 <main+0x172>
     d68:	8b 89       	ldd	r24, Y+19	; 0x13
     d6a:	9c 89       	ldd	r25, Y+20	; 0x14
     d6c:	fc 01       	movw	r30, r24
     d6e:	09 95       	icall
			bit_clear(PORTD, BIT(7));
     d70:	8b e2       	ldi	r24, 0x2B	; 43
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	2b e2       	ldi	r18, 0x2B	; 43
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	f9 01       	movw	r30, r18
     d7a:	20 81       	ld	r18, Z
     d7c:	2f 77       	andi	r18, 0x7F	; 127
     d7e:	fc 01       	movw	r30, r24
     d80:	20 83       	st	Z, r18
		}
		
		if (nrf24_checkAvailability()==false) { while(initRF()==false); } 
     d82:	fc d1       	rcall	.+1016   	; 0x117c <nrf24_checkAvailability>
     d84:	98 2f       	mov	r25, r24
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	89 27       	eor	r24, r25
     d8a:	88 23       	and	r24, r24
     d8c:	09 f4       	brne	.+2      	; 0xd90 <main+0x192>
     d8e:	46 cf       	rjmp	.-372    	; 0xc1c <main+0x1e>
     d90:	00 00       	nop
     d92:	28 d0       	rcall	.+80     	; 0xde4 <initRF>
     d94:	98 2f       	mov	r25, r24
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	89 27       	eor	r24, r25
     d9a:	88 23       	and	r24, r24
     d9c:	d1 f7       	brne	.-12     	; 0xd92 <main+0x194>
	}
     d9e:	3f cf       	rjmp	.-386    	; 0xc1e <main+0x20>

00000da0 <initIO>:
}

void initIO(){
     da0:	df 93       	push	r29
     da2:	cf 93       	push	r28
     da4:	cd b7       	in	r28, 0x3d	; 61
     da6:	de b7       	in	r29, 0x3e	; 62
			CSN	 : PC1						|	OUTPUT
			MISO : PD0 (MSPIM MISO ATMEGA)	|	INPUT
			MOSI : PD1 (MSPIM MOSI ATMEGA)	|	OUTPUT
			SCK	 : PD4 (MSPIM XCK)			|	OUTPUT
	*/ 
	DDRD = 0b11111110;
     da8:	8a e2       	ldi	r24, 0x2A	; 42
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	2e ef       	ldi	r18, 0xFE	; 254
     dae:	fc 01       	movw	r30, r24
     db0:	20 83       	st	Z, r18
	DDRB = 0b00101001;
     db2:	84 e2       	ldi	r24, 0x24	; 36
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	29 e2       	ldi	r18, 0x29	; 41
     db8:	fc 01       	movw	r30, r24
     dba:	20 83       	st	Z, r18
	DDRC = 0b11011111;
     dbc:	87 e2       	ldi	r24, 0x27	; 39
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	2f ed       	ldi	r18, 0xDF	; 223
     dc2:	fc 01       	movw	r30, r24
     dc4:	20 83       	st	Z, r18
	
	PORTD = 0b00000000;
     dc6:	8b e2       	ldi	r24, 0x2B	; 43
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	fc 01       	movw	r30, r24
     dcc:	10 82       	st	Z, r1
	PORTC = 0b00000000;
     dce:	88 e2       	ldi	r24, 0x28	; 40
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	fc 01       	movw	r30, r24
     dd4:	10 82       	st	Z, r1
	PORTB = 0b00000000;
     dd6:	85 e2       	ldi	r24, 0x25	; 37
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	fc 01       	movw	r30, r24
     ddc:	10 82       	st	Z, r1
}
     dde:	cf 91       	pop	r28
     de0:	df 91       	pop	r29
     de2:	08 95       	ret

00000de4 <initRF>:

bool initRF(){
     de4:	df 93       	push	r29
     de6:	cf 93       	push	r28
     de8:	cd b7       	in	r28, 0x3d	; 61
     dea:	de b7       	in	r29, 0x3e	; 62
     dec:	2a 97       	sbiw	r28, 0x0a	; 10
     dee:	0f b6       	in	r0, 0x3f	; 63
     df0:	f8 94       	cli
     df2:	de bf       	out	0x3e, r29	; 62
     df4:	0f be       	out	0x3f, r0	; 63
     df6:	cd bf       	out	0x3d, r28	; 61
	uint8_t tx_address[5] = {0xD7,0xD7,0xD7,0xD7,0xD7};
     df8:	ce 01       	movw	r24, r28
     dfa:	01 96       	adiw	r24, 0x01	; 1
     dfc:	25 e8       	ldi	r18, 0x85	; 133
     dfe:	31 e0       	ldi	r19, 0x01	; 1
     e00:	45 e0       	ldi	r20, 0x05	; 5
     e02:	f9 01       	movw	r30, r18
     e04:	00 80       	ld	r0, Z
     e06:	2f 5f       	subi	r18, 0xFF	; 255
     e08:	3f 4f       	sbci	r19, 0xFF	; 255
     e0a:	fc 01       	movw	r30, r24
     e0c:	00 82       	st	Z, r0
     e0e:	01 96       	adiw	r24, 0x01	; 1
     e10:	41 50       	subi	r20, 0x01	; 1
     e12:	44 23       	and	r20, r20
     e14:	b1 f7       	brne	.-20     	; 0xe02 <initRF+0x1e>
	uint8_t rx_address[5] = {0xE7,0xE7,0xE7,0xE7,0xE7};
     e16:	ce 01       	movw	r24, r28
     e18:	06 96       	adiw	r24, 0x06	; 6
     e1a:	2a e8       	ldi	r18, 0x8A	; 138
     e1c:	31 e0       	ldi	r19, 0x01	; 1
     e1e:	45 e0       	ldi	r20, 0x05	; 5
     e20:	f9 01       	movw	r30, r18
     e22:	00 80       	ld	r0, Z
     e24:	2f 5f       	subi	r18, 0xFF	; 255
     e26:	3f 4f       	sbci	r19, 0xFF	; 255
     e28:	fc 01       	movw	r30, r24
     e2a:	00 82       	st	Z, r0
     e2c:	01 96       	adiw	r24, 0x01	; 1
     e2e:	41 50       	subi	r20, 0x01	; 1
     e30:	44 23       	and	r20, r20
     e32:	b1 f7       	brne	.-20     	; 0xe20 <initRF+0x3c>

	initliazeMemory();	
     e34:	1b d9       	rcall	.-3530   	; 0x6c <initliazeMemory>
	
	/* Power down module */
	nrf24_powerDown();
     e36:	dd d2       	rcall	.+1466   	; 0x13f2 <nrf24_powerDown>
	
	nrf24_init();
     e38:	ca d0       	rcall	.+404    	; 0xfce <nrf24_init>
		
	/* Channel #112 , payload length: 32 */
	nrf24_config(112,32);
     e3a:	80 e7       	ldi	r24, 0x70	; 112
     e3c:	60 e2       	ldi	r22, 0x20	; 32
     e3e:	d3 d0       	rcall	.+422    	; 0xfe6 <nrf24_config>

	/* Check module configuration */
	if (nrf24_checkConfig()==false) { faultyRF_Alarm(); return false; }
     e40:	0d d1       	rcall	.+538    	; 0x105c <nrf24_checkConfig>
     e42:	98 2f       	mov	r25, r24
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	89 27       	eor	r24, r25
     e48:	88 23       	and	r24, r24
     e4a:	19 f0       	breq	.+6      	; 0xe52 <initRF+0x6e>
     e4c:	13 d0       	rcall	.+38     	; 0xe74 <faultyRF_Alarm>
     e4e:	80 e0       	ldi	r24, 0x00	; 0
     e50:	08 c0       	rjmp	.+16     	; 0xe62 <initRF+0x7e>
		
	/* Set the device addresses */
	nrf24_tx_address(tx_address);
     e52:	ce 01       	movw	r24, r28
     e54:	01 96       	adiw	r24, 0x01	; 1
     e56:	ba d1       	rcall	.+884    	; 0x11cc <nrf24_tx_address>
	nrf24_rx_address(rx_address);
     e58:	ce 01       	movw	r24, r28
     e5a:	06 96       	adiw	r24, 0x06	; 6
     e5c:	a1 d1       	rcall	.+834    	; 0x11a0 <nrf24_rx_address>
	
	/* Power up in receive mode */
	nrf24_powerUpRx();
     e5e:	28 d2       	rcall	.+1104   	; 0x12b0 <nrf24_powerUpRx>

	return true;
     e60:	81 e0       	ldi	r24, 0x01	; 1
}
     e62:	2a 96       	adiw	r28, 0x0a	; 10
     e64:	0f b6       	in	r0, 0x3f	; 63
     e66:	f8 94       	cli
     e68:	de bf       	out	0x3e, r29	; 62
     e6a:	0f be       	out	0x3f, r0	; 63
     e6c:	cd bf       	out	0x3d, r28	; 61
     e6e:	cf 91       	pop	r28
     e70:	df 91       	pop	r29
     e72:	08 95       	ret

00000e74 <faultyRF_Alarm>:

void faultyRF_Alarm(){
     e74:	0f 93       	push	r16
     e76:	1f 93       	push	r17
     e78:	df 93       	push	r29
     e7a:	cf 93       	push	r28
     e7c:	cd b7       	in	r28, 0x3d	; 61
     e7e:	de b7       	in	r29, 0x3e	; 62
     e80:	2f 97       	sbiw	r28, 0x0f	; 15
     e82:	0f b6       	in	r0, 0x3f	; 63
     e84:	f8 94       	cli
     e86:	de bf       	out	0x3e, r29	; 62
     e88:	0f be       	out	0x3f, r0	; 63
     e8a:	cd bf       	out	0x3d, r28	; 61
	bit_clear(PORTD, BIT(7));
     e8c:	8b e2       	ldi	r24, 0x2B	; 43
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	2b e2       	ldi	r18, 0x2B	; 43
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	f9 01       	movw	r30, r18
     e96:	20 81       	ld	r18, Z
     e98:	2f 77       	andi	r18, 0x7F	; 127
     e9a:	fc 01       	movw	r30, r24
     e9c:	20 83       	st	Z, r18
	for (uint8_t x = 0; x < 6; x++)
     e9e:	19 82       	std	Y+1, r1	; 0x01
     ea0:	87 c0       	rjmp	.+270    	; 0xfb0 <faultyRF_Alarm+0x13c>
	{
		bit_flip(PORTD, BIT(7));
     ea2:	8b e2       	ldi	r24, 0x2B	; 43
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	2b e2       	ldi	r18, 0x2B	; 43
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	f9 01       	movw	r30, r18
     eac:	30 81       	ld	r19, Z
     eae:	20 e8       	ldi	r18, 0x80	; 128
     eb0:	23 27       	eor	r18, r19
     eb2:	fc 01       	movw	r30, r24
     eb4:	20 83       	st	Z, r18
     eb6:	80 e0       	ldi	r24, 0x00	; 0
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	aa ef       	ldi	r26, 0xFA	; 250
     ebc:	b2 e4       	ldi	r27, 0x42	; 66
     ebe:	8a 83       	std	Y+2, r24	; 0x02
     ec0:	9b 83       	std	Y+3, r25	; 0x03
     ec2:	ac 83       	std	Y+4, r26	; 0x04
     ec4:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     ec6:	6a 81       	ldd	r22, Y+2	; 0x02
     ec8:	7b 81       	ldd	r23, Y+3	; 0x03
     eca:	8c 81       	ldd	r24, Y+4	; 0x04
     ecc:	9d 81       	ldd	r25, Y+5	; 0x05
     ece:	20 e0       	ldi	r18, 0x00	; 0
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	4a e7       	ldi	r20, 0x7A	; 122
     ed4:	55 e4       	ldi	r21, 0x45	; 69
     ed6:	6f d5       	rcall	.+2782   	; 0x19b6 <__mulsf3>
     ed8:	dc 01       	movw	r26, r24
     eda:	cb 01       	movw	r24, r22
     edc:	8e 83       	std	Y+6, r24	; 0x06
     ede:	9f 83       	std	Y+7, r25	; 0x07
     ee0:	a8 87       	std	Y+8, r26	; 0x08
     ee2:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     ee4:	11 e0       	ldi	r17, 0x01	; 1
     ee6:	6e 81       	ldd	r22, Y+6	; 0x06
     ee8:	7f 81       	ldd	r23, Y+7	; 0x07
     eea:	88 85       	ldd	r24, Y+8	; 0x08
     eec:	99 85       	ldd	r25, Y+9	; 0x09
     eee:	20 e0       	ldi	r18, 0x00	; 0
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	40 e8       	ldi	r20, 0x80	; 128
     ef4:	5f e3       	ldi	r21, 0x3F	; 63
     ef6:	de d4       	rcall	.+2492   	; 0x18b4 <__cmpsf2>
     ef8:	88 23       	and	r24, r24
     efa:	0c f0       	brlt	.+2      	; 0xefe <faultyRF_Alarm+0x8a>
     efc:	10 e0       	ldi	r17, 0x00	; 0
     efe:	11 23       	and	r17, r17
     f00:	29 f0       	breq	.+10     	; 0xf0c <faultyRF_Alarm+0x98>
		__ticks = 1;
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	9b 87       	std	Y+11, r25	; 0x0b
     f08:	8a 87       	std	Y+10, r24	; 0x0a
     f0a:	42 c0       	rjmp	.+132    	; 0xf90 <faultyRF_Alarm+0x11c>
	else if (__tmp > 65535)
     f0c:	11 e0       	ldi	r17, 0x01	; 1
     f0e:	6e 81       	ldd	r22, Y+6	; 0x06
     f10:	7f 81       	ldd	r23, Y+7	; 0x07
     f12:	88 85       	ldd	r24, Y+8	; 0x08
     f14:	99 85       	ldd	r25, Y+9	; 0x09
     f16:	20 e0       	ldi	r18, 0x00	; 0
     f18:	3f ef       	ldi	r19, 0xFF	; 255
     f1a:	4f e7       	ldi	r20, 0x7F	; 127
     f1c:	57 e4       	ldi	r21, 0x47	; 71
     f1e:	47 d5       	rcall	.+2702   	; 0x19ae <__gesf2>
     f20:	18 16       	cp	r1, r24
     f22:	0c f0       	brlt	.+2      	; 0xf26 <faultyRF_Alarm+0xb2>
     f24:	10 e0       	ldi	r17, 0x00	; 0
     f26:	11 23       	and	r17, r17
     f28:	51 f1       	breq	.+84     	; 0xf7e <faultyRF_Alarm+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f2a:	6a 81       	ldd	r22, Y+2	; 0x02
     f2c:	7b 81       	ldd	r23, Y+3	; 0x03
     f2e:	8c 81       	ldd	r24, Y+4	; 0x04
     f30:	9d 81       	ldd	r25, Y+5	; 0x05
     f32:	20 e0       	ldi	r18, 0x00	; 0
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	40 e2       	ldi	r20, 0x20	; 32
     f38:	51 e4       	ldi	r21, 0x41	; 65
     f3a:	3d d5       	rcall	.+2682   	; 0x19b6 <__mulsf3>
     f3c:	dc 01       	movw	r26, r24
     f3e:	cb 01       	movw	r24, r22
     f40:	bc 01       	movw	r22, r24
     f42:	cd 01       	movw	r24, r26
     f44:	bb d4       	rcall	.+2422   	; 0x18bc <__fixunssfsi>
     f46:	dc 01       	movw	r26, r24
     f48:	cb 01       	movw	r24, r22
     f4a:	9b 87       	std	Y+11, r25	; 0x0b
     f4c:	8a 87       	std	Y+10, r24	; 0x0a
     f4e:	12 c0       	rjmp	.+36     	; 0xf74 <faultyRF_Alarm+0x100>
     f50:	80 e9       	ldi	r24, 0x90	; 144
     f52:	91 e0       	ldi	r25, 0x01	; 1
     f54:	9d 87       	std	Y+13, r25	; 0x0d
     f56:	8c 87       	std	Y+12, r24	; 0x0c
     f58:	8c 85       	ldd	r24, Y+12	; 0x0c
     f5a:	9d 85       	ldd	r25, Y+13	; 0x0d
     f5c:	8c 01       	movw	r16, r24
     f5e:	c8 01       	movw	r24, r16
     f60:	01 97       	sbiw	r24, 0x01	; 1
     f62:	f1 f7       	brne	.-4      	; 0xf60 <faultyRF_Alarm+0xec>
     f64:	8c 01       	movw	r16, r24
     f66:	1d 87       	std	Y+13, r17	; 0x0d
     f68:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f6a:	8a 85       	ldd	r24, Y+10	; 0x0a
     f6c:	9b 85       	ldd	r25, Y+11	; 0x0b
     f6e:	01 97       	sbiw	r24, 0x01	; 1
     f70:	9b 87       	std	Y+11, r25	; 0x0b
     f72:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f74:	8a 85       	ldd	r24, Y+10	; 0x0a
     f76:	9b 85       	ldd	r25, Y+11	; 0x0b
     f78:	00 97       	sbiw	r24, 0x00	; 0
     f7a:	51 f7       	brne	.-44     	; 0xf50 <faultyRF_Alarm+0xdc>
     f7c:	16 c0       	rjmp	.+44     	; 0xfaa <faultyRF_Alarm+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f7e:	6e 81       	ldd	r22, Y+6	; 0x06
     f80:	7f 81       	ldd	r23, Y+7	; 0x07
     f82:	88 85       	ldd	r24, Y+8	; 0x08
     f84:	99 85       	ldd	r25, Y+9	; 0x09
     f86:	9a d4       	rcall	.+2356   	; 0x18bc <__fixunssfsi>
     f88:	dc 01       	movw	r26, r24
     f8a:	cb 01       	movw	r24, r22
     f8c:	9b 87       	std	Y+11, r25	; 0x0b
     f8e:	8a 87       	std	Y+10, r24	; 0x0a
     f90:	8a 85       	ldd	r24, Y+10	; 0x0a
     f92:	9b 85       	ldd	r25, Y+11	; 0x0b
     f94:	9f 87       	std	Y+15, r25	; 0x0f
     f96:	8e 87       	std	Y+14, r24	; 0x0e
     f98:	8e 85       	ldd	r24, Y+14	; 0x0e
     f9a:	9f 85       	ldd	r25, Y+15	; 0x0f
     f9c:	8c 01       	movw	r16, r24
     f9e:	f8 01       	movw	r30, r16
     fa0:	31 97       	sbiw	r30, 0x01	; 1
     fa2:	f1 f7       	brne	.-4      	; 0xfa0 <faultyRF_Alarm+0x12c>
     fa4:	8f 01       	movw	r16, r30
     fa6:	1f 87       	std	Y+15, r17	; 0x0f
     fa8:	0e 87       	std	Y+14, r16	; 0x0e
	return true;
}

void faultyRF_Alarm(){
	bit_clear(PORTD, BIT(7));
	for (uint8_t x = 0; x < 6; x++)
     faa:	89 81       	ldd	r24, Y+1	; 0x01
     fac:	8f 5f       	subi	r24, 0xFF	; 255
     fae:	89 83       	std	Y+1, r24	; 0x01
     fb0:	89 81       	ldd	r24, Y+1	; 0x01
     fb2:	86 30       	cpi	r24, 0x06	; 6
     fb4:	08 f4       	brcc	.+2      	; 0xfb8 <faultyRF_Alarm+0x144>
     fb6:	75 cf       	rjmp	.-278    	; 0xea2 <faultyRF_Alarm+0x2e>
	{
		bit_flip(PORTD, BIT(7));
		_delay_ms(125);
		
	}
}
     fb8:	2f 96       	adiw	r28, 0x0f	; 15
     fba:	0f b6       	in	r0, 0x3f	; 63
     fbc:	f8 94       	cli
     fbe:	de bf       	out	0x3e, r29	; 62
     fc0:	0f be       	out	0x3f, r0	; 63
     fc2:	cd bf       	out	0x3d, r28	; 61
     fc4:	cf 91       	pop	r28
     fc6:	df 91       	pop	r29
     fc8:	1f 91       	pop	r17
     fca:	0f 91       	pop	r16
     fcc:	08 95       	ret

00000fce <nrf24_init>:

uint8_t payload_len;
uint8_t selectedChannel;

void nrf24_init()
{
     fce:	df 93       	push	r29
     fd0:	cf 93       	push	r28
     fd2:	cd b7       	in	r28, 0x3d	; 61
     fd4:	de b7       	in	r29, 0x3e	; 62
	nrf24_setupPins();
     fd6:	ae d3       	rcall	.+1884   	; 0x1734 <nrf24_setupPins>
	nrf24_ce_digitalWrite(LOW);
     fd8:	80 e0       	ldi	r24, 0x00	; 0
     fda:	e0 d3       	rcall	.+1984   	; 0x179c <nrf24_ce_digitalWrite>
	nrf24_csn_digitalWrite(HIGH);
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	fe d3       	rcall	.+2044   	; 0x17dc <nrf24_csn_digitalWrite>
}
     fe0:	cf 91       	pop	r28
     fe2:	df 91       	pop	r29
     fe4:	08 95       	ret

00000fe6 <nrf24_config>:

void nrf24_config(uint8_t channel, uint8_t pay_length)
{
     fe6:	df 93       	push	r29
     fe8:	cf 93       	push	r28
     fea:	00 d0       	rcall	.+0      	; 0xfec <nrf24_config+0x6>
     fec:	cd b7       	in	r28, 0x3d	; 61
     fee:	de b7       	in	r29, 0x3e	; 62
     ff0:	89 83       	std	Y+1, r24	; 0x01
     ff2:	6a 83       	std	Y+2, r22	; 0x02
	/* Use static payload length ... */
	payload_len = pay_length;
     ff4:	8a 81       	ldd	r24, Y+2	; 0x02
     ff6:	80 93 99 01 	sts	0x0199, r24
	selectedChannel = channel;
     ffa:	89 81       	ldd	r24, Y+1	; 0x01
     ffc:	80 93 9a 01 	sts	0x019A, r24
	// Set RF channel
	nrf24_configRegister(RF_CH,channel);
    1000:	85 e0       	ldi	r24, 0x05	; 5
    1002:	69 81       	ldd	r22, Y+1	; 0x01
    1004:	27 d3       	rcall	.+1614   	; 0x1654 <nrf24_configRegister>
	// Set length of incoming payload
	nrf24_configRegister(RX_PW_P0, 0x00); // Auto-ACK pipe ...
    1006:	81 e1       	ldi	r24, 0x11	; 17
    1008:	60 e0       	ldi	r22, 0x00	; 0
    100a:	24 d3       	rcall	.+1608   	; 0x1654 <nrf24_configRegister>
	nrf24_configRegister(RX_PW_P1, payload_len); // Data payload pipe
    100c:	90 91 99 01 	lds	r25, 0x0199
    1010:	82 e1       	ldi	r24, 0x12	; 18
    1012:	69 2f       	mov	r22, r25
    1014:	1f d3       	rcall	.+1598   	; 0x1654 <nrf24_configRegister>
	nrf24_configRegister(RX_PW_P2, 0x00); // Pipe not used
    1016:	83 e1       	ldi	r24, 0x13	; 19
    1018:	60 e0       	ldi	r22, 0x00	; 0
    101a:	1c d3       	rcall	.+1592   	; 0x1654 <nrf24_configRegister>
	nrf24_configRegister(RX_PW_P3, 0x00); // Pipe not used
    101c:	84 e1       	ldi	r24, 0x14	; 20
    101e:	60 e0       	ldi	r22, 0x00	; 0
    1020:	19 d3       	rcall	.+1586   	; 0x1654 <nrf24_configRegister>
	nrf24_configRegister(RX_PW_P4, 0x00); // Pipe not used
    1022:	85 e1       	ldi	r24, 0x15	; 21
    1024:	60 e0       	ldi	r22, 0x00	; 0
    1026:	16 d3       	rcall	.+1580   	; 0x1654 <nrf24_configRegister>
	nrf24_configRegister(RX_PW_P5, 0x00); // Pipe not used
    1028:	86 e1       	ldi	r24, 0x16	; 22
    102a:	60 e0       	ldi	r22, 0x00	; 0
    102c:	13 d3       	rcall	.+1574   	; 0x1654 <nrf24_configRegister>
	// 1 Mbps, TX gain: 0dbm
	nrf24_configRegister(RF_SETUP, (0<<RF_DR)|((0x03)<<RF_PWR));
    102e:	86 e0       	ldi	r24, 0x06	; 6
    1030:	66 e0       	ldi	r22, 0x06	; 6
    1032:	10 d3       	rcall	.+1568   	; 0x1654 <nrf24_configRegister>
	// CRC enable, 1 byte CRC length
	nrf24_configRegister(CONFIG,nrf24_CONFIG);
    1034:	80 e0       	ldi	r24, 0x00	; 0
    1036:	68 e0       	ldi	r22, 0x08	; 8
    1038:	0d d3       	rcall	.+1562   	; 0x1654 <nrf24_configRegister>
	// Auto Acknowledgment
	nrf24_configRegister(EN_AA,(1<<ENAA_P0)|(1<<ENAA_P1)|(0<<ENAA_P2)|(0<<ENAA_P3)|(0<<ENAA_P4)|(0<<ENAA_P5));
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	63 e0       	ldi	r22, 0x03	; 3
    103e:	0a d3       	rcall	.+1556   	; 0x1654 <nrf24_configRegister>
	// Enable RX addresses
	nrf24_configRegister(EN_RXADDR,(1<<ERX_P0)|(1<<ERX_P1)|(0<<ERX_P2)|(0<<ERX_P3)|(0<<ERX_P4)|(0<<ERX_P5));
    1040:	82 e0       	ldi	r24, 0x02	; 2
    1042:	63 e0       	ldi	r22, 0x03	; 3
    1044:	07 d3       	rcall	.+1550   	; 0x1654 <nrf24_configRegister>
	// Auto retransmit delay: 1000 us and Up to 15 retransmit trials
	nrf24_configRegister(SETUP_RETR,(0x04<<ARD)|(0x0F<<ARC));
    1046:	84 e0       	ldi	r24, 0x04	; 4
    1048:	6f e4       	ldi	r22, 0x4F	; 79
    104a:	04 d3       	rcall	.+1544   	; 0x1654 <nrf24_configRegister>
	// Dynamic length configurations: No dynamic length
	nrf24_configRegister(DYNPD,(0<<DPL_P0)|(0<<DPL_P1)|(0<<DPL_P2)|(0<<DPL_P3)|(0<<DPL_P4)|(0<<DPL_P5));
    104c:	8c e1       	ldi	r24, 0x1C	; 28
    104e:	60 e0       	ldi	r22, 0x00	; 0
    1050:	01 d3       	rcall	.+1538   	; 0x1654 <nrf24_configRegister>

}
    1052:	0f 90       	pop	r0
    1054:	0f 90       	pop	r0
    1056:	cf 91       	pop	r28
    1058:	df 91       	pop	r29
    105a:	08 95       	ret

0000105c <nrf24_checkConfig>:

bool nrf24_checkConfig(){
    105c:	df 93       	push	r29
    105e:	cf 93       	push	r28
    1060:	cd b7       	in	r28, 0x3d	; 61
    1062:	de b7       	in	r29, 0x3e	; 62
	// Check all registers
	if (nrf24_checkRegister(RF_CH, selectedChannel,1)==false) return false;
    1064:	90 91 9a 01 	lds	r25, 0x019A
    1068:	85 e0       	ldi	r24, 0x05	; 5
    106a:	69 2f       	mov	r22, r25
    106c:	41 e0       	ldi	r20, 0x01	; 1
    106e:	44 d3       	rcall	.+1672   	; 0x16f8 <nrf24_checkRegister>
    1070:	98 2f       	mov	r25, r24
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	89 27       	eor	r24, r25
    1076:	88 23       	and	r24, r24
    1078:	11 f0       	breq	.+4      	; 0x107e <nrf24_checkConfig+0x22>
    107a:	80 e0       	ldi	r24, 0x00	; 0
    107c:	7c c0       	rjmp	.+248    	; 0x1176 <nrf24_checkConfig+0x11a>
	if (nrf24_checkRegister(RX_PW_P0, 0x00,1)==false) return false; 
    107e:	81 e1       	ldi	r24, 0x11	; 17
    1080:	60 e0       	ldi	r22, 0x00	; 0
    1082:	41 e0       	ldi	r20, 0x01	; 1
    1084:	39 d3       	rcall	.+1650   	; 0x16f8 <nrf24_checkRegister>
    1086:	98 2f       	mov	r25, r24
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	89 27       	eor	r24, r25
    108c:	88 23       	and	r24, r24
    108e:	11 f0       	breq	.+4      	; 0x1094 <nrf24_checkConfig+0x38>
    1090:	80 e0       	ldi	r24, 0x00	; 0
    1092:	71 c0       	rjmp	.+226    	; 0x1176 <nrf24_checkConfig+0x11a>
	if (nrf24_checkRegister(RX_PW_P1, payload_len,1)==false) return false;
    1094:	90 91 99 01 	lds	r25, 0x0199
    1098:	82 e1       	ldi	r24, 0x12	; 18
    109a:	69 2f       	mov	r22, r25
    109c:	41 e0       	ldi	r20, 0x01	; 1
    109e:	2c d3       	rcall	.+1624   	; 0x16f8 <nrf24_checkRegister>
    10a0:	98 2f       	mov	r25, r24
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	89 27       	eor	r24, r25
    10a6:	88 23       	and	r24, r24
    10a8:	11 f0       	breq	.+4      	; 0x10ae <nrf24_checkConfig+0x52>
    10aa:	80 e0       	ldi	r24, 0x00	; 0
    10ac:	64 c0       	rjmp	.+200    	; 0x1176 <nrf24_checkConfig+0x11a>
	if (nrf24_checkRegister(RX_PW_P2, 0x00,1)==false) return false;
    10ae:	83 e1       	ldi	r24, 0x13	; 19
    10b0:	60 e0       	ldi	r22, 0x00	; 0
    10b2:	41 e0       	ldi	r20, 0x01	; 1
    10b4:	21 d3       	rcall	.+1602   	; 0x16f8 <nrf24_checkRegister>
    10b6:	98 2f       	mov	r25, r24
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	89 27       	eor	r24, r25
    10bc:	88 23       	and	r24, r24
    10be:	11 f0       	breq	.+4      	; 0x10c4 <nrf24_checkConfig+0x68>
    10c0:	80 e0       	ldi	r24, 0x00	; 0
    10c2:	59 c0       	rjmp	.+178    	; 0x1176 <nrf24_checkConfig+0x11a>
	if (nrf24_checkRegister(RX_PW_P3, 0x00,1)==false) return false;
    10c4:	84 e1       	ldi	r24, 0x14	; 20
    10c6:	60 e0       	ldi	r22, 0x00	; 0
    10c8:	41 e0       	ldi	r20, 0x01	; 1
    10ca:	16 d3       	rcall	.+1580   	; 0x16f8 <nrf24_checkRegister>
    10cc:	98 2f       	mov	r25, r24
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	89 27       	eor	r24, r25
    10d2:	88 23       	and	r24, r24
    10d4:	11 f0       	breq	.+4      	; 0x10da <nrf24_checkConfig+0x7e>
    10d6:	80 e0       	ldi	r24, 0x00	; 0
    10d8:	4e c0       	rjmp	.+156    	; 0x1176 <nrf24_checkConfig+0x11a>
	if (nrf24_checkRegister(RX_PW_P4, 0x00,1)==false) return false;
    10da:	85 e1       	ldi	r24, 0x15	; 21
    10dc:	60 e0       	ldi	r22, 0x00	; 0
    10de:	41 e0       	ldi	r20, 0x01	; 1
    10e0:	0b d3       	rcall	.+1558   	; 0x16f8 <nrf24_checkRegister>
    10e2:	98 2f       	mov	r25, r24
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	89 27       	eor	r24, r25
    10e8:	88 23       	and	r24, r24
    10ea:	11 f0       	breq	.+4      	; 0x10f0 <nrf24_checkConfig+0x94>
    10ec:	80 e0       	ldi	r24, 0x00	; 0
    10ee:	43 c0       	rjmp	.+134    	; 0x1176 <nrf24_checkConfig+0x11a>
	if (nrf24_checkRegister(RX_PW_P5, 0x00,1)==false) return false;
    10f0:	86 e1       	ldi	r24, 0x16	; 22
    10f2:	60 e0       	ldi	r22, 0x00	; 0
    10f4:	41 e0       	ldi	r20, 0x01	; 1
    10f6:	00 d3       	rcall	.+1536   	; 0x16f8 <nrf24_checkRegister>
    10f8:	98 2f       	mov	r25, r24
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	89 27       	eor	r24, r25
    10fe:	88 23       	and	r24, r24
    1100:	11 f0       	breq	.+4      	; 0x1106 <nrf24_checkConfig+0xaa>
    1102:	80 e0       	ldi	r24, 0x00	; 0
    1104:	38 c0       	rjmp	.+112    	; 0x1176 <nrf24_checkConfig+0x11a>
	if (nrf24_checkRegister(RF_SETUP, (0<<RF_DR)|((0x03)<<RF_PWR),1)==false) return false;
    1106:	86 e0       	ldi	r24, 0x06	; 6
    1108:	66 e0       	ldi	r22, 0x06	; 6
    110a:	41 e0       	ldi	r20, 0x01	; 1
    110c:	f5 d2       	rcall	.+1514   	; 0x16f8 <nrf24_checkRegister>
    110e:	98 2f       	mov	r25, r24
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	89 27       	eor	r24, r25
    1114:	88 23       	and	r24, r24
    1116:	11 f0       	breq	.+4      	; 0x111c <nrf24_checkConfig+0xc0>
    1118:	80 e0       	ldi	r24, 0x00	; 0
    111a:	2d c0       	rjmp	.+90     	; 0x1176 <nrf24_checkConfig+0x11a>
	if (nrf24_checkRegister(CONFIG,nrf24_CONFIG,1)==false) return false;
    111c:	80 e0       	ldi	r24, 0x00	; 0
    111e:	68 e0       	ldi	r22, 0x08	; 8
    1120:	41 e0       	ldi	r20, 0x01	; 1
    1122:	ea d2       	rcall	.+1492   	; 0x16f8 <nrf24_checkRegister>
    1124:	98 2f       	mov	r25, r24
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	89 27       	eor	r24, r25
    112a:	88 23       	and	r24, r24
    112c:	11 f0       	breq	.+4      	; 0x1132 <nrf24_checkConfig+0xd6>
    112e:	80 e0       	ldi	r24, 0x00	; 0
    1130:	22 c0       	rjmp	.+68     	; 0x1176 <nrf24_checkConfig+0x11a>
	if (nrf24_checkRegister(EN_AA,(1<<ENAA_P0)|(1<<ENAA_P1)|(0<<ENAA_P2)|(0<<ENAA_P3)|(0<<ENAA_P4)|(0<<ENAA_P5),1)==false) return false;
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	63 e0       	ldi	r22, 0x03	; 3
    1136:	41 e0       	ldi	r20, 0x01	; 1
    1138:	df d2       	rcall	.+1470   	; 0x16f8 <nrf24_checkRegister>
    113a:	98 2f       	mov	r25, r24
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	89 27       	eor	r24, r25
    1140:	88 23       	and	r24, r24
    1142:	11 f0       	breq	.+4      	; 0x1148 <nrf24_checkConfig+0xec>
    1144:	80 e0       	ldi	r24, 0x00	; 0
    1146:	17 c0       	rjmp	.+46     	; 0x1176 <nrf24_checkConfig+0x11a>
	if (nrf24_checkRegister(SETUP_RETR,(0x04<<ARD)|(0x0F<<ARC),1)==false) return false;
    1148:	84 e0       	ldi	r24, 0x04	; 4
    114a:	6f e4       	ldi	r22, 0x4F	; 79
    114c:	41 e0       	ldi	r20, 0x01	; 1
    114e:	d4 d2       	rcall	.+1448   	; 0x16f8 <nrf24_checkRegister>
    1150:	98 2f       	mov	r25, r24
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	89 27       	eor	r24, r25
    1156:	88 23       	and	r24, r24
    1158:	11 f0       	breq	.+4      	; 0x115e <nrf24_checkConfig+0x102>
    115a:	80 e0       	ldi	r24, 0x00	; 0
    115c:	0c c0       	rjmp	.+24     	; 0x1176 <nrf24_checkConfig+0x11a>
	if (nrf24_checkRegister(DYNPD,(0<<DPL_P0)|(0<<DPL_P1)|(0<<DPL_P2)|(0<<DPL_P3)|(0<<DPL_P4)|(0<<DPL_P5),1)==false) return false;
    115e:	8c e1       	ldi	r24, 0x1C	; 28
    1160:	60 e0       	ldi	r22, 0x00	; 0
    1162:	41 e0       	ldi	r20, 0x01	; 1
    1164:	c9 d2       	rcall	.+1426   	; 0x16f8 <nrf24_checkRegister>
    1166:	98 2f       	mov	r25, r24
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	89 27       	eor	r24, r25
    116c:	88 23       	and	r24, r24
    116e:	11 f0       	breq	.+4      	; 0x1174 <nrf24_checkConfig+0x118>
    1170:	80 e0       	ldi	r24, 0x00	; 0
    1172:	01 c0       	rjmp	.+2      	; 0x1176 <nrf24_checkConfig+0x11a>
	
	return true;
    1174:	81 e0       	ldi	r24, 0x01	; 1
}
    1176:	cf 91       	pop	r28
    1178:	df 91       	pop	r29
    117a:	08 95       	ret

0000117c <nrf24_checkAvailability>:

bool nrf24_checkAvailability(){
    117c:	df 93       	push	r29
    117e:	cf 93       	push	r28
    1180:	cd b7       	in	r28, 0x3d	; 61
    1182:	de b7       	in	r29, 0x3e	; 62
	if (nrf24_checkRegister(RF_CH, selectedChannel,1)==true) { return true; } else { return false;}
    1184:	90 91 9a 01 	lds	r25, 0x019A
    1188:	85 e0       	ldi	r24, 0x05	; 5
    118a:	69 2f       	mov	r22, r25
    118c:	41 e0       	ldi	r20, 0x01	; 1
    118e:	b4 d2       	rcall	.+1384   	; 0x16f8 <nrf24_checkRegister>
    1190:	88 23       	and	r24, r24
    1192:	11 f0       	breq	.+4      	; 0x1198 <nrf24_checkAvailability+0x1c>
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	01 c0       	rjmp	.+2      	; 0x119a <nrf24_checkAvailability+0x1e>
    1198:	80 e0       	ldi	r24, 0x00	; 0
}
    119a:	cf 91       	pop	r28
    119c:	df 91       	pop	r29
    119e:	08 95       	ret

000011a0 <nrf24_rx_address>:



/* Set the RX address */
void nrf24_rx_address(uint8_t * adr)
{
    11a0:	df 93       	push	r29
    11a2:	cf 93       	push	r28
    11a4:	00 d0       	rcall	.+0      	; 0x11a6 <nrf24_rx_address+0x6>
    11a6:	cd b7       	in	r28, 0x3d	; 61
    11a8:	de b7       	in	r29, 0x3e	; 62
    11aa:	9a 83       	std	Y+2, r25	; 0x02
    11ac:	89 83       	std	Y+1, r24	; 0x01
	nrf24_ce_digitalWrite(LOW);
    11ae:	80 e0       	ldi	r24, 0x00	; 0
    11b0:	f5 d2       	rcall	.+1514   	; 0x179c <nrf24_ce_digitalWrite>
	nrf24_writeRegister(RX_ADDR_P1,adr,nrf24_ADDR_LEN);
    11b2:	29 81       	ldd	r18, Y+1	; 0x01
    11b4:	3a 81       	ldd	r19, Y+2	; 0x02
    11b6:	8b e0       	ldi	r24, 0x0B	; 11
    11b8:	b9 01       	movw	r22, r18
    11ba:	45 e0       	ldi	r20, 0x05	; 5
    11bc:	80 d2       	rcall	.+1280   	; 0x16be <nrf24_writeRegister>
	nrf24_ce_digitalWrite(HIGH);
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	ed d2       	rcall	.+1498   	; 0x179c <nrf24_ce_digitalWrite>
}
    11c2:	0f 90       	pop	r0
    11c4:	0f 90       	pop	r0
    11c6:	cf 91       	pop	r28
    11c8:	df 91       	pop	r29
    11ca:	08 95       	ret

000011cc <nrf24_tx_address>:
	return payload_len;
}

/* Set the TX address */
void nrf24_tx_address(uint8_t* adr)
{
    11cc:	df 93       	push	r29
    11ce:	cf 93       	push	r28
    11d0:	00 d0       	rcall	.+0      	; 0x11d2 <nrf24_tx_address+0x6>
    11d2:	cd b7       	in	r28, 0x3d	; 61
    11d4:	de b7       	in	r29, 0x3e	; 62
    11d6:	9a 83       	std	Y+2, r25	; 0x02
    11d8:	89 83       	std	Y+1, r24	; 0x01
	/* RX_ADDR_P0 must be set to the sending addr for auto ack to work. */
	nrf24_writeRegister(RX_ADDR_P0,adr,nrf24_ADDR_LEN);
    11da:	29 81       	ldd	r18, Y+1	; 0x01
    11dc:	3a 81       	ldd	r19, Y+2	; 0x02
    11de:	8a e0       	ldi	r24, 0x0A	; 10
    11e0:	b9 01       	movw	r22, r18
    11e2:	45 e0       	ldi	r20, 0x05	; 5
    11e4:	6c d2       	rcall	.+1240   	; 0x16be <nrf24_writeRegister>
	nrf24_writeRegister(TX_ADDR,adr,nrf24_ADDR_LEN);
    11e6:	29 81       	ldd	r18, Y+1	; 0x01
    11e8:	3a 81       	ldd	r19, Y+2	; 0x02
    11ea:	80 e1       	ldi	r24, 0x10	; 16
    11ec:	b9 01       	movw	r22, r18
    11ee:	45 e0       	ldi	r20, 0x05	; 5
    11f0:	66 d2       	rcall	.+1228   	; 0x16be <nrf24_writeRegister>
}
    11f2:	0f 90       	pop	r0
    11f4:	0f 90       	pop	r0
    11f6:	cf 91       	pop	r28
    11f8:	df 91       	pop	r29
    11fa:	08 95       	ret

000011fc <nrf24_dataReady>:

/* Checks if data is available for reading */
/* Returns 1 if data is ready ... */
uint8_t nrf24_dataReady()
{
    11fc:	df 93       	push	r29
    11fe:	cf 93       	push	r28
    1200:	0f 92       	push	r0
    1202:	cd b7       	in	r28, 0x3d	; 61
    1204:	de b7       	in	r29, 0x3e	; 62
	// See note in getData() function - just checking RX_DR isn't good enough
	uint8_t status = nrf24_getStatus();
    1206:	43 d0       	rcall	.+134    	; 0x128e <nrf24_getStatus>
    1208:	89 83       	std	Y+1, r24	; 0x01

	// We can short circuit on RX_DR, but if it's not set, we still need
	// to check the FIFO for any pending packets
	if ( status & (1 << RX_DR) )
    120a:	89 81       	ldd	r24, Y+1	; 0x01
    120c:	88 2f       	mov	r24, r24
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	80 74       	andi	r24, 0x40	; 64
    1212:	90 70       	andi	r25, 0x00	; 0
    1214:	00 97       	sbiw	r24, 0x00	; 0
    1216:	11 f0       	breq	.+4      	; 0x121c <nrf24_dataReady+0x20>
	{
		return 1;
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	06 c0       	rjmp	.+12     	; 0x1228 <nrf24_dataReady+0x2c>
	}

	return !nrf24_rxFifoEmpty();;
    121c:	09 d0       	rcall	.+18     	; 0x1230 <nrf24_rxFifoEmpty>
    121e:	98 2f       	mov	r25, r24
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	99 23       	and	r25, r25
    1224:	09 f0       	breq	.+2      	; 0x1228 <nrf24_dataReady+0x2c>
    1226:	80 e0       	ldi	r24, 0x00	; 0
}
    1228:	0f 90       	pop	r0
    122a:	cf 91       	pop	r28
    122c:	df 91       	pop	r29
    122e:	08 95       	ret

00001230 <nrf24_rxFifoEmpty>:

/* Checks if receive FIFO is empty or not */
uint8_t nrf24_rxFifoEmpty()
{
    1230:	df 93       	push	r29
    1232:	cf 93       	push	r28
    1234:	0f 92       	push	r0
    1236:	cd b7       	in	r28, 0x3d	; 61
    1238:	de b7       	in	r29, 0x3e	; 62
	uint8_t fifoStatus;

	nrf24_readRegister(FIFO_STATUS,&fifoStatus,1);
    123a:	87 e1       	ldi	r24, 0x17	; 23
    123c:	9e 01       	movw	r18, r28
    123e:	2f 5f       	subi	r18, 0xFF	; 255
    1240:	3f 4f       	sbci	r19, 0xFF	; 255
    1242:	b9 01       	movw	r22, r18
    1244:	41 e0       	ldi	r20, 0x01	; 1
    1246:	1c d2       	rcall	.+1080   	; 0x1680 <nrf24_readRegister>
	
	return (fifoStatus & (1 << RX_EMPTY));
    1248:	89 81       	ldd	r24, Y+1	; 0x01
    124a:	81 70       	andi	r24, 0x01	; 1
}
    124c:	0f 90       	pop	r0
    124e:	cf 91       	pop	r28
    1250:	df 91       	pop	r29
    1252:	08 95       	ret

00001254 <nrf24_getData>:
	return status;
}

/* Reads payload bytes into data array */
void nrf24_getData(uint8_t* data)
{
    1254:	df 93       	push	r29
    1256:	cf 93       	push	r28
    1258:	00 d0       	rcall	.+0      	; 0x125a <nrf24_getData+0x6>
    125a:	cd b7       	in	r28, 0x3d	; 61
    125c:	de b7       	in	r29, 0x3e	; 62
    125e:	9a 83       	std	Y+2, r25	; 0x02
    1260:	89 83       	std	Y+1, r24	; 0x01
	/* Pull down chip select */
	nrf24_csn_digitalWrite(LOW);
    1262:	80 e0       	ldi	r24, 0x00	; 0
    1264:	bb d2       	rcall	.+1398   	; 0x17dc <nrf24_csn_digitalWrite>

	/* Send cmd to read rx payload */
	spi_transfer( R_RX_PAYLOAD );
    1266:	81 e6       	ldi	r24, 0x61	; 97
    1268:	5a d1       	rcall	.+692    	; 0x151e <spi_transfer>
	
	/* Read payload */
	nrf24_transferSync(data,data,payload_len);
    126a:	40 91 99 01 	lds	r20, 0x0199
    126e:	89 81       	ldd	r24, Y+1	; 0x01
    1270:	9a 81       	ldd	r25, Y+2	; 0x02
    1272:	29 81       	ldd	r18, Y+1	; 0x01
    1274:	3a 81       	ldd	r19, Y+2	; 0x02
    1276:	b9 01       	movw	r22, r18
    1278:	94 d1       	rcall	.+808    	; 0x15a2 <nrf24_transferSync>
	
	/* Pull up chip select */
	nrf24_csn_digitalWrite(HIGH);
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	af d2       	rcall	.+1374   	; 0x17dc <nrf24_csn_digitalWrite>

	/* Reset status register */
	nrf24_configRegister(STATUS,(1<<RX_DR));
    127e:	87 e0       	ldi	r24, 0x07	; 7
    1280:	60 e4       	ldi	r22, 0x40	; 64
    1282:	e8 d1       	rcall	.+976    	; 0x1654 <nrf24_configRegister>
}
    1284:	0f 90       	pop	r0
    1286:	0f 90       	pop	r0
    1288:	cf 91       	pop	r28
    128a:	df 91       	pop	r29
    128c:	08 95       	ret

0000128e <nrf24_getStatus>:
	return 1; /* true */

}

uint8_t nrf24_getStatus()
{
    128e:	df 93       	push	r29
    1290:	cf 93       	push	r28
    1292:	0f 92       	push	r0
    1294:	cd b7       	in	r28, 0x3d	; 61
    1296:	de b7       	in	r29, 0x3e	; 62
	uint8_t rv;
	nrf24_csn_digitalWrite(LOW);
    1298:	80 e0       	ldi	r24, 0x00	; 0
    129a:	a0 d2       	rcall	.+1344   	; 0x17dc <nrf24_csn_digitalWrite>
	rv = spi_transfer(NOP);
    129c:	8f ef       	ldi	r24, 0xFF	; 255
    129e:	3f d1       	rcall	.+638    	; 0x151e <spi_transfer>
    12a0:	89 83       	std	Y+1, r24	; 0x01
	nrf24_csn_digitalWrite(HIGH);
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	9b d2       	rcall	.+1334   	; 0x17dc <nrf24_csn_digitalWrite>
	return rv;
    12a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    12a8:	0f 90       	pop	r0
    12aa:	cf 91       	pop	r28
    12ac:	df 91       	pop	r29
    12ae:	08 95       	ret

000012b0 <nrf24_powerUpRx>:
		return 0xFF;
	}
}

void nrf24_powerUpRx()
{
    12b0:	0f 93       	push	r16
    12b2:	1f 93       	push	r17
    12b4:	df 93       	push	r29
    12b6:	cf 93       	push	r28
    12b8:	cd b7       	in	r28, 0x3d	; 61
    12ba:	de b7       	in	r29, 0x3e	; 62
    12bc:	2e 97       	sbiw	r28, 0x0e	; 14
    12be:	0f b6       	in	r0, 0x3f	; 63
    12c0:	f8 94       	cli
    12c2:	de bf       	out	0x3e, r29	; 62
    12c4:	0f be       	out	0x3f, r0	; 63
    12c6:	cd bf       	out	0x3d, r28	; 61
	nrf24_csn_digitalWrite(LOW);
    12c8:	80 e0       	ldi	r24, 0x00	; 0
    12ca:	88 d2       	rcall	.+1296   	; 0x17dc <nrf24_csn_digitalWrite>
	spi_transfer(FLUSH_RX);
    12cc:	82 ee       	ldi	r24, 0xE2	; 226
    12ce:	27 d1       	rcall	.+590    	; 0x151e <spi_transfer>
	nrf24_csn_digitalWrite(HIGH);
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	84 d2       	rcall	.+1288   	; 0x17dc <nrf24_csn_digitalWrite>

	nrf24_configRegister(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT));
    12d4:	87 e0       	ldi	r24, 0x07	; 7
    12d6:	60 e7       	ldi	r22, 0x70	; 112
    12d8:	bd d1       	rcall	.+890    	; 0x1654 <nrf24_configRegister>

	nrf24_ce_digitalWrite(LOW);
    12da:	80 e0       	ldi	r24, 0x00	; 0
    12dc:	5f d2       	rcall	.+1214   	; 0x179c <nrf24_ce_digitalWrite>
	nrf24_configRegister(CONFIG,nrf24_CONFIG|((1<<PWR_UP)|(1<<PRIM_RX)));
    12de:	80 e0       	ldi	r24, 0x00	; 0
    12e0:	6b e0       	ldi	r22, 0x0B	; 11
    12e2:	b8 d1       	rcall	.+880    	; 0x1654 <nrf24_configRegister>
	nrf24_ce_digitalWrite(HIGH);
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	5a d2       	rcall	.+1204   	; 0x179c <nrf24_ce_digitalWrite>
    12e8:	80 e0       	ldi	r24, 0x00	; 0
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	a0 ea       	ldi	r26, 0xA0	; 160
    12ee:	b0 e4       	ldi	r27, 0x40	; 64
    12f0:	89 83       	std	Y+1, r24	; 0x01
    12f2:	9a 83       	std	Y+2, r25	; 0x02
    12f4:	ab 83       	std	Y+3, r26	; 0x03
    12f6:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    12f8:	69 81       	ldd	r22, Y+1	; 0x01
    12fa:	7a 81       	ldd	r23, Y+2	; 0x02
    12fc:	8b 81       	ldd	r24, Y+3	; 0x03
    12fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1300:	20 e0       	ldi	r18, 0x00	; 0
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	4a ef       	ldi	r20, 0xFA	; 250
    1306:	54 e4       	ldi	r21, 0x44	; 68
    1308:	56 d3       	rcall	.+1708   	; 0x19b6 <__mulsf3>
    130a:	dc 01       	movw	r26, r24
    130c:	cb 01       	movw	r24, r22
    130e:	8d 83       	std	Y+5, r24	; 0x05
    1310:	9e 83       	std	Y+6, r25	; 0x06
    1312:	af 83       	std	Y+7, r26	; 0x07
    1314:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1316:	11 e0       	ldi	r17, 0x01	; 1
    1318:	6d 81       	ldd	r22, Y+5	; 0x05
    131a:	7e 81       	ldd	r23, Y+6	; 0x06
    131c:	8f 81       	ldd	r24, Y+7	; 0x07
    131e:	98 85       	ldd	r25, Y+8	; 0x08
    1320:	20 e0       	ldi	r18, 0x00	; 0
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	40 e8       	ldi	r20, 0x80	; 128
    1326:	5f e3       	ldi	r21, 0x3F	; 63
    1328:	c5 d2       	rcall	.+1418   	; 0x18b4 <__cmpsf2>
    132a:	88 23       	and	r24, r24
    132c:	0c f0       	brlt	.+2      	; 0x1330 <nrf24_powerUpRx+0x80>
    132e:	10 e0       	ldi	r17, 0x00	; 0
    1330:	11 23       	and	r17, r17
    1332:	29 f0       	breq	.+10     	; 0x133e <nrf24_powerUpRx+0x8e>
		__ticks = 1;
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	9a 87       	std	Y+10, r25	; 0x0a
    133a:	89 87       	std	Y+9, r24	; 0x09
    133c:	42 c0       	rjmp	.+132    	; 0x13c2 <nrf24_powerUpRx+0x112>
	else if (__tmp > 65535)
    133e:	11 e0       	ldi	r17, 0x01	; 1
    1340:	6d 81       	ldd	r22, Y+5	; 0x05
    1342:	7e 81       	ldd	r23, Y+6	; 0x06
    1344:	8f 81       	ldd	r24, Y+7	; 0x07
    1346:	98 85       	ldd	r25, Y+8	; 0x08
    1348:	20 e0       	ldi	r18, 0x00	; 0
    134a:	3f ef       	ldi	r19, 0xFF	; 255
    134c:	4f e7       	ldi	r20, 0x7F	; 127
    134e:	57 e4       	ldi	r21, 0x47	; 71
    1350:	2e d3       	rcall	.+1628   	; 0x19ae <__gesf2>
    1352:	18 16       	cp	r1, r24
    1354:	0c f0       	brlt	.+2      	; 0x1358 <nrf24_powerUpRx+0xa8>
    1356:	10 e0       	ldi	r17, 0x00	; 0
    1358:	11 23       	and	r17, r17
    135a:	51 f1       	breq	.+84     	; 0x13b0 <nrf24_powerUpRx+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    135c:	69 81       	ldd	r22, Y+1	; 0x01
    135e:	7a 81       	ldd	r23, Y+2	; 0x02
    1360:	8b 81       	ldd	r24, Y+3	; 0x03
    1362:	9c 81       	ldd	r25, Y+4	; 0x04
    1364:	20 e0       	ldi	r18, 0x00	; 0
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	40 e2       	ldi	r20, 0x20	; 32
    136a:	51 e4       	ldi	r21, 0x41	; 65
    136c:	24 d3       	rcall	.+1608   	; 0x19b6 <__mulsf3>
    136e:	dc 01       	movw	r26, r24
    1370:	cb 01       	movw	r24, r22
    1372:	bc 01       	movw	r22, r24
    1374:	cd 01       	movw	r24, r26
    1376:	a2 d2       	rcall	.+1348   	; 0x18bc <__fixunssfsi>
    1378:	dc 01       	movw	r26, r24
    137a:	cb 01       	movw	r24, r22
    137c:	9a 87       	std	Y+10, r25	; 0x0a
    137e:	89 87       	std	Y+9, r24	; 0x09
    1380:	12 c0       	rjmp	.+36     	; 0x13a6 <nrf24_powerUpRx+0xf6>
    1382:	88 ec       	ldi	r24, 0xC8	; 200
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	9c 87       	std	Y+12, r25	; 0x0c
    1388:	8b 87       	std	Y+11, r24	; 0x0b
    138a:	8b 85       	ldd	r24, Y+11	; 0x0b
    138c:	9c 85       	ldd	r25, Y+12	; 0x0c
    138e:	8c 01       	movw	r16, r24
    1390:	c8 01       	movw	r24, r16
    1392:	01 97       	sbiw	r24, 0x01	; 1
    1394:	f1 f7       	brne	.-4      	; 0x1392 <nrf24_powerUpRx+0xe2>
    1396:	8c 01       	movw	r16, r24
    1398:	1c 87       	std	Y+12, r17	; 0x0c
    139a:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    139c:	89 85       	ldd	r24, Y+9	; 0x09
    139e:	9a 85       	ldd	r25, Y+10	; 0x0a
    13a0:	01 97       	sbiw	r24, 0x01	; 1
    13a2:	9a 87       	std	Y+10, r25	; 0x0a
    13a4:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13a6:	89 85       	ldd	r24, Y+9	; 0x09
    13a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    13aa:	00 97       	sbiw	r24, 0x00	; 0
    13ac:	51 f7       	brne	.-44     	; 0x1382 <nrf24_powerUpRx+0xd2>
    13ae:	16 c0       	rjmp	.+44     	; 0x13dc <nrf24_powerUpRx+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13b0:	6d 81       	ldd	r22, Y+5	; 0x05
    13b2:	7e 81       	ldd	r23, Y+6	; 0x06
    13b4:	8f 81       	ldd	r24, Y+7	; 0x07
    13b6:	98 85       	ldd	r25, Y+8	; 0x08
    13b8:	81 d2       	rcall	.+1282   	; 0x18bc <__fixunssfsi>
    13ba:	dc 01       	movw	r26, r24
    13bc:	cb 01       	movw	r24, r22
    13be:	9a 87       	std	Y+10, r25	; 0x0a
    13c0:	89 87       	std	Y+9, r24	; 0x09
    13c2:	89 85       	ldd	r24, Y+9	; 0x09
    13c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    13c6:	9e 87       	std	Y+14, r25	; 0x0e
    13c8:	8d 87       	std	Y+13, r24	; 0x0d
    13ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    13cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    13ce:	8c 01       	movw	r16, r24
    13d0:	c8 01       	movw	r24, r16
    13d2:	01 97       	sbiw	r24, 0x01	; 1
    13d4:	f1 f7       	brne	.-4      	; 0x13d2 <nrf24_powerUpRx+0x122>
    13d6:	8c 01       	movw	r16, r24
    13d8:	1e 87       	std	Y+14, r17	; 0x0e
    13da:	0d 87       	std	Y+13, r16	; 0x0d
	
	_delay_ms(5);
}
    13dc:	2e 96       	adiw	r28, 0x0e	; 14
    13de:	0f b6       	in	r0, 0x3f	; 63
    13e0:	f8 94       	cli
    13e2:	de bf       	out	0x3e, r29	; 62
    13e4:	0f be       	out	0x3f, r0	; 63
    13e6:	cd bf       	out	0x3d, r28	; 61
    13e8:	cf 91       	pop	r28
    13ea:	df 91       	pop	r29
    13ec:	1f 91       	pop	r17
    13ee:	0f 91       	pop	r16
    13f0:	08 95       	ret

000013f2 <nrf24_powerDown>:
	
	_delay_ms(5);
}

void nrf24_powerDown()
{
    13f2:	0f 93       	push	r16
    13f4:	1f 93       	push	r17
    13f6:	df 93       	push	r29
    13f8:	cf 93       	push	r28
    13fa:	cd b7       	in	r28, 0x3d	; 61
    13fc:	de b7       	in	r29, 0x3e	; 62
    13fe:	2e 97       	sbiw	r28, 0x0e	; 14
    1400:	0f b6       	in	r0, 0x3f	; 63
    1402:	f8 94       	cli
    1404:	de bf       	out	0x3e, r29	; 62
    1406:	0f be       	out	0x3f, r0	; 63
    1408:	cd bf       	out	0x3d, r28	; 61
	nrf24_ce_digitalWrite(LOW);
    140a:	80 e0       	ldi	r24, 0x00	; 0
    140c:	c7 d1       	rcall	.+910    	; 0x179c <nrf24_ce_digitalWrite>
	nrf24_configRegister(CONFIG,nrf24_CONFIG);
    140e:	80 e0       	ldi	r24, 0x00	; 0
    1410:	68 e0       	ldi	r22, 0x08	; 8
    1412:	20 d1       	rcall	.+576    	; 0x1654 <nrf24_configRegister>
    1414:	80 e0       	ldi	r24, 0x00	; 0
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	a0 ea       	ldi	r26, 0xA0	; 160
    141a:	b0 e4       	ldi	r27, 0x40	; 64
    141c:	89 83       	std	Y+1, r24	; 0x01
    141e:	9a 83       	std	Y+2, r25	; 0x02
    1420:	ab 83       	std	Y+3, r26	; 0x03
    1422:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    1424:	69 81       	ldd	r22, Y+1	; 0x01
    1426:	7a 81       	ldd	r23, Y+2	; 0x02
    1428:	8b 81       	ldd	r24, Y+3	; 0x03
    142a:	9c 81       	ldd	r25, Y+4	; 0x04
    142c:	20 e0       	ldi	r18, 0x00	; 0
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	4a ef       	ldi	r20, 0xFA	; 250
    1432:	54 e4       	ldi	r21, 0x44	; 68
    1434:	c0 d2       	rcall	.+1408   	; 0x19b6 <__mulsf3>
    1436:	dc 01       	movw	r26, r24
    1438:	cb 01       	movw	r24, r22
    143a:	8d 83       	std	Y+5, r24	; 0x05
    143c:	9e 83       	std	Y+6, r25	; 0x06
    143e:	af 83       	std	Y+7, r26	; 0x07
    1440:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1442:	11 e0       	ldi	r17, 0x01	; 1
    1444:	6d 81       	ldd	r22, Y+5	; 0x05
    1446:	7e 81       	ldd	r23, Y+6	; 0x06
    1448:	8f 81       	ldd	r24, Y+7	; 0x07
    144a:	98 85       	ldd	r25, Y+8	; 0x08
    144c:	20 e0       	ldi	r18, 0x00	; 0
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	40 e8       	ldi	r20, 0x80	; 128
    1452:	5f e3       	ldi	r21, 0x3F	; 63
    1454:	2f d2       	rcall	.+1118   	; 0x18b4 <__cmpsf2>
    1456:	88 23       	and	r24, r24
    1458:	0c f0       	brlt	.+2      	; 0x145c <nrf24_powerDown+0x6a>
    145a:	10 e0       	ldi	r17, 0x00	; 0
    145c:	11 23       	and	r17, r17
    145e:	29 f0       	breq	.+10     	; 0x146a <nrf24_powerDown+0x78>
		__ticks = 1;
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	9a 87       	std	Y+10, r25	; 0x0a
    1466:	89 87       	std	Y+9, r24	; 0x09
    1468:	42 c0       	rjmp	.+132    	; 0x14ee <nrf24_powerDown+0xfc>
	else if (__tmp > 65535)
    146a:	11 e0       	ldi	r17, 0x01	; 1
    146c:	6d 81       	ldd	r22, Y+5	; 0x05
    146e:	7e 81       	ldd	r23, Y+6	; 0x06
    1470:	8f 81       	ldd	r24, Y+7	; 0x07
    1472:	98 85       	ldd	r25, Y+8	; 0x08
    1474:	20 e0       	ldi	r18, 0x00	; 0
    1476:	3f ef       	ldi	r19, 0xFF	; 255
    1478:	4f e7       	ldi	r20, 0x7F	; 127
    147a:	57 e4       	ldi	r21, 0x47	; 71
    147c:	98 d2       	rcall	.+1328   	; 0x19ae <__gesf2>
    147e:	18 16       	cp	r1, r24
    1480:	0c f0       	brlt	.+2      	; 0x1484 <nrf24_powerDown+0x92>
    1482:	10 e0       	ldi	r17, 0x00	; 0
    1484:	11 23       	and	r17, r17
    1486:	51 f1       	breq	.+84     	; 0x14dc <nrf24_powerDown+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1488:	69 81       	ldd	r22, Y+1	; 0x01
    148a:	7a 81       	ldd	r23, Y+2	; 0x02
    148c:	8b 81       	ldd	r24, Y+3	; 0x03
    148e:	9c 81       	ldd	r25, Y+4	; 0x04
    1490:	20 e0       	ldi	r18, 0x00	; 0
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	40 e2       	ldi	r20, 0x20	; 32
    1496:	51 e4       	ldi	r21, 0x41	; 65
    1498:	8e d2       	rcall	.+1308   	; 0x19b6 <__mulsf3>
    149a:	dc 01       	movw	r26, r24
    149c:	cb 01       	movw	r24, r22
    149e:	bc 01       	movw	r22, r24
    14a0:	cd 01       	movw	r24, r26
    14a2:	0c d2       	rcall	.+1048   	; 0x18bc <__fixunssfsi>
    14a4:	dc 01       	movw	r26, r24
    14a6:	cb 01       	movw	r24, r22
    14a8:	9a 87       	std	Y+10, r25	; 0x0a
    14aa:	89 87       	std	Y+9, r24	; 0x09
    14ac:	12 c0       	rjmp	.+36     	; 0x14d2 <nrf24_powerDown+0xe0>
    14ae:	88 ec       	ldi	r24, 0xC8	; 200
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	9c 87       	std	Y+12, r25	; 0x0c
    14b4:	8b 87       	std	Y+11, r24	; 0x0b
    14b6:	8b 85       	ldd	r24, Y+11	; 0x0b
    14b8:	9c 85       	ldd	r25, Y+12	; 0x0c
    14ba:	8c 01       	movw	r16, r24
    14bc:	c8 01       	movw	r24, r16
    14be:	01 97       	sbiw	r24, 0x01	; 1
    14c0:	f1 f7       	brne	.-4      	; 0x14be <nrf24_powerDown+0xcc>
    14c2:	8c 01       	movw	r16, r24
    14c4:	1c 87       	std	Y+12, r17	; 0x0c
    14c6:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14c8:	89 85       	ldd	r24, Y+9	; 0x09
    14ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    14cc:	01 97       	sbiw	r24, 0x01	; 1
    14ce:	9a 87       	std	Y+10, r25	; 0x0a
    14d0:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14d2:	89 85       	ldd	r24, Y+9	; 0x09
    14d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    14d6:	00 97       	sbiw	r24, 0x00	; 0
    14d8:	51 f7       	brne	.-44     	; 0x14ae <nrf24_powerDown+0xbc>
    14da:	16 c0       	rjmp	.+44     	; 0x1508 <nrf24_powerDown+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14dc:	6d 81       	ldd	r22, Y+5	; 0x05
    14de:	7e 81       	ldd	r23, Y+6	; 0x06
    14e0:	8f 81       	ldd	r24, Y+7	; 0x07
    14e2:	98 85       	ldd	r25, Y+8	; 0x08
    14e4:	eb d1       	rcall	.+982    	; 0x18bc <__fixunssfsi>
    14e6:	dc 01       	movw	r26, r24
    14e8:	cb 01       	movw	r24, r22
    14ea:	9a 87       	std	Y+10, r25	; 0x0a
    14ec:	89 87       	std	Y+9, r24	; 0x09
    14ee:	89 85       	ldd	r24, Y+9	; 0x09
    14f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    14f2:	9e 87       	std	Y+14, r25	; 0x0e
    14f4:	8d 87       	std	Y+13, r24	; 0x0d
    14f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    14f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    14fa:	8c 01       	movw	r16, r24
    14fc:	c8 01       	movw	r24, r16
    14fe:	01 97       	sbiw	r24, 0x01	; 1
    1500:	f1 f7       	brne	.-4      	; 0x14fe <nrf24_powerDown+0x10c>
    1502:	8c 01       	movw	r16, r24
    1504:	1e 87       	std	Y+14, r17	; 0x0e
    1506:	0d 87       	std	Y+13, r16	; 0x0d
	
	_delay_ms(5);
}
    1508:	2e 96       	adiw	r28, 0x0e	; 14
    150a:	0f b6       	in	r0, 0x3f	; 63
    150c:	f8 94       	cli
    150e:	de bf       	out	0x3e, r29	; 62
    1510:	0f be       	out	0x3f, r0	; 63
    1512:	cd bf       	out	0x3d, r28	; 61
    1514:	cf 91       	pop	r28
    1516:	df 91       	pop	r29
    1518:	1f 91       	pop	r17
    151a:	0f 91       	pop	r16
    151c:	08 95       	ret

0000151e <spi_transfer>:

uint8_t spi_transfer(uint8_t tx)
{
    151e:	df 93       	push	r29
    1520:	cf 93       	push	r28
    1522:	00 d0       	rcall	.+0      	; 0x1524 <spi_transfer+0x6>
    1524:	0f 92       	push	r0
    1526:	cd b7       	in	r28, 0x3d	; 61
    1528:	de b7       	in	r29, 0x3e	; 62
    152a:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t i = 0;
    152c:	19 82       	std	Y+1, r1	; 0x01
	uint8_t rx = 0;
    152e:	1a 82       	std	Y+2, r1	; 0x02

	nrf24_sck_digitalWrite(LOW);
    1530:	80 e0       	ldi	r24, 0x00	; 0
    1532:	74 d1       	rcall	.+744    	; 0x181c <nrf24_sck_digitalWrite>

	for(i=0;i<8;i++)
    1534:	19 82       	std	Y+1, r1	; 0x01
    1536:	2b c0       	rjmp	.+86     	; 0x158e <spi_transfer+0x70>
	{

		if(tx & (1<<(7-i)))
    1538:	8b 81       	ldd	r24, Y+3	; 0x03
    153a:	88 2f       	mov	r24, r24
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	29 81       	ldd	r18, Y+1	; 0x01
    1540:	22 2f       	mov	r18, r18
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	47 e0       	ldi	r20, 0x07	; 7
    1546:	50 e0       	ldi	r21, 0x00	; 0
    1548:	ba 01       	movw	r22, r20
    154a:	62 1b       	sub	r22, r18
    154c:	73 0b       	sbc	r23, r19
    154e:	9b 01       	movw	r18, r22
    1550:	02 2e       	mov	r0, r18
    1552:	02 c0       	rjmp	.+4      	; 0x1558 <spi_transfer+0x3a>
    1554:	95 95       	asr	r25
    1556:	87 95       	ror	r24
    1558:	0a 94       	dec	r0
    155a:	e2 f7       	brpl	.-8      	; 0x1554 <spi_transfer+0x36>
    155c:	81 70       	andi	r24, 0x01	; 1
    155e:	90 70       	andi	r25, 0x00	; 0
    1560:	88 23       	and	r24, r24
    1562:	19 f0       	breq	.+6      	; 0x156a <spi_transfer+0x4c>
		{
			nrf24_mosi_digitalWrite(HIGH);
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	7a d1       	rcall	.+756    	; 0x185c <nrf24_mosi_digitalWrite>
    1568:	02 c0       	rjmp	.+4      	; 0x156e <spi_transfer+0x50>
		}
		else
		{
			nrf24_mosi_digitalWrite(LOW);
    156a:	80 e0       	ldi	r24, 0x00	; 0
    156c:	77 d1       	rcall	.+750    	; 0x185c <nrf24_mosi_digitalWrite>
		}

		nrf24_sck_digitalWrite(HIGH);
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	55 d1       	rcall	.+682    	; 0x181c <nrf24_sck_digitalWrite>

		rx = rx << 1;
    1572:	8a 81       	ldd	r24, Y+2	; 0x02
    1574:	88 0f       	add	r24, r24
    1576:	8a 83       	std	Y+2, r24	; 0x02
		if(nrf24_miso_digitalRead())
    1578:	91 d1       	rcall	.+802    	; 0x189c <nrf24_miso_digitalRead>
    157a:	88 23       	and	r24, r24
    157c:	19 f0       	breq	.+6      	; 0x1584 <spi_transfer+0x66>
		{
			rx |= 0x01;
    157e:	8a 81       	ldd	r24, Y+2	; 0x02
    1580:	81 60       	ori	r24, 0x01	; 1
    1582:	8a 83       	std	Y+2, r24	; 0x02
		}

		nrf24_sck_digitalWrite(LOW);
    1584:	80 e0       	ldi	r24, 0x00	; 0
    1586:	4a d1       	rcall	.+660    	; 0x181c <nrf24_sck_digitalWrite>
	uint8_t i = 0;
	uint8_t rx = 0;

	nrf24_sck_digitalWrite(LOW);

	for(i=0;i<8;i++)
    1588:	89 81       	ldd	r24, Y+1	; 0x01
    158a:	8f 5f       	subi	r24, 0xFF	; 255
    158c:	89 83       	std	Y+1, r24	; 0x01
    158e:	89 81       	ldd	r24, Y+1	; 0x01
    1590:	88 30       	cpi	r24, 0x08	; 8
    1592:	90 f2       	brcs	.-92     	; 0x1538 <spi_transfer+0x1a>

		nrf24_sck_digitalWrite(LOW);

	}

	return rx;
    1594:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1596:	0f 90       	pop	r0
    1598:	0f 90       	pop	r0
    159a:	0f 90       	pop	r0
    159c:	cf 91       	pop	r28
    159e:	df 91       	pop	r29
    15a0:	08 95       	ret

000015a2 <nrf24_transferSync>:

/* send and receive multiple bytes over SPI */
void nrf24_transferSync(uint8_t* dataout,uint8_t* datain,uint8_t len)
{
    15a2:	0f 93       	push	r16
    15a4:	1f 93       	push	r17
    15a6:	df 93       	push	r29
    15a8:	cf 93       	push	r28
    15aa:	00 d0       	rcall	.+0      	; 0x15ac <nrf24_transferSync+0xa>
    15ac:	00 d0       	rcall	.+0      	; 0x15ae <nrf24_transferSync+0xc>
    15ae:	00 d0       	rcall	.+0      	; 0x15b0 <nrf24_transferSync+0xe>
    15b0:	cd b7       	in	r28, 0x3d	; 61
    15b2:	de b7       	in	r29, 0x3e	; 62
    15b4:	9b 83       	std	Y+3, r25	; 0x03
    15b6:	8a 83       	std	Y+2, r24	; 0x02
    15b8:	7d 83       	std	Y+5, r23	; 0x05
    15ba:	6c 83       	std	Y+4, r22	; 0x04
    15bc:	4e 83       	std	Y+6, r20	; 0x06
	uint8_t i;

	for(i=0;i<len;i++)
    15be:	19 82       	std	Y+1, r1	; 0x01
    15c0:	17 c0       	rjmp	.+46     	; 0x15f0 <nrf24_transferSync+0x4e>
	{
		datain[i] = spi_transfer(dataout[i]);
    15c2:	89 81       	ldd	r24, Y+1	; 0x01
    15c4:	88 2f       	mov	r24, r24
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	2c 81       	ldd	r18, Y+4	; 0x04
    15ca:	3d 81       	ldd	r19, Y+5	; 0x05
    15cc:	89 01       	movw	r16, r18
    15ce:	08 0f       	add	r16, r24
    15d0:	19 1f       	adc	r17, r25
    15d2:	89 81       	ldd	r24, Y+1	; 0x01
    15d4:	88 2f       	mov	r24, r24
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	2a 81       	ldd	r18, Y+2	; 0x02
    15da:	3b 81       	ldd	r19, Y+3	; 0x03
    15dc:	82 0f       	add	r24, r18
    15de:	93 1f       	adc	r25, r19
    15e0:	fc 01       	movw	r30, r24
    15e2:	80 81       	ld	r24, Z
    15e4:	9c df       	rcall	.-200    	; 0x151e <spi_transfer>
    15e6:	f8 01       	movw	r30, r16
    15e8:	80 83       	st	Z, r24
/* send and receive multiple bytes over SPI */
void nrf24_transferSync(uint8_t* dataout,uint8_t* datain,uint8_t len)
{
	uint8_t i;

	for(i=0;i<len;i++)
    15ea:	89 81       	ldd	r24, Y+1	; 0x01
    15ec:	8f 5f       	subi	r24, 0xFF	; 255
    15ee:	89 83       	std	Y+1, r24	; 0x01
    15f0:	99 81       	ldd	r25, Y+1	; 0x01
    15f2:	8e 81       	ldd	r24, Y+6	; 0x06
    15f4:	98 17       	cp	r25, r24
    15f6:	28 f3       	brcs	.-54     	; 0x15c2 <nrf24_transferSync+0x20>
	{
		datain[i] = spi_transfer(dataout[i]);
	}

}
    15f8:	26 96       	adiw	r28, 0x06	; 6
    15fa:	0f b6       	in	r0, 0x3f	; 63
    15fc:	f8 94       	cli
    15fe:	de bf       	out	0x3e, r29	; 62
    1600:	0f be       	out	0x3f, r0	; 63
    1602:	cd bf       	out	0x3d, r28	; 61
    1604:	cf 91       	pop	r28
    1606:	df 91       	pop	r29
    1608:	1f 91       	pop	r17
    160a:	0f 91       	pop	r16
    160c:	08 95       	ret

0000160e <nrf24_transmitSync>:

/* send multiple bytes over SPI */
void nrf24_transmitSync(uint8_t* dataout,uint8_t len)
{
    160e:	df 93       	push	r29
    1610:	cf 93       	push	r28
    1612:	00 d0       	rcall	.+0      	; 0x1614 <nrf24_transmitSync+0x6>
    1614:	00 d0       	rcall	.+0      	; 0x1616 <nrf24_transmitSync+0x8>
    1616:	cd b7       	in	r28, 0x3d	; 61
    1618:	de b7       	in	r29, 0x3e	; 62
    161a:	9b 83       	std	Y+3, r25	; 0x03
    161c:	8a 83       	std	Y+2, r24	; 0x02
    161e:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t i;
	
	for(i=0;i<len;i++)
    1620:	19 82       	std	Y+1, r1	; 0x01
    1622:	0d c0       	rjmp	.+26     	; 0x163e <nrf24_transmitSync+0x30>
	{
		spi_transfer(dataout[i]);
    1624:	89 81       	ldd	r24, Y+1	; 0x01
    1626:	88 2f       	mov	r24, r24
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	2a 81       	ldd	r18, Y+2	; 0x02
    162c:	3b 81       	ldd	r19, Y+3	; 0x03
    162e:	82 0f       	add	r24, r18
    1630:	93 1f       	adc	r25, r19
    1632:	fc 01       	movw	r30, r24
    1634:	80 81       	ld	r24, Z
    1636:	73 df       	rcall	.-282    	; 0x151e <spi_transfer>
/* send multiple bytes over SPI */
void nrf24_transmitSync(uint8_t* dataout,uint8_t len)
{
	uint8_t i;
	
	for(i=0;i<len;i++)
    1638:	89 81       	ldd	r24, Y+1	; 0x01
    163a:	8f 5f       	subi	r24, 0xFF	; 255
    163c:	89 83       	std	Y+1, r24	; 0x01
    163e:	99 81       	ldd	r25, Y+1	; 0x01
    1640:	8c 81       	ldd	r24, Y+4	; 0x04
    1642:	98 17       	cp	r25, r24
    1644:	78 f3       	brcs	.-34     	; 0x1624 <nrf24_transmitSync+0x16>
	{
		spi_transfer(dataout[i]);
	}

}
    1646:	0f 90       	pop	r0
    1648:	0f 90       	pop	r0
    164a:	0f 90       	pop	r0
    164c:	0f 90       	pop	r0
    164e:	cf 91       	pop	r28
    1650:	df 91       	pop	r29
    1652:	08 95       	ret

00001654 <nrf24_configRegister>:

/* Clocks only one byte into the given nrf24 register */
void nrf24_configRegister(uint8_t reg, uint8_t value)
{
    1654:	df 93       	push	r29
    1656:	cf 93       	push	r28
    1658:	00 d0       	rcall	.+0      	; 0x165a <nrf24_configRegister+0x6>
    165a:	cd b7       	in	r28, 0x3d	; 61
    165c:	de b7       	in	r29, 0x3e	; 62
    165e:	89 83       	std	Y+1, r24	; 0x01
    1660:	6a 83       	std	Y+2, r22	; 0x02
	nrf24_csn_digitalWrite(LOW);
    1662:	80 e0       	ldi	r24, 0x00	; 0
    1664:	bb d0       	rcall	.+374    	; 0x17dc <nrf24_csn_digitalWrite>
	spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
    1666:	89 81       	ldd	r24, Y+1	; 0x01
    1668:	8f 71       	andi	r24, 0x1F	; 31
    166a:	80 62       	ori	r24, 0x20	; 32
    166c:	58 df       	rcall	.-336    	; 0x151e <spi_transfer>
	spi_transfer(value);
    166e:	8a 81       	ldd	r24, Y+2	; 0x02
    1670:	56 df       	rcall	.-340    	; 0x151e <spi_transfer>
	nrf24_csn_digitalWrite(HIGH);
    1672:	81 e0       	ldi	r24, 0x01	; 1
    1674:	b3 d0       	rcall	.+358    	; 0x17dc <nrf24_csn_digitalWrite>
}
    1676:	0f 90       	pop	r0
    1678:	0f 90       	pop	r0
    167a:	cf 91       	pop	r28
    167c:	df 91       	pop	r29
    167e:	08 95       	ret

00001680 <nrf24_readRegister>:

/* Read single register from nrf24 */
void nrf24_readRegister(uint8_t reg, uint8_t* value, uint8_t len)
{
    1680:	df 93       	push	r29
    1682:	cf 93       	push	r28
    1684:	00 d0       	rcall	.+0      	; 0x1686 <nrf24_readRegister+0x6>
    1686:	00 d0       	rcall	.+0      	; 0x1688 <nrf24_readRegister+0x8>
    1688:	cd b7       	in	r28, 0x3d	; 61
    168a:	de b7       	in	r29, 0x3e	; 62
    168c:	89 83       	std	Y+1, r24	; 0x01
    168e:	7b 83       	std	Y+3, r23	; 0x03
    1690:	6a 83       	std	Y+2, r22	; 0x02
    1692:	4c 83       	std	Y+4, r20	; 0x04
	nrf24_csn_digitalWrite(LOW);
    1694:	80 e0       	ldi	r24, 0x00	; 0
    1696:	a2 d0       	rcall	.+324    	; 0x17dc <nrf24_csn_digitalWrite>
	spi_transfer(R_REGISTER | (REGISTER_MASK & reg));
    1698:	89 81       	ldd	r24, Y+1	; 0x01
    169a:	8f 71       	andi	r24, 0x1F	; 31
    169c:	40 df       	rcall	.-384    	; 0x151e <spi_transfer>
	nrf24_transferSync(value,value,len);
    169e:	8a 81       	ldd	r24, Y+2	; 0x02
    16a0:	9b 81       	ldd	r25, Y+3	; 0x03
    16a2:	2a 81       	ldd	r18, Y+2	; 0x02
    16a4:	3b 81       	ldd	r19, Y+3	; 0x03
    16a6:	b9 01       	movw	r22, r18
    16a8:	4c 81       	ldd	r20, Y+4	; 0x04
    16aa:	7b df       	rcall	.-266    	; 0x15a2 <nrf24_transferSync>
	nrf24_csn_digitalWrite(HIGH);
    16ac:	81 e0       	ldi	r24, 0x01	; 1
    16ae:	96 d0       	rcall	.+300    	; 0x17dc <nrf24_csn_digitalWrite>
}
    16b0:	0f 90       	pop	r0
    16b2:	0f 90       	pop	r0
    16b4:	0f 90       	pop	r0
    16b6:	0f 90       	pop	r0
    16b8:	cf 91       	pop	r28
    16ba:	df 91       	pop	r29
    16bc:	08 95       	ret

000016be <nrf24_writeRegister>:

/* Write to a single register of nrf24 */
void nrf24_writeRegister(uint8_t reg, uint8_t* value, uint8_t len)
{
    16be:	df 93       	push	r29
    16c0:	cf 93       	push	r28
    16c2:	00 d0       	rcall	.+0      	; 0x16c4 <nrf24_writeRegister+0x6>
    16c4:	00 d0       	rcall	.+0      	; 0x16c6 <nrf24_writeRegister+0x8>
    16c6:	cd b7       	in	r28, 0x3d	; 61
    16c8:	de b7       	in	r29, 0x3e	; 62
    16ca:	89 83       	std	Y+1, r24	; 0x01
    16cc:	7b 83       	std	Y+3, r23	; 0x03
    16ce:	6a 83       	std	Y+2, r22	; 0x02
    16d0:	4c 83       	std	Y+4, r20	; 0x04
	nrf24_csn_digitalWrite(LOW);
    16d2:	80 e0       	ldi	r24, 0x00	; 0
    16d4:	83 d0       	rcall	.+262    	; 0x17dc <nrf24_csn_digitalWrite>
	spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
    16d6:	89 81       	ldd	r24, Y+1	; 0x01
    16d8:	8f 71       	andi	r24, 0x1F	; 31
    16da:	80 62       	ori	r24, 0x20	; 32
    16dc:	20 df       	rcall	.-448    	; 0x151e <spi_transfer>
	nrf24_transmitSync(value,len);
    16de:	8a 81       	ldd	r24, Y+2	; 0x02
    16e0:	9b 81       	ldd	r25, Y+3	; 0x03
    16e2:	6c 81       	ldd	r22, Y+4	; 0x04
    16e4:	94 df       	rcall	.-216    	; 0x160e <nrf24_transmitSync>
	nrf24_csn_digitalWrite(HIGH);
    16e6:	81 e0       	ldi	r24, 0x01	; 1
    16e8:	79 d0       	rcall	.+242    	; 0x17dc <nrf24_csn_digitalWrite>
}
    16ea:	0f 90       	pop	r0
    16ec:	0f 90       	pop	r0
    16ee:	0f 90       	pop	r0
    16f0:	0f 90       	pop	r0
    16f2:	cf 91       	pop	r28
    16f4:	df 91       	pop	r29
    16f6:	08 95       	ret

000016f8 <nrf24_checkRegister>:

/* Check single register from nrf24 */
bool nrf24_checkRegister(uint8_t reg, uint8_t desiredValue, uint8_t len)
{
    16f8:	df 93       	push	r29
    16fa:	cf 93       	push	r28
    16fc:	00 d0       	rcall	.+0      	; 0x16fe <nrf24_checkRegister+0x6>
    16fe:	00 d0       	rcall	.+0      	; 0x1700 <nrf24_checkRegister+0x8>
    1700:	cd b7       	in	r28, 0x3d	; 61
    1702:	de b7       	in	r29, 0x3e	; 62
    1704:	8a 83       	std	Y+2, r24	; 0x02
    1706:	6b 83       	std	Y+3, r22	; 0x03
    1708:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t registerValue;
	nrf24_readRegister(reg,&registerValue,len);
    170a:	8a 81       	ldd	r24, Y+2	; 0x02
    170c:	9e 01       	movw	r18, r28
    170e:	2f 5f       	subi	r18, 0xFF	; 255
    1710:	3f 4f       	sbci	r19, 0xFF	; 255
    1712:	b9 01       	movw	r22, r18
    1714:	4c 81       	ldd	r20, Y+4	; 0x04
    1716:	b4 df       	rcall	.-152    	; 0x1680 <nrf24_readRegister>
	if (registerValue==desiredValue) { return true; } else { return false; }
    1718:	99 81       	ldd	r25, Y+1	; 0x01
    171a:	8b 81       	ldd	r24, Y+3	; 0x03
    171c:	98 17       	cp	r25, r24
    171e:	11 f4       	brne	.+4      	; 0x1724 <nrf24_checkRegister+0x2c>
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	01 c0       	rjmp	.+2      	; 0x1726 <nrf24_checkRegister+0x2e>
    1724:	80 e0       	ldi	r24, 0x00	; 0
}
    1726:	0f 90       	pop	r0
    1728:	0f 90       	pop	r0
    172a:	0f 90       	pop	r0
    172c:	0f 90       	pop	r0
    172e:	cf 91       	pop	r28
    1730:	df 91       	pop	r29
    1732:	08 95       	ret

00001734 <nrf24_setupPins>:
#define check_bit(reg,bit) (reg&(1<<bit))

/* ------------------------------------------------------------------------- */

void nrf24_setupPins()
{
    1734:	df 93       	push	r29
    1736:	cf 93       	push	r28
    1738:	cd b7       	in	r28, 0x3d	; 61
    173a:	de b7       	in	r29, 0x3e	; 62
	set_bit(CE_CSN_DDR, CE_BIT_POS); // CE output
    173c:	87 e2       	ldi	r24, 0x27	; 39
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	27 e2       	ldi	r18, 0x27	; 39
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	f9 01       	movw	r30, r18
    1746:	20 81       	ld	r18, Z
    1748:	21 60       	ori	r18, 0x01	; 1
    174a:	fc 01       	movw	r30, r24
    174c:	20 83       	st	Z, r18
	set_bit(CE_CSN_DDR, CSN_BIT_POS); // CSN output
    174e:	87 e2       	ldi	r24, 0x27	; 39
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	27 e2       	ldi	r18, 0x27	; 39
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	f9 01       	movw	r30, r18
    1758:	20 81       	ld	r18, Z
    175a:	22 60       	ori	r18, 0x02	; 2
    175c:	fc 01       	movw	r30, r24
    175e:	20 83       	st	Z, r18
	
	clr_bit(RF_DDR, MISO_BIT_POS); // MISO input
    1760:	8a e2       	ldi	r24, 0x2A	; 42
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	2a e2       	ldi	r18, 0x2A	; 42
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	f9 01       	movw	r30, r18
    176a:	20 81       	ld	r18, Z
    176c:	2e 7f       	andi	r18, 0xFE	; 254
    176e:	fc 01       	movw	r30, r24
    1770:	20 83       	st	Z, r18
	set_bit(RF_DDR, MOSI_BIT_POS); // MOSI output
    1772:	8a e2       	ldi	r24, 0x2A	; 42
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	2a e2       	ldi	r18, 0x2A	; 42
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	f9 01       	movw	r30, r18
    177c:	20 81       	ld	r18, Z
    177e:	22 60       	ori	r18, 0x02	; 2
    1780:	fc 01       	movw	r30, r24
    1782:	20 83       	st	Z, r18
	set_bit(RF_DDR, SCK_BIT_POS); // SCK output
    1784:	8a e2       	ldi	r24, 0x2A	; 42
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	2a e2       	ldi	r18, 0x2A	; 42
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	f9 01       	movw	r30, r18
    178e:	20 81       	ld	r18, Z
    1790:	20 61       	ori	r18, 0x10	; 16
    1792:	fc 01       	movw	r30, r24
    1794:	20 83       	st	Z, r18
}
    1796:	cf 91       	pop	r28
    1798:	df 91       	pop	r29
    179a:	08 95       	ret

0000179c <nrf24_ce_digitalWrite>:
/* ------------------------------------------------------------------------- */
void nrf24_ce_digitalWrite(uint8_t state)
{
    179c:	df 93       	push	r29
    179e:	cf 93       	push	r28
    17a0:	0f 92       	push	r0
    17a2:	cd b7       	in	r28, 0x3d	; 61
    17a4:	de b7       	in	r29, 0x3e	; 62
    17a6:	89 83       	std	Y+1, r24	; 0x01
	if(state)
    17a8:	89 81       	ldd	r24, Y+1	; 0x01
    17aa:	88 23       	and	r24, r24
    17ac:	51 f0       	breq	.+20     	; 0x17c2 <nrf24_ce_digitalWrite+0x26>
	{
		set_bit(CE_CSN_PORT, CE_BIT_POS);
    17ae:	88 e2       	ldi	r24, 0x28	; 40
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	28 e2       	ldi	r18, 0x28	; 40
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	f9 01       	movw	r30, r18
    17b8:	20 81       	ld	r18, Z
    17ba:	21 60       	ori	r18, 0x01	; 1
    17bc:	fc 01       	movw	r30, r24
    17be:	20 83       	st	Z, r18
    17c0:	09 c0       	rjmp	.+18     	; 0x17d4 <nrf24_ce_digitalWrite+0x38>
	}
	else
	{
		clr_bit(CE_CSN_PORT, CE_BIT_POS);
    17c2:	88 e2       	ldi	r24, 0x28	; 40
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	28 e2       	ldi	r18, 0x28	; 40
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	f9 01       	movw	r30, r18
    17cc:	20 81       	ld	r18, Z
    17ce:	2e 7f       	andi	r18, 0xFE	; 254
    17d0:	fc 01       	movw	r30, r24
    17d2:	20 83       	st	Z, r18
	}
}
    17d4:	0f 90       	pop	r0
    17d6:	cf 91       	pop	r28
    17d8:	df 91       	pop	r29
    17da:	08 95       	ret

000017dc <nrf24_csn_digitalWrite>:
/* ------------------------------------------------------------------------- */
void nrf24_csn_digitalWrite(uint8_t state)
{
    17dc:	df 93       	push	r29
    17de:	cf 93       	push	r28
    17e0:	0f 92       	push	r0
    17e2:	cd b7       	in	r28, 0x3d	; 61
    17e4:	de b7       	in	r29, 0x3e	; 62
    17e6:	89 83       	std	Y+1, r24	; 0x01
	if(state)
    17e8:	89 81       	ldd	r24, Y+1	; 0x01
    17ea:	88 23       	and	r24, r24
    17ec:	51 f0       	breq	.+20     	; 0x1802 <nrf24_csn_digitalWrite+0x26>
	{
		set_bit(CE_CSN_PORT, CSN_BIT_POS);
    17ee:	88 e2       	ldi	r24, 0x28	; 40
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	28 e2       	ldi	r18, 0x28	; 40
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	f9 01       	movw	r30, r18
    17f8:	20 81       	ld	r18, Z
    17fa:	22 60       	ori	r18, 0x02	; 2
    17fc:	fc 01       	movw	r30, r24
    17fe:	20 83       	st	Z, r18
    1800:	09 c0       	rjmp	.+18     	; 0x1814 <nrf24_csn_digitalWrite+0x38>
	}
	else
	{
		clr_bit(CE_CSN_PORT, CSN_BIT_POS);
    1802:	88 e2       	ldi	r24, 0x28	; 40
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	28 e2       	ldi	r18, 0x28	; 40
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	f9 01       	movw	r30, r18
    180c:	20 81       	ld	r18, Z
    180e:	2d 7f       	andi	r18, 0xFD	; 253
    1810:	fc 01       	movw	r30, r24
    1812:	20 83       	st	Z, r18
	}
}
    1814:	0f 90       	pop	r0
    1816:	cf 91       	pop	r28
    1818:	df 91       	pop	r29
    181a:	08 95       	ret

0000181c <nrf24_sck_digitalWrite>:
/* ------------------------------------------------------------------------- */
void nrf24_sck_digitalWrite(uint8_t state)
{
    181c:	df 93       	push	r29
    181e:	cf 93       	push	r28
    1820:	0f 92       	push	r0
    1822:	cd b7       	in	r28, 0x3d	; 61
    1824:	de b7       	in	r29, 0x3e	; 62
    1826:	89 83       	std	Y+1, r24	; 0x01
	if(state)
    1828:	89 81       	ldd	r24, Y+1	; 0x01
    182a:	88 23       	and	r24, r24
    182c:	51 f0       	breq	.+20     	; 0x1842 <nrf24_sck_digitalWrite+0x26>
	{
		set_bit(RF_PORT, SCK_BIT_POS);
    182e:	8b e2       	ldi	r24, 0x2B	; 43
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	2b e2       	ldi	r18, 0x2B	; 43
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	f9 01       	movw	r30, r18
    1838:	20 81       	ld	r18, Z
    183a:	20 61       	ori	r18, 0x10	; 16
    183c:	fc 01       	movw	r30, r24
    183e:	20 83       	st	Z, r18
    1840:	09 c0       	rjmp	.+18     	; 0x1854 <nrf24_sck_digitalWrite+0x38>
	}
	else
	{
		clr_bit(RF_PORT, SCK_BIT_POS);
    1842:	8b e2       	ldi	r24, 0x2B	; 43
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	2b e2       	ldi	r18, 0x2B	; 43
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	f9 01       	movw	r30, r18
    184c:	20 81       	ld	r18, Z
    184e:	2f 7e       	andi	r18, 0xEF	; 239
    1850:	fc 01       	movw	r30, r24
    1852:	20 83       	st	Z, r18
	}
}
    1854:	0f 90       	pop	r0
    1856:	cf 91       	pop	r28
    1858:	df 91       	pop	r29
    185a:	08 95       	ret

0000185c <nrf24_mosi_digitalWrite>:
/* ------------------------------------------------------------------------- */
void nrf24_mosi_digitalWrite(uint8_t state)
{
    185c:	df 93       	push	r29
    185e:	cf 93       	push	r28
    1860:	0f 92       	push	r0
    1862:	cd b7       	in	r28, 0x3d	; 61
    1864:	de b7       	in	r29, 0x3e	; 62
    1866:	89 83       	std	Y+1, r24	; 0x01
	if(state)
    1868:	89 81       	ldd	r24, Y+1	; 0x01
    186a:	88 23       	and	r24, r24
    186c:	51 f0       	breq	.+20     	; 0x1882 <nrf24_mosi_digitalWrite+0x26>
	{
		set_bit(RF_PORT, MOSI_BIT_POS);
    186e:	8b e2       	ldi	r24, 0x2B	; 43
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	2b e2       	ldi	r18, 0x2B	; 43
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	f9 01       	movw	r30, r18
    1878:	20 81       	ld	r18, Z
    187a:	22 60       	ori	r18, 0x02	; 2
    187c:	fc 01       	movw	r30, r24
    187e:	20 83       	st	Z, r18
    1880:	09 c0       	rjmp	.+18     	; 0x1894 <nrf24_mosi_digitalWrite+0x38>
	}
	else
	{
		clr_bit(RF_PORT, MOSI_BIT_POS);
    1882:	8b e2       	ldi	r24, 0x2B	; 43
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	2b e2       	ldi	r18, 0x2B	; 43
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	f9 01       	movw	r30, r18
    188c:	20 81       	ld	r18, Z
    188e:	2d 7f       	andi	r18, 0xFD	; 253
    1890:	fc 01       	movw	r30, r24
    1892:	20 83       	st	Z, r18
	}
}
    1894:	0f 90       	pop	r0
    1896:	cf 91       	pop	r28
    1898:	df 91       	pop	r29
    189a:	08 95       	ret

0000189c <nrf24_miso_digitalRead>:
/* ------------------------------------------------------------------------- */
uint8_t nrf24_miso_digitalRead()
{
    189c:	df 93       	push	r29
    189e:	cf 93       	push	r28
    18a0:	cd b7       	in	r28, 0x3d	; 61
    18a2:	de b7       	in	r29, 0x3e	; 62
	return check_bit(RF_PIN, MISO_BIT_POS);
    18a4:	89 e2       	ldi	r24, 0x29	; 41
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	fc 01       	movw	r30, r24
    18aa:	80 81       	ld	r24, Z
    18ac:	81 70       	andi	r24, 0x01	; 1
}
    18ae:	cf 91       	pop	r28
    18b0:	df 91       	pop	r29
    18b2:	08 95       	ret

000018b4 <__cmpsf2>:
    18b4:	2f d0       	rcall	.+94     	; 0x1914 <__fp_cmp>
    18b6:	08 f4       	brcc	.+2      	; 0x18ba <__cmpsf2+0x6>
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	08 95       	ret

000018bc <__fixunssfsi>:
    18bc:	57 d0       	rcall	.+174    	; 0x196c <__fp_splitA>
    18be:	88 f0       	brcs	.+34     	; 0x18e2 <__fixunssfsi+0x26>
    18c0:	9f 57       	subi	r25, 0x7F	; 127
    18c2:	90 f0       	brcs	.+36     	; 0x18e8 <__fixunssfsi+0x2c>
    18c4:	b9 2f       	mov	r27, r25
    18c6:	99 27       	eor	r25, r25
    18c8:	b7 51       	subi	r27, 0x17	; 23
    18ca:	a0 f0       	brcs	.+40     	; 0x18f4 <__fixunssfsi+0x38>
    18cc:	d1 f0       	breq	.+52     	; 0x1902 <__fixunssfsi+0x46>
    18ce:	66 0f       	add	r22, r22
    18d0:	77 1f       	adc	r23, r23
    18d2:	88 1f       	adc	r24, r24
    18d4:	99 1f       	adc	r25, r25
    18d6:	1a f0       	brmi	.+6      	; 0x18de <__fixunssfsi+0x22>
    18d8:	ba 95       	dec	r27
    18da:	c9 f7       	brne	.-14     	; 0x18ce <__fixunssfsi+0x12>
    18dc:	12 c0       	rjmp	.+36     	; 0x1902 <__fixunssfsi+0x46>
    18de:	b1 30       	cpi	r27, 0x01	; 1
    18e0:	81 f0       	breq	.+32     	; 0x1902 <__fixunssfsi+0x46>
    18e2:	5e d0       	rcall	.+188    	; 0x19a0 <__fp_zero>
    18e4:	b1 e0       	ldi	r27, 0x01	; 1
    18e6:	08 95       	ret
    18e8:	5b c0       	rjmp	.+182    	; 0x19a0 <__fp_zero>
    18ea:	67 2f       	mov	r22, r23
    18ec:	78 2f       	mov	r23, r24
    18ee:	88 27       	eor	r24, r24
    18f0:	b8 5f       	subi	r27, 0xF8	; 248
    18f2:	39 f0       	breq	.+14     	; 0x1902 <__fixunssfsi+0x46>
    18f4:	b9 3f       	cpi	r27, 0xF9	; 249
    18f6:	cc f3       	brlt	.-14     	; 0x18ea <__fixunssfsi+0x2e>
    18f8:	86 95       	lsr	r24
    18fa:	77 95       	ror	r23
    18fc:	67 95       	ror	r22
    18fe:	b3 95       	inc	r27
    1900:	d9 f7       	brne	.-10     	; 0x18f8 <__fixunssfsi+0x3c>
    1902:	3e f4       	brtc	.+14     	; 0x1912 <__fixunssfsi+0x56>
    1904:	90 95       	com	r25
    1906:	80 95       	com	r24
    1908:	70 95       	com	r23
    190a:	61 95       	neg	r22
    190c:	7f 4f       	sbci	r23, 0xFF	; 255
    190e:	8f 4f       	sbci	r24, 0xFF	; 255
    1910:	9f 4f       	sbci	r25, 0xFF	; 255
    1912:	08 95       	ret

00001914 <__fp_cmp>:
    1914:	99 0f       	add	r25, r25
    1916:	00 08       	sbc	r0, r0
    1918:	55 0f       	add	r21, r21
    191a:	aa 0b       	sbc	r26, r26
    191c:	e0 e8       	ldi	r30, 0x80	; 128
    191e:	fe ef       	ldi	r31, 0xFE	; 254
    1920:	16 16       	cp	r1, r22
    1922:	17 06       	cpc	r1, r23
    1924:	e8 07       	cpc	r30, r24
    1926:	f9 07       	cpc	r31, r25
    1928:	c0 f0       	brcs	.+48     	; 0x195a <__fp_cmp+0x46>
    192a:	12 16       	cp	r1, r18
    192c:	13 06       	cpc	r1, r19
    192e:	e4 07       	cpc	r30, r20
    1930:	f5 07       	cpc	r31, r21
    1932:	98 f0       	brcs	.+38     	; 0x195a <__fp_cmp+0x46>
    1934:	62 1b       	sub	r22, r18
    1936:	73 0b       	sbc	r23, r19
    1938:	84 0b       	sbc	r24, r20
    193a:	95 0b       	sbc	r25, r21
    193c:	39 f4       	brne	.+14     	; 0x194c <__fp_cmp+0x38>
    193e:	0a 26       	eor	r0, r26
    1940:	61 f0       	breq	.+24     	; 0x195a <__fp_cmp+0x46>
    1942:	23 2b       	or	r18, r19
    1944:	24 2b       	or	r18, r20
    1946:	25 2b       	or	r18, r21
    1948:	21 f4       	brne	.+8      	; 0x1952 <__fp_cmp+0x3e>
    194a:	08 95       	ret
    194c:	0a 26       	eor	r0, r26
    194e:	09 f4       	brne	.+2      	; 0x1952 <__fp_cmp+0x3e>
    1950:	a1 40       	sbci	r26, 0x01	; 1
    1952:	a6 95       	lsr	r26
    1954:	8f ef       	ldi	r24, 0xFF	; 255
    1956:	81 1d       	adc	r24, r1
    1958:	81 1d       	adc	r24, r1
    195a:	08 95       	ret

0000195c <__fp_split3>:
    195c:	57 fd       	sbrc	r21, 7
    195e:	90 58       	subi	r25, 0x80	; 128
    1960:	44 0f       	add	r20, r20
    1962:	55 1f       	adc	r21, r21
    1964:	59 f0       	breq	.+22     	; 0x197c <__fp_splitA+0x10>
    1966:	5f 3f       	cpi	r21, 0xFF	; 255
    1968:	71 f0       	breq	.+28     	; 0x1986 <__fp_splitA+0x1a>
    196a:	47 95       	ror	r20

0000196c <__fp_splitA>:
    196c:	88 0f       	add	r24, r24
    196e:	97 fb       	bst	r25, 7
    1970:	99 1f       	adc	r25, r25
    1972:	61 f0       	breq	.+24     	; 0x198c <__fp_splitA+0x20>
    1974:	9f 3f       	cpi	r25, 0xFF	; 255
    1976:	79 f0       	breq	.+30     	; 0x1996 <__fp_splitA+0x2a>
    1978:	87 95       	ror	r24
    197a:	08 95       	ret
    197c:	12 16       	cp	r1, r18
    197e:	13 06       	cpc	r1, r19
    1980:	14 06       	cpc	r1, r20
    1982:	55 1f       	adc	r21, r21
    1984:	f2 cf       	rjmp	.-28     	; 0x196a <__fp_split3+0xe>
    1986:	46 95       	lsr	r20
    1988:	f1 df       	rcall	.-30     	; 0x196c <__fp_splitA>
    198a:	08 c0       	rjmp	.+16     	; 0x199c <__fp_splitA+0x30>
    198c:	16 16       	cp	r1, r22
    198e:	17 06       	cpc	r1, r23
    1990:	18 06       	cpc	r1, r24
    1992:	99 1f       	adc	r25, r25
    1994:	f1 cf       	rjmp	.-30     	; 0x1978 <__fp_splitA+0xc>
    1996:	86 95       	lsr	r24
    1998:	71 05       	cpc	r23, r1
    199a:	61 05       	cpc	r22, r1
    199c:	08 94       	sec
    199e:	08 95       	ret

000019a0 <__fp_zero>:
    19a0:	e8 94       	clt

000019a2 <__fp_szero>:
    19a2:	bb 27       	eor	r27, r27
    19a4:	66 27       	eor	r22, r22
    19a6:	77 27       	eor	r23, r23
    19a8:	cb 01       	movw	r24, r22
    19aa:	97 f9       	bld	r25, 7
    19ac:	08 95       	ret

000019ae <__gesf2>:
    19ae:	b2 df       	rcall	.-156    	; 0x1914 <__fp_cmp>
    19b0:	08 f4       	brcc	.+2      	; 0x19b4 <__gesf2+0x6>
    19b2:	8f ef       	ldi	r24, 0xFF	; 255
    19b4:	08 95       	ret

000019b6 <__mulsf3>:
    19b6:	0b d0       	rcall	.+22     	; 0x19ce <__mulsf3x>
    19b8:	78 c0       	rjmp	.+240    	; 0x1aaa <__fp_round>
    19ba:	69 d0       	rcall	.+210    	; 0x1a8e <__fp_pscA>
    19bc:	28 f0       	brcs	.+10     	; 0x19c8 <__mulsf3+0x12>
    19be:	6e d0       	rcall	.+220    	; 0x1a9c <__fp_pscB>
    19c0:	18 f0       	brcs	.+6      	; 0x19c8 <__mulsf3+0x12>
    19c2:	95 23       	and	r25, r21
    19c4:	09 f0       	breq	.+2      	; 0x19c8 <__mulsf3+0x12>
    19c6:	5a c0       	rjmp	.+180    	; 0x1a7c <__fp_inf>
    19c8:	5f c0       	rjmp	.+190    	; 0x1a88 <__fp_nan>
    19ca:	11 24       	eor	r1, r1
    19cc:	ea cf       	rjmp	.-44     	; 0x19a2 <__fp_szero>

000019ce <__mulsf3x>:
    19ce:	c6 df       	rcall	.-116    	; 0x195c <__fp_split3>
    19d0:	a0 f3       	brcs	.-24     	; 0x19ba <__mulsf3+0x4>

000019d2 <__mulsf3_pse>:
    19d2:	95 9f       	mul	r25, r21
    19d4:	d1 f3       	breq	.-12     	; 0x19ca <__mulsf3+0x14>
    19d6:	95 0f       	add	r25, r21
    19d8:	50 e0       	ldi	r21, 0x00	; 0
    19da:	55 1f       	adc	r21, r21
    19dc:	62 9f       	mul	r22, r18
    19de:	f0 01       	movw	r30, r0
    19e0:	72 9f       	mul	r23, r18
    19e2:	bb 27       	eor	r27, r27
    19e4:	f0 0d       	add	r31, r0
    19e6:	b1 1d       	adc	r27, r1
    19e8:	63 9f       	mul	r22, r19
    19ea:	aa 27       	eor	r26, r26
    19ec:	f0 0d       	add	r31, r0
    19ee:	b1 1d       	adc	r27, r1
    19f0:	aa 1f       	adc	r26, r26
    19f2:	64 9f       	mul	r22, r20
    19f4:	66 27       	eor	r22, r22
    19f6:	b0 0d       	add	r27, r0
    19f8:	a1 1d       	adc	r26, r1
    19fa:	66 1f       	adc	r22, r22
    19fc:	82 9f       	mul	r24, r18
    19fe:	22 27       	eor	r18, r18
    1a00:	b0 0d       	add	r27, r0
    1a02:	a1 1d       	adc	r26, r1
    1a04:	62 1f       	adc	r22, r18
    1a06:	73 9f       	mul	r23, r19
    1a08:	b0 0d       	add	r27, r0
    1a0a:	a1 1d       	adc	r26, r1
    1a0c:	62 1f       	adc	r22, r18
    1a0e:	83 9f       	mul	r24, r19
    1a10:	a0 0d       	add	r26, r0
    1a12:	61 1d       	adc	r22, r1
    1a14:	22 1f       	adc	r18, r18
    1a16:	74 9f       	mul	r23, r20
    1a18:	33 27       	eor	r19, r19
    1a1a:	a0 0d       	add	r26, r0
    1a1c:	61 1d       	adc	r22, r1
    1a1e:	23 1f       	adc	r18, r19
    1a20:	84 9f       	mul	r24, r20
    1a22:	60 0d       	add	r22, r0
    1a24:	21 1d       	adc	r18, r1
    1a26:	82 2f       	mov	r24, r18
    1a28:	76 2f       	mov	r23, r22
    1a2a:	6a 2f       	mov	r22, r26
    1a2c:	11 24       	eor	r1, r1
    1a2e:	9f 57       	subi	r25, 0x7F	; 127
    1a30:	50 40       	sbci	r21, 0x00	; 0
    1a32:	8a f0       	brmi	.+34     	; 0x1a56 <__mulsf3_pse+0x84>
    1a34:	e1 f0       	breq	.+56     	; 0x1a6e <__mulsf3_pse+0x9c>
    1a36:	88 23       	and	r24, r24
    1a38:	4a f0       	brmi	.+18     	; 0x1a4c <__mulsf3_pse+0x7a>
    1a3a:	ee 0f       	add	r30, r30
    1a3c:	ff 1f       	adc	r31, r31
    1a3e:	bb 1f       	adc	r27, r27
    1a40:	66 1f       	adc	r22, r22
    1a42:	77 1f       	adc	r23, r23
    1a44:	88 1f       	adc	r24, r24
    1a46:	91 50       	subi	r25, 0x01	; 1
    1a48:	50 40       	sbci	r21, 0x00	; 0
    1a4a:	a9 f7       	brne	.-22     	; 0x1a36 <__mulsf3_pse+0x64>
    1a4c:	9e 3f       	cpi	r25, 0xFE	; 254
    1a4e:	51 05       	cpc	r21, r1
    1a50:	70 f0       	brcs	.+28     	; 0x1a6e <__mulsf3_pse+0x9c>
    1a52:	14 c0       	rjmp	.+40     	; 0x1a7c <__fp_inf>
    1a54:	a6 cf       	rjmp	.-180    	; 0x19a2 <__fp_szero>
    1a56:	5f 3f       	cpi	r21, 0xFF	; 255
    1a58:	ec f3       	brlt	.-6      	; 0x1a54 <__mulsf3_pse+0x82>
    1a5a:	98 3e       	cpi	r25, 0xE8	; 232
    1a5c:	dc f3       	brlt	.-10     	; 0x1a54 <__mulsf3_pse+0x82>
    1a5e:	86 95       	lsr	r24
    1a60:	77 95       	ror	r23
    1a62:	67 95       	ror	r22
    1a64:	b7 95       	ror	r27
    1a66:	f7 95       	ror	r31
    1a68:	e7 95       	ror	r30
    1a6a:	9f 5f       	subi	r25, 0xFF	; 255
    1a6c:	c1 f7       	brne	.-16     	; 0x1a5e <__mulsf3_pse+0x8c>
    1a6e:	fe 2b       	or	r31, r30
    1a70:	88 0f       	add	r24, r24
    1a72:	91 1d       	adc	r25, r1
    1a74:	96 95       	lsr	r25
    1a76:	87 95       	ror	r24
    1a78:	97 f9       	bld	r25, 7
    1a7a:	08 95       	ret

00001a7c <__fp_inf>:
    1a7c:	97 f9       	bld	r25, 7
    1a7e:	9f 67       	ori	r25, 0x7F	; 127
    1a80:	80 e8       	ldi	r24, 0x80	; 128
    1a82:	70 e0       	ldi	r23, 0x00	; 0
    1a84:	60 e0       	ldi	r22, 0x00	; 0
    1a86:	08 95       	ret

00001a88 <__fp_nan>:
    1a88:	9f ef       	ldi	r25, 0xFF	; 255
    1a8a:	80 ec       	ldi	r24, 0xC0	; 192
    1a8c:	08 95       	ret

00001a8e <__fp_pscA>:
    1a8e:	00 24       	eor	r0, r0
    1a90:	0a 94       	dec	r0
    1a92:	16 16       	cp	r1, r22
    1a94:	17 06       	cpc	r1, r23
    1a96:	18 06       	cpc	r1, r24
    1a98:	09 06       	cpc	r0, r25
    1a9a:	08 95       	ret

00001a9c <__fp_pscB>:
    1a9c:	00 24       	eor	r0, r0
    1a9e:	0a 94       	dec	r0
    1aa0:	12 16       	cp	r1, r18
    1aa2:	13 06       	cpc	r1, r19
    1aa4:	14 06       	cpc	r1, r20
    1aa6:	05 06       	cpc	r0, r21
    1aa8:	08 95       	ret

00001aaa <__fp_round>:
    1aaa:	09 2e       	mov	r0, r25
    1aac:	03 94       	inc	r0
    1aae:	00 0c       	add	r0, r0
    1ab0:	11 f4       	brne	.+4      	; 0x1ab6 <__fp_round+0xc>
    1ab2:	88 23       	and	r24, r24
    1ab4:	52 f0       	brmi	.+20     	; 0x1aca <__fp_round+0x20>
    1ab6:	bb 0f       	add	r27, r27
    1ab8:	40 f4       	brcc	.+16     	; 0x1aca <__fp_round+0x20>
    1aba:	bf 2b       	or	r27, r31
    1abc:	11 f4       	brne	.+4      	; 0x1ac2 <__fp_round+0x18>
    1abe:	60 ff       	sbrs	r22, 0
    1ac0:	04 c0       	rjmp	.+8      	; 0x1aca <__fp_round+0x20>
    1ac2:	6f 5f       	subi	r22, 0xFF	; 255
    1ac4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ac6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ac8:	9f 4f       	sbci	r25, 0xFF	; 255
    1aca:	08 95       	ret

00001acc <calloc>:
    1acc:	ef 92       	push	r14
    1ace:	ff 92       	push	r15
    1ad0:	0f 93       	push	r16
    1ad2:	1f 93       	push	r17
    1ad4:	cf 93       	push	r28
    1ad6:	df 93       	push	r29
    1ad8:	68 9f       	mul	r22, r24
    1ada:	80 01       	movw	r16, r0
    1adc:	69 9f       	mul	r22, r25
    1ade:	10 0d       	add	r17, r0
    1ae0:	78 9f       	mul	r23, r24
    1ae2:	10 0d       	add	r17, r0
    1ae4:	11 24       	eor	r1, r1
    1ae6:	c8 01       	movw	r24, r16
    1ae8:	12 d0       	rcall	.+36     	; 0x1b0e <malloc>
    1aea:	e8 2e       	mov	r14, r24
    1aec:	e7 01       	movw	r28, r14
    1aee:	7e 01       	movw	r14, r28
    1af0:	f9 2e       	mov	r15, r25
    1af2:	e7 01       	movw	r28, r14
    1af4:	20 97       	sbiw	r28, 0x00	; 0
    1af6:	29 f0       	breq	.+10     	; 0x1b02 <calloc+0x36>
    1af8:	8e 2d       	mov	r24, r14
    1afa:	60 e0       	ldi	r22, 0x00	; 0
    1afc:	70 e0       	ldi	r23, 0x00	; 0
    1afe:	a8 01       	movw	r20, r16
    1b00:	92 d1       	rcall	.+804    	; 0x1e26 <memset>
    1b02:	7e 01       	movw	r14, r28
    1b04:	ce 01       	movw	r24, r28
    1b06:	cd b7       	in	r28, 0x3d	; 61
    1b08:	de b7       	in	r29, 0x3e	; 62
    1b0a:	e6 e0       	ldi	r30, 0x06	; 6
    1b0c:	b0 c1       	rjmp	.+864    	; 0x1e6e <__epilogue_restores__+0x18>

00001b0e <malloc>:
    1b0e:	cf 93       	push	r28
    1b10:	df 93       	push	r29
    1b12:	82 30       	cpi	r24, 0x02	; 2
    1b14:	91 05       	cpc	r25, r1
    1b16:	10 f4       	brcc	.+4      	; 0x1b1c <malloc+0xe>
    1b18:	82 e0       	ldi	r24, 0x02	; 2
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	e0 91 9d 01 	lds	r30, 0x019D
    1b20:	f0 91 9e 01 	lds	r31, 0x019E
    1b24:	40 e0       	ldi	r20, 0x00	; 0
    1b26:	50 e0       	ldi	r21, 0x00	; 0
    1b28:	20 e0       	ldi	r18, 0x00	; 0
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	26 c0       	rjmp	.+76     	; 0x1b7a <malloc+0x6c>
    1b2e:	60 81       	ld	r22, Z
    1b30:	71 81       	ldd	r23, Z+1	; 0x01
    1b32:	68 17       	cp	r22, r24
    1b34:	79 07       	cpc	r23, r25
    1b36:	e0 f0       	brcs	.+56     	; 0x1b70 <malloc+0x62>
    1b38:	68 17       	cp	r22, r24
    1b3a:	79 07       	cpc	r23, r25
    1b3c:	81 f4       	brne	.+32     	; 0x1b5e <malloc+0x50>
    1b3e:	82 81       	ldd	r24, Z+2	; 0x02
    1b40:	93 81       	ldd	r25, Z+3	; 0x03
    1b42:	21 15       	cp	r18, r1
    1b44:	31 05       	cpc	r19, r1
    1b46:	31 f0       	breq	.+12     	; 0x1b54 <malloc+0x46>
    1b48:	d9 01       	movw	r26, r18
    1b4a:	13 96       	adiw	r26, 0x03	; 3
    1b4c:	9c 93       	st	X, r25
    1b4e:	8e 93       	st	-X, r24
    1b50:	12 97       	sbiw	r26, 0x02	; 2
    1b52:	2b c0       	rjmp	.+86     	; 0x1baa <malloc+0x9c>
    1b54:	90 93 9e 01 	sts	0x019E, r25
    1b58:	80 93 9d 01 	sts	0x019D, r24
    1b5c:	26 c0       	rjmp	.+76     	; 0x1baa <malloc+0x9c>
    1b5e:	41 15       	cp	r20, r1
    1b60:	51 05       	cpc	r21, r1
    1b62:	19 f0       	breq	.+6      	; 0x1b6a <malloc+0x5c>
    1b64:	64 17       	cp	r22, r20
    1b66:	75 07       	cpc	r23, r21
    1b68:	18 f4       	brcc	.+6      	; 0x1b70 <malloc+0x62>
    1b6a:	ab 01       	movw	r20, r22
    1b6c:	e9 01       	movw	r28, r18
    1b6e:	df 01       	movw	r26, r30
    1b70:	9f 01       	movw	r18, r30
    1b72:	72 81       	ldd	r23, Z+2	; 0x02
    1b74:	63 81       	ldd	r22, Z+3	; 0x03
    1b76:	e7 2f       	mov	r30, r23
    1b78:	f6 2f       	mov	r31, r22
    1b7a:	30 97       	sbiw	r30, 0x00	; 0
    1b7c:	c1 f6       	brne	.-80     	; 0x1b2e <malloc+0x20>
    1b7e:	41 15       	cp	r20, r1
    1b80:	51 05       	cpc	r21, r1
    1b82:	01 f1       	breq	.+64     	; 0x1bc4 <malloc+0xb6>
    1b84:	48 1b       	sub	r20, r24
    1b86:	59 0b       	sbc	r21, r25
    1b88:	44 30       	cpi	r20, 0x04	; 4
    1b8a:	51 05       	cpc	r21, r1
    1b8c:	80 f4       	brcc	.+32     	; 0x1bae <malloc+0xa0>
    1b8e:	12 96       	adiw	r26, 0x02	; 2
    1b90:	8d 91       	ld	r24, X+
    1b92:	9c 91       	ld	r25, X
    1b94:	13 97       	sbiw	r26, 0x03	; 3
    1b96:	20 97       	sbiw	r28, 0x00	; 0
    1b98:	19 f0       	breq	.+6      	; 0x1ba0 <malloc+0x92>
    1b9a:	9b 83       	std	Y+3, r25	; 0x03
    1b9c:	8a 83       	std	Y+2, r24	; 0x02
    1b9e:	04 c0       	rjmp	.+8      	; 0x1ba8 <malloc+0x9a>
    1ba0:	90 93 9e 01 	sts	0x019E, r25
    1ba4:	80 93 9d 01 	sts	0x019D, r24
    1ba8:	fd 01       	movw	r30, r26
    1baa:	32 96       	adiw	r30, 0x02	; 2
    1bac:	46 c0       	rjmp	.+140    	; 0x1c3a <malloc+0x12c>
    1bae:	fd 01       	movw	r30, r26
    1bb0:	e4 0f       	add	r30, r20
    1bb2:	f5 1f       	adc	r31, r21
    1bb4:	81 93       	st	Z+, r24
    1bb6:	91 93       	st	Z+, r25
    1bb8:	42 50       	subi	r20, 0x02	; 2
    1bba:	50 40       	sbci	r21, 0x00	; 0
    1bbc:	11 96       	adiw	r26, 0x01	; 1
    1bbe:	5c 93       	st	X, r21
    1bc0:	4e 93       	st	-X, r20
    1bc2:	3b c0       	rjmp	.+118    	; 0x1c3a <malloc+0x12c>
    1bc4:	20 91 9b 01 	lds	r18, 0x019B
    1bc8:	30 91 9c 01 	lds	r19, 0x019C
    1bcc:	21 15       	cp	r18, r1
    1bce:	31 05       	cpc	r19, r1
    1bd0:	41 f4       	brne	.+16     	; 0x1be2 <malloc+0xd4>
    1bd2:	20 91 63 01 	lds	r18, 0x0163
    1bd6:	30 91 64 01 	lds	r19, 0x0164
    1bda:	30 93 9c 01 	sts	0x019C, r19
    1bde:	20 93 9b 01 	sts	0x019B, r18
    1be2:	20 91 65 01 	lds	r18, 0x0165
    1be6:	30 91 66 01 	lds	r19, 0x0166
    1bea:	21 15       	cp	r18, r1
    1bec:	31 05       	cpc	r19, r1
    1bee:	41 f4       	brne	.+16     	; 0x1c00 <malloc+0xf2>
    1bf0:	2d b7       	in	r18, 0x3d	; 61
    1bf2:	3e b7       	in	r19, 0x3e	; 62
    1bf4:	40 91 61 01 	lds	r20, 0x0161
    1bf8:	50 91 62 01 	lds	r21, 0x0162
    1bfc:	24 1b       	sub	r18, r20
    1bfe:	35 0b       	sbc	r19, r21
    1c00:	e0 91 9b 01 	lds	r30, 0x019B
    1c04:	f0 91 9c 01 	lds	r31, 0x019C
    1c08:	e2 17       	cp	r30, r18
    1c0a:	f3 07       	cpc	r31, r19
    1c0c:	a0 f4       	brcc	.+40     	; 0x1c36 <malloc+0x128>
    1c0e:	2e 1b       	sub	r18, r30
    1c10:	3f 0b       	sbc	r19, r31
    1c12:	28 17       	cp	r18, r24
    1c14:	39 07       	cpc	r19, r25
    1c16:	78 f0       	brcs	.+30     	; 0x1c36 <malloc+0x128>
    1c18:	ac 01       	movw	r20, r24
    1c1a:	4e 5f       	subi	r20, 0xFE	; 254
    1c1c:	5f 4f       	sbci	r21, 0xFF	; 255
    1c1e:	24 17       	cp	r18, r20
    1c20:	35 07       	cpc	r19, r21
    1c22:	48 f0       	brcs	.+18     	; 0x1c36 <malloc+0x128>
    1c24:	4e 0f       	add	r20, r30
    1c26:	5f 1f       	adc	r21, r31
    1c28:	50 93 9c 01 	sts	0x019C, r21
    1c2c:	40 93 9b 01 	sts	0x019B, r20
    1c30:	81 93       	st	Z+, r24
    1c32:	91 93       	st	Z+, r25
    1c34:	02 c0       	rjmp	.+4      	; 0x1c3a <malloc+0x12c>
    1c36:	e0 e0       	ldi	r30, 0x00	; 0
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	cf 01       	movw	r24, r30
    1c3c:	df 91       	pop	r29
    1c3e:	cf 91       	pop	r28
    1c40:	08 95       	ret

00001c42 <free>:
    1c42:	cf 93       	push	r28
    1c44:	df 93       	push	r29
    1c46:	00 97       	sbiw	r24, 0x00	; 0
    1c48:	09 f4       	brne	.+2      	; 0x1c4c <free+0xa>
    1c4a:	91 c0       	rjmp	.+290    	; 0x1d6e <free+0x12c>
    1c4c:	fc 01       	movw	r30, r24
    1c4e:	32 97       	sbiw	r30, 0x02	; 2
    1c50:	13 82       	std	Z+3, r1	; 0x03
    1c52:	12 82       	std	Z+2, r1	; 0x02
    1c54:	60 91 9d 01 	lds	r22, 0x019D
    1c58:	70 91 9e 01 	lds	r23, 0x019E
    1c5c:	61 15       	cp	r22, r1
    1c5e:	71 05       	cpc	r23, r1
    1c60:	81 f4       	brne	.+32     	; 0x1c82 <free+0x40>
    1c62:	20 81       	ld	r18, Z
    1c64:	31 81       	ldd	r19, Z+1	; 0x01
    1c66:	28 0f       	add	r18, r24
    1c68:	39 1f       	adc	r19, r25
    1c6a:	80 91 9b 01 	lds	r24, 0x019B
    1c6e:	90 91 9c 01 	lds	r25, 0x019C
    1c72:	82 17       	cp	r24, r18
    1c74:	93 07       	cpc	r25, r19
    1c76:	99 f5       	brne	.+102    	; 0x1cde <free+0x9c>
    1c78:	f0 93 9c 01 	sts	0x019C, r31
    1c7c:	e0 93 9b 01 	sts	0x019B, r30
    1c80:	76 c0       	rjmp	.+236    	; 0x1d6e <free+0x12c>
    1c82:	db 01       	movw	r26, r22
    1c84:	80 e0       	ldi	r24, 0x00	; 0
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	02 c0       	rjmp	.+4      	; 0x1c8e <free+0x4c>
    1c8a:	cd 01       	movw	r24, r26
    1c8c:	d9 01       	movw	r26, r18
    1c8e:	ae 17       	cp	r26, r30
    1c90:	bf 07       	cpc	r27, r31
    1c92:	48 f4       	brcc	.+18     	; 0x1ca6 <free+0x64>
    1c94:	12 96       	adiw	r26, 0x02	; 2
    1c96:	2d 91       	ld	r18, X+
    1c98:	3c 91       	ld	r19, X
    1c9a:	13 97       	sbiw	r26, 0x03	; 3
    1c9c:	21 15       	cp	r18, r1
    1c9e:	31 05       	cpc	r19, r1
    1ca0:	a1 f7       	brne	.-24     	; 0x1c8a <free+0x48>
    1ca2:	cd 01       	movw	r24, r26
    1ca4:	21 c0       	rjmp	.+66     	; 0x1ce8 <free+0xa6>
    1ca6:	b3 83       	std	Z+3, r27	; 0x03
    1ca8:	a2 83       	std	Z+2, r26	; 0x02
    1caa:	ef 01       	movw	r28, r30
    1cac:	49 91       	ld	r20, Y+
    1cae:	59 91       	ld	r21, Y+
    1cb0:	9e 01       	movw	r18, r28
    1cb2:	24 0f       	add	r18, r20
    1cb4:	35 1f       	adc	r19, r21
    1cb6:	a2 17       	cp	r26, r18
    1cb8:	b3 07       	cpc	r27, r19
    1cba:	79 f4       	brne	.+30     	; 0x1cda <free+0x98>
    1cbc:	2d 91       	ld	r18, X+
    1cbe:	3c 91       	ld	r19, X
    1cc0:	11 97       	sbiw	r26, 0x01	; 1
    1cc2:	24 0f       	add	r18, r20
    1cc4:	35 1f       	adc	r19, r21
    1cc6:	2e 5f       	subi	r18, 0xFE	; 254
    1cc8:	3f 4f       	sbci	r19, 0xFF	; 255
    1cca:	31 83       	std	Z+1, r19	; 0x01
    1ccc:	20 83       	st	Z, r18
    1cce:	12 96       	adiw	r26, 0x02	; 2
    1cd0:	2d 91       	ld	r18, X+
    1cd2:	3c 91       	ld	r19, X
    1cd4:	13 97       	sbiw	r26, 0x03	; 3
    1cd6:	33 83       	std	Z+3, r19	; 0x03
    1cd8:	22 83       	std	Z+2, r18	; 0x02
    1cda:	00 97       	sbiw	r24, 0x00	; 0
    1cdc:	29 f4       	brne	.+10     	; 0x1ce8 <free+0xa6>
    1cde:	f0 93 9e 01 	sts	0x019E, r31
    1ce2:	e0 93 9d 01 	sts	0x019D, r30
    1ce6:	43 c0       	rjmp	.+134    	; 0x1d6e <free+0x12c>
    1ce8:	dc 01       	movw	r26, r24
    1cea:	13 96       	adiw	r26, 0x03	; 3
    1cec:	fc 93       	st	X, r31
    1cee:	ee 93       	st	-X, r30
    1cf0:	12 97       	sbiw	r26, 0x02	; 2
    1cf2:	4d 91       	ld	r20, X+
    1cf4:	5d 91       	ld	r21, X+
    1cf6:	a4 0f       	add	r26, r20
    1cf8:	b5 1f       	adc	r27, r21
    1cfa:	ea 17       	cp	r30, r26
    1cfc:	fb 07       	cpc	r31, r27
    1cfe:	69 f4       	brne	.+26     	; 0x1d1a <free+0xd8>
    1d00:	20 81       	ld	r18, Z
    1d02:	31 81       	ldd	r19, Z+1	; 0x01
    1d04:	24 0f       	add	r18, r20
    1d06:	35 1f       	adc	r19, r21
    1d08:	2e 5f       	subi	r18, 0xFE	; 254
    1d0a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d0c:	ec 01       	movw	r28, r24
    1d0e:	39 83       	std	Y+1, r19	; 0x01
    1d10:	28 83       	st	Y, r18
    1d12:	22 81       	ldd	r18, Z+2	; 0x02
    1d14:	33 81       	ldd	r19, Z+3	; 0x03
    1d16:	3b 83       	std	Y+3, r19	; 0x03
    1d18:	2a 83       	std	Y+2, r18	; 0x02
    1d1a:	e0 e0       	ldi	r30, 0x00	; 0
    1d1c:	f0 e0       	ldi	r31, 0x00	; 0
    1d1e:	02 c0       	rjmp	.+4      	; 0x1d24 <free+0xe2>
    1d20:	fb 01       	movw	r30, r22
    1d22:	bc 01       	movw	r22, r24
    1d24:	db 01       	movw	r26, r22
    1d26:	12 96       	adiw	r26, 0x02	; 2
    1d28:	8d 91       	ld	r24, X+
    1d2a:	9c 91       	ld	r25, X
    1d2c:	13 97       	sbiw	r26, 0x03	; 3
    1d2e:	00 97       	sbiw	r24, 0x00	; 0
    1d30:	b9 f7       	brne	.-18     	; 0x1d20 <free+0xde>
    1d32:	9b 01       	movw	r18, r22
    1d34:	2e 5f       	subi	r18, 0xFE	; 254
    1d36:	3f 4f       	sbci	r19, 0xFF	; 255
    1d38:	8d 91       	ld	r24, X+
    1d3a:	9c 91       	ld	r25, X
    1d3c:	11 97       	sbiw	r26, 0x01	; 1
    1d3e:	82 0f       	add	r24, r18
    1d40:	93 1f       	adc	r25, r19
    1d42:	40 91 9b 01 	lds	r20, 0x019B
    1d46:	50 91 9c 01 	lds	r21, 0x019C
    1d4a:	48 17       	cp	r20, r24
    1d4c:	59 07       	cpc	r21, r25
    1d4e:	79 f4       	brne	.+30     	; 0x1d6e <free+0x12c>
    1d50:	30 97       	sbiw	r30, 0x00	; 0
    1d52:	29 f4       	brne	.+10     	; 0x1d5e <free+0x11c>
    1d54:	10 92 9e 01 	sts	0x019E, r1
    1d58:	10 92 9d 01 	sts	0x019D, r1
    1d5c:	02 c0       	rjmp	.+4      	; 0x1d62 <free+0x120>
    1d5e:	13 82       	std	Z+3, r1	; 0x03
    1d60:	12 82       	std	Z+2, r1	; 0x02
    1d62:	22 50       	subi	r18, 0x02	; 2
    1d64:	30 40       	sbci	r19, 0x00	; 0
    1d66:	30 93 9c 01 	sts	0x019C, r19
    1d6a:	20 93 9b 01 	sts	0x019B, r18
    1d6e:	df 91       	pop	r29
    1d70:	cf 91       	pop	r28
    1d72:	08 95       	ret

00001d74 <atoi>:
    1d74:	fc 01       	movw	r30, r24
    1d76:	88 27       	eor	r24, r24
    1d78:	99 27       	eor	r25, r25
    1d7a:	e8 94       	clt
    1d7c:	21 91       	ld	r18, Z+
    1d7e:	20 32       	cpi	r18, 0x20	; 32
    1d80:	e9 f3       	breq	.-6      	; 0x1d7c <atoi+0x8>
    1d82:	29 30       	cpi	r18, 0x09	; 9
    1d84:	10 f0       	brcs	.+4      	; 0x1d8a <atoi+0x16>
    1d86:	2e 30       	cpi	r18, 0x0E	; 14
    1d88:	c8 f3       	brcs	.-14     	; 0x1d7c <atoi+0x8>
    1d8a:	2b 32       	cpi	r18, 0x2B	; 43
    1d8c:	39 f0       	breq	.+14     	; 0x1d9c <atoi+0x28>
    1d8e:	2d 32       	cpi	r18, 0x2D	; 45
    1d90:	31 f4       	brne	.+12     	; 0x1d9e <atoi+0x2a>
    1d92:	68 94       	set
    1d94:	03 c0       	rjmp	.+6      	; 0x1d9c <atoi+0x28>
    1d96:	57 d0       	rcall	.+174    	; 0x1e46 <__mulhi_const_10>
    1d98:	82 0f       	add	r24, r18
    1d9a:	91 1d       	adc	r25, r1
    1d9c:	21 91       	ld	r18, Z+
    1d9e:	20 53       	subi	r18, 0x30	; 48
    1da0:	2a 30       	cpi	r18, 0x0A	; 10
    1da2:	c8 f3       	brcs	.-14     	; 0x1d96 <atoi+0x22>
    1da4:	1e f4       	brtc	.+6      	; 0x1dac <atoi+0x38>
    1da6:	90 95       	com	r25
    1da8:	81 95       	neg	r24
    1daa:	9f 4f       	sbci	r25, 0xFF	; 255
    1dac:	08 95       	ret

00001dae <memchr>:
    1dae:	fc 01       	movw	r30, r24
    1db0:	41 50       	subi	r20, 0x01	; 1
    1db2:	50 40       	sbci	r21, 0x00	; 0
    1db4:	30 f0       	brcs	.+12     	; 0x1dc2 <memchr+0x14>
    1db6:	01 90       	ld	r0, Z+
    1db8:	06 16       	cp	r0, r22
    1dba:	d1 f7       	brne	.-12     	; 0x1db0 <memchr+0x2>
    1dbc:	31 97       	sbiw	r30, 0x01	; 1
    1dbe:	cf 01       	movw	r24, r30
    1dc0:	08 95       	ret
    1dc2:	88 27       	eor	r24, r24
    1dc4:	99 27       	eor	r25, r25
    1dc6:	08 95       	ret

00001dc8 <memcpy>:
    1dc8:	fb 01       	movw	r30, r22
    1dca:	dc 01       	movw	r26, r24
    1dcc:	02 c0       	rjmp	.+4      	; 0x1dd2 <memcpy+0xa>
    1dce:	01 90       	ld	r0, Z+
    1dd0:	0d 92       	st	X+, r0
    1dd2:	41 50       	subi	r20, 0x01	; 1
    1dd4:	50 40       	sbci	r21, 0x00	; 0
    1dd6:	d8 f7       	brcc	.-10     	; 0x1dce <memcpy+0x6>
    1dd8:	08 95       	ret

00001dda <memmem>:
    1dda:	21 15       	cp	r18, r1
    1ddc:	31 05       	cpc	r19, r1
    1dde:	11 f1       	breq	.+68     	; 0x1e24 <memmem+0x4a>
    1de0:	1f 93       	push	r17
    1de2:	0f 93       	push	r16
    1de4:	24 0f       	add	r18, r20
    1de6:	35 1f       	adc	r19, r21
    1de8:	68 0f       	add	r22, r24
    1dea:	79 1f       	adc	r23, r25
    1dec:	fa 01       	movw	r30, r20
    1dee:	11 91       	ld	r17, Z+
    1df0:	af 01       	movw	r20, r30
    1df2:	dc 01       	movw	r26, r24
    1df4:	a6 17       	cp	r26, r22
    1df6:	b7 07       	cpc	r27, r23
    1df8:	80 f4       	brcc	.+32     	; 0x1e1a <memmem+0x40>
    1dfa:	0d 91       	ld	r16, X+
    1dfc:	01 17       	cp	r16, r17
    1dfe:	d1 f7       	brne	.-12     	; 0x1df4 <memmem+0x1a>
    1e00:	cd 01       	movw	r24, r26
    1e02:	fa 01       	movw	r30, r20
    1e04:	e2 17       	cp	r30, r18
    1e06:	f3 07       	cpc	r31, r19
    1e08:	50 f4       	brcc	.+20     	; 0x1e1e <memmem+0x44>
    1e0a:	a6 17       	cp	r26, r22
    1e0c:	b7 07       	cpc	r27, r23
    1e0e:	28 f4       	brcc	.+10     	; 0x1e1a <memmem+0x40>
    1e10:	0d 91       	ld	r16, X+
    1e12:	01 90       	ld	r0, Z+
    1e14:	00 15       	cp	r16, r0
    1e16:	b1 f3       	breq	.-20     	; 0x1e04 <memmem+0x2a>
    1e18:	ec cf       	rjmp	.-40     	; 0x1df2 <memmem+0x18>
    1e1a:	81 e0       	ldi	r24, 0x01	; 1
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	01 97       	sbiw	r24, 0x01	; 1
    1e20:	0f 91       	pop	r16
    1e22:	1f 91       	pop	r17
    1e24:	08 95       	ret

00001e26 <memset>:
    1e26:	dc 01       	movw	r26, r24
    1e28:	01 c0       	rjmp	.+2      	; 0x1e2c <memset+0x6>
    1e2a:	6d 93       	st	X+, r22
    1e2c:	41 50       	subi	r20, 0x01	; 1
    1e2e:	50 40       	sbci	r21, 0x00	; 0
    1e30:	e0 f7       	brcc	.-8      	; 0x1e2a <memset+0x4>
    1e32:	08 95       	ret

00001e34 <strlen>:
    1e34:	fc 01       	movw	r30, r24
    1e36:	01 90       	ld	r0, Z+
    1e38:	00 20       	and	r0, r0
    1e3a:	e9 f7       	brne	.-6      	; 0x1e36 <strlen+0x2>
    1e3c:	80 95       	com	r24
    1e3e:	90 95       	com	r25
    1e40:	8e 0f       	add	r24, r30
    1e42:	9f 1f       	adc	r25, r31
    1e44:	08 95       	ret

00001e46 <__mulhi_const_10>:
    1e46:	7a e0       	ldi	r23, 0x0A	; 10
    1e48:	97 9f       	mul	r25, r23
    1e4a:	90 2d       	mov	r25, r0
    1e4c:	87 9f       	mul	r24, r23
    1e4e:	80 2d       	mov	r24, r0
    1e50:	91 0d       	add	r25, r1
    1e52:	11 24       	eor	r1, r1
    1e54:	08 95       	ret

00001e56 <__epilogue_restores__>:
    1e56:	2a 88       	ldd	r2, Y+18	; 0x12
    1e58:	39 88       	ldd	r3, Y+17	; 0x11
    1e5a:	48 88       	ldd	r4, Y+16	; 0x10
    1e5c:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e5e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e60:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e62:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e64:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e66:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e68:	b9 84       	ldd	r11, Y+9	; 0x09
    1e6a:	c8 84       	ldd	r12, Y+8	; 0x08
    1e6c:	df 80       	ldd	r13, Y+7	; 0x07
    1e6e:	ee 80       	ldd	r14, Y+6	; 0x06
    1e70:	fd 80       	ldd	r15, Y+5	; 0x05
    1e72:	0c 81       	ldd	r16, Y+4	; 0x04
    1e74:	1b 81       	ldd	r17, Y+3	; 0x03
    1e76:	aa 81       	ldd	r26, Y+2	; 0x02
    1e78:	b9 81       	ldd	r27, Y+1	; 0x01
    1e7a:	ce 0f       	add	r28, r30
    1e7c:	d1 1d       	adc	r29, r1
    1e7e:	0f b6       	in	r0, 0x3f	; 63
    1e80:	f8 94       	cli
    1e82:	de bf       	out	0x3e, r29	; 62
    1e84:	0f be       	out	0x3f, r0	; 63
    1e86:	cd bf       	out	0x3d, r28	; 61
    1e88:	ed 01       	movw	r28, r26
    1e8a:	08 95       	ret

00001e8c <_exit>:
    1e8c:	f8 94       	cli

00001e8e <__stop_program>:
    1e8e:	ff cf       	rjmp	.-2      	; 0x1e8e <__stop_program>
