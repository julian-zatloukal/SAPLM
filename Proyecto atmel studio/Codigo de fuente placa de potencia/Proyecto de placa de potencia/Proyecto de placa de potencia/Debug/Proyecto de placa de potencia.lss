
Proyecto de placa de potencia.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  000022c0  00002354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000022c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000036  00800128  00800128  0000237c  2**0
                  ALLOC
  3 .stab         00001728  00000000  00000000  0000237c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000762  00000000  00000000  00003aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000258  00000000  00000000  00004206  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000007fe  00000000  00000000  0000445e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001b38  00000000  00000000  00004c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000008e5  00000000  00000000  00006794  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000021dd  00000000  00000000  00007079  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000003d0  00000000  00000000  00009258  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000c01  00000000  00000000  00009628  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007c5  00000000  00000000  0000a229  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000002c1  00000000  00000000  0000a9ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000001e8  00000000  00000000  0000acaf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e0 ec       	ldi	r30, 0xC0	; 192
      7c:	f2 e2       	ldi	r31, 0x22	; 34
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a8 32       	cpi	r26, 0x28	; 40
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a8 e2       	ldi	r26, 0x28	; 40
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ae 35       	cpi	r26, 0x5E	; 94
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 69 07 	call	0xed2	; 0xed2 <main>
      9e:	0c 94 5e 11 	jmp	0x22bc	; 0x22bc <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <crc_init>:
 * Calculate the initial crc value.
 *
 * \return     The initial crc value.
 */
static inline crc_t crc_init(void)
{
      a6:	df 93       	push	r29
      a8:	cf 93       	push	r28
      aa:	cd b7       	in	r28, 0x3d	; 61
      ac:	de b7       	in	r29, 0x3e	; 62
    return 0x00;
      ae:	80 e0       	ldi	r24, 0x00	; 0
}
      b0:	cf 91       	pop	r28
      b2:	df 91       	pop	r29
      b4:	08 95       	ret

000000b6 <crc_finalize>:
 *
 * \param[in] crc  The current crc value.
 * \return     The final crc value.
 */
static inline crc_t crc_finalize(crc_t crc)
{
      b6:	df 93       	push	r29
      b8:	cf 93       	push	r28
      ba:	0f 92       	push	r0
      bc:	cd b7       	in	r28, 0x3d	; 61
      be:	de b7       	in	r29, 0x3e	; 62
      c0:	89 83       	std	Y+1, r24	; 0x01
    return crc;
      c2:	89 81       	ldd	r24, Y+1	; 0x01
}
      c4:	0f 90       	pop	r0
      c6:	cf 91       	pop	r28
      c8:	df 91       	pop	r29
      ca:	08 95       	ret

000000cc <initliazeMemory>:
	{ .handlerFunction = &GET_DEVICE_VALUE_H},
	{ .handlerFunction = &MESSAGE_STATUS_H}
};
#define commandListLength (uint8_t)(sizeof commandList/sizeof commandList[0])

bool initliazeMemory(){
      cc:	0f 93       	push	r16
      ce:	1f 93       	push	r17
      d0:	df 93       	push	r29
      d2:	cf 93       	push	r28
      d4:	00 d0       	rcall	.+0      	; 0xd6 <initliazeMemory+0xa>
      d6:	cd b7       	in	r28, 0x3d	; 61
      d8:	de b7       	in	r29, 0x3e	; 62
	if(memoryInitialized) return false;
      da:	80 91 56 01 	lds	r24, 0x0156
      de:	88 23       	and	r24, r24
      e0:	11 f0       	breq	.+4      	; 0xe6 <initliazeMemory+0x1a>
      e2:	80 e0       	ldi	r24, 0x00	; 0
      e4:	6a c0       	rjmp	.+212    	; 0x1ba <initliazeMemory+0xee>
	parameter[0].startingPointer = (void*)calloc(23,1);
      e6:	87 e1       	ldi	r24, 0x17	; 23
      e8:	90 e0       	ldi	r25, 0x00	; 0
      ea:	61 e0       	ldi	r22, 0x01	; 1
      ec:	70 e0       	ldi	r23, 0x00	; 0
      ee:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <calloc>
      f2:	90 93 2d 01 	sts	0x012D, r25
      f6:	80 93 2c 01 	sts	0x012C, r24
	parameter[1].startingPointer = (void*)calloc(2,1);
      fa:	82 e0       	ldi	r24, 0x02	; 2
      fc:	90 e0       	ldi	r25, 0x00	; 0
      fe:	61 e0       	ldi	r22, 0x01	; 1
     100:	70 e0       	ldi	r23, 0x00	; 0
     102:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <calloc>
     106:	90 93 30 01 	sts	0x0130, r25
     10a:	80 93 2f 01 	sts	0x012F, r24
	parameter[2].startingPointer = (void*)calloc(2,1);
     10e:	82 e0       	ldi	r24, 0x02	; 2
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	61 e0       	ldi	r22, 0x01	; 1
     114:	70 e0       	ldi	r23, 0x00	; 0
     116:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <calloc>
     11a:	90 93 33 01 	sts	0x0133, r25
     11e:	80 93 32 01 	sts	0x0132, r24
	for (uint8_t x = 3; x<12; x++) parameter[x].startingPointer = (void*)calloc(1,1);
     122:	83 e0       	ldi	r24, 0x03	; 3
     124:	89 83       	std	Y+1, r24	; 0x01
     126:	17 c0       	rjmp	.+46     	; 0x156 <initliazeMemory+0x8a>
     128:	89 81       	ldd	r24, Y+1	; 0x01
     12a:	08 2f       	mov	r16, r24
     12c:	10 e0       	ldi	r17, 0x00	; 0
     12e:	81 e0       	ldi	r24, 0x01	; 1
     130:	90 e0       	ldi	r25, 0x00	; 0
     132:	61 e0       	ldi	r22, 0x01	; 1
     134:	70 e0       	ldi	r23, 0x00	; 0
     136:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <calloc>
     13a:	9c 01       	movw	r18, r24
     13c:	c8 01       	movw	r24, r16
     13e:	88 0f       	add	r24, r24
     140:	99 1f       	adc	r25, r25
     142:	80 0f       	add	r24, r16
     144:	91 1f       	adc	r25, r17
     146:	84 5d       	subi	r24, 0xD4	; 212
     148:	9e 4f       	sbci	r25, 0xFE	; 254
     14a:	fc 01       	movw	r30, r24
     14c:	31 83       	std	Z+1, r19	; 0x01
     14e:	20 83       	st	Z, r18
     150:	89 81       	ldd	r24, Y+1	; 0x01
     152:	8f 5f       	subi	r24, 0xFF	; 255
     154:	89 83       	std	Y+1, r24	; 0x01
     156:	89 81       	ldd	r24, Y+1	; 0x01
     158:	8c 30       	cpi	r24, 0x0C	; 12
     15a:	30 f3       	brcs	.-52     	; 0x128 <initliazeMemory+0x5c>
	command_buffer = (uint8_t*)calloc(32,1);
     15c:	80 e2       	ldi	r24, 0x20	; 32
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	61 e0       	ldi	r22, 0x01	; 1
     162:	70 e0       	ldi	r23, 0x00	; 0
     164:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <calloc>
     168:	90 93 55 01 	sts	0x0155, r25
     16c:	80 93 54 01 	sts	0x0154, r24
	if(command_buffer==NULL) return false;
     170:	80 91 54 01 	lds	r24, 0x0154
     174:	90 91 55 01 	lds	r25, 0x0155
     178:	00 97       	sbiw	r24, 0x00	; 0
     17a:	11 f4       	brne	.+4      	; 0x180 <initliazeMemory+0xb4>
     17c:	80 e0       	ldi	r24, 0x00	; 0
     17e:	1d c0       	rjmp	.+58     	; 0x1ba <initliazeMemory+0xee>
	for (uint8_t x = 0; x<12; x++) { if(parameter[x].startingPointer==NULL) return false; }
     180:	1a 82       	std	Y+2, r1	; 0x02
     182:	14 c0       	rjmp	.+40     	; 0x1ac <initliazeMemory+0xe0>
     184:	8a 81       	ldd	r24, Y+2	; 0x02
     186:	28 2f       	mov	r18, r24
     188:	30 e0       	ldi	r19, 0x00	; 0
     18a:	c9 01       	movw	r24, r18
     18c:	88 0f       	add	r24, r24
     18e:	99 1f       	adc	r25, r25
     190:	82 0f       	add	r24, r18
     192:	93 1f       	adc	r25, r19
     194:	84 5d       	subi	r24, 0xD4	; 212
     196:	9e 4f       	sbci	r25, 0xFE	; 254
     198:	fc 01       	movw	r30, r24
     19a:	80 81       	ld	r24, Z
     19c:	91 81       	ldd	r25, Z+1	; 0x01
     19e:	00 97       	sbiw	r24, 0x00	; 0
     1a0:	11 f4       	brne	.+4      	; 0x1a6 <initliazeMemory+0xda>
     1a2:	80 e0       	ldi	r24, 0x00	; 0
     1a4:	0a c0       	rjmp	.+20     	; 0x1ba <initliazeMemory+0xee>
     1a6:	8a 81       	ldd	r24, Y+2	; 0x02
     1a8:	8f 5f       	subi	r24, 0xFF	; 255
     1aa:	8a 83       	std	Y+2, r24	; 0x02
     1ac:	8a 81       	ldd	r24, Y+2	; 0x02
     1ae:	8c 30       	cpi	r24, 0x0C	; 12
     1b0:	48 f3       	brcs	.-46     	; 0x184 <initliazeMemory+0xb8>
	memoryInitialized = true;
     1b2:	81 e0       	ldi	r24, 0x01	; 1
     1b4:	80 93 56 01 	sts	0x0156, r24
	return true;
     1b8:	81 e0       	ldi	r24, 0x01	; 1
}
     1ba:	0f 90       	pop	r0
     1bc:	0f 90       	pop	r0
     1be:	cf 91       	pop	r28
     1c0:	df 91       	pop	r29
     1c2:	1f 91       	pop	r17
     1c4:	0f 91       	pop	r16
     1c6:	08 95       	ret

000001c8 <DecomposeMessageFromBuffer>:

CommandStatus DecomposeMessageFromBuffer(){
     1c8:	df 93       	push	r29
     1ca:	cf 93       	push	r28
     1cc:	cd b7       	in	r28, 0x3d	; 61
     1ce:	de b7       	in	r29, 0x3e	; 62
     1d0:	29 97       	sbiw	r28, 0x09	; 9
     1d2:	0f b6       	in	r0, 0x3f	; 63
     1d4:	f8 94       	cli
     1d6:	de bf       	out	0x3e, r29	; 62
     1d8:	0f be       	out	0x3f, r0	; 63
     1da:	cd bf       	out	0x3d, r28	; 61
	// Search for header
	uint8_t* headerStart = command_buffer;
     1dc:	80 91 54 01 	lds	r24, 0x0154
     1e0:	90 91 55 01 	lds	r25, 0x0155
     1e4:	9a 83       	std	Y+2, r25	; 0x02
     1e6:	89 83       	std	Y+1, r24	; 0x01
	uint8_t* footerEnd = command_buffer+31;
     1e8:	80 91 54 01 	lds	r24, 0x0154
     1ec:	90 91 55 01 	lds	r25, 0x0155
     1f0:	4f 96       	adiw	r24, 0x1f	; 31
     1f2:	9c 83       	std	Y+4, r25	; 0x04
     1f4:	8b 83       	std	Y+3, r24	; 0x03

	for(;headerStart!=(command_buffer+22);headerStart++){
     1f6:	07 c1       	rjmp	.+526    	; 0x406 <DecomposeMessageFromBuffer+0x23e>
		if (*headerStart==SOH&&(*(headerStart+4)==STX)){
     1f8:	89 81       	ldd	r24, Y+1	; 0x01
     1fa:	9a 81       	ldd	r25, Y+2	; 0x02
     1fc:	fc 01       	movw	r30, r24
     1fe:	80 81       	ld	r24, Z
     200:	81 30       	cpi	r24, 0x01	; 1
     202:	09 f0       	breq	.+2      	; 0x206 <DecomposeMessageFromBuffer+0x3e>
     204:	fb c0       	rjmp	.+502    	; 0x3fc <DecomposeMessageFromBuffer+0x234>
     206:	89 81       	ldd	r24, Y+1	; 0x01
     208:	9a 81       	ldd	r25, Y+2	; 0x02
     20a:	04 96       	adiw	r24, 0x04	; 4
     20c:	fc 01       	movw	r30, r24
     20e:	80 81       	ld	r24, Z
     210:	82 30       	cpi	r24, 0x02	; 2
     212:	09 f0       	breq	.+2      	; 0x216 <DecomposeMessageFromBuffer+0x4e>
     214:	f3 c0       	rjmp	.+486    	; 0x3fc <DecomposeMessageFromBuffer+0x234>
			for(;footerEnd!=(command_buffer+6);footerEnd--){
     216:	e5 c0       	rjmp	.+458    	; 0x3e2 <DecomposeMessageFromBuffer+0x21a>
				if (*footerEnd==ETB&&(*(footerEnd-2)==ETX)){
     218:	8b 81       	ldd	r24, Y+3	; 0x03
     21a:	9c 81       	ldd	r25, Y+4	; 0x04
     21c:	fc 01       	movw	r30, r24
     21e:	80 81       	ld	r24, Z
     220:	87 31       	cpi	r24, 0x17	; 23
     222:	09 f0       	breq	.+2      	; 0x226 <DecomposeMessageFromBuffer+0x5e>
     224:	d9 c0       	rjmp	.+434    	; 0x3d8 <DecomposeMessageFromBuffer+0x210>
     226:	8b 81       	ldd	r24, Y+3	; 0x03
     228:	9c 81       	ldd	r25, Y+4	; 0x04
     22a:	02 97       	sbiw	r24, 0x02	; 2
     22c:	fc 01       	movw	r30, r24
     22e:	80 81       	ld	r24, Z
     230:	83 30       	cpi	r24, 0x03	; 3
     232:	09 f0       	breq	.+2      	; 0x236 <DecomposeMessageFromBuffer+0x6e>
     234:	d1 c0       	rjmp	.+418    	; 0x3d8 <DecomposeMessageFromBuffer+0x210>
					uint8_t netMessageLength = ((footerEnd-2)-headerStart);
     236:	8b 81       	ldd	r24, Y+3	; 0x03
     238:	9c 81       	ldd	r25, Y+4	; 0x04
     23a:	02 97       	sbiw	r24, 0x02	; 2
     23c:	28 2f       	mov	r18, r24
     23e:	89 81       	ldd	r24, Y+1	; 0x01
     240:	9a 81       	ldd	r25, Y+2	; 0x02
     242:	f2 2f       	mov	r31, r18
     244:	f8 1b       	sub	r31, r24
     246:	8f 2f       	mov	r24, r31
     248:	88 87       	std	Y+8, r24	; 0x08
					crc_t crc;
					crc = crc_init();
     24a:	0e 94 53 00 	call	0xa6	; 0xa6 <crc_init>
     24e:	89 87       	std	Y+9, r24	; 0x09
					crc = crc_update(crc, headerStart, netMessageLength);
     250:	88 85       	ldd	r24, Y+8	; 0x08
     252:	28 2f       	mov	r18, r24
     254:	30 e0       	ldi	r19, 0x00	; 0
     256:	49 81       	ldd	r20, Y+1	; 0x01
     258:	5a 81       	ldd	r21, Y+2	; 0x02
     25a:	89 85       	ldd	r24, Y+9	; 0x09
     25c:	ba 01       	movw	r22, r20
     25e:	a9 01       	movw	r20, r18
     260:	0e 94 01 07 	call	0xe02	; 0xe02 <crc_update>
     264:	89 87       	std	Y+9, r24	; 0x09
					crc = crc_finalize(crc);
     266:	89 85       	ldd	r24, Y+9	; 0x09
     268:	0e 94 5b 00 	call	0xb6	; 0xb6 <crc_finalize>
     26c:	89 87       	std	Y+9, r24	; 0x09
					if (*(footerEnd-1)!=crc) return WRONG_CHECKSUM_CONSISTENCY;
     26e:	8b 81       	ldd	r24, Y+3	; 0x03
     270:	9c 81       	ldd	r25, Y+4	; 0x04
     272:	01 97       	sbiw	r24, 0x01	; 1
     274:	fc 01       	movw	r30, r24
     276:	90 81       	ld	r25, Z
     278:	89 85       	ldd	r24, Y+9	; 0x09
     27a:	98 17       	cp	r25, r24
     27c:	11 f0       	breq	.+4      	; 0x282 <DecomposeMessageFromBuffer+0xba>
     27e:	83 e0       	ldi	r24, 0x03	; 3
     280:	d0 c0       	rjmp	.+416    	; 0x422 <DecomposeMessageFromBuffer+0x25a>
					if (*(headerStart+2)!=currentModuleID&&*(headerStart+2)!=0xFF&&currentModuleID!=0x01) return WRONG_MODULE_ID;
     282:	89 81       	ldd	r24, Y+1	; 0x01
     284:	9a 81       	ldd	r25, Y+2	; 0x02
     286:	02 96       	adiw	r24, 0x02	; 2
     288:	fc 01       	movw	r30, r24
     28a:	80 81       	ld	r24, Z
     28c:	82 30       	cpi	r24, 0x02	; 2
     28e:	49 f0       	breq	.+18     	; 0x2a2 <DecomposeMessageFromBuffer+0xda>
     290:	89 81       	ldd	r24, Y+1	; 0x01
     292:	9a 81       	ldd	r25, Y+2	; 0x02
     294:	02 96       	adiw	r24, 0x02	; 2
     296:	fc 01       	movw	r30, r24
     298:	80 81       	ld	r24, Z
     29a:	8f 3f       	cpi	r24, 0xFF	; 255
     29c:	11 f0       	breq	.+4      	; 0x2a2 <DecomposeMessageFromBuffer+0xda>
     29e:	84 e0       	ldi	r24, 0x04	; 4
     2a0:	c0 c0       	rjmp	.+384    	; 0x422 <DecomposeMessageFromBuffer+0x25a>
					lastTargetModuleID = *(headerStart+2);
     2a2:	89 81       	ldd	r24, Y+1	; 0x01
     2a4:	9a 81       	ldd	r25, Y+2	; 0x02
     2a6:	02 96       	adiw	r24, 0x02	; 2
     2a8:	fc 01       	movw	r30, r24
     2aa:	80 81       	ld	r24, Z
     2ac:	80 93 57 01 	sts	0x0157, r24
					lastTransmitterModuleID = *(headerStart+3);
     2b0:	89 81       	ldd	r24, Y+1	; 0x01
     2b2:	9a 81       	ldd	r25, Y+2	; 0x02
     2b4:	03 96       	adiw	r24, 0x03	; 3
     2b6:	fc 01       	movw	r30, r24
     2b8:	80 81       	ld	r24, Z
     2ba:	80 93 50 01 	sts	0x0150, r24
					if (*(headerStart+5)>commandListLength-1) return UNDEFINED_COMMAND_CODE;
     2be:	89 81       	ldd	r24, Y+1	; 0x01
     2c0:	9a 81       	ldd	r25, Y+2	; 0x02
     2c2:	05 96       	adiw	r24, 0x05	; 5
     2c4:	fc 01       	movw	r30, r24
     2c6:	80 81       	ld	r24, Z
     2c8:	85 30       	cpi	r24, 0x05	; 5
     2ca:	10 f0       	brcs	.+4      	; 0x2d0 <DecomposeMessageFromBuffer+0x108>
     2cc:	85 e0       	ldi	r24, 0x05	; 5
     2ce:	a9 c0       	rjmp	.+338    	; 0x422 <DecomposeMessageFromBuffer+0x25a>
					lastMessageCommandType = commandList[*(headerStart+5)];
     2d0:	89 81       	ldd	r24, Y+1	; 0x01
     2d2:	9a 81       	ldd	r25, Y+2	; 0x02
     2d4:	05 96       	adiw	r24, 0x05	; 5
     2d6:	fc 01       	movw	r30, r24
     2d8:	80 81       	ld	r24, Z
     2da:	88 2f       	mov	r24, r24
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	88 0f       	add	r24, r24
     2e0:	99 1f       	adc	r25, r25
     2e2:	82 5e       	subi	r24, 0xE2	; 226
     2e4:	9e 4f       	sbci	r25, 0xFE	; 254
     2e6:	fc 01       	movw	r30, r24
     2e8:	80 81       	ld	r24, Z
     2ea:	91 81       	ldd	r25, Z+1	; 0x01
     2ec:	90 93 52 01 	sts	0x0152, r25
     2f0:	80 93 51 01 	sts	0x0151, r24
					lastMessagePID = *(headerStart+1);
     2f4:	89 81       	ldd	r24, Y+1	; 0x01
     2f6:	9a 81       	ldd	r25, Y+2	; 0x02
     2f8:	01 96       	adiw	r24, 0x01	; 1
     2fa:	fc 01       	movw	r30, r24
     2fc:	80 81       	ld	r24, Z
     2fe:	80 93 53 01 	sts	0x0153, r24

					uint8_t* parameterStart = headerStart+6;
     302:	89 81       	ldd	r24, Y+1	; 0x01
     304:	9a 81       	ldd	r25, Y+2	; 0x02
     306:	06 96       	adiw	r24, 0x06	; 6
     308:	9e 83       	std	Y+6, r25	; 0x06
     30a:	8d 83       	std	Y+5, r24	; 0x05

					for (uint8_t x = 0; x < 12; x++) {
     30c:	1f 82       	std	Y+7, r1	; 0x07
     30e:	5c c0       	rjmp	.+184    	; 0x3c8 <DecomposeMessageFromBuffer+0x200>
						realloc(parameter[x].startingPointer, *parameterStart);
     310:	8f 81       	ldd	r24, Y+7	; 0x07
     312:	28 2f       	mov	r18, r24
     314:	30 e0       	ldi	r19, 0x00	; 0
     316:	c9 01       	movw	r24, r18
     318:	88 0f       	add	r24, r24
     31a:	99 1f       	adc	r25, r25
     31c:	82 0f       	add	r24, r18
     31e:	93 1f       	adc	r25, r19
     320:	84 5d       	subi	r24, 0xD4	; 212
     322:	9e 4f       	sbci	r25, 0xFE	; 254
     324:	fc 01       	movw	r30, r24
     326:	80 81       	ld	r24, Z
     328:	91 81       	ldd	r25, Z+1	; 0x01
     32a:	2d 81       	ldd	r18, Y+5	; 0x05
     32c:	3e 81       	ldd	r19, Y+6	; 0x06
     32e:	f9 01       	movw	r30, r18
     330:	20 81       	ld	r18, Z
     332:	22 2f       	mov	r18, r18
     334:	30 e0       	ldi	r19, 0x00	; 0
     336:	b9 01       	movw	r22, r18
     338:	0e 94 4c 10 	call	0x2098	; 0x2098 <realloc>
						parameter[x].byteLength = *parameterStart;
     33c:	8f 81       	ldd	r24, Y+7	; 0x07
     33e:	28 2f       	mov	r18, r24
     340:	30 e0       	ldi	r19, 0x00	; 0
     342:	8d 81       	ldd	r24, Y+5	; 0x05
     344:	9e 81       	ldd	r25, Y+6	; 0x06
     346:	fc 01       	movw	r30, r24
     348:	40 81       	ld	r20, Z
     34a:	c9 01       	movw	r24, r18
     34c:	88 0f       	add	r24, r24
     34e:	99 1f       	adc	r25, r25
     350:	82 0f       	add	r24, r18
     352:	93 1f       	adc	r25, r19
     354:	82 5d       	subi	r24, 0xD2	; 210
     356:	9e 4f       	sbci	r25, 0xFE	; 254
     358:	fc 01       	movw	r30, r24
     35a:	40 83       	st	Z, r20
						memcpy(parameter[x].startingPointer,parameterStart+1, *parameterStart);
     35c:	8f 81       	ldd	r24, Y+7	; 0x07
     35e:	28 2f       	mov	r18, r24
     360:	30 e0       	ldi	r19, 0x00	; 0
     362:	c9 01       	movw	r24, r18
     364:	88 0f       	add	r24, r24
     366:	99 1f       	adc	r25, r25
     368:	82 0f       	add	r24, r18
     36a:	93 1f       	adc	r25, r19
     36c:	84 5d       	subi	r24, 0xD4	; 212
     36e:	9e 4f       	sbci	r25, 0xFE	; 254
     370:	fc 01       	movw	r30, r24
     372:	80 81       	ld	r24, Z
     374:	91 81       	ldd	r25, Z+1	; 0x01
     376:	2d 81       	ldd	r18, Y+5	; 0x05
     378:	3e 81       	ldd	r19, Y+6	; 0x06
     37a:	a9 01       	movw	r20, r18
     37c:	4f 5f       	subi	r20, 0xFF	; 255
     37e:	5f 4f       	sbci	r21, 0xFF	; 255
     380:	2d 81       	ldd	r18, Y+5	; 0x05
     382:	3e 81       	ldd	r19, Y+6	; 0x06
     384:	f9 01       	movw	r30, r18
     386:	20 81       	ld	r18, Z
     388:	22 2f       	mov	r18, r18
     38a:	30 e0       	ldi	r19, 0x00	; 0
     38c:	ba 01       	movw	r22, r20
     38e:	a9 01       	movw	r20, r18
     390:	0e 94 17 11 	call	0x222e	; 0x222e <memcpy>
						parameterStart+=((*parameterStart)+1);
     394:	8d 81       	ldd	r24, Y+5	; 0x05
     396:	9e 81       	ldd	r25, Y+6	; 0x06
     398:	fc 01       	movw	r30, r24
     39a:	80 81       	ld	r24, Z
     39c:	88 2f       	mov	r24, r24
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	01 96       	adiw	r24, 0x01	; 1
     3a2:	2d 81       	ldd	r18, Y+5	; 0x05
     3a4:	3e 81       	ldd	r19, Y+6	; 0x06
     3a6:	82 0f       	add	r24, r18
     3a8:	93 1f       	adc	r25, r19
     3aa:	9e 83       	std	Y+6, r25	; 0x06
     3ac:	8d 83       	std	Y+5, r24	; 0x05
						if (parameterStart>=(footerEnd-2)) break;
     3ae:	8b 81       	ldd	r24, Y+3	; 0x03
     3b0:	9c 81       	ldd	r25, Y+4	; 0x04
     3b2:	9c 01       	movw	r18, r24
     3b4:	22 50       	subi	r18, 0x02	; 2
     3b6:	30 40       	sbci	r19, 0x00	; 0
     3b8:	8d 81       	ldd	r24, Y+5	; 0x05
     3ba:	9e 81       	ldd	r25, Y+6	; 0x06
     3bc:	82 17       	cp	r24, r18
     3be:	93 07       	cpc	r25, r19
     3c0:	40 f4       	brcc	.+16     	; 0x3d2 <DecomposeMessageFromBuffer+0x20a>
					lastMessageCommandType = commandList[*(headerStart+5)];
					lastMessagePID = *(headerStart+1);

					uint8_t* parameterStart = headerStart+6;

					for (uint8_t x = 0; x < 12; x++) {
     3c2:	8f 81       	ldd	r24, Y+7	; 0x07
     3c4:	8f 5f       	subi	r24, 0xFF	; 255
     3c6:	8f 83       	std	Y+7, r24	; 0x07
     3c8:	8f 81       	ldd	r24, Y+7	; 0x07
     3ca:	8c 30       	cpi	r24, 0x0C	; 12
     3cc:	08 f4       	brcc	.+2      	; 0x3d0 <DecomposeMessageFromBuffer+0x208>
     3ce:	a0 cf       	rjmp	.-192    	; 0x310 <DecomposeMessageFromBuffer+0x148>
     3d0:	01 c0       	rjmp	.+2      	; 0x3d4 <DecomposeMessageFromBuffer+0x20c>
						realloc(parameter[x].startingPointer, *parameterStart);
						parameter[x].byteLength = *parameterStart;
						memcpy(parameter[x].startingPointer,parameterStart+1, *parameterStart);
						parameterStart+=((*parameterStart)+1);
						if (parameterStart>=(footerEnd-2)) break;
     3d2:	00 00       	nop
					}

					return SUCCESFUL_DECOMPOSITION;
     3d4:	80 e0       	ldi	r24, 0x00	; 0
     3d6:	25 c0       	rjmp	.+74     	; 0x422 <DecomposeMessageFromBuffer+0x25a>
	uint8_t* headerStart = command_buffer;
	uint8_t* footerEnd = command_buffer+31;

	for(;headerStart!=(command_buffer+22);headerStart++){
		if (*headerStart==SOH&&(*(headerStart+4)==STX)){
			for(;footerEnd!=(command_buffer+6);footerEnd--){
     3d8:	8b 81       	ldd	r24, Y+3	; 0x03
     3da:	9c 81       	ldd	r25, Y+4	; 0x04
     3dc:	01 97       	sbiw	r24, 0x01	; 1
     3de:	9c 83       	std	Y+4, r25	; 0x04
     3e0:	8b 83       	std	Y+3, r24	; 0x03
     3e2:	80 91 54 01 	lds	r24, 0x0154
     3e6:	90 91 55 01 	lds	r25, 0x0155
     3ea:	9c 01       	movw	r18, r24
     3ec:	2a 5f       	subi	r18, 0xFA	; 250
     3ee:	3f 4f       	sbci	r19, 0xFF	; 255
     3f0:	8b 81       	ldd	r24, Y+3	; 0x03
     3f2:	9c 81       	ldd	r25, Y+4	; 0x04
     3f4:	28 17       	cp	r18, r24
     3f6:	39 07       	cpc	r19, r25
     3f8:	09 f0       	breq	.+2      	; 0x3fc <DecomposeMessageFromBuffer+0x234>
     3fa:	0e cf       	rjmp	.-484    	; 0x218 <DecomposeMessageFromBuffer+0x50>
CommandStatus DecomposeMessageFromBuffer(){
	// Search for header
	uint8_t* headerStart = command_buffer;
	uint8_t* footerEnd = command_buffer+31;

	for(;headerStart!=(command_buffer+22);headerStart++){
     3fc:	89 81       	ldd	r24, Y+1	; 0x01
     3fe:	9a 81       	ldd	r25, Y+2	; 0x02
     400:	01 96       	adiw	r24, 0x01	; 1
     402:	9a 83       	std	Y+2, r25	; 0x02
     404:	89 83       	std	Y+1, r24	; 0x01
     406:	80 91 54 01 	lds	r24, 0x0154
     40a:	90 91 55 01 	lds	r25, 0x0155
     40e:	9c 01       	movw	r18, r24
     410:	2a 5e       	subi	r18, 0xEA	; 234
     412:	3f 4f       	sbci	r19, 0xFF	; 255
     414:	89 81       	ldd	r24, Y+1	; 0x01
     416:	9a 81       	ldd	r25, Y+2	; 0x02
     418:	28 17       	cp	r18, r24
     41a:	39 07       	cpc	r19, r25
     41c:	09 f0       	breq	.+2      	; 0x420 <DecomposeMessageFromBuffer+0x258>
     41e:	ec ce       	rjmp	.-552    	; 0x1f8 <DecomposeMessageFromBuffer+0x30>
					return SUCCESFUL_DECOMPOSITION;
				}
			}
		}
	}
	return WRONG_HEADER_SEGMENTATION;
     420:	81 e0       	ldi	r24, 0x01	; 1
}
     422:	29 96       	adiw	r28, 0x09	; 9
     424:	0f b6       	in	r0, 0x3f	; 63
     426:	f8 94       	cli
     428:	de bf       	out	0x3e, r29	; 62
     42a:	0f be       	out	0x3f, r0	; 63
     42c:	cd bf       	out	0x3d, r28	; 61
     42e:	cf 91       	pop	r28
     430:	df 91       	pop	r29
     432:	08 95       	ret

00000434 <ComposeMessageToBuffer>:

CommandStatus ComposeMessageToBuffer(CommandTypeID targetTypeID, uint8_t parameterCount, uint8_t targetBoardID){
     434:	df 93       	push	r29
     436:	cf 93       	push	r28
     438:	cd b7       	in	r28, 0x3d	; 61
     43a:	de b7       	in	r29, 0x3e	; 62
     43c:	28 97       	sbiw	r28, 0x08	; 8
     43e:	0f b6       	in	r0, 0x3f	; 63
     440:	f8 94       	cli
     442:	de bf       	out	0x3e, r29	; 62
     444:	0f be       	out	0x3f, r0	; 63
     446:	cd bf       	out	0x3d, r28	; 61
     448:	8e 83       	std	Y+6, r24	; 0x06
     44a:	6f 83       	std	Y+7, r22	; 0x07
     44c:	48 87       	std	Y+8, r20	; 0x08
	memset(command_buffer, 0, 32);
     44e:	80 91 54 01 	lds	r24, 0x0154
     452:	90 91 55 01 	lds	r25, 0x0155
     456:	60 e0       	ldi	r22, 0x00	; 0
     458:	70 e0       	ldi	r23, 0x00	; 0
     45a:	40 e2       	ldi	r20, 0x20	; 32
     45c:	50 e0       	ldi	r21, 0x00	; 0
     45e:	0e 94 20 11 	call	0x2240	; 0x2240 <memset>
	command_buffer[0] = SOH;
     462:	80 91 54 01 	lds	r24, 0x0154
     466:	90 91 55 01 	lds	r25, 0x0155
     46a:	21 e0       	ldi	r18, 0x01	; 1
     46c:	fc 01       	movw	r30, r24
     46e:	20 83       	st	Z, r18
	if (lastMessagePID==0xFF) { lastMessagePID++; } else { lastMessagePID = 0; }
     470:	80 91 53 01 	lds	r24, 0x0153
     474:	8f 3f       	cpi	r24, 0xFF	; 255
     476:	31 f4       	brne	.+12     	; 0x484 <ComposeMessageToBuffer+0x50>
     478:	80 91 53 01 	lds	r24, 0x0153
     47c:	8f 5f       	subi	r24, 0xFF	; 255
     47e:	80 93 53 01 	sts	0x0153, r24
     482:	02 c0       	rjmp	.+4      	; 0x488 <ComposeMessageToBuffer+0x54>
     484:	10 92 53 01 	sts	0x0153, r1
	command_buffer[1] = lastMessagePID;
     488:	80 91 54 01 	lds	r24, 0x0154
     48c:	90 91 55 01 	lds	r25, 0x0155
     490:	01 96       	adiw	r24, 0x01	; 1
     492:	20 91 53 01 	lds	r18, 0x0153
     496:	fc 01       	movw	r30, r24
     498:	20 83       	st	Z, r18
	command_buffer[2] = targetBoardID;
     49a:	80 91 54 01 	lds	r24, 0x0154
     49e:	90 91 55 01 	lds	r25, 0x0155
     4a2:	02 96       	adiw	r24, 0x02	; 2
     4a4:	28 85       	ldd	r18, Y+8	; 0x08
     4a6:	fc 01       	movw	r30, r24
     4a8:	20 83       	st	Z, r18
	command_buffer[3] = currentModuleID;
     4aa:	80 91 54 01 	lds	r24, 0x0154
     4ae:	90 91 55 01 	lds	r25, 0x0155
     4b2:	03 96       	adiw	r24, 0x03	; 3
     4b4:	22 e0       	ldi	r18, 0x02	; 2
     4b6:	fc 01       	movw	r30, r24
     4b8:	20 83       	st	Z, r18
	command_buffer[4] = STX;
     4ba:	80 91 54 01 	lds	r24, 0x0154
     4be:	90 91 55 01 	lds	r25, 0x0155
     4c2:	04 96       	adiw	r24, 0x04	; 4
     4c4:	22 e0       	ldi	r18, 0x02	; 2
     4c6:	fc 01       	movw	r30, r24
     4c8:	20 83       	st	Z, r18
	command_buffer[5] = targetTypeID;
     4ca:	80 91 54 01 	lds	r24, 0x0154
     4ce:	90 91 55 01 	lds	r25, 0x0155
     4d2:	05 96       	adiw	r24, 0x05	; 5
     4d4:	2e 81       	ldd	r18, Y+6	; 0x06
     4d6:	fc 01       	movw	r30, r24
     4d8:	20 83       	st	Z, r18

	if (parameterCount>12) return PARAMETER_COUNT_OVERSIZE;
     4da:	8f 81       	ldd	r24, Y+7	; 0x07
     4dc:	8d 30       	cpi	r24, 0x0D	; 13
     4de:	10 f0       	brcs	.+4      	; 0x4e4 <ComposeMessageToBuffer+0xb0>
     4e0:	87 e0       	ldi	r24, 0x07	; 7
     4e2:	8c c0       	rjmp	.+280    	; 0x5fc <ComposeMessageToBuffer+0x1c8>

	uint8_t* parameterStart = &command_buffer[6];
     4e4:	80 91 54 01 	lds	r24, 0x0154
     4e8:	90 91 55 01 	lds	r25, 0x0155
     4ec:	06 96       	adiw	r24, 0x06	; 6
     4ee:	9a 83       	std	Y+2, r25	; 0x02
     4f0:	89 83       	std	Y+1, r24	; 0x01

	for (uint8_t x = 0; x < parameterCount; x++){
     4f2:	1b 82       	std	Y+3, r1	; 0x03
     4f4:	4d c0       	rjmp	.+154    	; 0x590 <ComposeMessageToBuffer+0x15c>
		*parameterStart = parameter[x].byteLength;
     4f6:	8b 81       	ldd	r24, Y+3	; 0x03
     4f8:	28 2f       	mov	r18, r24
     4fa:	30 e0       	ldi	r19, 0x00	; 0
     4fc:	c9 01       	movw	r24, r18
     4fe:	88 0f       	add	r24, r24
     500:	99 1f       	adc	r25, r25
     502:	82 0f       	add	r24, r18
     504:	93 1f       	adc	r25, r19
     506:	82 5d       	subi	r24, 0xD2	; 210
     508:	9e 4f       	sbci	r25, 0xFE	; 254
     50a:	fc 01       	movw	r30, r24
     50c:	20 81       	ld	r18, Z
     50e:	89 81       	ldd	r24, Y+1	; 0x01
     510:	9a 81       	ldd	r25, Y+2	; 0x02
     512:	fc 01       	movw	r30, r24
     514:	20 83       	st	Z, r18
		memcpy(parameterStart+1, parameter[x].startingPointer, parameter[x].byteLength);
     516:	89 81       	ldd	r24, Y+1	; 0x01
     518:	9a 81       	ldd	r25, Y+2	; 0x02
     51a:	bc 01       	movw	r22, r24
     51c:	6f 5f       	subi	r22, 0xFF	; 255
     51e:	7f 4f       	sbci	r23, 0xFF	; 255
     520:	8b 81       	ldd	r24, Y+3	; 0x03
     522:	28 2f       	mov	r18, r24
     524:	30 e0       	ldi	r19, 0x00	; 0
     526:	c9 01       	movw	r24, r18
     528:	88 0f       	add	r24, r24
     52a:	99 1f       	adc	r25, r25
     52c:	82 0f       	add	r24, r18
     52e:	93 1f       	adc	r25, r19
     530:	84 5d       	subi	r24, 0xD4	; 212
     532:	9e 4f       	sbci	r25, 0xFE	; 254
     534:	fc 01       	movw	r30, r24
     536:	40 81       	ld	r20, Z
     538:	51 81       	ldd	r21, Z+1	; 0x01
     53a:	8b 81       	ldd	r24, Y+3	; 0x03
     53c:	28 2f       	mov	r18, r24
     53e:	30 e0       	ldi	r19, 0x00	; 0
     540:	c9 01       	movw	r24, r18
     542:	88 0f       	add	r24, r24
     544:	99 1f       	adc	r25, r25
     546:	82 0f       	add	r24, r18
     548:	93 1f       	adc	r25, r19
     54a:	82 5d       	subi	r24, 0xD2	; 210
     54c:	9e 4f       	sbci	r25, 0xFE	; 254
     54e:	fc 01       	movw	r30, r24
     550:	80 81       	ld	r24, Z
     552:	28 2f       	mov	r18, r24
     554:	30 e0       	ldi	r19, 0x00	; 0
     556:	cb 01       	movw	r24, r22
     558:	ba 01       	movw	r22, r20
     55a:	a9 01       	movw	r20, r18
     55c:	0e 94 17 11 	call	0x222e	; 0x222e <memcpy>
		parameterStart+=(parameter[x].byteLength)+1;
     560:	8b 81       	ldd	r24, Y+3	; 0x03
     562:	28 2f       	mov	r18, r24
     564:	30 e0       	ldi	r19, 0x00	; 0
     566:	c9 01       	movw	r24, r18
     568:	88 0f       	add	r24, r24
     56a:	99 1f       	adc	r25, r25
     56c:	82 0f       	add	r24, r18
     56e:	93 1f       	adc	r25, r19
     570:	82 5d       	subi	r24, 0xD2	; 210
     572:	9e 4f       	sbci	r25, 0xFE	; 254
     574:	fc 01       	movw	r30, r24
     576:	80 81       	ld	r24, Z
     578:	88 2f       	mov	r24, r24
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	01 96       	adiw	r24, 0x01	; 1
     57e:	29 81       	ldd	r18, Y+1	; 0x01
     580:	3a 81       	ldd	r19, Y+2	; 0x02
     582:	82 0f       	add	r24, r18
     584:	93 1f       	adc	r25, r19
     586:	9a 83       	std	Y+2, r25	; 0x02
     588:	89 83       	std	Y+1, r24	; 0x01

	if (parameterCount>12) return PARAMETER_COUNT_OVERSIZE;

	uint8_t* parameterStart = &command_buffer[6];

	for (uint8_t x = 0; x < parameterCount; x++){
     58a:	8b 81       	ldd	r24, Y+3	; 0x03
     58c:	8f 5f       	subi	r24, 0xFF	; 255
     58e:	8b 83       	std	Y+3, r24	; 0x03
     590:	9b 81       	ldd	r25, Y+3	; 0x03
     592:	8f 81       	ldd	r24, Y+7	; 0x07
     594:	98 17       	cp	r25, r24
     596:	08 f4       	brcc	.+2      	; 0x59a <ComposeMessageToBuffer+0x166>
     598:	ae cf       	rjmp	.-164    	; 0x4f6 <ComposeMessageToBuffer+0xc2>
		memcpy(parameterStart+1, parameter[x].startingPointer, parameter[x].byteLength);
		parameterStart+=(parameter[x].byteLength)+1;
	}

	crc_t crc;
	crc = crc_init();
     59a:	0e 94 53 00 	call	0xa6	; 0xa6 <crc_init>
     59e:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t crc_length = ((parameterStart)-(&command_buffer[0]));
     5a0:	89 81       	ldd	r24, Y+1	; 0x01
     5a2:	9a 81       	ldd	r25, Y+2	; 0x02
     5a4:	28 2f       	mov	r18, r24
     5a6:	80 91 54 01 	lds	r24, 0x0154
     5aa:	90 91 55 01 	lds	r25, 0x0155
     5ae:	f2 2f       	mov	r31, r18
     5b0:	f8 1b       	sub	r31, r24
     5b2:	8f 2f       	mov	r24, r31
     5b4:	8d 83       	std	Y+5, r24	; 0x05
	crc = crc_update(crc, &command_buffer[0], crc_length);
     5b6:	40 91 54 01 	lds	r20, 0x0154
     5ba:	50 91 55 01 	lds	r21, 0x0155
     5be:	8d 81       	ldd	r24, Y+5	; 0x05
     5c0:	28 2f       	mov	r18, r24
     5c2:	30 e0       	ldi	r19, 0x00	; 0
     5c4:	8c 81       	ldd	r24, Y+4	; 0x04
     5c6:	ba 01       	movw	r22, r20
     5c8:	a9 01       	movw	r20, r18
     5ca:	0e 94 01 07 	call	0xe02	; 0xe02 <crc_update>
     5ce:	8c 83       	std	Y+4, r24	; 0x04
	crc = crc_finalize(crc);
     5d0:	8c 81       	ldd	r24, Y+4	; 0x04
     5d2:	0e 94 5b 00 	call	0xb6	; 0xb6 <crc_finalize>
     5d6:	8c 83       	std	Y+4, r24	; 0x04

	*parameterStart = ETX;
     5d8:	89 81       	ldd	r24, Y+1	; 0x01
     5da:	9a 81       	ldd	r25, Y+2	; 0x02
     5dc:	23 e0       	ldi	r18, 0x03	; 3
     5de:	fc 01       	movw	r30, r24
     5e0:	20 83       	st	Z, r18
	*(parameterStart+1) = crc;
     5e2:	89 81       	ldd	r24, Y+1	; 0x01
     5e4:	9a 81       	ldd	r25, Y+2	; 0x02
     5e6:	01 96       	adiw	r24, 0x01	; 1
     5e8:	2c 81       	ldd	r18, Y+4	; 0x04
     5ea:	fc 01       	movw	r30, r24
     5ec:	20 83       	st	Z, r18
	*(parameterStart+2) = ETB;
     5ee:	89 81       	ldd	r24, Y+1	; 0x01
     5f0:	9a 81       	ldd	r25, Y+2	; 0x02
     5f2:	02 96       	adiw	r24, 0x02	; 2
     5f4:	27 e1       	ldi	r18, 0x17	; 23
     5f6:	fc 01       	movw	r30, r24
     5f8:	20 83       	st	Z, r18
	
	return SUCCESFUL_COMPOSITION;
     5fa:	8a e0       	ldi	r24, 0x0A	; 10
}
     5fc:	28 96       	adiw	r28, 0x08	; 8
     5fe:	0f b6       	in	r0, 0x3f	; 63
     600:	f8 94       	cli
     602:	de bf       	out	0x3e, r29	; 62
     604:	0f be       	out	0x3f, r0	; 63
     606:	cd bf       	out	0x3d, r28	; 61
     608:	cf 91       	pop	r28
     60a:	df 91       	pop	r29
     60c:	08 95       	ret

0000060e <HandleAvailableCommand>:

void HandleAvailableCommand(){
     60e:	df 93       	push	r29
     610:	cf 93       	push	r28
     612:	cd b7       	in	r28, 0x3d	; 61
     614:	de b7       	in	r29, 0x3e	; 62
	lastMessageCommandType.handlerFunction();
     616:	80 91 51 01 	lds	r24, 0x0151
     61a:	90 91 52 01 	lds	r25, 0x0152
     61e:	fc 01       	movw	r30, r24
     620:	09 95       	icall
}
     622:	cf 91       	pop	r28
     624:	df 91       	pop	r29
     626:	08 95       	ret

00000628 <writeParameterValue>:
	if(messageStatus == NRF24_TRANSMISSON_OK) { return RF_SUCCESFUL_TRANSMISSION; }
	else if(messageStatus == NRF24_MESSAGE_LOST) { return RF_UNREACHEABLE_MODULE;}
	return RF_UNREACHEABLE_MODULE;
}

void writeParameterValue(uint8_t parameterIndex, void* parameterData, uint8_t parameterByteLength){
     628:	0f 93       	push	r16
     62a:	1f 93       	push	r17
     62c:	df 93       	push	r29
     62e:	cf 93       	push	r28
     630:	00 d0       	rcall	.+0      	; 0x632 <writeParameterValue+0xa>
     632:	00 d0       	rcall	.+0      	; 0x634 <writeParameterValue+0xc>
     634:	cd b7       	in	r28, 0x3d	; 61
     636:	de b7       	in	r29, 0x3e	; 62
     638:	89 83       	std	Y+1, r24	; 0x01
     63a:	7b 83       	std	Y+3, r23	; 0x03
     63c:	6a 83       	std	Y+2, r22	; 0x02
     63e:	4c 83       	std	Y+4, r20	; 0x04
	parameter[parameterIndex].startingPointer = (uint8_t*) realloc(parameter[parameterIndex].startingPointer, parameterByteLength);
     640:	89 81       	ldd	r24, Y+1	; 0x01
     642:	08 2f       	mov	r16, r24
     644:	10 e0       	ldi	r17, 0x00	; 0
     646:	89 81       	ldd	r24, Y+1	; 0x01
     648:	28 2f       	mov	r18, r24
     64a:	30 e0       	ldi	r19, 0x00	; 0
     64c:	c9 01       	movw	r24, r18
     64e:	88 0f       	add	r24, r24
     650:	99 1f       	adc	r25, r25
     652:	82 0f       	add	r24, r18
     654:	93 1f       	adc	r25, r19
     656:	84 5d       	subi	r24, 0xD4	; 212
     658:	9e 4f       	sbci	r25, 0xFE	; 254
     65a:	fc 01       	movw	r30, r24
     65c:	80 81       	ld	r24, Z
     65e:	91 81       	ldd	r25, Z+1	; 0x01
     660:	2c 81       	ldd	r18, Y+4	; 0x04
     662:	22 2f       	mov	r18, r18
     664:	30 e0       	ldi	r19, 0x00	; 0
     666:	b9 01       	movw	r22, r18
     668:	0e 94 4c 10 	call	0x2098	; 0x2098 <realloc>
     66c:	9c 01       	movw	r18, r24
     66e:	c8 01       	movw	r24, r16
     670:	88 0f       	add	r24, r24
     672:	99 1f       	adc	r25, r25
     674:	80 0f       	add	r24, r16
     676:	91 1f       	adc	r25, r17
     678:	84 5d       	subi	r24, 0xD4	; 212
     67a:	9e 4f       	sbci	r25, 0xFE	; 254
     67c:	fc 01       	movw	r30, r24
     67e:	31 83       	std	Z+1, r19	; 0x01
     680:	20 83       	st	Z, r18
	memcpy(parameter[parameterIndex].startingPointer, parameterData, parameterByteLength);
     682:	89 81       	ldd	r24, Y+1	; 0x01
     684:	28 2f       	mov	r18, r24
     686:	30 e0       	ldi	r19, 0x00	; 0
     688:	c9 01       	movw	r24, r18
     68a:	88 0f       	add	r24, r24
     68c:	99 1f       	adc	r25, r25
     68e:	82 0f       	add	r24, r18
     690:	93 1f       	adc	r25, r19
     692:	84 5d       	subi	r24, 0xD4	; 212
     694:	9e 4f       	sbci	r25, 0xFE	; 254
     696:	fc 01       	movw	r30, r24
     698:	80 81       	ld	r24, Z
     69a:	91 81       	ldd	r25, Z+1	; 0x01
     69c:	2c 81       	ldd	r18, Y+4	; 0x04
     69e:	22 2f       	mov	r18, r18
     6a0:	30 e0       	ldi	r19, 0x00	; 0
     6a2:	4a 81       	ldd	r20, Y+2	; 0x02
     6a4:	5b 81       	ldd	r21, Y+3	; 0x03
     6a6:	ba 01       	movw	r22, r20
     6a8:	a9 01       	movw	r20, r18
     6aa:	0e 94 17 11 	call	0x222e	; 0x222e <memcpy>
	parameter[parameterIndex].byteLength = parameterByteLength;
     6ae:	89 81       	ldd	r24, Y+1	; 0x01
     6b0:	28 2f       	mov	r18, r24
     6b2:	30 e0       	ldi	r19, 0x00	; 0
     6b4:	c9 01       	movw	r24, r18
     6b6:	88 0f       	add	r24, r24
     6b8:	99 1f       	adc	r25, r25
     6ba:	82 0f       	add	r24, r18
     6bc:	93 1f       	adc	r25, r19
     6be:	82 5d       	subi	r24, 0xD2	; 210
     6c0:	9e 4f       	sbci	r25, 0xFE	; 254
     6c2:	2c 81       	ldd	r18, Y+4	; 0x04
     6c4:	fc 01       	movw	r30, r24
     6c6:	20 83       	st	Z, r18
}
     6c8:	0f 90       	pop	r0
     6ca:	0f 90       	pop	r0
     6cc:	0f 90       	pop	r0
     6ce:	0f 90       	pop	r0
     6d0:	cf 91       	pop	r28
     6d2:	df 91       	pop	r29
     6d4:	1f 91       	pop	r17
     6d6:	0f 91       	pop	r16
     6d8:	08 95       	ret

000006da <UPDATE_ALL_DEVICES_VALUE_H>:

void UPDATE_ALL_DEVICES_VALUE_H() {
     6da:	0f 93       	push	r16
     6dc:	1f 93       	push	r17
     6de:	df 93       	push	r29
     6e0:	cf 93       	push	r28
     6e2:	cd b7       	in	r28, 0x3d	; 61
     6e4:	de b7       	in	r29, 0x3e	; 62
     6e6:	2f 97       	sbiw	r28, 0x0f	; 15
     6e8:	0f b6       	in	r0, 0x3f	; 63
     6ea:	f8 94       	cli
     6ec:	de bf       	out	0x3e, r29	; 62
     6ee:	0f be       	out	0x3f, r0	; 63
     6f0:	cd bf       	out	0x3d, r28	; 61
	
	bit_flip(PORTB, BIT(0)); _delay_ms(100); bit_flip(PORTB, BIT(0));
     6f2:	85 e2       	ldi	r24, 0x25	; 37
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	25 e2       	ldi	r18, 0x25	; 37
     6f8:	30 e0       	ldi	r19, 0x00	; 0
     6fa:	f9 01       	movw	r30, r18
     6fc:	30 81       	ld	r19, Z
     6fe:	21 e0       	ldi	r18, 0x01	; 1
     700:	23 27       	eor	r18, r19
     702:	fc 01       	movw	r30, r24
     704:	20 83       	st	Z, r18
     706:	80 e0       	ldi	r24, 0x00	; 0
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	a8 ec       	ldi	r26, 0xC8	; 200
     70c:	b2 e4       	ldi	r27, 0x42	; 66
     70e:	8a 83       	std	Y+2, r24	; 0x02
     710:	9b 83       	std	Y+3, r25	; 0x03
     712:	ac 83       	std	Y+4, r26	; 0x04
     714:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     716:	6a 81       	ldd	r22, Y+2	; 0x02
     718:	7b 81       	ldd	r23, Y+3	; 0x03
     71a:	8c 81       	ldd	r24, Y+4	; 0x04
     71c:	9d 81       	ldd	r25, Y+5	; 0x05
     71e:	20 e0       	ldi	r18, 0x00	; 0
     720:	30 e0       	ldi	r19, 0x00	; 0
     722:	4a e7       	ldi	r20, 0x7A	; 122
     724:	55 e4       	ldi	r21, 0x45	; 69
     726:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <__mulsf3>
     72a:	dc 01       	movw	r26, r24
     72c:	cb 01       	movw	r24, r22
     72e:	8e 83       	std	Y+6, r24	; 0x06
     730:	9f 83       	std	Y+7, r25	; 0x07
     732:	a8 87       	std	Y+8, r26	; 0x08
     734:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     736:	11 e0       	ldi	r17, 0x01	; 1
     738:	6e 81       	ldd	r22, Y+6	; 0x06
     73a:	7f 81       	ldd	r23, Y+7	; 0x07
     73c:	88 85       	ldd	r24, Y+8	; 0x08
     73e:	99 85       	ldd	r25, Y+9	; 0x09
     740:	20 e0       	ldi	r18, 0x00	; 0
     742:	30 e0       	ldi	r19, 0x00	; 0
     744:	40 e8       	ldi	r20, 0x80	; 128
     746:	5f e3       	ldi	r21, 0x3F	; 63
     748:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <__cmpsf2>
     74c:	88 23       	and	r24, r24
     74e:	0c f0       	brlt	.+2      	; 0x752 <UPDATE_ALL_DEVICES_VALUE_H+0x78>
     750:	10 e0       	ldi	r17, 0x00	; 0
     752:	11 23       	and	r17, r17
     754:	29 f0       	breq	.+10     	; 0x760 <UPDATE_ALL_DEVICES_VALUE_H+0x86>
		__ticks = 1;
     756:	81 e0       	ldi	r24, 0x01	; 1
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	9b 87       	std	Y+11, r25	; 0x0b
     75c:	8a 87       	std	Y+10, r24	; 0x0a
     75e:	46 c0       	rjmp	.+140    	; 0x7ec <UPDATE_ALL_DEVICES_VALUE_H+0x112>
	else if (__tmp > 65535)
     760:	11 e0       	ldi	r17, 0x01	; 1
     762:	6e 81       	ldd	r22, Y+6	; 0x06
     764:	7f 81       	ldd	r23, Y+7	; 0x07
     766:	88 85       	ldd	r24, Y+8	; 0x08
     768:	99 85       	ldd	r25, Y+9	; 0x09
     76a:	20 e0       	ldi	r18, 0x00	; 0
     76c:	3f ef       	ldi	r19, 0xFF	; 255
     76e:	4f e7       	ldi	r20, 0x7F	; 127
     770:	57 e4       	ldi	r21, 0x47	; 71
     772:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <__gesf2>
     776:	18 16       	cp	r1, r24
     778:	0c f0       	brlt	.+2      	; 0x77c <UPDATE_ALL_DEVICES_VALUE_H+0xa2>
     77a:	10 e0       	ldi	r17, 0x00	; 0
     77c:	11 23       	and	r17, r17
     77e:	61 f1       	breq	.+88     	; 0x7d8 <UPDATE_ALL_DEVICES_VALUE_H+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     780:	6a 81       	ldd	r22, Y+2	; 0x02
     782:	7b 81       	ldd	r23, Y+3	; 0x03
     784:	8c 81       	ldd	r24, Y+4	; 0x04
     786:	9d 81       	ldd	r25, Y+5	; 0x05
     788:	20 e0       	ldi	r18, 0x00	; 0
     78a:	30 e0       	ldi	r19, 0x00	; 0
     78c:	40 e2       	ldi	r20, 0x20	; 32
     78e:	51 e4       	ldi	r21, 0x41	; 65
     790:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <__mulsf3>
     794:	dc 01       	movw	r26, r24
     796:	cb 01       	movw	r24, r22
     798:	bc 01       	movw	r22, r24
     79a:	cd 01       	movw	r24, r26
     79c:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <__fixunssfsi>
     7a0:	dc 01       	movw	r26, r24
     7a2:	cb 01       	movw	r24, r22
     7a4:	9b 87       	std	Y+11, r25	; 0x0b
     7a6:	8a 87       	std	Y+10, r24	; 0x0a
     7a8:	12 c0       	rjmp	.+36     	; 0x7ce <UPDATE_ALL_DEVICES_VALUE_H+0xf4>
     7aa:	80 e9       	ldi	r24, 0x90	; 144
     7ac:	91 e0       	ldi	r25, 0x01	; 1
     7ae:	9d 87       	std	Y+13, r25	; 0x0d
     7b0:	8c 87       	std	Y+12, r24	; 0x0c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     7b2:	8c 85       	ldd	r24, Y+12	; 0x0c
     7b4:	9d 85       	ldd	r25, Y+13	; 0x0d
     7b6:	8c 01       	movw	r16, r24
     7b8:	c8 01       	movw	r24, r16
     7ba:	01 97       	sbiw	r24, 0x01	; 1
     7bc:	f1 f7       	brne	.-4      	; 0x7ba <UPDATE_ALL_DEVICES_VALUE_H+0xe0>
     7be:	8c 01       	movw	r16, r24
     7c0:	1d 87       	std	Y+13, r17	; 0x0d
     7c2:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7c4:	8a 85       	ldd	r24, Y+10	; 0x0a
     7c6:	9b 85       	ldd	r25, Y+11	; 0x0b
     7c8:	01 97       	sbiw	r24, 0x01	; 1
     7ca:	9b 87       	std	Y+11, r25	; 0x0b
     7cc:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7ce:	8a 85       	ldd	r24, Y+10	; 0x0a
     7d0:	9b 85       	ldd	r25, Y+11	; 0x0b
     7d2:	00 97       	sbiw	r24, 0x00	; 0
     7d4:	51 f7       	brne	.-44     	; 0x7aa <UPDATE_ALL_DEVICES_VALUE_H+0xd0>
     7d6:	17 c0       	rjmp	.+46     	; 0x806 <UPDATE_ALL_DEVICES_VALUE_H+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7d8:	6e 81       	ldd	r22, Y+6	; 0x06
     7da:	7f 81       	ldd	r23, Y+7	; 0x07
     7dc:	88 85       	ldd	r24, Y+8	; 0x08
     7de:	99 85       	ldd	r25, Y+9	; 0x09
     7e0:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <__fixunssfsi>
     7e4:	dc 01       	movw	r26, r24
     7e6:	cb 01       	movw	r24, r22
     7e8:	9b 87       	std	Y+11, r25	; 0x0b
     7ea:	8a 87       	std	Y+10, r24	; 0x0a
     7ec:	8a 85       	ldd	r24, Y+10	; 0x0a
     7ee:	9b 85       	ldd	r25, Y+11	; 0x0b
     7f0:	9f 87       	std	Y+15, r25	; 0x0f
     7f2:	8e 87       	std	Y+14, r24	; 0x0e
     7f4:	8e 85       	ldd	r24, Y+14	; 0x0e
     7f6:	9f 85       	ldd	r25, Y+15	; 0x0f
     7f8:	8c 01       	movw	r16, r24
     7fa:	f8 01       	movw	r30, r16
     7fc:	31 97       	sbiw	r30, 0x01	; 1
     7fe:	f1 f7       	brne	.-4      	; 0x7fc <UPDATE_ALL_DEVICES_VALUE_H+0x122>
     800:	8f 01       	movw	r16, r30
     802:	1f 87       	std	Y+15, r17	; 0x0f
     804:	0e 87       	std	Y+14, r16	; 0x0e
     806:	85 e2       	ldi	r24, 0x25	; 37
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	25 e2       	ldi	r18, 0x25	; 37
     80c:	30 e0       	ldi	r19, 0x00	; 0
     80e:	f9 01       	movw	r30, r18
     810:	30 81       	ld	r19, Z
     812:	21 e0       	ldi	r18, 0x01	; 1
     814:	23 27       	eor	r18, r19
     816:	fc 01       	movw	r30, r24
     818:	20 83       	st	Z, r18
	
	for (uint8_t x = 0; x < AVAILABLE_DEVICES;x++)
     81a:	19 82       	std	Y+1, r1	; 0x01
     81c:	b3 c0       	rjmp	.+358    	; 0x984 <__stack+0x85>
	{
		deviceStoredValue[x] = *((uint8_t*)parameter[x].startingPointer);
     81e:	89 81       	ldd	r24, Y+1	; 0x01
     820:	48 2f       	mov	r20, r24
     822:	50 e0       	ldi	r21, 0x00	; 0
     824:	89 81       	ldd	r24, Y+1	; 0x01
     826:	28 2f       	mov	r18, r24
     828:	30 e0       	ldi	r19, 0x00	; 0
     82a:	c9 01       	movw	r24, r18
     82c:	88 0f       	add	r24, r24
     82e:	99 1f       	adc	r25, r25
     830:	82 0f       	add	r24, r18
     832:	93 1f       	adc	r25, r19
     834:	84 5d       	subi	r24, 0xD4	; 212
     836:	9e 4f       	sbci	r25, 0xFE	; 254
     838:	fc 01       	movw	r30, r24
     83a:	80 81       	ld	r24, Z
     83c:	91 81       	ldd	r25, Z+1	; 0x01
     83e:	fc 01       	movw	r30, r24
     840:	20 81       	ld	r18, Z
     842:	ca 01       	movw	r24, r20
     844:	88 5d       	subi	r24, 0xD8	; 216
     846:	9e 4f       	sbci	r25, 0xFE	; 254
     848:	fc 01       	movw	r30, r24
     84a:	20 83       	st	Z, r18
		switch (x) {
     84c:	89 81       	ldd	r24, Y+1	; 0x01
     84e:	88 2f       	mov	r24, r24
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	81 30       	cpi	r24, 0x01	; 1
     854:	91 05       	cpc	r25, r1
     856:	81 f1       	breq	.+96     	; 0x8b8 <UPDATE_ALL_DEVICES_VALUE_H+0x1de>
     858:	82 30       	cpi	r24, 0x02	; 2
     85a:	91 05       	cpc	r25, r1
     85c:	1c f4       	brge	.+6      	; 0x864 <UPDATE_ALL_DEVICES_VALUE_H+0x18a>
     85e:	00 97       	sbiw	r24, 0x00	; 0
     860:	51 f0       	breq	.+20     	; 0x876 <UPDATE_ALL_DEVICES_VALUE_H+0x19c>
     862:	8d c0       	rjmp	.+282    	; 0x97e <__stack+0x7f>
     864:	82 30       	cpi	r24, 0x02	; 2
     866:	91 05       	cpc	r25, r1
     868:	09 f4       	brne	.+2      	; 0x86c <UPDATE_ALL_DEVICES_VALUE_H+0x192>
     86a:	47 c0       	rjmp	.+142    	; 0x8fa <UPDATE_ALL_DEVICES_VALUE_H+0x220>
     86c:	83 30       	cpi	r24, 0x03	; 3
     86e:	91 05       	cpc	r25, r1
     870:	09 f4       	brne	.+2      	; 0x874 <UPDATE_ALL_DEVICES_VALUE_H+0x19a>
     872:	64 c0       	rjmp	.+200    	; 0x93c <__stack+0x3d>
     874:	84 c0       	rjmp	.+264    	; 0x97e <__stack+0x7f>
			case 0x00:
				bit_write(deviceStoredValue[x], PORTD, BIT(3));
     876:	89 81       	ldd	r24, Y+1	; 0x01
     878:	88 2f       	mov	r24, r24
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	88 5d       	subi	r24, 0xD8	; 216
     87e:	9e 4f       	sbci	r25, 0xFE	; 254
     880:	fc 01       	movw	r30, r24
     882:	80 81       	ld	r24, Z
     884:	88 23       	and	r24, r24
     886:	61 f0       	breq	.+24     	; 0x8a0 <UPDATE_ALL_DEVICES_VALUE_H+0x1c6>
     888:	8b e2       	ldi	r24, 0x2B	; 43
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	2b e2       	ldi	r18, 0x2B	; 43
     88e:	30 e0       	ldi	r19, 0x00	; 0
     890:	f9 01       	movw	r30, r18
     892:	20 81       	ld	r18, Z
     894:	28 60       	ori	r18, 0x08	; 8
     896:	fc 01       	movw	r30, r24
     898:	20 83       	st	Z, r18
     89a:	fc 01       	movw	r30, r24
     89c:	80 81       	ld	r24, Z
				break;
     89e:	6f c0       	rjmp	.+222    	; 0x97e <__stack+0x7f>
	for (uint8_t x = 0; x < AVAILABLE_DEVICES;x++)
	{
		deviceStoredValue[x] = *((uint8_t*)parameter[x].startingPointer);
		switch (x) {
			case 0x00:
				bit_write(deviceStoredValue[x], PORTD, BIT(3));
     8a0:	8b e2       	ldi	r24, 0x2B	; 43
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	2b e2       	ldi	r18, 0x2B	; 43
     8a6:	30 e0       	ldi	r19, 0x00	; 0
     8a8:	f9 01       	movw	r30, r18
     8aa:	20 81       	ld	r18, Z
     8ac:	27 7f       	andi	r18, 0xF7	; 247
     8ae:	fc 01       	movw	r30, r24
     8b0:	20 83       	st	Z, r18
     8b2:	fc 01       	movw	r30, r24
     8b4:	80 81       	ld	r24, Z
				break;
     8b6:	63 c0       	rjmp	.+198    	; 0x97e <__stack+0x7f>
			case 0x01:
				bit_write(deviceStoredValue[x], PORTD, BIT(2));
     8b8:	89 81       	ldd	r24, Y+1	; 0x01
     8ba:	88 2f       	mov	r24, r24
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	88 5d       	subi	r24, 0xD8	; 216
     8c0:	9e 4f       	sbci	r25, 0xFE	; 254
     8c2:	fc 01       	movw	r30, r24
     8c4:	80 81       	ld	r24, Z
     8c6:	88 23       	and	r24, r24
     8c8:	61 f0       	breq	.+24     	; 0x8e2 <UPDATE_ALL_DEVICES_VALUE_H+0x208>
     8ca:	8b e2       	ldi	r24, 0x2B	; 43
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	2b e2       	ldi	r18, 0x2B	; 43
     8d0:	30 e0       	ldi	r19, 0x00	; 0
     8d2:	f9 01       	movw	r30, r18
     8d4:	20 81       	ld	r18, Z
     8d6:	24 60       	ori	r18, 0x04	; 4
     8d8:	fc 01       	movw	r30, r24
     8da:	20 83       	st	Z, r18
     8dc:	fc 01       	movw	r30, r24
     8de:	80 81       	ld	r24, Z
				break;
     8e0:	4e c0       	rjmp	.+156    	; 0x97e <__stack+0x7f>
		switch (x) {
			case 0x00:
				bit_write(deviceStoredValue[x], PORTD, BIT(3));
				break;
			case 0x01:
				bit_write(deviceStoredValue[x], PORTD, BIT(2));
     8e2:	8b e2       	ldi	r24, 0x2B	; 43
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	2b e2       	ldi	r18, 0x2B	; 43
     8e8:	30 e0       	ldi	r19, 0x00	; 0
     8ea:	f9 01       	movw	r30, r18
     8ec:	20 81       	ld	r18, Z
     8ee:	2b 7f       	andi	r18, 0xFB	; 251
     8f0:	fc 01       	movw	r30, r24
     8f2:	20 83       	st	Z, r18
     8f4:	fc 01       	movw	r30, r24
     8f6:	80 81       	ld	r24, Z
				break;
     8f8:	42 c0       	rjmp	.+132    	; 0x97e <__stack+0x7f>
			case 0x02:
				bit_write(deviceStoredValue[x], PORTD, BIT(6));
     8fa:	89 81       	ldd	r24, Y+1	; 0x01
     8fc:	88 2f       	mov	r24, r24
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	88 5d       	subi	r24, 0xD8	; 216
     902:	9e 4f       	sbci	r25, 0xFE	; 254
     904:	fc 01       	movw	r30, r24
     906:	80 81       	ld	r24, Z
     908:	88 23       	and	r24, r24
     90a:	61 f0       	breq	.+24     	; 0x924 <__stack+0x25>
     90c:	8b e2       	ldi	r24, 0x2B	; 43
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	2b e2       	ldi	r18, 0x2B	; 43
     912:	30 e0       	ldi	r19, 0x00	; 0
     914:	f9 01       	movw	r30, r18
     916:	20 81       	ld	r18, Z
     918:	20 64       	ori	r18, 0x40	; 64
     91a:	fc 01       	movw	r30, r24
     91c:	20 83       	st	Z, r18
     91e:	fc 01       	movw	r30, r24
     920:	80 81       	ld	r24, Z
				break;
     922:	2d c0       	rjmp	.+90     	; 0x97e <__stack+0x7f>
				break;
			case 0x01:
				bit_write(deviceStoredValue[x], PORTD, BIT(2));
				break;
			case 0x02:
				bit_write(deviceStoredValue[x], PORTD, BIT(6));
     924:	8b e2       	ldi	r24, 0x2B	; 43
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	2b e2       	ldi	r18, 0x2B	; 43
     92a:	30 e0       	ldi	r19, 0x00	; 0
     92c:	f9 01       	movw	r30, r18
     92e:	20 81       	ld	r18, Z
     930:	2f 7b       	andi	r18, 0xBF	; 191
     932:	fc 01       	movw	r30, r24
     934:	20 83       	st	Z, r18
     936:	fc 01       	movw	r30, r24
     938:	80 81       	ld	r24, Z
				break;
     93a:	21 c0       	rjmp	.+66     	; 0x97e <__stack+0x7f>
			case 0x03:
				bit_write(deviceStoredValue[x], PORTD, BIT(5));
     93c:	89 81       	ldd	r24, Y+1	; 0x01
     93e:	88 2f       	mov	r24, r24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	88 5d       	subi	r24, 0xD8	; 216
     944:	9e 4f       	sbci	r25, 0xFE	; 254
     946:	fc 01       	movw	r30, r24
     948:	80 81       	ld	r24, Z
     94a:	88 23       	and	r24, r24
     94c:	61 f0       	breq	.+24     	; 0x966 <__stack+0x67>
     94e:	8b e2       	ldi	r24, 0x2B	; 43
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	2b e2       	ldi	r18, 0x2B	; 43
     954:	30 e0       	ldi	r19, 0x00	; 0
     956:	f9 01       	movw	r30, r18
     958:	20 81       	ld	r18, Z
     95a:	20 62       	ori	r18, 0x20	; 32
     95c:	fc 01       	movw	r30, r24
     95e:	20 83       	st	Z, r18
     960:	fc 01       	movw	r30, r24
     962:	80 81       	ld	r24, Z
				break;
     964:	0c c0       	rjmp	.+24     	; 0x97e <__stack+0x7f>
				break;
			case 0x02:
				bit_write(deviceStoredValue[x], PORTD, BIT(6));
				break;
			case 0x03:
				bit_write(deviceStoredValue[x], PORTD, BIT(5));
     966:	8b e2       	ldi	r24, 0x2B	; 43
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	2b e2       	ldi	r18, 0x2B	; 43
     96c:	30 e0       	ldi	r19, 0x00	; 0
     96e:	f9 01       	movw	r30, r18
     970:	20 81       	ld	r18, Z
     972:	2f 7d       	andi	r18, 0xDF	; 223
     974:	fc 01       	movw	r30, r24
     976:	20 83       	st	Z, r18
     978:	fc 01       	movw	r30, r24
     97a:	80 81       	ld	r24, Z
				break;
     97c:	00 00       	nop

void UPDATE_ALL_DEVICES_VALUE_H() {
	
	bit_flip(PORTB, BIT(0)); _delay_ms(100); bit_flip(PORTB, BIT(0));
	
	for (uint8_t x = 0; x < AVAILABLE_DEVICES;x++)
     97e:	89 81       	ldd	r24, Y+1	; 0x01
     980:	8f 5f       	subi	r24, 0xFF	; 255
     982:	89 83       	std	Y+1, r24	; 0x01
     984:	89 81       	ldd	r24, Y+1	; 0x01
     986:	84 30       	cpi	r24, 0x04	; 4
     988:	08 f4       	brcc	.+2      	; 0x98c <__stack+0x8d>
     98a:	49 cf       	rjmp	.-366    	; 0x81e <UPDATE_ALL_DEVICES_VALUE_H+0x144>
		}
	}
	

	
}
     98c:	2f 96       	adiw	r28, 0x0f	; 15
     98e:	0f b6       	in	r0, 0x3f	; 63
     990:	f8 94       	cli
     992:	de bf       	out	0x3e, r29	; 62
     994:	0f be       	out	0x3f, r0	; 63
     996:	cd bf       	out	0x3d, r28	; 61
     998:	cf 91       	pop	r28
     99a:	df 91       	pop	r29
     99c:	1f 91       	pop	r17
     99e:	0f 91       	pop	r16
     9a0:	08 95       	ret

000009a2 <UPDATE_DEVICE_VALUE_H>:

void UPDATE_DEVICE_VALUE_H() {
     9a2:	df 93       	push	r29
     9a4:	cf 93       	push	r28
     9a6:	00 d0       	rcall	.+0      	; 0x9a8 <UPDATE_DEVICE_VALUE_H+0x6>
     9a8:	cd b7       	in	r28, 0x3d	; 61
     9aa:	de b7       	in	r29, 0x3e	; 62
	uint8_t deviceIndex = *((uint8_t*)parameter[0].startingPointer); 
     9ac:	80 91 2c 01 	lds	r24, 0x012C
     9b0:	90 91 2d 01 	lds	r25, 0x012D
     9b4:	fc 01       	movw	r30, r24
     9b6:	80 81       	ld	r24, Z
     9b8:	89 83       	std	Y+1, r24	; 0x01
	uint8_t deviceValue = *((uint8_t*)parameter[1].startingPointer); 
     9ba:	80 91 2f 01 	lds	r24, 0x012F
     9be:	90 91 30 01 	lds	r25, 0x0130
     9c2:	fc 01       	movw	r30, r24
     9c4:	80 81       	ld	r24, Z
     9c6:	8a 83       	std	Y+2, r24	; 0x02
	
	switch (deviceIndex) {
     9c8:	89 81       	ldd	r24, Y+1	; 0x01
     9ca:	88 2f       	mov	r24, r24
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	81 30       	cpi	r24, 0x01	; 1
     9d0:	91 05       	cpc	r25, r1
     9d2:	49 f1       	breq	.+82     	; 0xa26 <UPDATE_DEVICE_VALUE_H+0x84>
     9d4:	82 30       	cpi	r24, 0x02	; 2
     9d6:	91 05       	cpc	r25, r1
     9d8:	1c f4       	brge	.+6      	; 0x9e0 <UPDATE_DEVICE_VALUE_H+0x3e>
     9da:	00 97       	sbiw	r24, 0x00	; 0
     9dc:	49 f0       	breq	.+18     	; 0x9f0 <UPDATE_DEVICE_VALUE_H+0x4e>
     9de:	74 c0       	rjmp	.+232    	; 0xac8 <UPDATE_DEVICE_VALUE_H+0x126>
     9e0:	82 30       	cpi	r24, 0x02	; 2
     9e2:	91 05       	cpc	r25, r1
     9e4:	d9 f1       	breq	.+118    	; 0xa5c <UPDATE_DEVICE_VALUE_H+0xba>
     9e6:	83 30       	cpi	r24, 0x03	; 3
     9e8:	91 05       	cpc	r25, r1
     9ea:	09 f4       	brne	.+2      	; 0x9ee <UPDATE_DEVICE_VALUE_H+0x4c>
     9ec:	52 c0       	rjmp	.+164    	; 0xa92 <UPDATE_DEVICE_VALUE_H+0xf0>
     9ee:	6c c0       	rjmp	.+216    	; 0xac8 <UPDATE_DEVICE_VALUE_H+0x126>
		case 0:
			bit_write(deviceValue, PORTD, BIT(3));
     9f0:	8a 81       	ldd	r24, Y+2	; 0x02
     9f2:	88 23       	and	r24, r24
     9f4:	61 f0       	breq	.+24     	; 0xa0e <UPDATE_DEVICE_VALUE_H+0x6c>
     9f6:	8b e2       	ldi	r24, 0x2B	; 43
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	2b e2       	ldi	r18, 0x2B	; 43
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	f9 01       	movw	r30, r18
     a00:	20 81       	ld	r18, Z
     a02:	28 60       	ori	r18, 0x08	; 8
     a04:	fc 01       	movw	r30, r24
     a06:	20 83       	st	Z, r18
     a08:	fc 01       	movw	r30, r24
     a0a:	80 81       	ld	r24, Z
			break;
     a0c:	5d c0       	rjmp	.+186    	; 0xac8 <UPDATE_DEVICE_VALUE_H+0x126>
	uint8_t deviceIndex = *((uint8_t*)parameter[0].startingPointer); 
	uint8_t deviceValue = *((uint8_t*)parameter[1].startingPointer); 
	
	switch (deviceIndex) {
		case 0:
			bit_write(deviceValue, PORTD, BIT(3));
     a0e:	8b e2       	ldi	r24, 0x2B	; 43
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	2b e2       	ldi	r18, 0x2B	; 43
     a14:	30 e0       	ldi	r19, 0x00	; 0
     a16:	f9 01       	movw	r30, r18
     a18:	20 81       	ld	r18, Z
     a1a:	27 7f       	andi	r18, 0xF7	; 247
     a1c:	fc 01       	movw	r30, r24
     a1e:	20 83       	st	Z, r18
     a20:	fc 01       	movw	r30, r24
     a22:	80 81       	ld	r24, Z
			break;
     a24:	51 c0       	rjmp	.+162    	; 0xac8 <UPDATE_DEVICE_VALUE_H+0x126>
		case 1:
			bit_write(deviceValue, PORTD, BIT(2));
     a26:	8a 81       	ldd	r24, Y+2	; 0x02
     a28:	88 23       	and	r24, r24
     a2a:	61 f0       	breq	.+24     	; 0xa44 <UPDATE_DEVICE_VALUE_H+0xa2>
     a2c:	8b e2       	ldi	r24, 0x2B	; 43
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	2b e2       	ldi	r18, 0x2B	; 43
     a32:	30 e0       	ldi	r19, 0x00	; 0
     a34:	f9 01       	movw	r30, r18
     a36:	20 81       	ld	r18, Z
     a38:	24 60       	ori	r18, 0x04	; 4
     a3a:	fc 01       	movw	r30, r24
     a3c:	20 83       	st	Z, r18
     a3e:	fc 01       	movw	r30, r24
     a40:	80 81       	ld	r24, Z
			break;
     a42:	42 c0       	rjmp	.+132    	; 0xac8 <UPDATE_DEVICE_VALUE_H+0x126>
	switch (deviceIndex) {
		case 0:
			bit_write(deviceValue, PORTD, BIT(3));
			break;
		case 1:
			bit_write(deviceValue, PORTD, BIT(2));
     a44:	8b e2       	ldi	r24, 0x2B	; 43
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	2b e2       	ldi	r18, 0x2B	; 43
     a4a:	30 e0       	ldi	r19, 0x00	; 0
     a4c:	f9 01       	movw	r30, r18
     a4e:	20 81       	ld	r18, Z
     a50:	2b 7f       	andi	r18, 0xFB	; 251
     a52:	fc 01       	movw	r30, r24
     a54:	20 83       	st	Z, r18
     a56:	fc 01       	movw	r30, r24
     a58:	80 81       	ld	r24, Z
			break;
     a5a:	36 c0       	rjmp	.+108    	; 0xac8 <UPDATE_DEVICE_VALUE_H+0x126>
		case 2:
			bit_write(deviceValue, PORTD, BIT(6));
     a5c:	8a 81       	ldd	r24, Y+2	; 0x02
     a5e:	88 23       	and	r24, r24
     a60:	61 f0       	breq	.+24     	; 0xa7a <UPDATE_DEVICE_VALUE_H+0xd8>
     a62:	8b e2       	ldi	r24, 0x2B	; 43
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	2b e2       	ldi	r18, 0x2B	; 43
     a68:	30 e0       	ldi	r19, 0x00	; 0
     a6a:	f9 01       	movw	r30, r18
     a6c:	20 81       	ld	r18, Z
     a6e:	20 64       	ori	r18, 0x40	; 64
     a70:	fc 01       	movw	r30, r24
     a72:	20 83       	st	Z, r18
     a74:	fc 01       	movw	r30, r24
     a76:	80 81       	ld	r24, Z
			break;
     a78:	27 c0       	rjmp	.+78     	; 0xac8 <UPDATE_DEVICE_VALUE_H+0x126>
			break;
		case 1:
			bit_write(deviceValue, PORTD, BIT(2));
			break;
		case 2:
			bit_write(deviceValue, PORTD, BIT(6));
     a7a:	8b e2       	ldi	r24, 0x2B	; 43
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	2b e2       	ldi	r18, 0x2B	; 43
     a80:	30 e0       	ldi	r19, 0x00	; 0
     a82:	f9 01       	movw	r30, r18
     a84:	20 81       	ld	r18, Z
     a86:	2f 7b       	andi	r18, 0xBF	; 191
     a88:	fc 01       	movw	r30, r24
     a8a:	20 83       	st	Z, r18
     a8c:	fc 01       	movw	r30, r24
     a8e:	80 81       	ld	r24, Z
			break;
     a90:	1b c0       	rjmp	.+54     	; 0xac8 <UPDATE_DEVICE_VALUE_H+0x126>
		case 3:
			bit_write(deviceValue, PORTD, BIT(5));
     a92:	8a 81       	ldd	r24, Y+2	; 0x02
     a94:	88 23       	and	r24, r24
     a96:	61 f0       	breq	.+24     	; 0xab0 <UPDATE_DEVICE_VALUE_H+0x10e>
     a98:	8b e2       	ldi	r24, 0x2B	; 43
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	2b e2       	ldi	r18, 0x2B	; 43
     a9e:	30 e0       	ldi	r19, 0x00	; 0
     aa0:	f9 01       	movw	r30, r18
     aa2:	20 81       	ld	r18, Z
     aa4:	20 62       	ori	r18, 0x20	; 32
     aa6:	fc 01       	movw	r30, r24
     aa8:	20 83       	st	Z, r18
     aaa:	fc 01       	movw	r30, r24
     aac:	80 81       	ld	r24, Z
			break;
     aae:	0c c0       	rjmp	.+24     	; 0xac8 <UPDATE_DEVICE_VALUE_H+0x126>
			break;
		case 2:
			bit_write(deviceValue, PORTD, BIT(6));
			break;
		case 3:
			bit_write(deviceValue, PORTD, BIT(5));
     ab0:	8b e2       	ldi	r24, 0x2B	; 43
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	2b e2       	ldi	r18, 0x2B	; 43
     ab6:	30 e0       	ldi	r19, 0x00	; 0
     ab8:	f9 01       	movw	r30, r18
     aba:	20 81       	ld	r18, Z
     abc:	2f 7d       	andi	r18, 0xDF	; 223
     abe:	fc 01       	movw	r30, r24
     ac0:	20 83       	st	Z, r18
     ac2:	fc 01       	movw	r30, r24
     ac4:	80 81       	ld	r24, Z
			break;
     ac6:	00 00       	nop
	}
	
	deviceStoredValue[deviceIndex] = deviceValue;
     ac8:	89 81       	ldd	r24, Y+1	; 0x01
     aca:	88 2f       	mov	r24, r24
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	88 5d       	subi	r24, 0xD8	; 216
     ad0:	9e 4f       	sbci	r25, 0xFE	; 254
     ad2:	2a 81       	ldd	r18, Y+2	; 0x02
     ad4:	fc 01       	movw	r30, r24
     ad6:	20 83       	st	Z, r18
	
}
     ad8:	0f 90       	pop	r0
     ada:	0f 90       	pop	r0
     adc:	cf 91       	pop	r28
     ade:	df 91       	pop	r29
     ae0:	08 95       	ret

00000ae2 <GET_ALL_DEVICES_VALUE_H>:
void GET_ALL_DEVICES_VALUE_H() {
     ae2:	0f 93       	push	r16
     ae4:	1f 93       	push	r17
     ae6:	df 93       	push	r29
     ae8:	cf 93       	push	r28
     aea:	cd b7       	in	r28, 0x3d	; 61
     aec:	de b7       	in	r29, 0x3e	; 62
     aee:	60 97       	sbiw	r28, 0x10	; 16
     af0:	0f b6       	in	r0, 0x3f	; 63
     af2:	f8 94       	cli
     af4:	de bf       	out	0x3e, r29	; 62
     af6:	0f be       	out	0x3f, r0	; 63
     af8:	cd bf       	out	0x3d, r28	; 61
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	a8 e4       	ldi	r26, 0x48	; 72
     b00:	b2 e4       	ldi	r27, 0x42	; 66
     b02:	8b 83       	std	Y+3, r24	; 0x03
     b04:	9c 83       	std	Y+4, r25	; 0x04
     b06:	ad 83       	std	Y+5, r26	; 0x05
     b08:	be 83       	std	Y+6, r27	; 0x06
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     b0a:	6b 81       	ldd	r22, Y+3	; 0x03
     b0c:	7c 81       	ldd	r23, Y+4	; 0x04
     b0e:	8d 81       	ldd	r24, Y+5	; 0x05
     b10:	9e 81       	ldd	r25, Y+6	; 0x06
     b12:	20 e0       	ldi	r18, 0x00	; 0
     b14:	30 e0       	ldi	r19, 0x00	; 0
     b16:	4a e7       	ldi	r20, 0x7A	; 122
     b18:	55 e4       	ldi	r21, 0x45	; 69
     b1a:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <__mulsf3>
     b1e:	dc 01       	movw	r26, r24
     b20:	cb 01       	movw	r24, r22
     b22:	8f 83       	std	Y+7, r24	; 0x07
     b24:	98 87       	std	Y+8, r25	; 0x08
     b26:	a9 87       	std	Y+9, r26	; 0x09
     b28:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     b2a:	11 e0       	ldi	r17, 0x01	; 1
     b2c:	6f 81       	ldd	r22, Y+7	; 0x07
     b2e:	78 85       	ldd	r23, Y+8	; 0x08
     b30:	89 85       	ldd	r24, Y+9	; 0x09
     b32:	9a 85       	ldd	r25, Y+10	; 0x0a
     b34:	20 e0       	ldi	r18, 0x00	; 0
     b36:	30 e0       	ldi	r19, 0x00	; 0
     b38:	40 e8       	ldi	r20, 0x80	; 128
     b3a:	5f e3       	ldi	r21, 0x3F	; 63
     b3c:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <__cmpsf2>
     b40:	88 23       	and	r24, r24
     b42:	0c f0       	brlt	.+2      	; 0xb46 <GET_ALL_DEVICES_VALUE_H+0x64>
     b44:	10 e0       	ldi	r17, 0x00	; 0
     b46:	11 23       	and	r17, r17
     b48:	29 f0       	breq	.+10     	; 0xb54 <GET_ALL_DEVICES_VALUE_H+0x72>
		__ticks = 1;
     b4a:	81 e0       	ldi	r24, 0x01	; 1
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	9c 87       	std	Y+12, r25	; 0x0c
     b50:	8b 87       	std	Y+11, r24	; 0x0b
     b52:	46 c0       	rjmp	.+140    	; 0xbe0 <GET_ALL_DEVICES_VALUE_H+0xfe>
	else if (__tmp > 65535)
     b54:	11 e0       	ldi	r17, 0x01	; 1
     b56:	6f 81       	ldd	r22, Y+7	; 0x07
     b58:	78 85       	ldd	r23, Y+8	; 0x08
     b5a:	89 85       	ldd	r24, Y+9	; 0x09
     b5c:	9a 85       	ldd	r25, Y+10	; 0x0a
     b5e:	20 e0       	ldi	r18, 0x00	; 0
     b60:	3f ef       	ldi	r19, 0xFF	; 255
     b62:	4f e7       	ldi	r20, 0x7F	; 127
     b64:	57 e4       	ldi	r21, 0x47	; 71
     b66:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <__gesf2>
     b6a:	18 16       	cp	r1, r24
     b6c:	0c f0       	brlt	.+2      	; 0xb70 <GET_ALL_DEVICES_VALUE_H+0x8e>
     b6e:	10 e0       	ldi	r17, 0x00	; 0
     b70:	11 23       	and	r17, r17
     b72:	61 f1       	breq	.+88     	; 0xbcc <GET_ALL_DEVICES_VALUE_H+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b74:	6b 81       	ldd	r22, Y+3	; 0x03
     b76:	7c 81       	ldd	r23, Y+4	; 0x04
     b78:	8d 81       	ldd	r24, Y+5	; 0x05
     b7a:	9e 81       	ldd	r25, Y+6	; 0x06
     b7c:	20 e0       	ldi	r18, 0x00	; 0
     b7e:	30 e0       	ldi	r19, 0x00	; 0
     b80:	40 e2       	ldi	r20, 0x20	; 32
     b82:	51 e4       	ldi	r21, 0x41	; 65
     b84:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <__mulsf3>
     b88:	dc 01       	movw	r26, r24
     b8a:	cb 01       	movw	r24, r22
     b8c:	bc 01       	movw	r22, r24
     b8e:	cd 01       	movw	r24, r26
     b90:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <__fixunssfsi>
     b94:	dc 01       	movw	r26, r24
     b96:	cb 01       	movw	r24, r22
     b98:	9c 87       	std	Y+12, r25	; 0x0c
     b9a:	8b 87       	std	Y+11, r24	; 0x0b
     b9c:	12 c0       	rjmp	.+36     	; 0xbc2 <GET_ALL_DEVICES_VALUE_H+0xe0>
     b9e:	80 e9       	ldi	r24, 0x90	; 144
     ba0:	91 e0       	ldi	r25, 0x01	; 1
     ba2:	9e 87       	std	Y+14, r25	; 0x0e
     ba4:	8d 87       	std	Y+13, r24	; 0x0d
     ba6:	8d 85       	ldd	r24, Y+13	; 0x0d
     ba8:	9e 85       	ldd	r25, Y+14	; 0x0e
     baa:	8c 01       	movw	r16, r24
     bac:	c8 01       	movw	r24, r16
     bae:	01 97       	sbiw	r24, 0x01	; 1
     bb0:	f1 f7       	brne	.-4      	; 0xbae <GET_ALL_DEVICES_VALUE_H+0xcc>
     bb2:	8c 01       	movw	r16, r24
     bb4:	1e 87       	std	Y+14, r17	; 0x0e
     bb6:	0d 87       	std	Y+13, r16	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bb8:	8b 85       	ldd	r24, Y+11	; 0x0b
     bba:	9c 85       	ldd	r25, Y+12	; 0x0c
     bbc:	01 97       	sbiw	r24, 0x01	; 1
     bbe:	9c 87       	std	Y+12, r25	; 0x0c
     bc0:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bc2:	8b 85       	ldd	r24, Y+11	; 0x0b
     bc4:	9c 85       	ldd	r25, Y+12	; 0x0c
     bc6:	00 97       	sbiw	r24, 0x00	; 0
     bc8:	51 f7       	brne	.-44     	; 0xb9e <GET_ALL_DEVICES_VALUE_H+0xbc>
     bca:	17 c0       	rjmp	.+46     	; 0xbfa <GET_ALL_DEVICES_VALUE_H+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     bcc:	6f 81       	ldd	r22, Y+7	; 0x07
     bce:	78 85       	ldd	r23, Y+8	; 0x08
     bd0:	89 85       	ldd	r24, Y+9	; 0x09
     bd2:	9a 85       	ldd	r25, Y+10	; 0x0a
     bd4:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <__fixunssfsi>
     bd8:	dc 01       	movw	r26, r24
     bda:	cb 01       	movw	r24, r22
     bdc:	9c 87       	std	Y+12, r25	; 0x0c
     bde:	8b 87       	std	Y+11, r24	; 0x0b
     be0:	8b 85       	ldd	r24, Y+11	; 0x0b
     be2:	9c 85       	ldd	r25, Y+12	; 0x0c
     be4:	98 8b       	std	Y+16, r25	; 0x10
     be6:	8f 87       	std	Y+15, r24	; 0x0f
     be8:	8f 85       	ldd	r24, Y+15	; 0x0f
     bea:	98 89       	ldd	r25, Y+16	; 0x10
     bec:	8c 01       	movw	r16, r24
     bee:	c8 01       	movw	r24, r16
     bf0:	01 97       	sbiw	r24, 0x01	; 1
     bf2:	f1 f7       	brne	.-4      	; 0xbf0 <GET_ALL_DEVICES_VALUE_H+0x10e>
     bf4:	8c 01       	movw	r16, r24
     bf6:	18 8b       	std	Y+16, r17	; 0x10
     bf8:	0f 87       	std	Y+15, r16	; 0x0f
	_delay_ms(50);
	
	for (uint8_t x = 0; x < AVAILABLE_DEVICES;x++)
     bfa:	19 82       	std	Y+1, r1	; 0x01
     bfc:	0e c0       	rjmp	.+28     	; 0xc1a <GET_ALL_DEVICES_VALUE_H+0x138>
	{
		writeParameterValue(x, &deviceStoredValue[x], 2);
     bfe:	89 81       	ldd	r24, Y+1	; 0x01
     c00:	88 2f       	mov	r24, r24
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	9c 01       	movw	r18, r24
     c06:	28 5d       	subi	r18, 0xD8	; 216
     c08:	3e 4f       	sbci	r19, 0xFE	; 254
     c0a:	89 81       	ldd	r24, Y+1	; 0x01
     c0c:	b9 01       	movw	r22, r18
     c0e:	42 e0       	ldi	r20, 0x02	; 2
     c10:	0e 94 14 03 	call	0x628	; 0x628 <writeParameterValue>
	
}
void GET_ALL_DEVICES_VALUE_H() {
	_delay_ms(50);
	
	for (uint8_t x = 0; x < AVAILABLE_DEVICES;x++)
     c14:	89 81       	ldd	r24, Y+1	; 0x01
     c16:	8f 5f       	subi	r24, 0xFF	; 255
     c18:	89 83       	std	Y+1, r24	; 0x01
     c1a:	89 81       	ldd	r24, Y+1	; 0x01
     c1c:	84 30       	cpi	r24, 0x04	; 4
     c1e:	78 f3       	brcs	.-34     	; 0xbfe <GET_ALL_DEVICES_VALUE_H+0x11c>
	{
		writeParameterValue(x, &deviceStoredValue[x], 2);
	}

	ComposeMessageToBuffer(UPDATE_ALL_DEVICES_VALUE_ID, AVAILABLE_DEVICES, PHONE_MODULE);  // PHONE_MODULE deberia ser lastTransmitterModuleID
     c20:	80 e0       	ldi	r24, 0x00	; 0
     c22:	64 e0       	ldi	r22, 0x04	; 4
     c24:	40 e0       	ldi	r20, 0x00	; 0
     c26:	0e 94 1a 02 	call	0x434	; 0x434 <ComposeMessageToBuffer>
	
	nrf24_initRF_SAFE(MAIN_BOARD, TRANSMIT);
     c2a:	80 e0       	ldi	r24, 0x00	; 0
     c2c:	61 e0       	ldi	r22, 0x01	; 1
     c2e:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <nrf24_initRF_SAFE>
	nrf24_send(command_buffer);
     c32:	80 91 54 01 	lds	r24, 0x0154
     c36:	90 91 55 01 	lds	r25, 0x0155
     c3a:	0e 94 05 0b 	call	0x160a	; 0x160a <nrf24_send>
	while(nrf24_isSending());
     c3e:	00 00       	nop
     c40:	0e 94 32 0b 	call	0x1664	; 0x1664 <nrf24_isSending>
     c44:	88 23       	and	r24, r24
     c46:	e1 f7       	brne	.-8      	; 0xc40 <GET_ALL_DEVICES_VALUE_H+0x15e>
	uint8_t messageStatus = nrf24_lastMessageStatus();
     c48:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <nrf24_lastMessageStatus>
     c4c:	8a 83       	std	Y+2, r24	; 0x02
}
     c4e:	60 96       	adiw	r28, 0x10	; 16
     c50:	0f b6       	in	r0, 0x3f	; 63
     c52:	f8 94       	cli
     c54:	de bf       	out	0x3e, r29	; 62
     c56:	0f be       	out	0x3f, r0	; 63
     c58:	cd bf       	out	0x3d, r28	; 61
     c5a:	cf 91       	pop	r28
     c5c:	df 91       	pop	r29
     c5e:	1f 91       	pop	r17
     c60:	0f 91       	pop	r16
     c62:	08 95       	ret

00000c64 <GET_DEVICE_VALUE_H>:
void GET_DEVICE_VALUE_H() {
     c64:	0f 93       	push	r16
     c66:	1f 93       	push	r17
     c68:	df 93       	push	r29
     c6a:	cf 93       	push	r28
     c6c:	cd b7       	in	r28, 0x3d	; 61
     c6e:	de b7       	in	r29, 0x3e	; 62
     c70:	60 97       	sbiw	r28, 0x10	; 16
     c72:	0f b6       	in	r0, 0x3f	; 63
     c74:	f8 94       	cli
     c76:	de bf       	out	0x3e, r29	; 62
     c78:	0f be       	out	0x3f, r0	; 63
     c7a:	cd bf       	out	0x3d, r28	; 61
     c7c:	80 e0       	ldi	r24, 0x00	; 0
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	a8 e4       	ldi	r26, 0x48	; 72
     c82:	b2 e4       	ldi	r27, 0x42	; 66
     c84:	8a 83       	std	Y+2, r24	; 0x02
     c86:	9b 83       	std	Y+3, r25	; 0x03
     c88:	ac 83       	std	Y+4, r26	; 0x04
     c8a:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     c8c:	6a 81       	ldd	r22, Y+2	; 0x02
     c8e:	7b 81       	ldd	r23, Y+3	; 0x03
     c90:	8c 81       	ldd	r24, Y+4	; 0x04
     c92:	9d 81       	ldd	r25, Y+5	; 0x05
     c94:	20 e0       	ldi	r18, 0x00	; 0
     c96:	30 e0       	ldi	r19, 0x00	; 0
     c98:	4a e7       	ldi	r20, 0x7A	; 122
     c9a:	55 e4       	ldi	r21, 0x45	; 69
     c9c:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <__mulsf3>
     ca0:	dc 01       	movw	r26, r24
     ca2:	cb 01       	movw	r24, r22
     ca4:	8e 83       	std	Y+6, r24	; 0x06
     ca6:	9f 83       	std	Y+7, r25	; 0x07
     ca8:	a8 87       	std	Y+8, r26	; 0x08
     caa:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     cac:	11 e0       	ldi	r17, 0x01	; 1
     cae:	6e 81       	ldd	r22, Y+6	; 0x06
     cb0:	7f 81       	ldd	r23, Y+7	; 0x07
     cb2:	88 85       	ldd	r24, Y+8	; 0x08
     cb4:	99 85       	ldd	r25, Y+9	; 0x09
     cb6:	20 e0       	ldi	r18, 0x00	; 0
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	40 e8       	ldi	r20, 0x80	; 128
     cbc:	5f e3       	ldi	r21, 0x3F	; 63
     cbe:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <__cmpsf2>
     cc2:	88 23       	and	r24, r24
     cc4:	0c f0       	brlt	.+2      	; 0xcc8 <GET_DEVICE_VALUE_H+0x64>
     cc6:	10 e0       	ldi	r17, 0x00	; 0
     cc8:	11 23       	and	r17, r17
     cca:	29 f0       	breq	.+10     	; 0xcd6 <GET_DEVICE_VALUE_H+0x72>
		__ticks = 1;
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	9b 87       	std	Y+11, r25	; 0x0b
     cd2:	8a 87       	std	Y+10, r24	; 0x0a
     cd4:	46 c0       	rjmp	.+140    	; 0xd62 <GET_DEVICE_VALUE_H+0xfe>
	else if (__tmp > 65535)
     cd6:	11 e0       	ldi	r17, 0x01	; 1
     cd8:	6e 81       	ldd	r22, Y+6	; 0x06
     cda:	7f 81       	ldd	r23, Y+7	; 0x07
     cdc:	88 85       	ldd	r24, Y+8	; 0x08
     cde:	99 85       	ldd	r25, Y+9	; 0x09
     ce0:	20 e0       	ldi	r18, 0x00	; 0
     ce2:	3f ef       	ldi	r19, 0xFF	; 255
     ce4:	4f e7       	ldi	r20, 0x7F	; 127
     ce6:	57 e4       	ldi	r21, 0x47	; 71
     ce8:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <__gesf2>
     cec:	18 16       	cp	r1, r24
     cee:	0c f0       	brlt	.+2      	; 0xcf2 <GET_DEVICE_VALUE_H+0x8e>
     cf0:	10 e0       	ldi	r17, 0x00	; 0
     cf2:	11 23       	and	r17, r17
     cf4:	61 f1       	breq	.+88     	; 0xd4e <GET_DEVICE_VALUE_H+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cf6:	6a 81       	ldd	r22, Y+2	; 0x02
     cf8:	7b 81       	ldd	r23, Y+3	; 0x03
     cfa:	8c 81       	ldd	r24, Y+4	; 0x04
     cfc:	9d 81       	ldd	r25, Y+5	; 0x05
     cfe:	20 e0       	ldi	r18, 0x00	; 0
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	40 e2       	ldi	r20, 0x20	; 32
     d04:	51 e4       	ldi	r21, 0x41	; 65
     d06:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <__mulsf3>
     d0a:	dc 01       	movw	r26, r24
     d0c:	cb 01       	movw	r24, r22
     d0e:	bc 01       	movw	r22, r24
     d10:	cd 01       	movw	r24, r26
     d12:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <__fixunssfsi>
     d16:	dc 01       	movw	r26, r24
     d18:	cb 01       	movw	r24, r22
     d1a:	9b 87       	std	Y+11, r25	; 0x0b
     d1c:	8a 87       	std	Y+10, r24	; 0x0a
     d1e:	12 c0       	rjmp	.+36     	; 0xd44 <GET_DEVICE_VALUE_H+0xe0>
     d20:	80 e9       	ldi	r24, 0x90	; 144
     d22:	91 e0       	ldi	r25, 0x01	; 1
     d24:	9d 87       	std	Y+13, r25	; 0x0d
     d26:	8c 87       	std	Y+12, r24	; 0x0c
     d28:	8c 85       	ldd	r24, Y+12	; 0x0c
     d2a:	9d 85       	ldd	r25, Y+13	; 0x0d
     d2c:	8c 01       	movw	r16, r24
     d2e:	c8 01       	movw	r24, r16
     d30:	01 97       	sbiw	r24, 0x01	; 1
     d32:	f1 f7       	brne	.-4      	; 0xd30 <GET_DEVICE_VALUE_H+0xcc>
     d34:	8c 01       	movw	r16, r24
     d36:	1d 87       	std	Y+13, r17	; 0x0d
     d38:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d3a:	8a 85       	ldd	r24, Y+10	; 0x0a
     d3c:	9b 85       	ldd	r25, Y+11	; 0x0b
     d3e:	01 97       	sbiw	r24, 0x01	; 1
     d40:	9b 87       	std	Y+11, r25	; 0x0b
     d42:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d44:	8a 85       	ldd	r24, Y+10	; 0x0a
     d46:	9b 85       	ldd	r25, Y+11	; 0x0b
     d48:	00 97       	sbiw	r24, 0x00	; 0
     d4a:	51 f7       	brne	.-44     	; 0xd20 <GET_DEVICE_VALUE_H+0xbc>
     d4c:	17 c0       	rjmp	.+46     	; 0xd7c <GET_DEVICE_VALUE_H+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d4e:	6e 81       	ldd	r22, Y+6	; 0x06
     d50:	7f 81       	ldd	r23, Y+7	; 0x07
     d52:	88 85       	ldd	r24, Y+8	; 0x08
     d54:	99 85       	ldd	r25, Y+9	; 0x09
     d56:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <__fixunssfsi>
     d5a:	dc 01       	movw	r26, r24
     d5c:	cb 01       	movw	r24, r22
     d5e:	9b 87       	std	Y+11, r25	; 0x0b
     d60:	8a 87       	std	Y+10, r24	; 0x0a
     d62:	8a 85       	ldd	r24, Y+10	; 0x0a
     d64:	9b 85       	ldd	r25, Y+11	; 0x0b
     d66:	9f 87       	std	Y+15, r25	; 0x0f
     d68:	8e 87       	std	Y+14, r24	; 0x0e
     d6a:	8e 85       	ldd	r24, Y+14	; 0x0e
     d6c:	9f 85       	ldd	r25, Y+15	; 0x0f
     d6e:	8c 01       	movw	r16, r24
     d70:	f8 01       	movw	r30, r16
     d72:	31 97       	sbiw	r30, 0x01	; 1
     d74:	f1 f7       	brne	.-4      	; 0xd72 <GET_DEVICE_VALUE_H+0x10e>
     d76:	8f 01       	movw	r16, r30
     d78:	1f 87       	std	Y+15, r17	; 0x0f
     d7a:	0e 87       	std	Y+14, r16	; 0x0e
	_delay_ms(50);
	uint8_t deviceIndex = *((uint8_t*)parameter[0].startingPointer);
     d7c:	80 91 2c 01 	lds	r24, 0x012C
     d80:	90 91 2d 01 	lds	r25, 0x012D
     d84:	fc 01       	movw	r30, r24
     d86:	80 81       	ld	r24, Z
     d88:	88 8b       	std	Y+16, r24	; 0x10
	writeParameterValue(0, &deviceIndex, 1);
     d8a:	9e 01       	movw	r18, r28
     d8c:	20 5f       	subi	r18, 0xF0	; 240
     d8e:	3f 4f       	sbci	r19, 0xFF	; 255
     d90:	80 e0       	ldi	r24, 0x00	; 0
     d92:	b9 01       	movw	r22, r18
     d94:	41 e0       	ldi	r20, 0x01	; 1
     d96:	0e 94 14 03 	call	0x628	; 0x628 <writeParameterValue>
	writeParameterValue(1, &deviceStoredValue[deviceIndex], 2);
     d9a:	88 89       	ldd	r24, Y+16	; 0x10
     d9c:	88 2f       	mov	r24, r24
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	9c 01       	movw	r18, r24
     da2:	28 5d       	subi	r18, 0xD8	; 216
     da4:	3e 4f       	sbci	r19, 0xFE	; 254
     da6:	81 e0       	ldi	r24, 0x01	; 1
     da8:	b9 01       	movw	r22, r18
     daa:	42 e0       	ldi	r20, 0x02	; 2
     dac:	0e 94 14 03 	call	0x628	; 0x628 <writeParameterValue>
	ComposeMessageToBuffer(UPDATE_DEVICE_VALUE_ID, 2, PHONE_MODULE);  // PHONE_MODULE deberia ser lastTransmitterModuleID
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	62 e0       	ldi	r22, 0x02	; 2
     db4:	40 e0       	ldi	r20, 0x00	; 0
     db6:	0e 94 1a 02 	call	0x434	; 0x434 <ComposeMessageToBuffer>
	
	nrf24_initRF_SAFE(MAIN_BOARD, TRANSMIT);
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	61 e0       	ldi	r22, 0x01	; 1
     dbe:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <nrf24_initRF_SAFE>
	nrf24_send(command_buffer);
     dc2:	80 91 54 01 	lds	r24, 0x0154
     dc6:	90 91 55 01 	lds	r25, 0x0155
     dca:	0e 94 05 0b 	call	0x160a	; 0x160a <nrf24_send>
	while(nrf24_isSending());
     dce:	00 00       	nop
     dd0:	0e 94 32 0b 	call	0x1664	; 0x1664 <nrf24_isSending>
     dd4:	88 23       	and	r24, r24
     dd6:	e1 f7       	brne	.-8      	; 0xdd0 <GET_DEVICE_VALUE_H+0x16c>
	uint8_t messageStatus = nrf24_lastMessageStatus();
     dd8:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <nrf24_lastMessageStatus>
     ddc:	89 83       	std	Y+1, r24	; 0x01
}
     dde:	60 96       	adiw	r28, 0x10	; 16
     de0:	0f b6       	in	r0, 0x3f	; 63
     de2:	f8 94       	cli
     de4:	de bf       	out	0x3e, r29	; 62
     de6:	0f be       	out	0x3f, r0	; 63
     de8:	cd bf       	out	0x3d, r28	; 61
     dea:	cf 91       	pop	r28
     dec:	df 91       	pop	r29
     dee:	1f 91       	pop	r17
     df0:	0f 91       	pop	r16
     df2:	08 95       	ret

00000df4 <MESSAGE_STATUS_H>:


     df4:	df 93       	push	r29
     df6:	cf 93       	push	r28
     df8:	cd b7       	in	r28, 0x3d	; 61
     dfa:	de b7       	in	r29, 0x3e	; 62
     dfc:	cf 91       	pop	r28
     dfe:	df 91       	pop	r29
     e00:	08 95       	ret

00000e02 <crc_update>:
#include <stdbool.h>



crc_t crc_update(crc_t crc, const void *data, size_t data_len)
{
     e02:	df 93       	push	r29
     e04:	cf 93       	push	r28
     e06:	cd b7       	in	r28, 0x3d	; 61
     e08:	de b7       	in	r29, 0x3e	; 62
     e0a:	2b 97       	sbiw	r28, 0x0b	; 11
     e0c:	0f b6       	in	r0, 0x3f	; 63
     e0e:	f8 94       	cli
     e10:	de bf       	out	0x3e, r29	; 62
     e12:	0f be       	out	0x3f, r0	; 63
     e14:	cd bf       	out	0x3d, r28	; 61
     e16:	8f 83       	std	Y+7, r24	; 0x07
     e18:	79 87       	std	Y+9, r23	; 0x09
     e1a:	68 87       	std	Y+8, r22	; 0x08
     e1c:	5b 87       	std	Y+11, r21	; 0x0b
     e1e:	4a 87       	std	Y+10, r20	; 0x0a
    const unsigned char *d = (const unsigned char *)data;
     e20:	88 85       	ldd	r24, Y+8	; 0x08
     e22:	99 85       	ldd	r25, Y+9	; 0x09
     e24:	9a 83       	std	Y+2, r25	; 0x02
     e26:	89 83       	std	Y+1, r24	; 0x01
    unsigned int i;
    bool bit;
    unsigned char c;

    while (data_len--) {
     e28:	3c c0       	rjmp	.+120    	; 0xea2 <crc_update+0xa0>
        c = *d++;
     e2a:	89 81       	ldd	r24, Y+1	; 0x01
     e2c:	9a 81       	ldd	r25, Y+2	; 0x02
     e2e:	fc 01       	movw	r30, r24
     e30:	80 81       	ld	r24, Z
     e32:	8e 83       	std	Y+6, r24	; 0x06
     e34:	89 81       	ldd	r24, Y+1	; 0x01
     e36:	9a 81       	ldd	r25, Y+2	; 0x02
     e38:	01 96       	adiw	r24, 0x01	; 1
     e3a:	9a 83       	std	Y+2, r25	; 0x02
     e3c:	89 83       	std	Y+1, r24	; 0x01
        for (i = 0x80; i > 0; i >>= 1) {
     e3e:	80 e8       	ldi	r24, 0x80	; 128
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	9c 83       	std	Y+4, r25	; 0x04
     e44:	8b 83       	std	Y+3, r24	; 0x03
     e46:	29 c0       	rjmp	.+82     	; 0xe9a <crc_update+0x98>
            bit = crc & 0x80;
     e48:	8f 81       	ldd	r24, Y+7	; 0x07
     e4a:	88 2f       	mov	r24, r24
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	80 78       	andi	r24, 0x80	; 128
     e50:	90 70       	andi	r25, 0x00	; 0
     e52:	21 e0       	ldi	r18, 0x01	; 1
     e54:	00 97       	sbiw	r24, 0x00	; 0
     e56:	09 f4       	brne	.+2      	; 0xe5a <crc_update+0x58>
     e58:	20 e0       	ldi	r18, 0x00	; 0
     e5a:	2d 83       	std	Y+5, r18	; 0x05
            if (c & i) {
     e5c:	8e 81       	ldd	r24, Y+6	; 0x06
     e5e:	28 2f       	mov	r18, r24
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	8b 81       	ldd	r24, Y+3	; 0x03
     e64:	9c 81       	ldd	r25, Y+4	; 0x04
     e66:	82 23       	and	r24, r18
     e68:	93 23       	and	r25, r19
     e6a:	00 97       	sbiw	r24, 0x00	; 0
     e6c:	31 f0       	breq	.+12     	; 0xe7a <crc_update+0x78>
                bit = !bit;
     e6e:	9d 81       	ldd	r25, Y+5	; 0x05
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	89 27       	eor	r24, r25
     e74:	88 2f       	mov	r24, r24
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	8d 83       	std	Y+5, r24	; 0x05
            }
            crc <<= 1;
     e7a:	8f 81       	ldd	r24, Y+7	; 0x07
     e7c:	88 0f       	add	r24, r24
     e7e:	8f 83       	std	Y+7, r24	; 0x07
            if (bit) {
     e80:	8d 81       	ldd	r24, Y+5	; 0x05
     e82:	88 23       	and	r24, r24
     e84:	21 f0       	breq	.+8      	; 0xe8e <crc_update+0x8c>
                crc ^= 0x07;
     e86:	9f 81       	ldd	r25, Y+7	; 0x07
     e88:	87 e0       	ldi	r24, 0x07	; 7
     e8a:	89 27       	eor	r24, r25
     e8c:	8f 83       	std	Y+7, r24	; 0x07
    bool bit;
    unsigned char c;

    while (data_len--) {
        c = *d++;
        for (i = 0x80; i > 0; i >>= 1) {
     e8e:	8b 81       	ldd	r24, Y+3	; 0x03
     e90:	9c 81       	ldd	r25, Y+4	; 0x04
     e92:	96 95       	lsr	r25
     e94:	87 95       	ror	r24
     e96:	9c 83       	std	Y+4, r25	; 0x04
     e98:	8b 83       	std	Y+3, r24	; 0x03
     e9a:	8b 81       	ldd	r24, Y+3	; 0x03
     e9c:	9c 81       	ldd	r25, Y+4	; 0x04
     e9e:	00 97       	sbiw	r24, 0x00	; 0
     ea0:	99 f6       	brne	.-90     	; 0xe48 <crc_update+0x46>
    const unsigned char *d = (const unsigned char *)data;
    unsigned int i;
    bool bit;
    unsigned char c;

    while (data_len--) {
     ea2:	21 e0       	ldi	r18, 0x01	; 1
     ea4:	8a 85       	ldd	r24, Y+10	; 0x0a
     ea6:	9b 85       	ldd	r25, Y+11	; 0x0b
     ea8:	00 97       	sbiw	r24, 0x00	; 0
     eaa:	09 f4       	brne	.+2      	; 0xeae <crc_update+0xac>
     eac:	20 e0       	ldi	r18, 0x00	; 0
     eae:	8a 85       	ldd	r24, Y+10	; 0x0a
     eb0:	9b 85       	ldd	r25, Y+11	; 0x0b
     eb2:	01 97       	sbiw	r24, 0x01	; 1
     eb4:	9b 87       	std	Y+11, r25	; 0x0b
     eb6:	8a 87       	std	Y+10, r24	; 0x0a
     eb8:	22 23       	and	r18, r18
     eba:	09 f0       	breq	.+2      	; 0xebe <crc_update+0xbc>
     ebc:	b6 cf       	rjmp	.-148    	; 0xe2a <crc_update+0x28>
                crc ^= 0x07;
            }
        }
        crc &= 0xff;
    }
    return crc & 0xff;
     ebe:	8f 81       	ldd	r24, Y+7	; 0x07
}
     ec0:	2b 96       	adiw	r28, 0x0b	; 11
     ec2:	0f b6       	in	r0, 0x3f	; 63
     ec4:	f8 94       	cli
     ec6:	de bf       	out	0x3e, r29	; 62
     ec8:	0f be       	out	0x3f, r0	; 63
     eca:	cd bf       	out	0x3d, r28	; 61
     ecc:	cf 91       	pop	r28
     ece:	df 91       	pop	r29
     ed0:	08 95       	ret

00000ed2 <main>:
#include "nrf24.h"

void initIO();

int main(void)
{
     ed2:	0f 93       	push	r16
     ed4:	1f 93       	push	r17
     ed6:	df 93       	push	r29
     ed8:	cf 93       	push	r28
     eda:	cd b7       	in	r28, 0x3d	; 61
     edc:	de b7       	in	r29, 0x3e	; 62
     ede:	2f 97       	sbiw	r28, 0x0f	; 15
     ee0:	0f b6       	in	r0, 0x3f	; 63
     ee2:	f8 94       	cli
     ee4:	de bf       	out	0x3e, r29	; 62
     ee6:	0f be       	out	0x3f, r0	; 63
     ee8:	cd bf       	out	0x3d, r28	; 61
	//sei();	// Interrupts on
    initIO();
     eea:	0e 94 32 08 	call	0x1064	; 0x1064 <initIO>
	nrf24_initRF_SAFE(MAIN_BOARD, RECEIVE);	// CONNECTION TO MAIN BOARD : GENERAL RF CHANNEL 112
     eee:	80 e0       	ldi	r24, 0x00	; 0
     ef0:	60 e0       	ldi	r22, 0x00	; 0
     ef2:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <nrf24_initRF_SAFE>
     ef6:	01 c0       	rjmp	.+2      	; 0xefa <main+0x28>
				bit_flip(PORTD, BIT(7)); _delay_ms(250); bit_flip(PORTD, BIT(7));
			}
		}
		
		if (nrf24_checkAvailability()==false) { nrf24_initRF_SAFE(MAIN_BOARD, RECEIVE); }
    }
     ef8:	00 00       	nop
    initIO();
	nrf24_initRF_SAFE(MAIN_BOARD, RECEIVE);	// CONNECTION TO MAIN BOARD : GENERAL RF CHANNEL 112
	
    while (1) 
    {
		if(nrf24_dataReady())
     efa:	0e 94 b4 0a 	call	0x1568	; 0x1568 <nrf24_dataReady>
     efe:	88 23       	and	r24, r24
     f00:	09 f4       	brne	.+2      	; 0xf04 <main+0x32>
     f02:	a3 c0       	rjmp	.+326    	; 0x104a <main+0x178>
		{
			nrf24_getData(command_buffer);
     f04:	80 91 54 01 	lds	r24, 0x0154
     f08:	90 91 55 01 	lds	r25, 0x0155
     f0c:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <nrf24_getData>
			CommandStatus status = DecomposeMessageFromBuffer();
     f10:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <DecomposeMessageFromBuffer>
     f14:	89 83       	std	Y+1, r24	; 0x01
			if (status==SUCCESFUL_DECOMPOSITION) { HandleAvailableCommand(); } else 
     f16:	89 81       	ldd	r24, Y+1	; 0x01
     f18:	88 23       	and	r24, r24
     f1a:	19 f4       	brne	.+6      	; 0xf22 <main+0x50>
     f1c:	0e 94 07 03 	call	0x60e	; 0x60e <HandleAvailableCommand>
     f20:	94 c0       	rjmp	.+296    	; 0x104a <main+0x178>
			{
				bit_flip(PORTD, BIT(7)); _delay_ms(250); bit_flip(PORTD, BIT(7));
     f22:	8b e2       	ldi	r24, 0x2B	; 43
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	2b e2       	ldi	r18, 0x2B	; 43
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	f9 01       	movw	r30, r18
     f2c:	30 81       	ld	r19, Z
     f2e:	20 e8       	ldi	r18, 0x80	; 128
     f30:	23 27       	eor	r18, r19
     f32:	fc 01       	movw	r30, r24
     f34:	20 83       	st	Z, r18
     f36:	80 e0       	ldi	r24, 0x00	; 0
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	aa e7       	ldi	r26, 0x7A	; 122
     f3c:	b3 e4       	ldi	r27, 0x43	; 67
     f3e:	8a 83       	std	Y+2, r24	; 0x02
     f40:	9b 83       	std	Y+3, r25	; 0x03
     f42:	ac 83       	std	Y+4, r26	; 0x04
     f44:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     f46:	6a 81       	ldd	r22, Y+2	; 0x02
     f48:	7b 81       	ldd	r23, Y+3	; 0x03
     f4a:	8c 81       	ldd	r24, Y+4	; 0x04
     f4c:	9d 81       	ldd	r25, Y+5	; 0x05
     f4e:	20 e0       	ldi	r18, 0x00	; 0
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	4a e7       	ldi	r20, 0x7A	; 122
     f54:	55 e4       	ldi	r21, 0x45	; 69
     f56:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <__mulsf3>
     f5a:	dc 01       	movw	r26, r24
     f5c:	cb 01       	movw	r24, r22
     f5e:	8e 83       	std	Y+6, r24	; 0x06
     f60:	9f 83       	std	Y+7, r25	; 0x07
     f62:	a8 87       	std	Y+8, r26	; 0x08
     f64:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     f66:	11 e0       	ldi	r17, 0x01	; 1
     f68:	6e 81       	ldd	r22, Y+6	; 0x06
     f6a:	7f 81       	ldd	r23, Y+7	; 0x07
     f6c:	88 85       	ldd	r24, Y+8	; 0x08
     f6e:	99 85       	ldd	r25, Y+9	; 0x09
     f70:	20 e0       	ldi	r18, 0x00	; 0
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	40 e8       	ldi	r20, 0x80	; 128
     f76:	5f e3       	ldi	r21, 0x3F	; 63
     f78:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <__cmpsf2>
     f7c:	88 23       	and	r24, r24
     f7e:	0c f0       	brlt	.+2      	; 0xf82 <main+0xb0>
     f80:	10 e0       	ldi	r17, 0x00	; 0
     f82:	11 23       	and	r17, r17
     f84:	29 f0       	breq	.+10     	; 0xf90 <main+0xbe>
		__ticks = 1;
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	9b 87       	std	Y+11, r25	; 0x0b
     f8c:	8a 87       	std	Y+10, r24	; 0x0a
     f8e:	46 c0       	rjmp	.+140    	; 0x101c <main+0x14a>
	else if (__tmp > 65535)
     f90:	11 e0       	ldi	r17, 0x01	; 1
     f92:	6e 81       	ldd	r22, Y+6	; 0x06
     f94:	7f 81       	ldd	r23, Y+7	; 0x07
     f96:	88 85       	ldd	r24, Y+8	; 0x08
     f98:	99 85       	ldd	r25, Y+9	; 0x09
     f9a:	20 e0       	ldi	r18, 0x00	; 0
     f9c:	3f ef       	ldi	r19, 0xFF	; 255
     f9e:	4f e7       	ldi	r20, 0x7F	; 127
     fa0:	57 e4       	ldi	r21, 0x47	; 71
     fa2:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <__gesf2>
     fa6:	18 16       	cp	r1, r24
     fa8:	0c f0       	brlt	.+2      	; 0xfac <main+0xda>
     faa:	10 e0       	ldi	r17, 0x00	; 0
     fac:	11 23       	and	r17, r17
     fae:	61 f1       	breq	.+88     	; 0x1008 <main+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fb0:	6a 81       	ldd	r22, Y+2	; 0x02
     fb2:	7b 81       	ldd	r23, Y+3	; 0x03
     fb4:	8c 81       	ldd	r24, Y+4	; 0x04
     fb6:	9d 81       	ldd	r25, Y+5	; 0x05
     fb8:	20 e0       	ldi	r18, 0x00	; 0
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	40 e2       	ldi	r20, 0x20	; 32
     fbe:	51 e4       	ldi	r21, 0x41	; 65
     fc0:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <__mulsf3>
     fc4:	dc 01       	movw	r26, r24
     fc6:	cb 01       	movw	r24, r22
     fc8:	bc 01       	movw	r22, r24
     fca:	cd 01       	movw	r24, r26
     fcc:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <__fixunssfsi>
     fd0:	dc 01       	movw	r26, r24
     fd2:	cb 01       	movw	r24, r22
     fd4:	9b 87       	std	Y+11, r25	; 0x0b
     fd6:	8a 87       	std	Y+10, r24	; 0x0a
     fd8:	12 c0       	rjmp	.+36     	; 0xffe <main+0x12c>
     fda:	80 e9       	ldi	r24, 0x90	; 144
     fdc:	91 e0       	ldi	r25, 0x01	; 1
     fde:	9d 87       	std	Y+13, r25	; 0x0d
     fe0:	8c 87       	std	Y+12, r24	; 0x0c
     fe2:	8c 85       	ldd	r24, Y+12	; 0x0c
     fe4:	9d 85       	ldd	r25, Y+13	; 0x0d
     fe6:	8c 01       	movw	r16, r24
     fe8:	c8 01       	movw	r24, r16
     fea:	01 97       	sbiw	r24, 0x01	; 1
     fec:	f1 f7       	brne	.-4      	; 0xfea <main+0x118>
     fee:	8c 01       	movw	r16, r24
     ff0:	1d 87       	std	Y+13, r17	; 0x0d
     ff2:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ff4:	8a 85       	ldd	r24, Y+10	; 0x0a
     ff6:	9b 85       	ldd	r25, Y+11	; 0x0b
     ff8:	01 97       	sbiw	r24, 0x01	; 1
     ffa:	9b 87       	std	Y+11, r25	; 0x0b
     ffc:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ffe:	8a 85       	ldd	r24, Y+10	; 0x0a
    1000:	9b 85       	ldd	r25, Y+11	; 0x0b
    1002:	00 97       	sbiw	r24, 0x00	; 0
    1004:	51 f7       	brne	.-44     	; 0xfda <main+0x108>
    1006:	17 c0       	rjmp	.+46     	; 0x1036 <main+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1008:	6e 81       	ldd	r22, Y+6	; 0x06
    100a:	7f 81       	ldd	r23, Y+7	; 0x07
    100c:	88 85       	ldd	r24, Y+8	; 0x08
    100e:	99 85       	ldd	r25, Y+9	; 0x09
    1010:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <__fixunssfsi>
    1014:	dc 01       	movw	r26, r24
    1016:	cb 01       	movw	r24, r22
    1018:	9b 87       	std	Y+11, r25	; 0x0b
    101a:	8a 87       	std	Y+10, r24	; 0x0a
    101c:	8a 85       	ldd	r24, Y+10	; 0x0a
    101e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1020:	9f 87       	std	Y+15, r25	; 0x0f
    1022:	8e 87       	std	Y+14, r24	; 0x0e
    1024:	8e 85       	ldd	r24, Y+14	; 0x0e
    1026:	9f 85       	ldd	r25, Y+15	; 0x0f
    1028:	8c 01       	movw	r16, r24
    102a:	f8 01       	movw	r30, r16
    102c:	31 97       	sbiw	r30, 0x01	; 1
    102e:	f1 f7       	brne	.-4      	; 0x102c <main+0x15a>
    1030:	8f 01       	movw	r16, r30
    1032:	1f 87       	std	Y+15, r17	; 0x0f
    1034:	0e 87       	std	Y+14, r16	; 0x0e
    1036:	8b e2       	ldi	r24, 0x2B	; 43
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	2b e2       	ldi	r18, 0x2B	; 43
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	f9 01       	movw	r30, r18
    1040:	30 81       	ld	r19, Z
    1042:	20 e8       	ldi	r18, 0x80	; 128
    1044:	23 27       	eor	r18, r19
    1046:	fc 01       	movw	r30, r24
    1048:	20 83       	st	Z, r18
			}
		}
		
		if (nrf24_checkAvailability()==false) { nrf24_initRF_SAFE(MAIN_BOARD, RECEIVE); }
    104a:	0e 94 3b 09 	call	0x1276	; 0x1276 <nrf24_checkAvailability>
    104e:	98 2f       	mov	r25, r24
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	89 27       	eor	r24, r25
    1054:	88 23       	and	r24, r24
    1056:	09 f4       	brne	.+2      	; 0x105a <main+0x188>
    1058:	4f cf       	rjmp	.-354    	; 0xef8 <main+0x26>
    105a:	80 e0       	ldi	r24, 0x00	; 0
    105c:	60 e0       	ldi	r22, 0x00	; 0
    105e:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <nrf24_initRF_SAFE>
    }
    1062:	4b cf       	rjmp	.-362    	; 0xefa <main+0x28>

00001064 <initIO>:
}


void initIO(){
    1064:	df 93       	push	r29
    1066:	cf 93       	push	r28
    1068:	cd b7       	in	r28, 0x3d	; 61
    106a:	de b7       	in	r29, 0x3e	; 62
			CSN	 : PC1						|	OUTPUT
			MISO : PD0 (MSPIM MISO ATMEGA)	|	INPUT
			MOSI : PD1 (MSPIM MOSI ATMEGA)	|	OUTPUT
			SCK	 : PD4 (MSPIM XCK)			|	OUTPUT
	*/ 
	DDRD = 0b11111110;
    106c:	8a e2       	ldi	r24, 0x2A	; 42
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	2e ef       	ldi	r18, 0xFE	; 254
    1072:	fc 01       	movw	r30, r24
    1074:	20 83       	st	Z, r18
	DDRB = 0b00101001;
    1076:	84 e2       	ldi	r24, 0x24	; 36
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	29 e2       	ldi	r18, 0x29	; 41
    107c:	fc 01       	movw	r30, r24
    107e:	20 83       	st	Z, r18
	DDRC = 0b11011111;
    1080:	87 e2       	ldi	r24, 0x27	; 39
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	2f ed       	ldi	r18, 0xDF	; 223
    1086:	fc 01       	movw	r30, r24
    1088:	20 83       	st	Z, r18
}
    108a:	cf 91       	pop	r28
    108c:	df 91       	pop	r29
    108e:	08 95       	ret

00001090 <nrf24_init>:
uint8_t GENERAL_RF_CHANNEL = 112;



void nrf24_init() 
{
    1090:	df 93       	push	r29
    1092:	cf 93       	push	r28
    1094:	cd b7       	in	r28, 0x3d	; 61
    1096:	de b7       	in	r29, 0x3e	; 62
    nrf24_setupPins();
    1098:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <nrf24_setupPins>
    nrf24_ce_digitalWrite(LOW);
    109c:	80 e0       	ldi	r24, 0x00	; 0
    109e:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <nrf24_ce_digitalWrite>
    nrf24_csn_digitalWrite(HIGH);    
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <nrf24_csn_digitalWrite>
}
    10a8:	cf 91       	pop	r28
    10aa:	df 91       	pop	r29
    10ac:	08 95       	ret

000010ae <nrf24_config>:

void nrf24_config(uint8_t channel, uint8_t pay_length)
{
    10ae:	df 93       	push	r29
    10b0:	cf 93       	push	r28
    10b2:	00 d0       	rcall	.+0      	; 0x10b4 <nrf24_config+0x6>
    10b4:	cd b7       	in	r28, 0x3d	; 61
    10b6:	de b7       	in	r29, 0x3e	; 62
    10b8:	89 83       	std	Y+1, r24	; 0x01
    10ba:	6a 83       	std	Y+2, r22	; 0x02
	/* Use static payload length ... */
	payload_len = pay_length;
    10bc:	8a 81       	ldd	r24, Y+2	; 0x02
    10be:	80 93 58 01 	sts	0x0158, r24
	selectedChannel = channel;
    10c2:	89 81       	ldd	r24, Y+1	; 0x01
    10c4:	80 93 59 01 	sts	0x0159, r24
	// Set RF channel
	nrf24_configRegister(RF_CH,channel);
    10c8:	85 e0       	ldi	r24, 0x05	; 5
    10ca:	69 81       	ldd	r22, Y+1	; 0x01
    10cc:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <nrf24_configRegister>
	// Set length of incoming payload
	nrf24_configRegister(RX_PW_P0, 0x00); // Auto-ACK pipe ...
    10d0:	81 e1       	ldi	r24, 0x11	; 17
    10d2:	60 e0       	ldi	r22, 0x00	; 0
    10d4:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <nrf24_configRegister>
	nrf24_configRegister(RX_PW_P1, payload_len); // Data payload pipe
    10d8:	90 91 58 01 	lds	r25, 0x0158
    10dc:	82 e1       	ldi	r24, 0x12	; 18
    10de:	69 2f       	mov	r22, r25
    10e0:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <nrf24_configRegister>
	nrf24_configRegister(RX_PW_P2, 0x00); // Pipe not used
    10e4:	83 e1       	ldi	r24, 0x13	; 19
    10e6:	60 e0       	ldi	r22, 0x00	; 0
    10e8:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <nrf24_configRegister>
	nrf24_configRegister(RX_PW_P3, 0x00); // Pipe not used
    10ec:	84 e1       	ldi	r24, 0x14	; 20
    10ee:	60 e0       	ldi	r22, 0x00	; 0
    10f0:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <nrf24_configRegister>
	nrf24_configRegister(RX_PW_P4, 0x00); // Pipe not used
    10f4:	85 e1       	ldi	r24, 0x15	; 21
    10f6:	60 e0       	ldi	r22, 0x00	; 0
    10f8:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <nrf24_configRegister>
	nrf24_configRegister(RX_PW_P5, 0x00); // Pipe not used
    10fc:	86 e1       	ldi	r24, 0x16	; 22
    10fe:	60 e0       	ldi	r22, 0x00	; 0
    1100:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <nrf24_configRegister>
	// 1 Mbps, TX gain: 0dbm
	nrf24_configRegister(RF_SETUP, (0<<RF_DR)|((0x03)<<RF_PWR));
    1104:	86 e0       	ldi	r24, 0x06	; 6
    1106:	66 e0       	ldi	r22, 0x06	; 6
    1108:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <nrf24_configRegister>
	// CRC enable, 1 byte CRC length
	nrf24_configRegister(CONFIG,nrf24_CONFIG);
    110c:	80 e0       	ldi	r24, 0x00	; 0
    110e:	68 e0       	ldi	r22, 0x08	; 8
    1110:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <nrf24_configRegister>
	// Auto Acknowledgment
	nrf24_configRegister(EN_AA,(1<<ENAA_P0)|(1<<ENAA_P1)|(0<<ENAA_P2)|(0<<ENAA_P3)|(0<<ENAA_P4)|(0<<ENAA_P5));
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	63 e0       	ldi	r22, 0x03	; 3
    1118:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <nrf24_configRegister>
	// Enable RX addresses
	nrf24_configRegister(EN_RXADDR,(1<<ERX_P0)|(1<<ERX_P1)|(0<<ERX_P2)|(0<<ERX_P3)|(0<<ERX_P4)|(0<<ERX_P5));
    111c:	82 e0       	ldi	r24, 0x02	; 2
    111e:	63 e0       	ldi	r22, 0x03	; 3
    1120:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <nrf24_configRegister>
	// Auto retransmit delay: 1000 us and Up to 15 retransmit trials
	nrf24_configRegister(SETUP_RETR,(0x04<<ARD)|(0x0F<<ARC));
    1124:	84 e0       	ldi	r24, 0x04	; 4
    1126:	6f e4       	ldi	r22, 0x4F	; 79
    1128:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <nrf24_configRegister>
	// Dynamic length configurations: No dynamic length
	nrf24_configRegister(DYNPD,(0<<DPL_P0)|(0<<DPL_P1)|(0<<DPL_P2)|(0<<DPL_P3)|(0<<DPL_P4)|(0<<DPL_P5));
    112c:	8c e1       	ldi	r24, 0x1C	; 28
    112e:	60 e0       	ldi	r22, 0x00	; 0
    1130:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <nrf24_configRegister>

}
    1134:	0f 90       	pop	r0
    1136:	0f 90       	pop	r0
    1138:	cf 91       	pop	r28
    113a:	df 91       	pop	r29
    113c:	08 95       	ret

0000113e <nrf24_checkConfig>:

bool nrf24_checkConfig(){
    113e:	df 93       	push	r29
    1140:	cf 93       	push	r28
    1142:	cd b7       	in	r28, 0x3d	; 61
    1144:	de b7       	in	r29, 0x3e	; 62
	// Check all registers
	if (nrf24_checkRegister(RF_CH, selectedChannel,1)==false) return false;
    1146:	90 91 59 01 	lds	r25, 0x0159
    114a:	85 e0       	ldi	r24, 0x05	; 5
    114c:	69 2f       	mov	r22, r25
    114e:	41 e0       	ldi	r20, 0x01	; 1
    1150:	0e 94 b7 0c 	call	0x196e	; 0x196e <nrf24_checkRegister>
    1154:	98 2f       	mov	r25, r24
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	89 27       	eor	r24, r25
    115a:	88 23       	and	r24, r24
    115c:	11 f0       	breq	.+4      	; 0x1162 <nrf24_checkConfig+0x24>
    115e:	80 e0       	ldi	r24, 0x00	; 0
    1160:	87 c0       	rjmp	.+270    	; 0x1270 <nrf24_checkConfig+0x132>
	if (nrf24_checkRegister(RX_PW_P0, 0x00,1)==false) return false;
    1162:	81 e1       	ldi	r24, 0x11	; 17
    1164:	60 e0       	ldi	r22, 0x00	; 0
    1166:	41 e0       	ldi	r20, 0x01	; 1
    1168:	0e 94 b7 0c 	call	0x196e	; 0x196e <nrf24_checkRegister>
    116c:	98 2f       	mov	r25, r24
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	89 27       	eor	r24, r25
    1172:	88 23       	and	r24, r24
    1174:	11 f0       	breq	.+4      	; 0x117a <nrf24_checkConfig+0x3c>
    1176:	80 e0       	ldi	r24, 0x00	; 0
    1178:	7b c0       	rjmp	.+246    	; 0x1270 <nrf24_checkConfig+0x132>
	if (nrf24_checkRegister(RX_PW_P1, payload_len,1)==false) return false;
    117a:	90 91 58 01 	lds	r25, 0x0158
    117e:	82 e1       	ldi	r24, 0x12	; 18
    1180:	69 2f       	mov	r22, r25
    1182:	41 e0       	ldi	r20, 0x01	; 1
    1184:	0e 94 b7 0c 	call	0x196e	; 0x196e <nrf24_checkRegister>
    1188:	98 2f       	mov	r25, r24
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	89 27       	eor	r24, r25
    118e:	88 23       	and	r24, r24
    1190:	11 f0       	breq	.+4      	; 0x1196 <nrf24_checkConfig+0x58>
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	6d c0       	rjmp	.+218    	; 0x1270 <nrf24_checkConfig+0x132>
	if (nrf24_checkRegister(RX_PW_P2, 0x00,1)==false) return false;
    1196:	83 e1       	ldi	r24, 0x13	; 19
    1198:	60 e0       	ldi	r22, 0x00	; 0
    119a:	41 e0       	ldi	r20, 0x01	; 1
    119c:	0e 94 b7 0c 	call	0x196e	; 0x196e <nrf24_checkRegister>
    11a0:	98 2f       	mov	r25, r24
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	89 27       	eor	r24, r25
    11a6:	88 23       	and	r24, r24
    11a8:	11 f0       	breq	.+4      	; 0x11ae <nrf24_checkConfig+0x70>
    11aa:	80 e0       	ldi	r24, 0x00	; 0
    11ac:	61 c0       	rjmp	.+194    	; 0x1270 <nrf24_checkConfig+0x132>
	if (nrf24_checkRegister(RX_PW_P3, 0x00,1)==false) return false;
    11ae:	84 e1       	ldi	r24, 0x14	; 20
    11b0:	60 e0       	ldi	r22, 0x00	; 0
    11b2:	41 e0       	ldi	r20, 0x01	; 1
    11b4:	0e 94 b7 0c 	call	0x196e	; 0x196e <nrf24_checkRegister>
    11b8:	98 2f       	mov	r25, r24
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	89 27       	eor	r24, r25
    11be:	88 23       	and	r24, r24
    11c0:	11 f0       	breq	.+4      	; 0x11c6 <nrf24_checkConfig+0x88>
    11c2:	80 e0       	ldi	r24, 0x00	; 0
    11c4:	55 c0       	rjmp	.+170    	; 0x1270 <nrf24_checkConfig+0x132>
	if (nrf24_checkRegister(RX_PW_P4, 0x00,1)==false) return false;
    11c6:	85 e1       	ldi	r24, 0x15	; 21
    11c8:	60 e0       	ldi	r22, 0x00	; 0
    11ca:	41 e0       	ldi	r20, 0x01	; 1
    11cc:	0e 94 b7 0c 	call	0x196e	; 0x196e <nrf24_checkRegister>
    11d0:	98 2f       	mov	r25, r24
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	89 27       	eor	r24, r25
    11d6:	88 23       	and	r24, r24
    11d8:	11 f0       	breq	.+4      	; 0x11de <nrf24_checkConfig+0xa0>
    11da:	80 e0       	ldi	r24, 0x00	; 0
    11dc:	49 c0       	rjmp	.+146    	; 0x1270 <nrf24_checkConfig+0x132>
	if (nrf24_checkRegister(RX_PW_P5, 0x00,1)==false) return false;
    11de:	86 e1       	ldi	r24, 0x16	; 22
    11e0:	60 e0       	ldi	r22, 0x00	; 0
    11e2:	41 e0       	ldi	r20, 0x01	; 1
    11e4:	0e 94 b7 0c 	call	0x196e	; 0x196e <nrf24_checkRegister>
    11e8:	98 2f       	mov	r25, r24
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	89 27       	eor	r24, r25
    11ee:	88 23       	and	r24, r24
    11f0:	11 f0       	breq	.+4      	; 0x11f6 <nrf24_checkConfig+0xb8>
    11f2:	80 e0       	ldi	r24, 0x00	; 0
    11f4:	3d c0       	rjmp	.+122    	; 0x1270 <nrf24_checkConfig+0x132>
	if (nrf24_checkRegister(RF_SETUP, (0<<RF_DR)|((0x03)<<RF_PWR),1)==false) return false;
    11f6:	86 e0       	ldi	r24, 0x06	; 6
    11f8:	66 e0       	ldi	r22, 0x06	; 6
    11fa:	41 e0       	ldi	r20, 0x01	; 1
    11fc:	0e 94 b7 0c 	call	0x196e	; 0x196e <nrf24_checkRegister>
    1200:	98 2f       	mov	r25, r24
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	89 27       	eor	r24, r25
    1206:	88 23       	and	r24, r24
    1208:	11 f0       	breq	.+4      	; 0x120e <nrf24_checkConfig+0xd0>
    120a:	80 e0       	ldi	r24, 0x00	; 0
    120c:	31 c0       	rjmp	.+98     	; 0x1270 <nrf24_checkConfig+0x132>
	if (nrf24_checkRegister(CONFIG,nrf24_CONFIG,1)==false) return false;
    120e:	80 e0       	ldi	r24, 0x00	; 0
    1210:	68 e0       	ldi	r22, 0x08	; 8
    1212:	41 e0       	ldi	r20, 0x01	; 1
    1214:	0e 94 b7 0c 	call	0x196e	; 0x196e <nrf24_checkRegister>
    1218:	98 2f       	mov	r25, r24
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	89 27       	eor	r24, r25
    121e:	88 23       	and	r24, r24
    1220:	11 f0       	breq	.+4      	; 0x1226 <nrf24_checkConfig+0xe8>
    1222:	80 e0       	ldi	r24, 0x00	; 0
    1224:	25 c0       	rjmp	.+74     	; 0x1270 <nrf24_checkConfig+0x132>
	if (nrf24_checkRegister(EN_AA,(1<<ENAA_P0)|(1<<ENAA_P1)|(0<<ENAA_P2)|(0<<ENAA_P3)|(0<<ENAA_P4)|(0<<ENAA_P5),1)==false) return false;
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	63 e0       	ldi	r22, 0x03	; 3
    122a:	41 e0       	ldi	r20, 0x01	; 1
    122c:	0e 94 b7 0c 	call	0x196e	; 0x196e <nrf24_checkRegister>
    1230:	98 2f       	mov	r25, r24
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	89 27       	eor	r24, r25
    1236:	88 23       	and	r24, r24
    1238:	11 f0       	breq	.+4      	; 0x123e <nrf24_checkConfig+0x100>
    123a:	80 e0       	ldi	r24, 0x00	; 0
    123c:	19 c0       	rjmp	.+50     	; 0x1270 <nrf24_checkConfig+0x132>
	if (nrf24_checkRegister(SETUP_RETR,(0x04<<ARD)|(0x0F<<ARC),1)==false) return false;
    123e:	84 e0       	ldi	r24, 0x04	; 4
    1240:	6f e4       	ldi	r22, 0x4F	; 79
    1242:	41 e0       	ldi	r20, 0x01	; 1
    1244:	0e 94 b7 0c 	call	0x196e	; 0x196e <nrf24_checkRegister>
    1248:	98 2f       	mov	r25, r24
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	89 27       	eor	r24, r25
    124e:	88 23       	and	r24, r24
    1250:	11 f0       	breq	.+4      	; 0x1256 <nrf24_checkConfig+0x118>
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	0d c0       	rjmp	.+26     	; 0x1270 <nrf24_checkConfig+0x132>
	if (nrf24_checkRegister(DYNPD,(0<<DPL_P0)|(0<<DPL_P1)|(0<<DPL_P2)|(0<<DPL_P3)|(0<<DPL_P4)|(0<<DPL_P5),1)==false) return false;
    1256:	8c e1       	ldi	r24, 0x1C	; 28
    1258:	60 e0       	ldi	r22, 0x00	; 0
    125a:	41 e0       	ldi	r20, 0x01	; 1
    125c:	0e 94 b7 0c 	call	0x196e	; 0x196e <nrf24_checkRegister>
    1260:	98 2f       	mov	r25, r24
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	89 27       	eor	r24, r25
    1266:	88 23       	and	r24, r24
    1268:	11 f0       	breq	.+4      	; 0x126e <nrf24_checkConfig+0x130>
    126a:	80 e0       	ldi	r24, 0x00	; 0
    126c:	01 c0       	rjmp	.+2      	; 0x1270 <nrf24_checkConfig+0x132>
	
	return true;
    126e:	81 e0       	ldi	r24, 0x01	; 1
}
    1270:	cf 91       	pop	r28
    1272:	df 91       	pop	r29
    1274:	08 95       	ret

00001276 <nrf24_checkAvailability>:

bool nrf24_checkAvailability(){
    1276:	df 93       	push	r29
    1278:	cf 93       	push	r28
    127a:	cd b7       	in	r28, 0x3d	; 61
    127c:	de b7       	in	r29, 0x3e	; 62
	if (nrf24_checkRegister(RF_CH, selectedChannel,1)==true) { return true; } else { return false;}
    127e:	90 91 59 01 	lds	r25, 0x0159
    1282:	85 e0       	ldi	r24, 0x05	; 5
    1284:	69 2f       	mov	r22, r25
    1286:	41 e0       	ldi	r20, 0x01	; 1
    1288:	0e 94 b7 0c 	call	0x196e	; 0x196e <nrf24_checkRegister>
    128c:	88 23       	and	r24, r24
    128e:	11 f0       	breq	.+4      	; 0x1294 <nrf24_checkAvailability+0x1e>
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	01 c0       	rjmp	.+2      	; 0x1296 <nrf24_checkAvailability+0x20>
    1294:	80 e0       	ldi	r24, 0x00	; 0
}
    1296:	cf 91       	pop	r28
    1298:	df 91       	pop	r29
    129a:	08 95       	ret

0000129c <faultyRF_Alarm>:




void faultyRF_Alarm(){
    129c:	0f 93       	push	r16
    129e:	1f 93       	push	r17
    12a0:	df 93       	push	r29
    12a2:	cf 93       	push	r28
    12a4:	cd b7       	in	r28, 0x3d	; 61
    12a6:	de b7       	in	r29, 0x3e	; 62
    12a8:	6d 97       	sbiw	r28, 0x1d	; 29
    12aa:	0f b6       	in	r0, 0x3f	; 63
    12ac:	f8 94       	cli
    12ae:	de bf       	out	0x3e, r29	; 62
    12b0:	0f be       	out	0x3f, r0	; 63
    12b2:	cd bf       	out	0x3d, r28	; 61
	CLEAR_FAULTY_RF_LED;
    12b4:	8b e2       	ldi	r24, 0x2B	; 43
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	2b e2       	ldi	r18, 0x2B	; 43
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	f9 01       	movw	r30, r18
    12be:	20 81       	ld	r18, Z
    12c0:	2f 77       	andi	r18, 0x7F	; 127
    12c2:	fc 01       	movw	r30, r24
    12c4:	20 83       	st	Z, r18
	for (uint8_t x = 0; x < 6; x++)
    12c6:	19 82       	std	Y+1, r1	; 0x01
    12c8:	8d c0       	rjmp	.+282    	; 0x13e4 <faultyRF_Alarm+0x148>
	{
		FLIP_FAULTY_RF_LED;
    12ca:	8b e2       	ldi	r24, 0x2B	; 43
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	2b e2       	ldi	r18, 0x2B	; 43
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	f9 01       	movw	r30, r18
    12d4:	30 81       	ld	r19, Z
    12d6:	20 e8       	ldi	r18, 0x80	; 128
    12d8:	23 27       	eor	r18, r19
    12da:	fc 01       	movw	r30, r24
    12dc:	20 83       	st	Z, r18
    12de:	80 e0       	ldi	r24, 0x00	; 0
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	aa ef       	ldi	r26, 0xFA	; 250
    12e4:	b2 e4       	ldi	r27, 0x42	; 66
    12e6:	8a 83       	std	Y+2, r24	; 0x02
    12e8:	9b 83       	std	Y+3, r25	; 0x03
    12ea:	ac 83       	std	Y+4, r26	; 0x04
    12ec:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    12ee:	6a 81       	ldd	r22, Y+2	; 0x02
    12f0:	7b 81       	ldd	r23, Y+3	; 0x03
    12f2:	8c 81       	ldd	r24, Y+4	; 0x04
    12f4:	9d 81       	ldd	r25, Y+5	; 0x05
    12f6:	20 e0       	ldi	r18, 0x00	; 0
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	4a e7       	ldi	r20, 0x7A	; 122
    12fc:	55 e4       	ldi	r21, 0x45	; 69
    12fe:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <__mulsf3>
    1302:	dc 01       	movw	r26, r24
    1304:	cb 01       	movw	r24, r22
    1306:	8e 83       	std	Y+6, r24	; 0x06
    1308:	9f 83       	std	Y+7, r25	; 0x07
    130a:	a8 87       	std	Y+8, r26	; 0x08
    130c:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
    130e:	11 e0       	ldi	r17, 0x01	; 1
    1310:	6e 81       	ldd	r22, Y+6	; 0x06
    1312:	7f 81       	ldd	r23, Y+7	; 0x07
    1314:	88 85       	ldd	r24, Y+8	; 0x08
    1316:	99 85       	ldd	r25, Y+9	; 0x09
    1318:	20 e0       	ldi	r18, 0x00	; 0
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	40 e8       	ldi	r20, 0x80	; 128
    131e:	5f e3       	ldi	r21, 0x3F	; 63
    1320:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <__cmpsf2>
    1324:	88 23       	and	r24, r24
    1326:	0c f0       	brlt	.+2      	; 0x132a <faultyRF_Alarm+0x8e>
    1328:	10 e0       	ldi	r17, 0x00	; 0
    132a:	11 23       	and	r17, r17
    132c:	29 f0       	breq	.+10     	; 0x1338 <faultyRF_Alarm+0x9c>
		__ticks = 1;
    132e:	81 e0       	ldi	r24, 0x01	; 1
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	9b 87       	std	Y+11, r25	; 0x0b
    1334:	8a 87       	std	Y+10, r24	; 0x0a
    1336:	46 c0       	rjmp	.+140    	; 0x13c4 <faultyRF_Alarm+0x128>
	else if (__tmp > 65535)
    1338:	11 e0       	ldi	r17, 0x01	; 1
    133a:	6e 81       	ldd	r22, Y+6	; 0x06
    133c:	7f 81       	ldd	r23, Y+7	; 0x07
    133e:	88 85       	ldd	r24, Y+8	; 0x08
    1340:	99 85       	ldd	r25, Y+9	; 0x09
    1342:	20 e0       	ldi	r18, 0x00	; 0
    1344:	3f ef       	ldi	r19, 0xFF	; 255
    1346:	4f e7       	ldi	r20, 0x7F	; 127
    1348:	57 e4       	ldi	r21, 0x47	; 71
    134a:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <__gesf2>
    134e:	18 16       	cp	r1, r24
    1350:	0c f0       	brlt	.+2      	; 0x1354 <faultyRF_Alarm+0xb8>
    1352:	10 e0       	ldi	r17, 0x00	; 0
    1354:	11 23       	and	r17, r17
    1356:	61 f1       	breq	.+88     	; 0x13b0 <faultyRF_Alarm+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1358:	6a 81       	ldd	r22, Y+2	; 0x02
    135a:	7b 81       	ldd	r23, Y+3	; 0x03
    135c:	8c 81       	ldd	r24, Y+4	; 0x04
    135e:	9d 81       	ldd	r25, Y+5	; 0x05
    1360:	20 e0       	ldi	r18, 0x00	; 0
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	40 e2       	ldi	r20, 0x20	; 32
    1366:	51 e4       	ldi	r21, 0x41	; 65
    1368:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <__mulsf3>
    136c:	dc 01       	movw	r26, r24
    136e:	cb 01       	movw	r24, r22
    1370:	bc 01       	movw	r22, r24
    1372:	cd 01       	movw	r24, r26
    1374:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <__fixunssfsi>
    1378:	dc 01       	movw	r26, r24
    137a:	cb 01       	movw	r24, r22
    137c:	9b 87       	std	Y+11, r25	; 0x0b
    137e:	8a 87       	std	Y+10, r24	; 0x0a
    1380:	12 c0       	rjmp	.+36     	; 0x13a6 <faultyRF_Alarm+0x10a>
    1382:	80 e9       	ldi	r24, 0x90	; 144
    1384:	91 e0       	ldi	r25, 0x01	; 1
    1386:	9d 87       	std	Y+13, r25	; 0x0d
    1388:	8c 87       	std	Y+12, r24	; 0x0c
    138a:	8c 85       	ldd	r24, Y+12	; 0x0c
    138c:	9d 85       	ldd	r25, Y+13	; 0x0d
    138e:	8c 01       	movw	r16, r24
    1390:	c8 01       	movw	r24, r16
    1392:	01 97       	sbiw	r24, 0x01	; 1
    1394:	f1 f7       	brne	.-4      	; 0x1392 <faultyRF_Alarm+0xf6>
    1396:	8c 01       	movw	r16, r24
    1398:	1d 87       	std	Y+13, r17	; 0x0d
    139a:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    139c:	8a 85       	ldd	r24, Y+10	; 0x0a
    139e:	9b 85       	ldd	r25, Y+11	; 0x0b
    13a0:	01 97       	sbiw	r24, 0x01	; 1
    13a2:	9b 87       	std	Y+11, r25	; 0x0b
    13a4:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13a6:	8a 85       	ldd	r24, Y+10	; 0x0a
    13a8:	9b 85       	ldd	r25, Y+11	; 0x0b
    13aa:	00 97       	sbiw	r24, 0x00	; 0
    13ac:	51 f7       	brne	.-44     	; 0x1382 <faultyRF_Alarm+0xe6>
    13ae:	17 c0       	rjmp	.+46     	; 0x13de <faultyRF_Alarm+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13b0:	6e 81       	ldd	r22, Y+6	; 0x06
    13b2:	7f 81       	ldd	r23, Y+7	; 0x07
    13b4:	88 85       	ldd	r24, Y+8	; 0x08
    13b6:	99 85       	ldd	r25, Y+9	; 0x09
    13b8:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <__fixunssfsi>
    13bc:	dc 01       	movw	r26, r24
    13be:	cb 01       	movw	r24, r22
    13c0:	9b 87       	std	Y+11, r25	; 0x0b
    13c2:	8a 87       	std	Y+10, r24	; 0x0a
    13c4:	8a 85       	ldd	r24, Y+10	; 0x0a
    13c6:	9b 85       	ldd	r25, Y+11	; 0x0b
    13c8:	9f 87       	std	Y+15, r25	; 0x0f
    13ca:	8e 87       	std	Y+14, r24	; 0x0e
    13cc:	8e 85       	ldd	r24, Y+14	; 0x0e
    13ce:	9f 85       	ldd	r25, Y+15	; 0x0f
    13d0:	8c 01       	movw	r16, r24
    13d2:	f8 01       	movw	r30, r16
    13d4:	31 97       	sbiw	r30, 0x01	; 1
    13d6:	f1 f7       	brne	.-4      	; 0x13d4 <faultyRF_Alarm+0x138>
    13d8:	8f 01       	movw	r16, r30
    13da:	1f 87       	std	Y+15, r17	; 0x0f
    13dc:	0e 87       	std	Y+14, r16	; 0x0e



void faultyRF_Alarm(){
	CLEAR_FAULTY_RF_LED;
	for (uint8_t x = 0; x < 6; x++)
    13de:	89 81       	ldd	r24, Y+1	; 0x01
    13e0:	8f 5f       	subi	r24, 0xFF	; 255
    13e2:	89 83       	std	Y+1, r24	; 0x01
    13e4:	89 81       	ldd	r24, Y+1	; 0x01
    13e6:	86 30       	cpi	r24, 0x06	; 6
    13e8:	08 f4       	brcc	.+2      	; 0x13ec <faultyRF_Alarm+0x150>
    13ea:	6f cf       	rjmp	.-290    	; 0x12ca <faultyRF_Alarm+0x2e>
    13ec:	80 e0       	ldi	r24, 0x00	; 0
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	aa e7       	ldi	r26, 0x7A	; 122
    13f2:	b3 e4       	ldi	r27, 0x43	; 67
    13f4:	88 8b       	std	Y+16, r24	; 0x10
    13f6:	99 8b       	std	Y+17, r25	; 0x11
    13f8:	aa 8b       	std	Y+18, r26	; 0x12
    13fa:	bb 8b       	std	Y+19, r27	; 0x13
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    13fc:	68 89       	ldd	r22, Y+16	; 0x10
    13fe:	79 89       	ldd	r23, Y+17	; 0x11
    1400:	8a 89       	ldd	r24, Y+18	; 0x12
    1402:	9b 89       	ldd	r25, Y+19	; 0x13
    1404:	20 e0       	ldi	r18, 0x00	; 0
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	4a e7       	ldi	r20, 0x7A	; 122
    140a:	55 e4       	ldi	r21, 0x45	; 69
    140c:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <__mulsf3>
    1410:	dc 01       	movw	r26, r24
    1412:	cb 01       	movw	r24, r22
    1414:	8c 8b       	std	Y+20, r24	; 0x14
    1416:	9d 8b       	std	Y+21, r25	; 0x15
    1418:	ae 8b       	std	Y+22, r26	; 0x16
    141a:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
    141c:	11 e0       	ldi	r17, 0x01	; 1
    141e:	6c 89       	ldd	r22, Y+20	; 0x14
    1420:	7d 89       	ldd	r23, Y+21	; 0x15
    1422:	8e 89       	ldd	r24, Y+22	; 0x16
    1424:	9f 89       	ldd	r25, Y+23	; 0x17
    1426:	20 e0       	ldi	r18, 0x00	; 0
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	40 e8       	ldi	r20, 0x80	; 128
    142c:	5f e3       	ldi	r21, 0x3F	; 63
    142e:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <__cmpsf2>
    1432:	88 23       	and	r24, r24
    1434:	0c f0       	brlt	.+2      	; 0x1438 <faultyRF_Alarm+0x19c>
    1436:	10 e0       	ldi	r17, 0x00	; 0
    1438:	11 23       	and	r17, r17
    143a:	29 f0       	breq	.+10     	; 0x1446 <faultyRF_Alarm+0x1aa>
		__ticks = 1;
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	99 8f       	std	Y+25, r25	; 0x19
    1442:	88 8f       	std	Y+24, r24	; 0x18
    1444:	46 c0       	rjmp	.+140    	; 0x14d2 <faultyRF_Alarm+0x236>
	else if (__tmp > 65535)
    1446:	11 e0       	ldi	r17, 0x01	; 1
    1448:	6c 89       	ldd	r22, Y+20	; 0x14
    144a:	7d 89       	ldd	r23, Y+21	; 0x15
    144c:	8e 89       	ldd	r24, Y+22	; 0x16
    144e:	9f 89       	ldd	r25, Y+23	; 0x17
    1450:	20 e0       	ldi	r18, 0x00	; 0
    1452:	3f ef       	ldi	r19, 0xFF	; 255
    1454:	4f e7       	ldi	r20, 0x7F	; 127
    1456:	57 e4       	ldi	r21, 0x47	; 71
    1458:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <__gesf2>
    145c:	18 16       	cp	r1, r24
    145e:	0c f0       	brlt	.+2      	; 0x1462 <faultyRF_Alarm+0x1c6>
    1460:	10 e0       	ldi	r17, 0x00	; 0
    1462:	11 23       	and	r17, r17
    1464:	61 f1       	breq	.+88     	; 0x14be <faultyRF_Alarm+0x222>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1466:	68 89       	ldd	r22, Y+16	; 0x10
    1468:	79 89       	ldd	r23, Y+17	; 0x11
    146a:	8a 89       	ldd	r24, Y+18	; 0x12
    146c:	9b 89       	ldd	r25, Y+19	; 0x13
    146e:	20 e0       	ldi	r18, 0x00	; 0
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	40 e2       	ldi	r20, 0x20	; 32
    1474:	51 e4       	ldi	r21, 0x41	; 65
    1476:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <__mulsf3>
    147a:	dc 01       	movw	r26, r24
    147c:	cb 01       	movw	r24, r22
    147e:	bc 01       	movw	r22, r24
    1480:	cd 01       	movw	r24, r26
    1482:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <__fixunssfsi>
    1486:	dc 01       	movw	r26, r24
    1488:	cb 01       	movw	r24, r22
    148a:	99 8f       	std	Y+25, r25	; 0x19
    148c:	88 8f       	std	Y+24, r24	; 0x18
    148e:	12 c0       	rjmp	.+36     	; 0x14b4 <faultyRF_Alarm+0x218>
    1490:	80 e9       	ldi	r24, 0x90	; 144
    1492:	91 e0       	ldi	r25, 0x01	; 1
    1494:	9b 8f       	std	Y+27, r25	; 0x1b
    1496:	8a 8f       	std	Y+26, r24	; 0x1a
    1498:	8a 8d       	ldd	r24, Y+26	; 0x1a
    149a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    149c:	8c 01       	movw	r16, r24
    149e:	c8 01       	movw	r24, r16
    14a0:	01 97       	sbiw	r24, 0x01	; 1
    14a2:	f1 f7       	brne	.-4      	; 0x14a0 <faultyRF_Alarm+0x204>
    14a4:	8c 01       	movw	r16, r24
    14a6:	1b 8f       	std	Y+27, r17	; 0x1b
    14a8:	0a 8f       	std	Y+26, r16	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14aa:	88 8d       	ldd	r24, Y+24	; 0x18
    14ac:	99 8d       	ldd	r25, Y+25	; 0x19
    14ae:	01 97       	sbiw	r24, 0x01	; 1
    14b0:	99 8f       	std	Y+25, r25	; 0x19
    14b2:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14b4:	88 8d       	ldd	r24, Y+24	; 0x18
    14b6:	99 8d       	ldd	r25, Y+25	; 0x19
    14b8:	00 97       	sbiw	r24, 0x00	; 0
    14ba:	51 f7       	brne	.-44     	; 0x1490 <faultyRF_Alarm+0x1f4>
    14bc:	17 c0       	rjmp	.+46     	; 0x14ec <faultyRF_Alarm+0x250>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14be:	6c 89       	ldd	r22, Y+20	; 0x14
    14c0:	7d 89       	ldd	r23, Y+21	; 0x15
    14c2:	8e 89       	ldd	r24, Y+22	; 0x16
    14c4:	9f 89       	ldd	r25, Y+23	; 0x17
    14c6:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <__fixunssfsi>
    14ca:	dc 01       	movw	r26, r24
    14cc:	cb 01       	movw	r24, r22
    14ce:	99 8f       	std	Y+25, r25	; 0x19
    14d0:	88 8f       	std	Y+24, r24	; 0x18
    14d2:	88 8d       	ldd	r24, Y+24	; 0x18
    14d4:	99 8d       	ldd	r25, Y+25	; 0x19
    14d6:	9d 8f       	std	Y+29, r25	; 0x1d
    14d8:	8c 8f       	std	Y+28, r24	; 0x1c
    14da:	8c 8d       	ldd	r24, Y+28	; 0x1c
    14dc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    14de:	8c 01       	movw	r16, r24
    14e0:	f8 01       	movw	r30, r16
    14e2:	31 97       	sbiw	r30, 0x01	; 1
    14e4:	f1 f7       	brne	.-4      	; 0x14e2 <faultyRF_Alarm+0x246>
    14e6:	8f 01       	movw	r16, r30
    14e8:	1d 8f       	std	Y+29, r17	; 0x1d
    14ea:	0c 8f       	std	Y+28, r16	; 0x1c
	{
		FLIP_FAULTY_RF_LED;
		_delay_ms(125);
	}
	_delay_ms(250);
}
    14ec:	6d 96       	adiw	r28, 0x1d	; 29
    14ee:	0f b6       	in	r0, 0x3f	; 63
    14f0:	f8 94       	cli
    14f2:	de bf       	out	0x3e, r29	; 62
    14f4:	0f be       	out	0x3f, r0	; 63
    14f6:	cd bf       	out	0x3d, r28	; 61
    14f8:	cf 91       	pop	r28
    14fa:	df 91       	pop	r29
    14fc:	1f 91       	pop	r17
    14fe:	0f 91       	pop	r16
    1500:	08 95       	ret

00001502 <nrf24_rx_address>:



/* Set the RX address */
void nrf24_rx_address(uint8_t * adr) 
{
    1502:	df 93       	push	r29
    1504:	cf 93       	push	r28
    1506:	00 d0       	rcall	.+0      	; 0x1508 <nrf24_rx_address+0x6>
    1508:	cd b7       	in	r28, 0x3d	; 61
    150a:	de b7       	in	r29, 0x3e	; 62
    150c:	9a 83       	std	Y+2, r25	; 0x02
    150e:	89 83       	std	Y+1, r24	; 0x01
    nrf24_ce_digitalWrite(LOW);
    1510:	80 e0       	ldi	r24, 0x00	; 0
    1512:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <nrf24_ce_digitalWrite>
    nrf24_writeRegister(RX_ADDR_P1,adr,nrf24_ADDR_LEN);
    1516:	29 81       	ldd	r18, Y+1	; 0x01
    1518:	3a 81       	ldd	r19, Y+2	; 0x02
    151a:	8b e0       	ldi	r24, 0x0B	; 11
    151c:	b9 01       	movw	r22, r18
    151e:	45 e0       	ldi	r20, 0x05	; 5
    1520:	0e 94 96 0c 	call	0x192c	; 0x192c <nrf24_writeRegister>
    nrf24_ce_digitalWrite(HIGH);
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <nrf24_ce_digitalWrite>
}
    152a:	0f 90       	pop	r0
    152c:	0f 90       	pop	r0
    152e:	cf 91       	pop	r28
    1530:	df 91       	pop	r29
    1532:	08 95       	ret

00001534 <nrf24_tx_address>:
    return payload_len;
}

/* Set the TX address */
void nrf24_tx_address(uint8_t* adr)
{
    1534:	df 93       	push	r29
    1536:	cf 93       	push	r28
    1538:	00 d0       	rcall	.+0      	; 0x153a <nrf24_tx_address+0x6>
    153a:	cd b7       	in	r28, 0x3d	; 61
    153c:	de b7       	in	r29, 0x3e	; 62
    153e:	9a 83       	std	Y+2, r25	; 0x02
    1540:	89 83       	std	Y+1, r24	; 0x01
    /* RX_ADDR_P0 must be set to the sending addr for auto ack to work. */
    nrf24_writeRegister(RX_ADDR_P0,adr,nrf24_ADDR_LEN);
    1542:	29 81       	ldd	r18, Y+1	; 0x01
    1544:	3a 81       	ldd	r19, Y+2	; 0x02
    1546:	8a e0       	ldi	r24, 0x0A	; 10
    1548:	b9 01       	movw	r22, r18
    154a:	45 e0       	ldi	r20, 0x05	; 5
    154c:	0e 94 96 0c 	call	0x192c	; 0x192c <nrf24_writeRegister>
    nrf24_writeRegister(TX_ADDR,adr,nrf24_ADDR_LEN);
    1550:	29 81       	ldd	r18, Y+1	; 0x01
    1552:	3a 81       	ldd	r19, Y+2	; 0x02
    1554:	80 e1       	ldi	r24, 0x10	; 16
    1556:	b9 01       	movw	r22, r18
    1558:	45 e0       	ldi	r20, 0x05	; 5
    155a:	0e 94 96 0c 	call	0x192c	; 0x192c <nrf24_writeRegister>
}
    155e:	0f 90       	pop	r0
    1560:	0f 90       	pop	r0
    1562:	cf 91       	pop	r28
    1564:	df 91       	pop	r29
    1566:	08 95       	ret

00001568 <nrf24_dataReady>:

/* Checks if data is available for reading */
/* Returns 1 if data is ready ... */
uint8_t nrf24_dataReady() 
{
    1568:	df 93       	push	r29
    156a:	cf 93       	push	r28
    156c:	0f 92       	push	r0
    156e:	cd b7       	in	r28, 0x3d	; 61
    1570:	de b7       	in	r29, 0x3e	; 62
    // See note in getData() function - just checking RX_DR isn't good enough
    uint8_t status = nrf24_getStatus();
    1572:	0e 94 48 0b 	call	0x1690	; 0x1690 <nrf24_getStatus>
    1576:	89 83       	std	Y+1, r24	; 0x01

    // We can short circuit on RX_DR, but if it's not set, we still need
    // to check the FIFO for any pending packets
    if ( status & (1 << RX_DR) ) 
    1578:	89 81       	ldd	r24, Y+1	; 0x01
    157a:	88 2f       	mov	r24, r24
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	80 74       	andi	r24, 0x40	; 64
    1580:	90 70       	andi	r25, 0x00	; 0
    1582:	00 97       	sbiw	r24, 0x00	; 0
    1584:	11 f0       	breq	.+4      	; 0x158a <nrf24_dataReady+0x22>
    {
        return 1;
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	07 c0       	rjmp	.+14     	; 0x1598 <nrf24_dataReady+0x30>
    }

    return !nrf24_rxFifoEmpty();
    158a:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <nrf24_rxFifoEmpty>
    158e:	98 2f       	mov	r25, r24
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	99 23       	and	r25, r25
    1594:	09 f0       	breq	.+2      	; 0x1598 <nrf24_dataReady+0x30>
    1596:	80 e0       	ldi	r24, 0x00	; 0
}
    1598:	0f 90       	pop	r0
    159a:	cf 91       	pop	r28
    159c:	df 91       	pop	r29
    159e:	08 95       	ret

000015a0 <nrf24_rxFifoEmpty>:

/* Checks if receive FIFO is empty or not */
uint8_t nrf24_rxFifoEmpty()
{
    15a0:	df 93       	push	r29
    15a2:	cf 93       	push	r28
    15a4:	0f 92       	push	r0
    15a6:	cd b7       	in	r28, 0x3d	; 61
    15a8:	de b7       	in	r29, 0x3e	; 62
    uint8_t fifoStatus;

    nrf24_readRegister(FIFO_STATUS,&fifoStatus,1);
    15aa:	87 e1       	ldi	r24, 0x17	; 23
    15ac:	9e 01       	movw	r18, r28
    15ae:	2f 5f       	subi	r18, 0xFF	; 255
    15b0:	3f 4f       	sbci	r19, 0xFF	; 255
    15b2:	b9 01       	movw	r22, r18
    15b4:	41 e0       	ldi	r20, 0x01	; 1
    15b6:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <nrf24_readRegister>
    
    return (fifoStatus & (1 << RX_EMPTY));
    15ba:	89 81       	ldd	r24, Y+1	; 0x01
    15bc:	81 70       	andi	r24, 0x01	; 1
}
    15be:	0f 90       	pop	r0
    15c0:	cf 91       	pop	r28
    15c2:	df 91       	pop	r29
    15c4:	08 95       	ret

000015c6 <nrf24_getData>:
    return status;
}

/* Reads payload bytes into data array */
void nrf24_getData(uint8_t* data) 
{
    15c6:	df 93       	push	r29
    15c8:	cf 93       	push	r28
    15ca:	00 d0       	rcall	.+0      	; 0x15cc <nrf24_getData+0x6>
    15cc:	cd b7       	in	r28, 0x3d	; 61
    15ce:	de b7       	in	r29, 0x3e	; 62
    15d0:	9a 83       	std	Y+2, r25	; 0x02
    15d2:	89 83       	std	Y+1, r24	; 0x01
    /* Pull down chip select */
    nrf24_csn_digitalWrite(LOW);                               
    15d4:	80 e0       	ldi	r24, 0x00	; 0
    15d6:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <nrf24_csn_digitalWrite>

    /* Send cmd to read rx payload */
    spi_transfer( R_RX_PAYLOAD );
    15da:	81 e6       	ldi	r24, 0x61	; 97
    15dc:	0e 94 b6 0b 	call	0x176c	; 0x176c <spi_transfer>
    
    /* Read payload */
    nrf24_transferSync(data,data,payload_len);
    15e0:	40 91 58 01 	lds	r20, 0x0158
    15e4:	89 81       	ldd	r24, Y+1	; 0x01
    15e6:	9a 81       	ldd	r25, Y+2	; 0x02
    15e8:	29 81       	ldd	r18, Y+1	; 0x01
    15ea:	3a 81       	ldd	r19, Y+2	; 0x02
    15ec:	b9 01       	movw	r22, r18
    15ee:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <nrf24_transferSync>
    
    /* Pull up chip select */
    nrf24_csn_digitalWrite(HIGH);
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <nrf24_csn_digitalWrite>

    /* Reset status register */
    nrf24_configRegister(STATUS,(1<<RX_DR));   
    15f8:	87 e0       	ldi	r24, 0x07	; 7
    15fa:	60 e4       	ldi	r22, 0x40	; 64
    15fc:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <nrf24_configRegister>
}
    1600:	0f 90       	pop	r0
    1602:	0f 90       	pop	r0
    1604:	cf 91       	pop	r28
    1606:	df 91       	pop	r29
    1608:	08 95       	ret

0000160a <nrf24_send>:
}

// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
void nrf24_send(uint8_t* value) 
{    
    160a:	df 93       	push	r29
    160c:	cf 93       	push	r28
    160e:	00 d0       	rcall	.+0      	; 0x1610 <nrf24_send+0x6>
    1610:	cd b7       	in	r28, 0x3d	; 61
    1612:	de b7       	in	r29, 0x3e	; 62
    1614:	9a 83       	std	Y+2, r25	; 0x02
    1616:	89 83       	std	Y+1, r24	; 0x01
    /* Go to Standby-I first */
    nrf24_ce_digitalWrite(LOW);
    1618:	80 e0       	ldi	r24, 0x00	; 0
    161a:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <nrf24_ce_digitalWrite>
     
    /* Set to transmitter mode , Power up if needed */
    nrf24_powerUpTx();
    161e:	0e 94 99 0b 	call	0x1732	; 0x1732 <nrf24_powerUpTx>

    /* Do we really need to flush TX fifo each time ? */
    #if 1
        /* Pull down chip select */
        nrf24_csn_digitalWrite(LOW);           
    1622:	80 e0       	ldi	r24, 0x00	; 0
    1624:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <nrf24_csn_digitalWrite>

        /* Write cmd to flush transmit FIFO */
        spi_transfer(FLUSH_TX);     
    1628:	81 ee       	ldi	r24, 0xE1	; 225
    162a:	0e 94 b6 0b 	call	0x176c	; 0x176c <spi_transfer>

        /* Pull up chip select */
        nrf24_csn_digitalWrite(HIGH);                    
    162e:	81 e0       	ldi	r24, 0x01	; 1
    1630:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <nrf24_csn_digitalWrite>
    #endif 

    /* Pull down chip select */
    nrf24_csn_digitalWrite(LOW);
    1634:	80 e0       	ldi	r24, 0x00	; 0
    1636:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <nrf24_csn_digitalWrite>

    /* Write cmd to write payload */
    spi_transfer(W_TX_PAYLOAD);
    163a:	80 ea       	ldi	r24, 0xA0	; 160
    163c:	0e 94 b6 0b 	call	0x176c	; 0x176c <spi_transfer>

    /* Write payload */
    nrf24_transmitSync(value,payload_len);   
    1640:	20 91 58 01 	lds	r18, 0x0158
    1644:	89 81       	ldd	r24, Y+1	; 0x01
    1646:	9a 81       	ldd	r25, Y+2	; 0x02
    1648:	62 2f       	mov	r22, r18
    164a:	0e 94 35 0c 	call	0x186a	; 0x186a <nrf24_transmitSync>

    /* Pull up chip select */
    nrf24_csn_digitalWrite(HIGH);
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <nrf24_csn_digitalWrite>

    /* Start the transmission */
    nrf24_ce_digitalWrite(HIGH);    
    1654:	81 e0       	ldi	r24, 0x01	; 1
    1656:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <nrf24_ce_digitalWrite>
}
    165a:	0f 90       	pop	r0
    165c:	0f 90       	pop	r0
    165e:	cf 91       	pop	r28
    1660:	df 91       	pop	r29
    1662:	08 95       	ret

00001664 <nrf24_isSending>:

uint8_t nrf24_isSending()
{
    1664:	df 93       	push	r29
    1666:	cf 93       	push	r28
    1668:	0f 92       	push	r0
    166a:	cd b7       	in	r28, 0x3d	; 61
    166c:	de b7       	in	r29, 0x3e	; 62
    uint8_t status;

    /* read the current status */
    status = nrf24_getStatus();
    166e:	0e 94 48 0b 	call	0x1690	; 0x1690 <nrf24_getStatus>
    1672:	89 83       	std	Y+1, r24	; 0x01
                
    /* if sending successful (TX_DS) or max retries exceded (MAX_RT). */
    if((status & ((1 << TX_DS)  | (1 << MAX_RT))))
    1674:	89 81       	ldd	r24, Y+1	; 0x01
    1676:	88 2f       	mov	r24, r24
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	80 73       	andi	r24, 0x30	; 48
    167c:	90 70       	andi	r25, 0x00	; 0
    167e:	00 97       	sbiw	r24, 0x00	; 0
    1680:	11 f0       	breq	.+4      	; 0x1686 <nrf24_isSending+0x22>
    {        
        return 0; /* false */
    1682:	80 e0       	ldi	r24, 0x00	; 0
    1684:	01 c0       	rjmp	.+2      	; 0x1688 <nrf24_isSending+0x24>
    }

    return 1; /* true */
    1686:	81 e0       	ldi	r24, 0x01	; 1
}
    1688:	0f 90       	pop	r0
    168a:	cf 91       	pop	r28
    168c:	df 91       	pop	r29
    168e:	08 95       	ret

00001690 <nrf24_getStatus>:

uint8_t nrf24_getStatus()
{
    1690:	df 93       	push	r29
    1692:	cf 93       	push	r28
    1694:	0f 92       	push	r0
    1696:	cd b7       	in	r28, 0x3d	; 61
    1698:	de b7       	in	r29, 0x3e	; 62
    uint8_t rv;
    nrf24_csn_digitalWrite(LOW);
    169a:	80 e0       	ldi	r24, 0x00	; 0
    169c:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <nrf24_csn_digitalWrite>
    rv = spi_transfer(NOP);
    16a0:	8f ef       	ldi	r24, 0xFF	; 255
    16a2:	0e 94 b6 0b 	call	0x176c	; 0x176c <spi_transfer>
    16a6:	89 83       	std	Y+1, r24	; 0x01
    nrf24_csn_digitalWrite(HIGH);
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <nrf24_csn_digitalWrite>
    return rv;
    16ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    16b0:	0f 90       	pop	r0
    16b2:	cf 91       	pop	r28
    16b4:	df 91       	pop	r29
    16b6:	08 95       	ret

000016b8 <nrf24_lastMessageStatus>:

uint8_t nrf24_lastMessageStatus()
{
    16b8:	df 93       	push	r29
    16ba:	cf 93       	push	r28
    16bc:	0f 92       	push	r0
    16be:	cd b7       	in	r28, 0x3d	; 61
    16c0:	de b7       	in	r29, 0x3e	; 62
    uint8_t rv;

    rv = nrf24_getStatus();
    16c2:	0e 94 48 0b 	call	0x1690	; 0x1690 <nrf24_getStatus>
    16c6:	89 83       	std	Y+1, r24	; 0x01

    /* Transmission went OK */
    if((rv & ((1 << TX_DS))))
    16c8:	89 81       	ldd	r24, Y+1	; 0x01
    16ca:	88 2f       	mov	r24, r24
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	80 72       	andi	r24, 0x20	; 32
    16d0:	90 70       	andi	r25, 0x00	; 0
    16d2:	00 97       	sbiw	r24, 0x00	; 0
    16d4:	11 f0       	breq	.+4      	; 0x16da <nrf24_lastMessageStatus+0x22>
    {
        return NRF24_TRANSMISSON_OK;
    16d6:	80 e0       	ldi	r24, 0x00	; 0
    16d8:	0a c0       	rjmp	.+20     	; 0x16ee <nrf24_lastMessageStatus+0x36>
    }
    /* Maximum retransmission count is reached */
    /* Last message probably went missing ... */
    else if((rv & ((1 << MAX_RT))))
    16da:	89 81       	ldd	r24, Y+1	; 0x01
    16dc:	88 2f       	mov	r24, r24
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	80 71       	andi	r24, 0x10	; 16
    16e2:	90 70       	andi	r25, 0x00	; 0
    16e4:	00 97       	sbiw	r24, 0x00	; 0
    16e6:	11 f0       	breq	.+4      	; 0x16ec <nrf24_lastMessageStatus+0x34>
    {
        return NRF24_MESSAGE_LOST;
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	01 c0       	rjmp	.+2      	; 0x16ee <nrf24_lastMessageStatus+0x36>
    }  
    /* Probably still sending ... */
    else
    {
        return 0xFF;
    16ec:	8f ef       	ldi	r24, 0xFF	; 255
    }
}
    16ee:	0f 90       	pop	r0
    16f0:	cf 91       	pop	r28
    16f2:	df 91       	pop	r29
    16f4:	08 95       	ret

000016f6 <nrf24_powerUpRx>:

void nrf24_powerUpRx()
{     
    16f6:	df 93       	push	r29
    16f8:	cf 93       	push	r28
    16fa:	cd b7       	in	r28, 0x3d	; 61
    16fc:	de b7       	in	r29, 0x3e	; 62
    nrf24_csn_digitalWrite(LOW);
    16fe:	80 e0       	ldi	r24, 0x00	; 0
    1700:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <nrf24_csn_digitalWrite>
    spi_transfer(FLUSH_RX);
    1704:	82 ee       	ldi	r24, 0xE2	; 226
    1706:	0e 94 b6 0b 	call	0x176c	; 0x176c <spi_transfer>
    nrf24_csn_digitalWrite(HIGH);
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <nrf24_csn_digitalWrite>

    nrf24_configRegister(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT)); 
    1710:	87 e0       	ldi	r24, 0x07	; 7
    1712:	60 e7       	ldi	r22, 0x70	; 112
    1714:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <nrf24_configRegister>

    nrf24_ce_digitalWrite(LOW);    
    1718:	80 e0       	ldi	r24, 0x00	; 0
    171a:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <nrf24_ce_digitalWrite>
    nrf24_configRegister(CONFIG,nrf24_CONFIG|((1<<PWR_UP)|(1<<PRIM_RX)));    
    171e:	80 e0       	ldi	r24, 0x00	; 0
    1720:	6b e0       	ldi	r22, 0x0B	; 11
    1722:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <nrf24_configRegister>
    nrf24_ce_digitalWrite(HIGH);
    1726:	81 e0       	ldi	r24, 0x01	; 1
    1728:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <nrf24_ce_digitalWrite>
}
    172c:	cf 91       	pop	r28
    172e:	df 91       	pop	r29
    1730:	08 95       	ret

00001732 <nrf24_powerUpTx>:

void nrf24_powerUpTx()
{
    1732:	df 93       	push	r29
    1734:	cf 93       	push	r28
    1736:	cd b7       	in	r28, 0x3d	; 61
    1738:	de b7       	in	r29, 0x3e	; 62
    nrf24_configRegister(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT)); 
    173a:	87 e0       	ldi	r24, 0x07	; 7
    173c:	60 e7       	ldi	r22, 0x70	; 112
    173e:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <nrf24_configRegister>

    nrf24_configRegister(CONFIG,nrf24_CONFIG|((1<<PWR_UP)|(0<<PRIM_RX)));
    1742:	80 e0       	ldi	r24, 0x00	; 0
    1744:	6a e0       	ldi	r22, 0x0A	; 10
    1746:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <nrf24_configRegister>
}
    174a:	cf 91       	pop	r28
    174c:	df 91       	pop	r29
    174e:	08 95       	ret

00001750 <nrf24_powerDown>:

void nrf24_powerDown()
{
    1750:	df 93       	push	r29
    1752:	cf 93       	push	r28
    1754:	cd b7       	in	r28, 0x3d	; 61
    1756:	de b7       	in	r29, 0x3e	; 62
    nrf24_ce_digitalWrite(LOW);
    1758:	80 e0       	ldi	r24, 0x00	; 0
    175a:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <nrf24_ce_digitalWrite>
    nrf24_configRegister(CONFIG,nrf24_CONFIG);
    175e:	80 e0       	ldi	r24, 0x00	; 0
    1760:	68 e0       	ldi	r22, 0x08	; 8
    1762:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <nrf24_configRegister>
}
    1766:	cf 91       	pop	r28
    1768:	df 91       	pop	r29
    176a:	08 95       	ret

0000176c <spi_transfer>:

uint8_t spi_transfer(uint8_t tx)
{
    176c:	df 93       	push	r29
    176e:	cf 93       	push	r28
    1770:	00 d0       	rcall	.+0      	; 0x1772 <spi_transfer+0x6>
    1772:	0f 92       	push	r0
    1774:	cd b7       	in	r28, 0x3d	; 61
    1776:	de b7       	in	r29, 0x3e	; 62
    1778:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t i = 0;
    177a:	19 82       	std	Y+1, r1	; 0x01
    uint8_t rx = 0;
    177c:	1a 82       	std	Y+2, r1	; 0x02

    nrf24_sck_digitalWrite(LOW);
    177e:	80 e0       	ldi	r24, 0x00	; 0
    1780:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <nrf24_sck_digitalWrite>

    for(i=0;i<8;i++)
    1784:	19 82       	std	Y+1, r1	; 0x01
    1786:	30 c0       	rjmp	.+96     	; 0x17e8 <spi_transfer+0x7c>
    {

	    if(tx & (1<<(7-i)))
    1788:	8b 81       	ldd	r24, Y+3	; 0x03
    178a:	88 2f       	mov	r24, r24
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	29 81       	ldd	r18, Y+1	; 0x01
    1790:	22 2f       	mov	r18, r18
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	47 e0       	ldi	r20, 0x07	; 7
    1796:	50 e0       	ldi	r21, 0x00	; 0
    1798:	ba 01       	movw	r22, r20
    179a:	62 1b       	sub	r22, r18
    179c:	73 0b       	sbc	r23, r19
    179e:	9b 01       	movw	r18, r22
    17a0:	02 2e       	mov	r0, r18
    17a2:	02 c0       	rjmp	.+4      	; 0x17a8 <spi_transfer+0x3c>
    17a4:	95 95       	asr	r25
    17a6:	87 95       	ror	r24
    17a8:	0a 94       	dec	r0
    17aa:	e2 f7       	brpl	.-8      	; 0x17a4 <spi_transfer+0x38>
    17ac:	81 70       	andi	r24, 0x01	; 1
    17ae:	90 70       	andi	r25, 0x00	; 0
    17b0:	88 23       	and	r24, r24
    17b2:	21 f0       	breq	.+8      	; 0x17bc <spi_transfer+0x50>
	    {
		    nrf24_mosi_digitalWrite(HIGH);
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <nrf24_mosi_digitalWrite>
    17ba:	03 c0       	rjmp	.+6      	; 0x17c2 <spi_transfer+0x56>
	    }
	    else
	    {
		    nrf24_mosi_digitalWrite(LOW);
    17bc:	80 e0       	ldi	r24, 0x00	; 0
    17be:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <nrf24_mosi_digitalWrite>
	    }

	    nrf24_sck_digitalWrite(HIGH);
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <nrf24_sck_digitalWrite>

	    rx = rx << 1;
    17c8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ca:	88 0f       	add	r24, r24
    17cc:	8a 83       	std	Y+2, r24	; 0x02
	    if(nrf24_miso_digitalRead())
    17ce:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <nrf24_miso_digitalRead>
    17d2:	88 23       	and	r24, r24
    17d4:	19 f0       	breq	.+6      	; 0x17dc <spi_transfer+0x70>
	    {
		    rx |= 0x01;
    17d6:	8a 81       	ldd	r24, Y+2	; 0x02
    17d8:	81 60       	ori	r24, 0x01	; 1
    17da:	8a 83       	std	Y+2, r24	; 0x02
	    }

	    nrf24_sck_digitalWrite(LOW);
    17dc:	80 e0       	ldi	r24, 0x00	; 0
    17de:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <nrf24_sck_digitalWrite>
    uint8_t i = 0;
    uint8_t rx = 0;

    nrf24_sck_digitalWrite(LOW);

    for(i=0;i<8;i++)
    17e2:	89 81       	ldd	r24, Y+1	; 0x01
    17e4:	8f 5f       	subi	r24, 0xFF	; 255
    17e6:	89 83       	std	Y+1, r24	; 0x01
    17e8:	89 81       	ldd	r24, Y+1	; 0x01
    17ea:	88 30       	cpi	r24, 0x08	; 8
    17ec:	68 f2       	brcs	.-102    	; 0x1788 <spi_transfer+0x1c>

	    nrf24_sck_digitalWrite(LOW);

    }

    return rx;
    17ee:	8a 81       	ldd	r24, Y+2	; 0x02
}
    17f0:	0f 90       	pop	r0
    17f2:	0f 90       	pop	r0
    17f4:	0f 90       	pop	r0
    17f6:	cf 91       	pop	r28
    17f8:	df 91       	pop	r29
    17fa:	08 95       	ret

000017fc <nrf24_transferSync>:

/* send and receive multiple bytes over SPI */
void nrf24_transferSync(uint8_t* dataout,uint8_t* datain,uint8_t len)
{
    17fc:	0f 93       	push	r16
    17fe:	1f 93       	push	r17
    1800:	df 93       	push	r29
    1802:	cf 93       	push	r28
    1804:	00 d0       	rcall	.+0      	; 0x1806 <nrf24_transferSync+0xa>
    1806:	00 d0       	rcall	.+0      	; 0x1808 <nrf24_transferSync+0xc>
    1808:	00 d0       	rcall	.+0      	; 0x180a <nrf24_transferSync+0xe>
    180a:	cd b7       	in	r28, 0x3d	; 61
    180c:	de b7       	in	r29, 0x3e	; 62
    180e:	9b 83       	std	Y+3, r25	; 0x03
    1810:	8a 83       	std	Y+2, r24	; 0x02
    1812:	7d 83       	std	Y+5, r23	; 0x05
    1814:	6c 83       	std	Y+4, r22	; 0x04
    1816:	4e 83       	std	Y+6, r20	; 0x06
    uint8_t i;

    for(i=0;i<len;i++)
    1818:	19 82       	std	Y+1, r1	; 0x01
    181a:	18 c0       	rjmp	.+48     	; 0x184c <nrf24_transferSync+0x50>
    {
        datain[i] = spi_transfer(dataout[i]);
    181c:	89 81       	ldd	r24, Y+1	; 0x01
    181e:	88 2f       	mov	r24, r24
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	2c 81       	ldd	r18, Y+4	; 0x04
    1824:	3d 81       	ldd	r19, Y+5	; 0x05
    1826:	89 01       	movw	r16, r18
    1828:	08 0f       	add	r16, r24
    182a:	19 1f       	adc	r17, r25
    182c:	89 81       	ldd	r24, Y+1	; 0x01
    182e:	88 2f       	mov	r24, r24
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	2a 81       	ldd	r18, Y+2	; 0x02
    1834:	3b 81       	ldd	r19, Y+3	; 0x03
    1836:	82 0f       	add	r24, r18
    1838:	93 1f       	adc	r25, r19
    183a:	fc 01       	movw	r30, r24
    183c:	80 81       	ld	r24, Z
    183e:	0e 94 b6 0b 	call	0x176c	; 0x176c <spi_transfer>
    1842:	f8 01       	movw	r30, r16
    1844:	80 83       	st	Z, r24
/* send and receive multiple bytes over SPI */
void nrf24_transferSync(uint8_t* dataout,uint8_t* datain,uint8_t len)
{
    uint8_t i;

    for(i=0;i<len;i++)
    1846:	89 81       	ldd	r24, Y+1	; 0x01
    1848:	8f 5f       	subi	r24, 0xFF	; 255
    184a:	89 83       	std	Y+1, r24	; 0x01
    184c:	99 81       	ldd	r25, Y+1	; 0x01
    184e:	8e 81       	ldd	r24, Y+6	; 0x06
    1850:	98 17       	cp	r25, r24
    1852:	20 f3       	brcs	.-56     	; 0x181c <nrf24_transferSync+0x20>
    {
        datain[i] = spi_transfer(dataout[i]);
    }

}
    1854:	26 96       	adiw	r28, 0x06	; 6
    1856:	0f b6       	in	r0, 0x3f	; 63
    1858:	f8 94       	cli
    185a:	de bf       	out	0x3e, r29	; 62
    185c:	0f be       	out	0x3f, r0	; 63
    185e:	cd bf       	out	0x3d, r28	; 61
    1860:	cf 91       	pop	r28
    1862:	df 91       	pop	r29
    1864:	1f 91       	pop	r17
    1866:	0f 91       	pop	r16
    1868:	08 95       	ret

0000186a <nrf24_transmitSync>:

/* send multiple bytes over SPI */
void nrf24_transmitSync(uint8_t* dataout,uint8_t len)
{
    186a:	df 93       	push	r29
    186c:	cf 93       	push	r28
    186e:	00 d0       	rcall	.+0      	; 0x1870 <nrf24_transmitSync+0x6>
    1870:	00 d0       	rcall	.+0      	; 0x1872 <nrf24_transmitSync+0x8>
    1872:	cd b7       	in	r28, 0x3d	; 61
    1874:	de b7       	in	r29, 0x3e	; 62
    1876:	9b 83       	std	Y+3, r25	; 0x03
    1878:	8a 83       	std	Y+2, r24	; 0x02
    187a:	6c 83       	std	Y+4, r22	; 0x04
    uint8_t i;
    
    for(i=0;i<len;i++)
    187c:	19 82       	std	Y+1, r1	; 0x01
    187e:	0e c0       	rjmp	.+28     	; 0x189c <nrf24_transmitSync+0x32>
    {
        spi_transfer(dataout[i]);
    1880:	89 81       	ldd	r24, Y+1	; 0x01
    1882:	88 2f       	mov	r24, r24
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	2a 81       	ldd	r18, Y+2	; 0x02
    1888:	3b 81       	ldd	r19, Y+3	; 0x03
    188a:	82 0f       	add	r24, r18
    188c:	93 1f       	adc	r25, r19
    188e:	fc 01       	movw	r30, r24
    1890:	80 81       	ld	r24, Z
    1892:	0e 94 b6 0b 	call	0x176c	; 0x176c <spi_transfer>
/* send multiple bytes over SPI */
void nrf24_transmitSync(uint8_t* dataout,uint8_t len)
{
    uint8_t i;
    
    for(i=0;i<len;i++)
    1896:	89 81       	ldd	r24, Y+1	; 0x01
    1898:	8f 5f       	subi	r24, 0xFF	; 255
    189a:	89 83       	std	Y+1, r24	; 0x01
    189c:	99 81       	ldd	r25, Y+1	; 0x01
    189e:	8c 81       	ldd	r24, Y+4	; 0x04
    18a0:	98 17       	cp	r25, r24
    18a2:	70 f3       	brcs	.-36     	; 0x1880 <nrf24_transmitSync+0x16>
    {
        spi_transfer(dataout[i]);
    }

}
    18a4:	0f 90       	pop	r0
    18a6:	0f 90       	pop	r0
    18a8:	0f 90       	pop	r0
    18aa:	0f 90       	pop	r0
    18ac:	cf 91       	pop	r28
    18ae:	df 91       	pop	r29
    18b0:	08 95       	ret

000018b2 <nrf24_configRegister>:

/* Clocks only one byte into the given nrf24 register */
void nrf24_configRegister(uint8_t reg, uint8_t value)
{
    18b2:	df 93       	push	r29
    18b4:	cf 93       	push	r28
    18b6:	00 d0       	rcall	.+0      	; 0x18b8 <nrf24_configRegister+0x6>
    18b8:	cd b7       	in	r28, 0x3d	; 61
    18ba:	de b7       	in	r29, 0x3e	; 62
    18bc:	89 83       	std	Y+1, r24	; 0x01
    18be:	6a 83       	std	Y+2, r22	; 0x02
    nrf24_csn_digitalWrite(LOW);
    18c0:	80 e0       	ldi	r24, 0x00	; 0
    18c2:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <nrf24_csn_digitalWrite>
    spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
    18c6:	89 81       	ldd	r24, Y+1	; 0x01
    18c8:	8f 71       	andi	r24, 0x1F	; 31
    18ca:	80 62       	ori	r24, 0x20	; 32
    18cc:	0e 94 b6 0b 	call	0x176c	; 0x176c <spi_transfer>
    spi_transfer(value);
    18d0:	8a 81       	ldd	r24, Y+2	; 0x02
    18d2:	0e 94 b6 0b 	call	0x176c	; 0x176c <spi_transfer>
    nrf24_csn_digitalWrite(HIGH);
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <nrf24_csn_digitalWrite>
}
    18dc:	0f 90       	pop	r0
    18de:	0f 90       	pop	r0
    18e0:	cf 91       	pop	r28
    18e2:	df 91       	pop	r29
    18e4:	08 95       	ret

000018e6 <nrf24_readRegister>:

/* Read single register from nrf24 */
void nrf24_readRegister(uint8_t reg, uint8_t* value, uint8_t len)
{
    18e6:	df 93       	push	r29
    18e8:	cf 93       	push	r28
    18ea:	00 d0       	rcall	.+0      	; 0x18ec <nrf24_readRegister+0x6>
    18ec:	00 d0       	rcall	.+0      	; 0x18ee <nrf24_readRegister+0x8>
    18ee:	cd b7       	in	r28, 0x3d	; 61
    18f0:	de b7       	in	r29, 0x3e	; 62
    18f2:	89 83       	std	Y+1, r24	; 0x01
    18f4:	7b 83       	std	Y+3, r23	; 0x03
    18f6:	6a 83       	std	Y+2, r22	; 0x02
    18f8:	4c 83       	std	Y+4, r20	; 0x04
    nrf24_csn_digitalWrite(LOW);
    18fa:	80 e0       	ldi	r24, 0x00	; 0
    18fc:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <nrf24_csn_digitalWrite>
    spi_transfer(R_REGISTER | (REGISTER_MASK & reg));
    1900:	89 81       	ldd	r24, Y+1	; 0x01
    1902:	8f 71       	andi	r24, 0x1F	; 31
    1904:	0e 94 b6 0b 	call	0x176c	; 0x176c <spi_transfer>
    nrf24_transferSync(value,value,len);
    1908:	8a 81       	ldd	r24, Y+2	; 0x02
    190a:	9b 81       	ldd	r25, Y+3	; 0x03
    190c:	2a 81       	ldd	r18, Y+2	; 0x02
    190e:	3b 81       	ldd	r19, Y+3	; 0x03
    1910:	b9 01       	movw	r22, r18
    1912:	4c 81       	ldd	r20, Y+4	; 0x04
    1914:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <nrf24_transferSync>
    nrf24_csn_digitalWrite(HIGH);
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <nrf24_csn_digitalWrite>
}
    191e:	0f 90       	pop	r0
    1920:	0f 90       	pop	r0
    1922:	0f 90       	pop	r0
    1924:	0f 90       	pop	r0
    1926:	cf 91       	pop	r28
    1928:	df 91       	pop	r29
    192a:	08 95       	ret

0000192c <nrf24_writeRegister>:

/* Write to a single register of nrf24 */
void nrf24_writeRegister(uint8_t reg, uint8_t* value, uint8_t len) 
{
    192c:	df 93       	push	r29
    192e:	cf 93       	push	r28
    1930:	00 d0       	rcall	.+0      	; 0x1932 <nrf24_writeRegister+0x6>
    1932:	00 d0       	rcall	.+0      	; 0x1934 <nrf24_writeRegister+0x8>
    1934:	cd b7       	in	r28, 0x3d	; 61
    1936:	de b7       	in	r29, 0x3e	; 62
    1938:	89 83       	std	Y+1, r24	; 0x01
    193a:	7b 83       	std	Y+3, r23	; 0x03
    193c:	6a 83       	std	Y+2, r22	; 0x02
    193e:	4c 83       	std	Y+4, r20	; 0x04
    nrf24_csn_digitalWrite(LOW);
    1940:	80 e0       	ldi	r24, 0x00	; 0
    1942:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <nrf24_csn_digitalWrite>
    spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
    1946:	89 81       	ldd	r24, Y+1	; 0x01
    1948:	8f 71       	andi	r24, 0x1F	; 31
    194a:	80 62       	ori	r24, 0x20	; 32
    194c:	0e 94 b6 0b 	call	0x176c	; 0x176c <spi_transfer>
    nrf24_transmitSync(value,len);
    1950:	8a 81       	ldd	r24, Y+2	; 0x02
    1952:	9b 81       	ldd	r25, Y+3	; 0x03
    1954:	6c 81       	ldd	r22, Y+4	; 0x04
    1956:	0e 94 35 0c 	call	0x186a	; 0x186a <nrf24_transmitSync>
    nrf24_csn_digitalWrite(HIGH);
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <nrf24_csn_digitalWrite>
}
    1960:	0f 90       	pop	r0
    1962:	0f 90       	pop	r0
    1964:	0f 90       	pop	r0
    1966:	0f 90       	pop	r0
    1968:	cf 91       	pop	r28
    196a:	df 91       	pop	r29
    196c:	08 95       	ret

0000196e <nrf24_checkRegister>:

/* Check single register from nrf24 */
bool nrf24_checkRegister(uint8_t reg, uint8_t desiredValue, uint8_t len)
{
    196e:	df 93       	push	r29
    1970:	cf 93       	push	r28
    1972:	00 d0       	rcall	.+0      	; 0x1974 <nrf24_checkRegister+0x6>
    1974:	00 d0       	rcall	.+0      	; 0x1976 <nrf24_checkRegister+0x8>
    1976:	cd b7       	in	r28, 0x3d	; 61
    1978:	de b7       	in	r29, 0x3e	; 62
    197a:	8a 83       	std	Y+2, r24	; 0x02
    197c:	6b 83       	std	Y+3, r22	; 0x03
    197e:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t registerValue;
	nrf24_readRegister(reg,&registerValue,len);
    1980:	8a 81       	ldd	r24, Y+2	; 0x02
    1982:	9e 01       	movw	r18, r28
    1984:	2f 5f       	subi	r18, 0xFF	; 255
    1986:	3f 4f       	sbci	r19, 0xFF	; 255
    1988:	b9 01       	movw	r22, r18
    198a:	4c 81       	ldd	r20, Y+4	; 0x04
    198c:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <nrf24_readRegister>
	if (registerValue==desiredValue) { return true; } else { return false; }
    1990:	99 81       	ldd	r25, Y+1	; 0x01
    1992:	8b 81       	ldd	r24, Y+3	; 0x03
    1994:	98 17       	cp	r25, r24
    1996:	11 f4       	brne	.+4      	; 0x199c <nrf24_checkRegister+0x2e>
    1998:	81 e0       	ldi	r24, 0x01	; 1
    199a:	01 c0       	rjmp	.+2      	; 0x199e <nrf24_checkRegister+0x30>
    199c:	80 e0       	ldi	r24, 0x00	; 0
}
    199e:	0f 90       	pop	r0
    19a0:	0f 90       	pop	r0
    19a2:	0f 90       	pop	r0
    19a4:	0f 90       	pop	r0
    19a6:	cf 91       	pop	r28
    19a8:	df 91       	pop	r29
    19aa:	08 95       	ret

000019ac <nrf24_setupPins>:
#define check_bit(reg,bit) (reg&(1<<bit))

/* ------------------------------------------------------------------------- */

void nrf24_setupPins()
{
    19ac:	df 93       	push	r29
    19ae:	cf 93       	push	r28
    19b0:	cd b7       	in	r28, 0x3d	; 61
    19b2:	de b7       	in	r29, 0x3e	; 62
	set_bit(CE_CSN_DDR, CE_BIT_POS); // CE output
    19b4:	87 e2       	ldi	r24, 0x27	; 39
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	27 e2       	ldi	r18, 0x27	; 39
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	f9 01       	movw	r30, r18
    19be:	20 81       	ld	r18, Z
    19c0:	21 60       	ori	r18, 0x01	; 1
    19c2:	fc 01       	movw	r30, r24
    19c4:	20 83       	st	Z, r18
	set_bit(CE_CSN_DDR, CSN_BIT_POS); // CSN output
    19c6:	87 e2       	ldi	r24, 0x27	; 39
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	27 e2       	ldi	r18, 0x27	; 39
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	f9 01       	movw	r30, r18
    19d0:	20 81       	ld	r18, Z
    19d2:	22 60       	ori	r18, 0x02	; 2
    19d4:	fc 01       	movw	r30, r24
    19d6:	20 83       	st	Z, r18
	
	clr_bit(RF_DDR, MISO_BIT_POS); // MISO input
    19d8:	8a e2       	ldi	r24, 0x2A	; 42
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	2a e2       	ldi	r18, 0x2A	; 42
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	f9 01       	movw	r30, r18
    19e2:	20 81       	ld	r18, Z
    19e4:	2e 7f       	andi	r18, 0xFE	; 254
    19e6:	fc 01       	movw	r30, r24
    19e8:	20 83       	st	Z, r18
	set_bit(RF_DDR, MOSI_BIT_POS); // MOSI output
    19ea:	8a e2       	ldi	r24, 0x2A	; 42
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	2a e2       	ldi	r18, 0x2A	; 42
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	f9 01       	movw	r30, r18
    19f4:	20 81       	ld	r18, Z
    19f6:	22 60       	ori	r18, 0x02	; 2
    19f8:	fc 01       	movw	r30, r24
    19fa:	20 83       	st	Z, r18
	set_bit(RF_DDR, SCK_BIT_POS); // SCK output
    19fc:	8a e2       	ldi	r24, 0x2A	; 42
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	2a e2       	ldi	r18, 0x2A	; 42
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	f9 01       	movw	r30, r18
    1a06:	20 81       	ld	r18, Z
    1a08:	20 61       	ori	r18, 0x10	; 16
    1a0a:	fc 01       	movw	r30, r24
    1a0c:	20 83       	st	Z, r18
}
    1a0e:	cf 91       	pop	r28
    1a10:	df 91       	pop	r29
    1a12:	08 95       	ret

00001a14 <nrf24_ce_digitalWrite>:
/* ------------------------------------------------------------------------- */
void nrf24_ce_digitalWrite(uint8_t state)
{
    1a14:	df 93       	push	r29
    1a16:	cf 93       	push	r28
    1a18:	0f 92       	push	r0
    1a1a:	cd b7       	in	r28, 0x3d	; 61
    1a1c:	de b7       	in	r29, 0x3e	; 62
    1a1e:	89 83       	std	Y+1, r24	; 0x01
	if(state)
    1a20:	89 81       	ldd	r24, Y+1	; 0x01
    1a22:	88 23       	and	r24, r24
    1a24:	51 f0       	breq	.+20     	; 0x1a3a <nrf24_ce_digitalWrite+0x26>
	{
		set_bit(CE_CSN_PORT, CE_BIT_POS);
    1a26:	88 e2       	ldi	r24, 0x28	; 40
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	28 e2       	ldi	r18, 0x28	; 40
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	f9 01       	movw	r30, r18
    1a30:	20 81       	ld	r18, Z
    1a32:	21 60       	ori	r18, 0x01	; 1
    1a34:	fc 01       	movw	r30, r24
    1a36:	20 83       	st	Z, r18
    1a38:	09 c0       	rjmp	.+18     	; 0x1a4c <nrf24_ce_digitalWrite+0x38>
	}
	else
	{
		clr_bit(CE_CSN_PORT, CE_BIT_POS);
    1a3a:	88 e2       	ldi	r24, 0x28	; 40
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	28 e2       	ldi	r18, 0x28	; 40
    1a40:	30 e0       	ldi	r19, 0x00	; 0
    1a42:	f9 01       	movw	r30, r18
    1a44:	20 81       	ld	r18, Z
    1a46:	2e 7f       	andi	r18, 0xFE	; 254
    1a48:	fc 01       	movw	r30, r24
    1a4a:	20 83       	st	Z, r18
	}
}
    1a4c:	0f 90       	pop	r0
    1a4e:	cf 91       	pop	r28
    1a50:	df 91       	pop	r29
    1a52:	08 95       	ret

00001a54 <nrf24_csn_digitalWrite>:
/* ------------------------------------------------------------------------- */
void nrf24_csn_digitalWrite(uint8_t state)
{
    1a54:	df 93       	push	r29
    1a56:	cf 93       	push	r28
    1a58:	0f 92       	push	r0
    1a5a:	cd b7       	in	r28, 0x3d	; 61
    1a5c:	de b7       	in	r29, 0x3e	; 62
    1a5e:	89 83       	std	Y+1, r24	; 0x01
	if(state)
    1a60:	89 81       	ldd	r24, Y+1	; 0x01
    1a62:	88 23       	and	r24, r24
    1a64:	51 f0       	breq	.+20     	; 0x1a7a <nrf24_csn_digitalWrite+0x26>
	{
		set_bit(CE_CSN_PORT, CSN_BIT_POS);
    1a66:	88 e2       	ldi	r24, 0x28	; 40
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	28 e2       	ldi	r18, 0x28	; 40
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	f9 01       	movw	r30, r18
    1a70:	20 81       	ld	r18, Z
    1a72:	22 60       	ori	r18, 0x02	; 2
    1a74:	fc 01       	movw	r30, r24
    1a76:	20 83       	st	Z, r18
    1a78:	09 c0       	rjmp	.+18     	; 0x1a8c <nrf24_csn_digitalWrite+0x38>
	}
	else
	{
		clr_bit(CE_CSN_PORT, CSN_BIT_POS);
    1a7a:	88 e2       	ldi	r24, 0x28	; 40
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	28 e2       	ldi	r18, 0x28	; 40
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	f9 01       	movw	r30, r18
    1a84:	20 81       	ld	r18, Z
    1a86:	2d 7f       	andi	r18, 0xFD	; 253
    1a88:	fc 01       	movw	r30, r24
    1a8a:	20 83       	st	Z, r18
	}
}
    1a8c:	0f 90       	pop	r0
    1a8e:	cf 91       	pop	r28
    1a90:	df 91       	pop	r29
    1a92:	08 95       	ret

00001a94 <nrf24_sck_digitalWrite>:
/* ------------------------------------------------------------------------- */
void nrf24_sck_digitalWrite(uint8_t state)
{
    1a94:	df 93       	push	r29
    1a96:	cf 93       	push	r28
    1a98:	0f 92       	push	r0
    1a9a:	cd b7       	in	r28, 0x3d	; 61
    1a9c:	de b7       	in	r29, 0x3e	; 62
    1a9e:	89 83       	std	Y+1, r24	; 0x01
	if(state)
    1aa0:	89 81       	ldd	r24, Y+1	; 0x01
    1aa2:	88 23       	and	r24, r24
    1aa4:	51 f0       	breq	.+20     	; 0x1aba <nrf24_sck_digitalWrite+0x26>
	{
		set_bit(RF_PORT, SCK_BIT_POS);
    1aa6:	8b e2       	ldi	r24, 0x2B	; 43
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	2b e2       	ldi	r18, 0x2B	; 43
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	f9 01       	movw	r30, r18
    1ab0:	20 81       	ld	r18, Z
    1ab2:	20 61       	ori	r18, 0x10	; 16
    1ab4:	fc 01       	movw	r30, r24
    1ab6:	20 83       	st	Z, r18
    1ab8:	09 c0       	rjmp	.+18     	; 0x1acc <nrf24_sck_digitalWrite+0x38>
	}
	else
	{
		clr_bit(RF_PORT, SCK_BIT_POS);
    1aba:	8b e2       	ldi	r24, 0x2B	; 43
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	2b e2       	ldi	r18, 0x2B	; 43
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	f9 01       	movw	r30, r18
    1ac4:	20 81       	ld	r18, Z
    1ac6:	2f 7e       	andi	r18, 0xEF	; 239
    1ac8:	fc 01       	movw	r30, r24
    1aca:	20 83       	st	Z, r18
	}
}
    1acc:	0f 90       	pop	r0
    1ace:	cf 91       	pop	r28
    1ad0:	df 91       	pop	r29
    1ad2:	08 95       	ret

00001ad4 <nrf24_mosi_digitalWrite>:
/* ------------------------------------------------------------------------- */
void nrf24_mosi_digitalWrite(uint8_t state)
{
    1ad4:	df 93       	push	r29
    1ad6:	cf 93       	push	r28
    1ad8:	0f 92       	push	r0
    1ada:	cd b7       	in	r28, 0x3d	; 61
    1adc:	de b7       	in	r29, 0x3e	; 62
    1ade:	89 83       	std	Y+1, r24	; 0x01
	if(state)
    1ae0:	89 81       	ldd	r24, Y+1	; 0x01
    1ae2:	88 23       	and	r24, r24
    1ae4:	51 f0       	breq	.+20     	; 0x1afa <nrf24_mosi_digitalWrite+0x26>
	{
		set_bit(RF_PORT, MOSI_BIT_POS);
    1ae6:	8b e2       	ldi	r24, 0x2B	; 43
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	2b e2       	ldi	r18, 0x2B	; 43
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	f9 01       	movw	r30, r18
    1af0:	20 81       	ld	r18, Z
    1af2:	22 60       	ori	r18, 0x02	; 2
    1af4:	fc 01       	movw	r30, r24
    1af6:	20 83       	st	Z, r18
    1af8:	09 c0       	rjmp	.+18     	; 0x1b0c <nrf24_mosi_digitalWrite+0x38>
	}
	else
	{
		clr_bit(RF_PORT, MOSI_BIT_POS);
    1afa:	8b e2       	ldi	r24, 0x2B	; 43
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	2b e2       	ldi	r18, 0x2B	; 43
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	f9 01       	movw	r30, r18
    1b04:	20 81       	ld	r18, Z
    1b06:	2d 7f       	andi	r18, 0xFD	; 253
    1b08:	fc 01       	movw	r30, r24
    1b0a:	20 83       	st	Z, r18
	}
}
    1b0c:	0f 90       	pop	r0
    1b0e:	cf 91       	pop	r28
    1b10:	df 91       	pop	r29
    1b12:	08 95       	ret

00001b14 <nrf24_miso_digitalRead>:
/* ------------------------------------------------------------------------- */
uint8_t nrf24_miso_digitalRead()
{
    1b14:	df 93       	push	r29
    1b16:	cf 93       	push	r28
    1b18:	cd b7       	in	r28, 0x3d	; 61
    1b1a:	de b7       	in	r29, 0x3e	; 62
	return check_bit(RF_PIN, MISO_BIT_POS);
    1b1c:	89 e2       	ldi	r24, 0x29	; 41
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	fc 01       	movw	r30, r24
    1b22:	80 81       	ld	r24, Z
    1b24:	81 70       	andi	r24, 0x01	; 1
}
    1b26:	cf 91       	pop	r28
    1b28:	df 91       	pop	r29
    1b2a:	08 95       	ret

00001b2c <nrf24_initRF_SAFE>:
/* ------------------------------------------------------------------------- */


void nrf24_initRF_SAFE(uint8_t boardIndex,TransmissionMode initMode){
    1b2c:	df 93       	push	r29
    1b2e:	cf 93       	push	r28
    1b30:	00 d0       	rcall	.+0      	; 0x1b32 <nrf24_initRF_SAFE+0x6>
    1b32:	0f 92       	push	r0
    1b34:	cd b7       	in	r28, 0x3d	; 61
    1b36:	de b7       	in	r29, 0x3e	; 62
    1b38:	8a 83       	std	Y+2, r24	; 0x02
    1b3a:	6b 83       	std	Y+3, r22	; 0x03

	initliazeMemory();
    1b3c:	0e 94 66 00 	call	0xcc	; 0xcc <initliazeMemory>
	bool successfulRfInit = false;
    1b40:	19 82       	std	Y+1, r1	; 0x01
	
	while(successfulRfInit==false){
    1b42:	12 c0       	rjmp	.+36     	; 0x1b68 <nrf24_initRF_SAFE+0x3c>
		nrf24_powerDown();
    1b44:	0e 94 a8 0b 	call	0x1750	; 0x1750 <nrf24_powerDown>
		nrf24_init();
    1b48:	0e 94 48 08 	call	0x1090	; 0x1090 <nrf24_init>
		nrf24_config(GENERAL_RF_CHANNEL,32);
    1b4c:	80 91 1d 01 	lds	r24, 0x011D
    1b50:	60 e2       	ldi	r22, 0x20	; 32
    1b52:	0e 94 57 08 	call	0x10ae	; 0x10ae <nrf24_config>
		if (nrf24_checkConfig()) { successfulRfInit = true; } else { faultyRF_Alarm(); }
    1b56:	0e 94 9f 08 	call	0x113e	; 0x113e <nrf24_checkConfig>
    1b5a:	88 23       	and	r24, r24
    1b5c:	19 f0       	breq	.+6      	; 0x1b64 <nrf24_initRF_SAFE+0x38>
    1b5e:	81 e0       	ldi	r24, 0x01	; 1
    1b60:	89 83       	std	Y+1, r24	; 0x01
    1b62:	02 c0       	rjmp	.+4      	; 0x1b68 <nrf24_initRF_SAFE+0x3c>
    1b64:	0e 94 4e 09 	call	0x129c	; 0x129c <faultyRF_Alarm>
void nrf24_initRF_SAFE(uint8_t boardIndex,TransmissionMode initMode){

	initliazeMemory();
	bool successfulRfInit = false;
	
	while(successfulRfInit==false){
    1b68:	99 81       	ldd	r25, Y+1	; 0x01
    1b6a:	81 e0       	ldi	r24, 0x01	; 1
    1b6c:	89 27       	eor	r24, r25
    1b6e:	88 23       	and	r24, r24
    1b70:	49 f7       	brne	.-46     	; 0x1b44 <nrf24_initRF_SAFE+0x18>
		nrf24_init();
		nrf24_config(GENERAL_RF_CHANNEL,32);
		if (nrf24_checkConfig()) { successfulRfInit = true; } else { faultyRF_Alarm(); }
	}
	
	if (initMode==TRANSMIT){
    1b72:	8b 81       	ldd	r24, Y+3	; 0x03
    1b74:	81 30       	cpi	r24, 0x01	; 1
    1b76:	99 f4       	brne	.+38     	; 0x1b9e <nrf24_initRF_SAFE+0x72>
		nrf24_tx_address(CURRENT_BOARD_ADDRESS);
    1b78:	80 91 1b 01 	lds	r24, 0x011B
    1b7c:	90 91 1c 01 	lds	r25, 0x011C
    1b80:	0e 94 9a 0a 	call	0x1534	; 0x1534 <nrf24_tx_address>
		nrf24_rx_address(BOARD_ADDRESS[boardIndex]);
    1b84:	8a 81       	ldd	r24, Y+2	; 0x02
    1b86:	88 2f       	mov	r24, r24
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	88 0f       	add	r24, r24
    1b8c:	99 1f       	adc	r25, r25
    1b8e:	8b 5e       	subi	r24, 0xEB	; 235
    1b90:	9e 4f       	sbci	r25, 0xFE	; 254
    1b92:	fc 01       	movw	r30, r24
    1b94:	80 81       	ld	r24, Z
    1b96:	91 81       	ldd	r25, Z+1	; 0x01
    1b98:	0e 94 81 0a 	call	0x1502	; 0x1502 <nrf24_rx_address>
    1b9c:	12 c0       	rjmp	.+36     	; 0x1bc2 <nrf24_initRF_SAFE+0x96>
		}else{
		nrf24_tx_address(BOARD_ADDRESS[boardIndex]);
    1b9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba0:	88 2f       	mov	r24, r24
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	88 0f       	add	r24, r24
    1ba6:	99 1f       	adc	r25, r25
    1ba8:	8b 5e       	subi	r24, 0xEB	; 235
    1baa:	9e 4f       	sbci	r25, 0xFE	; 254
    1bac:	fc 01       	movw	r30, r24
    1bae:	80 81       	ld	r24, Z
    1bb0:	91 81       	ldd	r25, Z+1	; 0x01
    1bb2:	0e 94 9a 0a 	call	0x1534	; 0x1534 <nrf24_tx_address>
		nrf24_rx_address(CURRENT_BOARD_ADDRESS);
    1bb6:	80 91 1b 01 	lds	r24, 0x011B
    1bba:	90 91 1c 01 	lds	r25, 0x011C
    1bbe:	0e 94 81 0a 	call	0x1502	; 0x1502 <nrf24_rx_address>
	}
	nrf24_powerUpRx();
    1bc2:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <nrf24_powerUpRx>
    1bc6:	0f 90       	pop	r0
    1bc8:	0f 90       	pop	r0
    1bca:	0f 90       	pop	r0
    1bcc:	cf 91       	pop	r28
    1bce:	df 91       	pop	r29
    1bd0:	08 95       	ret

00001bd2 <__cmpsf2>:
    1bd2:	2f d0       	rcall	.+94     	; 0x1c32 <__fp_cmp>
    1bd4:	08 f4       	brcc	.+2      	; 0x1bd8 <__cmpsf2+0x6>
    1bd6:	81 e0       	ldi	r24, 0x01	; 1
    1bd8:	08 95       	ret

00001bda <__fixunssfsi>:
    1bda:	57 d0       	rcall	.+174    	; 0x1c8a <__fp_splitA>
    1bdc:	88 f0       	brcs	.+34     	; 0x1c00 <__fixunssfsi+0x26>
    1bde:	9f 57       	subi	r25, 0x7F	; 127
    1be0:	90 f0       	brcs	.+36     	; 0x1c06 <__fixunssfsi+0x2c>
    1be2:	b9 2f       	mov	r27, r25
    1be4:	99 27       	eor	r25, r25
    1be6:	b7 51       	subi	r27, 0x17	; 23
    1be8:	a0 f0       	brcs	.+40     	; 0x1c12 <__fixunssfsi+0x38>
    1bea:	d1 f0       	breq	.+52     	; 0x1c20 <__fixunssfsi+0x46>
    1bec:	66 0f       	add	r22, r22
    1bee:	77 1f       	adc	r23, r23
    1bf0:	88 1f       	adc	r24, r24
    1bf2:	99 1f       	adc	r25, r25
    1bf4:	1a f0       	brmi	.+6      	; 0x1bfc <__fixunssfsi+0x22>
    1bf6:	ba 95       	dec	r27
    1bf8:	c9 f7       	brne	.-14     	; 0x1bec <__fixunssfsi+0x12>
    1bfa:	12 c0       	rjmp	.+36     	; 0x1c20 <__fixunssfsi+0x46>
    1bfc:	b1 30       	cpi	r27, 0x01	; 1
    1bfe:	81 f0       	breq	.+32     	; 0x1c20 <__fixunssfsi+0x46>
    1c00:	5e d0       	rcall	.+188    	; 0x1cbe <__fp_zero>
    1c02:	b1 e0       	ldi	r27, 0x01	; 1
    1c04:	08 95       	ret
    1c06:	5b c0       	rjmp	.+182    	; 0x1cbe <__fp_zero>
    1c08:	67 2f       	mov	r22, r23
    1c0a:	78 2f       	mov	r23, r24
    1c0c:	88 27       	eor	r24, r24
    1c0e:	b8 5f       	subi	r27, 0xF8	; 248
    1c10:	39 f0       	breq	.+14     	; 0x1c20 <__fixunssfsi+0x46>
    1c12:	b9 3f       	cpi	r27, 0xF9	; 249
    1c14:	cc f3       	brlt	.-14     	; 0x1c08 <__fixunssfsi+0x2e>
    1c16:	86 95       	lsr	r24
    1c18:	77 95       	ror	r23
    1c1a:	67 95       	ror	r22
    1c1c:	b3 95       	inc	r27
    1c1e:	d9 f7       	brne	.-10     	; 0x1c16 <__fixunssfsi+0x3c>
    1c20:	3e f4       	brtc	.+14     	; 0x1c30 <__fixunssfsi+0x56>
    1c22:	90 95       	com	r25
    1c24:	80 95       	com	r24
    1c26:	70 95       	com	r23
    1c28:	61 95       	neg	r22
    1c2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c2c:	8f 4f       	sbci	r24, 0xFF	; 255
    1c2e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c30:	08 95       	ret

00001c32 <__fp_cmp>:
    1c32:	99 0f       	add	r25, r25
    1c34:	00 08       	sbc	r0, r0
    1c36:	55 0f       	add	r21, r21
    1c38:	aa 0b       	sbc	r26, r26
    1c3a:	e0 e8       	ldi	r30, 0x80	; 128
    1c3c:	fe ef       	ldi	r31, 0xFE	; 254
    1c3e:	16 16       	cp	r1, r22
    1c40:	17 06       	cpc	r1, r23
    1c42:	e8 07       	cpc	r30, r24
    1c44:	f9 07       	cpc	r31, r25
    1c46:	c0 f0       	brcs	.+48     	; 0x1c78 <__fp_cmp+0x46>
    1c48:	12 16       	cp	r1, r18
    1c4a:	13 06       	cpc	r1, r19
    1c4c:	e4 07       	cpc	r30, r20
    1c4e:	f5 07       	cpc	r31, r21
    1c50:	98 f0       	brcs	.+38     	; 0x1c78 <__fp_cmp+0x46>
    1c52:	62 1b       	sub	r22, r18
    1c54:	73 0b       	sbc	r23, r19
    1c56:	84 0b       	sbc	r24, r20
    1c58:	95 0b       	sbc	r25, r21
    1c5a:	39 f4       	brne	.+14     	; 0x1c6a <__fp_cmp+0x38>
    1c5c:	0a 26       	eor	r0, r26
    1c5e:	61 f0       	breq	.+24     	; 0x1c78 <__fp_cmp+0x46>
    1c60:	23 2b       	or	r18, r19
    1c62:	24 2b       	or	r18, r20
    1c64:	25 2b       	or	r18, r21
    1c66:	21 f4       	brne	.+8      	; 0x1c70 <__fp_cmp+0x3e>
    1c68:	08 95       	ret
    1c6a:	0a 26       	eor	r0, r26
    1c6c:	09 f4       	brne	.+2      	; 0x1c70 <__fp_cmp+0x3e>
    1c6e:	a1 40       	sbci	r26, 0x01	; 1
    1c70:	a6 95       	lsr	r26
    1c72:	8f ef       	ldi	r24, 0xFF	; 255
    1c74:	81 1d       	adc	r24, r1
    1c76:	81 1d       	adc	r24, r1
    1c78:	08 95       	ret

00001c7a <__fp_split3>:
    1c7a:	57 fd       	sbrc	r21, 7
    1c7c:	90 58       	subi	r25, 0x80	; 128
    1c7e:	44 0f       	add	r20, r20
    1c80:	55 1f       	adc	r21, r21
    1c82:	59 f0       	breq	.+22     	; 0x1c9a <__fp_splitA+0x10>
    1c84:	5f 3f       	cpi	r21, 0xFF	; 255
    1c86:	71 f0       	breq	.+28     	; 0x1ca4 <__fp_splitA+0x1a>
    1c88:	47 95       	ror	r20

00001c8a <__fp_splitA>:
    1c8a:	88 0f       	add	r24, r24
    1c8c:	97 fb       	bst	r25, 7
    1c8e:	99 1f       	adc	r25, r25
    1c90:	61 f0       	breq	.+24     	; 0x1caa <__fp_splitA+0x20>
    1c92:	9f 3f       	cpi	r25, 0xFF	; 255
    1c94:	79 f0       	breq	.+30     	; 0x1cb4 <__fp_splitA+0x2a>
    1c96:	87 95       	ror	r24
    1c98:	08 95       	ret
    1c9a:	12 16       	cp	r1, r18
    1c9c:	13 06       	cpc	r1, r19
    1c9e:	14 06       	cpc	r1, r20
    1ca0:	55 1f       	adc	r21, r21
    1ca2:	f2 cf       	rjmp	.-28     	; 0x1c88 <__fp_split3+0xe>
    1ca4:	46 95       	lsr	r20
    1ca6:	f1 df       	rcall	.-30     	; 0x1c8a <__fp_splitA>
    1ca8:	08 c0       	rjmp	.+16     	; 0x1cba <__fp_splitA+0x30>
    1caa:	16 16       	cp	r1, r22
    1cac:	17 06       	cpc	r1, r23
    1cae:	18 06       	cpc	r1, r24
    1cb0:	99 1f       	adc	r25, r25
    1cb2:	f1 cf       	rjmp	.-30     	; 0x1c96 <__fp_splitA+0xc>
    1cb4:	86 95       	lsr	r24
    1cb6:	71 05       	cpc	r23, r1
    1cb8:	61 05       	cpc	r22, r1
    1cba:	08 94       	sec
    1cbc:	08 95       	ret

00001cbe <__fp_zero>:
    1cbe:	e8 94       	clt

00001cc0 <__fp_szero>:
    1cc0:	bb 27       	eor	r27, r27
    1cc2:	66 27       	eor	r22, r22
    1cc4:	77 27       	eor	r23, r23
    1cc6:	cb 01       	movw	r24, r22
    1cc8:	97 f9       	bld	r25, 7
    1cca:	08 95       	ret

00001ccc <__gesf2>:
    1ccc:	b2 df       	rcall	.-156    	; 0x1c32 <__fp_cmp>
    1cce:	08 f4       	brcc	.+2      	; 0x1cd2 <__gesf2+0x6>
    1cd0:	8f ef       	ldi	r24, 0xFF	; 255
    1cd2:	08 95       	ret

00001cd4 <__mulsf3>:
    1cd4:	0b d0       	rcall	.+22     	; 0x1cec <__mulsf3x>
    1cd6:	78 c0       	rjmp	.+240    	; 0x1dc8 <__fp_round>
    1cd8:	69 d0       	rcall	.+210    	; 0x1dac <__fp_pscA>
    1cda:	28 f0       	brcs	.+10     	; 0x1ce6 <__mulsf3+0x12>
    1cdc:	6e d0       	rcall	.+220    	; 0x1dba <__fp_pscB>
    1cde:	18 f0       	brcs	.+6      	; 0x1ce6 <__mulsf3+0x12>
    1ce0:	95 23       	and	r25, r21
    1ce2:	09 f0       	breq	.+2      	; 0x1ce6 <__mulsf3+0x12>
    1ce4:	5a c0       	rjmp	.+180    	; 0x1d9a <__fp_inf>
    1ce6:	5f c0       	rjmp	.+190    	; 0x1da6 <__fp_nan>
    1ce8:	11 24       	eor	r1, r1
    1cea:	ea cf       	rjmp	.-44     	; 0x1cc0 <__fp_szero>

00001cec <__mulsf3x>:
    1cec:	c6 df       	rcall	.-116    	; 0x1c7a <__fp_split3>
    1cee:	a0 f3       	brcs	.-24     	; 0x1cd8 <__mulsf3+0x4>

00001cf0 <__mulsf3_pse>:
    1cf0:	95 9f       	mul	r25, r21
    1cf2:	d1 f3       	breq	.-12     	; 0x1ce8 <__mulsf3+0x14>
    1cf4:	95 0f       	add	r25, r21
    1cf6:	50 e0       	ldi	r21, 0x00	; 0
    1cf8:	55 1f       	adc	r21, r21
    1cfa:	62 9f       	mul	r22, r18
    1cfc:	f0 01       	movw	r30, r0
    1cfe:	72 9f       	mul	r23, r18
    1d00:	bb 27       	eor	r27, r27
    1d02:	f0 0d       	add	r31, r0
    1d04:	b1 1d       	adc	r27, r1
    1d06:	63 9f       	mul	r22, r19
    1d08:	aa 27       	eor	r26, r26
    1d0a:	f0 0d       	add	r31, r0
    1d0c:	b1 1d       	adc	r27, r1
    1d0e:	aa 1f       	adc	r26, r26
    1d10:	64 9f       	mul	r22, r20
    1d12:	66 27       	eor	r22, r22
    1d14:	b0 0d       	add	r27, r0
    1d16:	a1 1d       	adc	r26, r1
    1d18:	66 1f       	adc	r22, r22
    1d1a:	82 9f       	mul	r24, r18
    1d1c:	22 27       	eor	r18, r18
    1d1e:	b0 0d       	add	r27, r0
    1d20:	a1 1d       	adc	r26, r1
    1d22:	62 1f       	adc	r22, r18
    1d24:	73 9f       	mul	r23, r19
    1d26:	b0 0d       	add	r27, r0
    1d28:	a1 1d       	adc	r26, r1
    1d2a:	62 1f       	adc	r22, r18
    1d2c:	83 9f       	mul	r24, r19
    1d2e:	a0 0d       	add	r26, r0
    1d30:	61 1d       	adc	r22, r1
    1d32:	22 1f       	adc	r18, r18
    1d34:	74 9f       	mul	r23, r20
    1d36:	33 27       	eor	r19, r19
    1d38:	a0 0d       	add	r26, r0
    1d3a:	61 1d       	adc	r22, r1
    1d3c:	23 1f       	adc	r18, r19
    1d3e:	84 9f       	mul	r24, r20
    1d40:	60 0d       	add	r22, r0
    1d42:	21 1d       	adc	r18, r1
    1d44:	82 2f       	mov	r24, r18
    1d46:	76 2f       	mov	r23, r22
    1d48:	6a 2f       	mov	r22, r26
    1d4a:	11 24       	eor	r1, r1
    1d4c:	9f 57       	subi	r25, 0x7F	; 127
    1d4e:	50 40       	sbci	r21, 0x00	; 0
    1d50:	8a f0       	brmi	.+34     	; 0x1d74 <__mulsf3_pse+0x84>
    1d52:	e1 f0       	breq	.+56     	; 0x1d8c <__mulsf3_pse+0x9c>
    1d54:	88 23       	and	r24, r24
    1d56:	4a f0       	brmi	.+18     	; 0x1d6a <__mulsf3_pse+0x7a>
    1d58:	ee 0f       	add	r30, r30
    1d5a:	ff 1f       	adc	r31, r31
    1d5c:	bb 1f       	adc	r27, r27
    1d5e:	66 1f       	adc	r22, r22
    1d60:	77 1f       	adc	r23, r23
    1d62:	88 1f       	adc	r24, r24
    1d64:	91 50       	subi	r25, 0x01	; 1
    1d66:	50 40       	sbci	r21, 0x00	; 0
    1d68:	a9 f7       	brne	.-22     	; 0x1d54 <__mulsf3_pse+0x64>
    1d6a:	9e 3f       	cpi	r25, 0xFE	; 254
    1d6c:	51 05       	cpc	r21, r1
    1d6e:	70 f0       	brcs	.+28     	; 0x1d8c <__mulsf3_pse+0x9c>
    1d70:	14 c0       	rjmp	.+40     	; 0x1d9a <__fp_inf>
    1d72:	a6 cf       	rjmp	.-180    	; 0x1cc0 <__fp_szero>
    1d74:	5f 3f       	cpi	r21, 0xFF	; 255
    1d76:	ec f3       	brlt	.-6      	; 0x1d72 <__mulsf3_pse+0x82>
    1d78:	98 3e       	cpi	r25, 0xE8	; 232
    1d7a:	dc f3       	brlt	.-10     	; 0x1d72 <__mulsf3_pse+0x82>
    1d7c:	86 95       	lsr	r24
    1d7e:	77 95       	ror	r23
    1d80:	67 95       	ror	r22
    1d82:	b7 95       	ror	r27
    1d84:	f7 95       	ror	r31
    1d86:	e7 95       	ror	r30
    1d88:	9f 5f       	subi	r25, 0xFF	; 255
    1d8a:	c1 f7       	brne	.-16     	; 0x1d7c <__mulsf3_pse+0x8c>
    1d8c:	fe 2b       	or	r31, r30
    1d8e:	88 0f       	add	r24, r24
    1d90:	91 1d       	adc	r25, r1
    1d92:	96 95       	lsr	r25
    1d94:	87 95       	ror	r24
    1d96:	97 f9       	bld	r25, 7
    1d98:	08 95       	ret

00001d9a <__fp_inf>:
    1d9a:	97 f9       	bld	r25, 7
    1d9c:	9f 67       	ori	r25, 0x7F	; 127
    1d9e:	80 e8       	ldi	r24, 0x80	; 128
    1da0:	70 e0       	ldi	r23, 0x00	; 0
    1da2:	60 e0       	ldi	r22, 0x00	; 0
    1da4:	08 95       	ret

00001da6 <__fp_nan>:
    1da6:	9f ef       	ldi	r25, 0xFF	; 255
    1da8:	80 ec       	ldi	r24, 0xC0	; 192
    1daa:	08 95       	ret

00001dac <__fp_pscA>:
    1dac:	00 24       	eor	r0, r0
    1dae:	0a 94       	dec	r0
    1db0:	16 16       	cp	r1, r22
    1db2:	17 06       	cpc	r1, r23
    1db4:	18 06       	cpc	r1, r24
    1db6:	09 06       	cpc	r0, r25
    1db8:	08 95       	ret

00001dba <__fp_pscB>:
    1dba:	00 24       	eor	r0, r0
    1dbc:	0a 94       	dec	r0
    1dbe:	12 16       	cp	r1, r18
    1dc0:	13 06       	cpc	r1, r19
    1dc2:	14 06       	cpc	r1, r20
    1dc4:	05 06       	cpc	r0, r21
    1dc6:	08 95       	ret

00001dc8 <__fp_round>:
    1dc8:	09 2e       	mov	r0, r25
    1dca:	03 94       	inc	r0
    1dcc:	00 0c       	add	r0, r0
    1dce:	11 f4       	brne	.+4      	; 0x1dd4 <__fp_round+0xc>
    1dd0:	88 23       	and	r24, r24
    1dd2:	52 f0       	brmi	.+20     	; 0x1de8 <__fp_round+0x20>
    1dd4:	bb 0f       	add	r27, r27
    1dd6:	40 f4       	brcc	.+16     	; 0x1de8 <__fp_round+0x20>
    1dd8:	bf 2b       	or	r27, r31
    1dda:	11 f4       	brne	.+4      	; 0x1de0 <__fp_round+0x18>
    1ddc:	60 ff       	sbrs	r22, 0
    1dde:	04 c0       	rjmp	.+8      	; 0x1de8 <__fp_round+0x20>
    1de0:	6f 5f       	subi	r22, 0xFF	; 255
    1de2:	7f 4f       	sbci	r23, 0xFF	; 255
    1de4:	8f 4f       	sbci	r24, 0xFF	; 255
    1de6:	9f 4f       	sbci	r25, 0xFF	; 255
    1de8:	08 95       	ret

00001dea <calloc>:
    1dea:	ef 92       	push	r14
    1dec:	ff 92       	push	r15
    1dee:	0f 93       	push	r16
    1df0:	1f 93       	push	r17
    1df2:	cf 93       	push	r28
    1df4:	df 93       	push	r29
    1df6:	68 9f       	mul	r22, r24
    1df8:	80 01       	movw	r16, r0
    1dfa:	69 9f       	mul	r22, r25
    1dfc:	10 0d       	add	r17, r0
    1dfe:	78 9f       	mul	r23, r24
    1e00:	10 0d       	add	r17, r0
    1e02:	11 24       	eor	r1, r1
    1e04:	c8 01       	movw	r24, r16
    1e06:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <malloc>
    1e0a:	e8 2e       	mov	r14, r24
    1e0c:	e7 01       	movw	r28, r14
    1e0e:	7e 01       	movw	r14, r28
    1e10:	f9 2e       	mov	r15, r25
    1e12:	e7 01       	movw	r28, r14
    1e14:	20 97       	sbiw	r28, 0x00	; 0
    1e16:	31 f0       	breq	.+12     	; 0x1e24 <calloc+0x3a>
    1e18:	8e 2d       	mov	r24, r14
    1e1a:	60 e0       	ldi	r22, 0x00	; 0
    1e1c:	70 e0       	ldi	r23, 0x00	; 0
    1e1e:	a8 01       	movw	r20, r16
    1e20:	0e 94 20 11 	call	0x2240	; 0x2240 <memset>
    1e24:	7e 01       	movw	r14, r28
    1e26:	ce 01       	movw	r24, r28
    1e28:	cd b7       	in	r28, 0x3d	; 61
    1e2a:	de b7       	in	r29, 0x3e	; 62
    1e2c:	e6 e0       	ldi	r30, 0x06	; 6
    1e2e:	0c 94 4f 11 	jmp	0x229e	; 0x229e <__epilogue_restores__+0x18>

00001e32 <malloc>:
    1e32:	cf 93       	push	r28
    1e34:	df 93       	push	r29
    1e36:	82 30       	cpi	r24, 0x02	; 2
    1e38:	91 05       	cpc	r25, r1
    1e3a:	10 f4       	brcc	.+4      	; 0x1e40 <malloc+0xe>
    1e3c:	82 e0       	ldi	r24, 0x02	; 2
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	e0 91 5c 01 	lds	r30, 0x015C
    1e44:	f0 91 5d 01 	lds	r31, 0x015D
    1e48:	40 e0       	ldi	r20, 0x00	; 0
    1e4a:	50 e0       	ldi	r21, 0x00	; 0
    1e4c:	20 e0       	ldi	r18, 0x00	; 0
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	26 c0       	rjmp	.+76     	; 0x1e9e <malloc+0x6c>
    1e52:	60 81       	ld	r22, Z
    1e54:	71 81       	ldd	r23, Z+1	; 0x01
    1e56:	68 17       	cp	r22, r24
    1e58:	79 07       	cpc	r23, r25
    1e5a:	e0 f0       	brcs	.+56     	; 0x1e94 <malloc+0x62>
    1e5c:	68 17       	cp	r22, r24
    1e5e:	79 07       	cpc	r23, r25
    1e60:	81 f4       	brne	.+32     	; 0x1e82 <malloc+0x50>
    1e62:	82 81       	ldd	r24, Z+2	; 0x02
    1e64:	93 81       	ldd	r25, Z+3	; 0x03
    1e66:	21 15       	cp	r18, r1
    1e68:	31 05       	cpc	r19, r1
    1e6a:	31 f0       	breq	.+12     	; 0x1e78 <malloc+0x46>
    1e6c:	d9 01       	movw	r26, r18
    1e6e:	13 96       	adiw	r26, 0x03	; 3
    1e70:	9c 93       	st	X, r25
    1e72:	8e 93       	st	-X, r24
    1e74:	12 97       	sbiw	r26, 0x02	; 2
    1e76:	2b c0       	rjmp	.+86     	; 0x1ece <malloc+0x9c>
    1e78:	90 93 5d 01 	sts	0x015D, r25
    1e7c:	80 93 5c 01 	sts	0x015C, r24
    1e80:	26 c0       	rjmp	.+76     	; 0x1ece <malloc+0x9c>
    1e82:	41 15       	cp	r20, r1
    1e84:	51 05       	cpc	r21, r1
    1e86:	19 f0       	breq	.+6      	; 0x1e8e <malloc+0x5c>
    1e88:	64 17       	cp	r22, r20
    1e8a:	75 07       	cpc	r23, r21
    1e8c:	18 f4       	brcc	.+6      	; 0x1e94 <malloc+0x62>
    1e8e:	ab 01       	movw	r20, r22
    1e90:	e9 01       	movw	r28, r18
    1e92:	df 01       	movw	r26, r30
    1e94:	9f 01       	movw	r18, r30
    1e96:	72 81       	ldd	r23, Z+2	; 0x02
    1e98:	63 81       	ldd	r22, Z+3	; 0x03
    1e9a:	e7 2f       	mov	r30, r23
    1e9c:	f6 2f       	mov	r31, r22
    1e9e:	30 97       	sbiw	r30, 0x00	; 0
    1ea0:	c1 f6       	brne	.-80     	; 0x1e52 <malloc+0x20>
    1ea2:	41 15       	cp	r20, r1
    1ea4:	51 05       	cpc	r21, r1
    1ea6:	01 f1       	breq	.+64     	; 0x1ee8 <malloc+0xb6>
    1ea8:	48 1b       	sub	r20, r24
    1eaa:	59 0b       	sbc	r21, r25
    1eac:	44 30       	cpi	r20, 0x04	; 4
    1eae:	51 05       	cpc	r21, r1
    1eb0:	80 f4       	brcc	.+32     	; 0x1ed2 <malloc+0xa0>
    1eb2:	12 96       	adiw	r26, 0x02	; 2
    1eb4:	8d 91       	ld	r24, X+
    1eb6:	9c 91       	ld	r25, X
    1eb8:	13 97       	sbiw	r26, 0x03	; 3
    1eba:	20 97       	sbiw	r28, 0x00	; 0
    1ebc:	19 f0       	breq	.+6      	; 0x1ec4 <malloc+0x92>
    1ebe:	9b 83       	std	Y+3, r25	; 0x03
    1ec0:	8a 83       	std	Y+2, r24	; 0x02
    1ec2:	04 c0       	rjmp	.+8      	; 0x1ecc <malloc+0x9a>
    1ec4:	90 93 5d 01 	sts	0x015D, r25
    1ec8:	80 93 5c 01 	sts	0x015C, r24
    1ecc:	fd 01       	movw	r30, r26
    1ece:	32 96       	adiw	r30, 0x02	; 2
    1ed0:	46 c0       	rjmp	.+140    	; 0x1f5e <malloc+0x12c>
    1ed2:	fd 01       	movw	r30, r26
    1ed4:	e4 0f       	add	r30, r20
    1ed6:	f5 1f       	adc	r31, r21
    1ed8:	81 93       	st	Z+, r24
    1eda:	91 93       	st	Z+, r25
    1edc:	42 50       	subi	r20, 0x02	; 2
    1ede:	50 40       	sbci	r21, 0x00	; 0
    1ee0:	11 96       	adiw	r26, 0x01	; 1
    1ee2:	5c 93       	st	X, r21
    1ee4:	4e 93       	st	-X, r20
    1ee6:	3b c0       	rjmp	.+118    	; 0x1f5e <malloc+0x12c>
    1ee8:	20 91 5a 01 	lds	r18, 0x015A
    1eec:	30 91 5b 01 	lds	r19, 0x015B
    1ef0:	21 15       	cp	r18, r1
    1ef2:	31 05       	cpc	r19, r1
    1ef4:	41 f4       	brne	.+16     	; 0x1f06 <malloc+0xd4>
    1ef6:	20 91 02 01 	lds	r18, 0x0102
    1efa:	30 91 03 01 	lds	r19, 0x0103
    1efe:	30 93 5b 01 	sts	0x015B, r19
    1f02:	20 93 5a 01 	sts	0x015A, r18
    1f06:	20 91 04 01 	lds	r18, 0x0104
    1f0a:	30 91 05 01 	lds	r19, 0x0105
    1f0e:	21 15       	cp	r18, r1
    1f10:	31 05       	cpc	r19, r1
    1f12:	41 f4       	brne	.+16     	; 0x1f24 <malloc+0xf2>
    1f14:	2d b7       	in	r18, 0x3d	; 61
    1f16:	3e b7       	in	r19, 0x3e	; 62
    1f18:	40 91 00 01 	lds	r20, 0x0100
    1f1c:	50 91 01 01 	lds	r21, 0x0101
    1f20:	24 1b       	sub	r18, r20
    1f22:	35 0b       	sbc	r19, r21
    1f24:	e0 91 5a 01 	lds	r30, 0x015A
    1f28:	f0 91 5b 01 	lds	r31, 0x015B
    1f2c:	e2 17       	cp	r30, r18
    1f2e:	f3 07       	cpc	r31, r19
    1f30:	a0 f4       	brcc	.+40     	; 0x1f5a <malloc+0x128>
    1f32:	2e 1b       	sub	r18, r30
    1f34:	3f 0b       	sbc	r19, r31
    1f36:	28 17       	cp	r18, r24
    1f38:	39 07       	cpc	r19, r25
    1f3a:	78 f0       	brcs	.+30     	; 0x1f5a <malloc+0x128>
    1f3c:	ac 01       	movw	r20, r24
    1f3e:	4e 5f       	subi	r20, 0xFE	; 254
    1f40:	5f 4f       	sbci	r21, 0xFF	; 255
    1f42:	24 17       	cp	r18, r20
    1f44:	35 07       	cpc	r19, r21
    1f46:	48 f0       	brcs	.+18     	; 0x1f5a <malloc+0x128>
    1f48:	4e 0f       	add	r20, r30
    1f4a:	5f 1f       	adc	r21, r31
    1f4c:	50 93 5b 01 	sts	0x015B, r21
    1f50:	40 93 5a 01 	sts	0x015A, r20
    1f54:	81 93       	st	Z+, r24
    1f56:	91 93       	st	Z+, r25
    1f58:	02 c0       	rjmp	.+4      	; 0x1f5e <malloc+0x12c>
    1f5a:	e0 e0       	ldi	r30, 0x00	; 0
    1f5c:	f0 e0       	ldi	r31, 0x00	; 0
    1f5e:	cf 01       	movw	r24, r30
    1f60:	df 91       	pop	r29
    1f62:	cf 91       	pop	r28
    1f64:	08 95       	ret

00001f66 <free>:
    1f66:	cf 93       	push	r28
    1f68:	df 93       	push	r29
    1f6a:	00 97       	sbiw	r24, 0x00	; 0
    1f6c:	09 f4       	brne	.+2      	; 0x1f70 <free+0xa>
    1f6e:	91 c0       	rjmp	.+290    	; 0x2092 <free+0x12c>
    1f70:	fc 01       	movw	r30, r24
    1f72:	32 97       	sbiw	r30, 0x02	; 2
    1f74:	13 82       	std	Z+3, r1	; 0x03
    1f76:	12 82       	std	Z+2, r1	; 0x02
    1f78:	60 91 5c 01 	lds	r22, 0x015C
    1f7c:	70 91 5d 01 	lds	r23, 0x015D
    1f80:	61 15       	cp	r22, r1
    1f82:	71 05       	cpc	r23, r1
    1f84:	81 f4       	brne	.+32     	; 0x1fa6 <free+0x40>
    1f86:	20 81       	ld	r18, Z
    1f88:	31 81       	ldd	r19, Z+1	; 0x01
    1f8a:	28 0f       	add	r18, r24
    1f8c:	39 1f       	adc	r19, r25
    1f8e:	80 91 5a 01 	lds	r24, 0x015A
    1f92:	90 91 5b 01 	lds	r25, 0x015B
    1f96:	82 17       	cp	r24, r18
    1f98:	93 07       	cpc	r25, r19
    1f9a:	99 f5       	brne	.+102    	; 0x2002 <free+0x9c>
    1f9c:	f0 93 5b 01 	sts	0x015B, r31
    1fa0:	e0 93 5a 01 	sts	0x015A, r30
    1fa4:	76 c0       	rjmp	.+236    	; 0x2092 <free+0x12c>
    1fa6:	db 01       	movw	r26, r22
    1fa8:	80 e0       	ldi	r24, 0x00	; 0
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	02 c0       	rjmp	.+4      	; 0x1fb2 <free+0x4c>
    1fae:	cd 01       	movw	r24, r26
    1fb0:	d9 01       	movw	r26, r18
    1fb2:	ae 17       	cp	r26, r30
    1fb4:	bf 07       	cpc	r27, r31
    1fb6:	48 f4       	brcc	.+18     	; 0x1fca <free+0x64>
    1fb8:	12 96       	adiw	r26, 0x02	; 2
    1fba:	2d 91       	ld	r18, X+
    1fbc:	3c 91       	ld	r19, X
    1fbe:	13 97       	sbiw	r26, 0x03	; 3
    1fc0:	21 15       	cp	r18, r1
    1fc2:	31 05       	cpc	r19, r1
    1fc4:	a1 f7       	brne	.-24     	; 0x1fae <free+0x48>
    1fc6:	cd 01       	movw	r24, r26
    1fc8:	21 c0       	rjmp	.+66     	; 0x200c <free+0xa6>
    1fca:	b3 83       	std	Z+3, r27	; 0x03
    1fcc:	a2 83       	std	Z+2, r26	; 0x02
    1fce:	ef 01       	movw	r28, r30
    1fd0:	49 91       	ld	r20, Y+
    1fd2:	59 91       	ld	r21, Y+
    1fd4:	9e 01       	movw	r18, r28
    1fd6:	24 0f       	add	r18, r20
    1fd8:	35 1f       	adc	r19, r21
    1fda:	a2 17       	cp	r26, r18
    1fdc:	b3 07       	cpc	r27, r19
    1fde:	79 f4       	brne	.+30     	; 0x1ffe <free+0x98>
    1fe0:	2d 91       	ld	r18, X+
    1fe2:	3c 91       	ld	r19, X
    1fe4:	11 97       	sbiw	r26, 0x01	; 1
    1fe6:	24 0f       	add	r18, r20
    1fe8:	35 1f       	adc	r19, r21
    1fea:	2e 5f       	subi	r18, 0xFE	; 254
    1fec:	3f 4f       	sbci	r19, 0xFF	; 255
    1fee:	31 83       	std	Z+1, r19	; 0x01
    1ff0:	20 83       	st	Z, r18
    1ff2:	12 96       	adiw	r26, 0x02	; 2
    1ff4:	2d 91       	ld	r18, X+
    1ff6:	3c 91       	ld	r19, X
    1ff8:	13 97       	sbiw	r26, 0x03	; 3
    1ffa:	33 83       	std	Z+3, r19	; 0x03
    1ffc:	22 83       	std	Z+2, r18	; 0x02
    1ffe:	00 97       	sbiw	r24, 0x00	; 0
    2000:	29 f4       	brne	.+10     	; 0x200c <free+0xa6>
    2002:	f0 93 5d 01 	sts	0x015D, r31
    2006:	e0 93 5c 01 	sts	0x015C, r30
    200a:	43 c0       	rjmp	.+134    	; 0x2092 <free+0x12c>
    200c:	dc 01       	movw	r26, r24
    200e:	13 96       	adiw	r26, 0x03	; 3
    2010:	fc 93       	st	X, r31
    2012:	ee 93       	st	-X, r30
    2014:	12 97       	sbiw	r26, 0x02	; 2
    2016:	4d 91       	ld	r20, X+
    2018:	5d 91       	ld	r21, X+
    201a:	a4 0f       	add	r26, r20
    201c:	b5 1f       	adc	r27, r21
    201e:	ea 17       	cp	r30, r26
    2020:	fb 07       	cpc	r31, r27
    2022:	69 f4       	brne	.+26     	; 0x203e <free+0xd8>
    2024:	20 81       	ld	r18, Z
    2026:	31 81       	ldd	r19, Z+1	; 0x01
    2028:	24 0f       	add	r18, r20
    202a:	35 1f       	adc	r19, r21
    202c:	2e 5f       	subi	r18, 0xFE	; 254
    202e:	3f 4f       	sbci	r19, 0xFF	; 255
    2030:	ec 01       	movw	r28, r24
    2032:	39 83       	std	Y+1, r19	; 0x01
    2034:	28 83       	st	Y, r18
    2036:	22 81       	ldd	r18, Z+2	; 0x02
    2038:	33 81       	ldd	r19, Z+3	; 0x03
    203a:	3b 83       	std	Y+3, r19	; 0x03
    203c:	2a 83       	std	Y+2, r18	; 0x02
    203e:	e0 e0       	ldi	r30, 0x00	; 0
    2040:	f0 e0       	ldi	r31, 0x00	; 0
    2042:	02 c0       	rjmp	.+4      	; 0x2048 <free+0xe2>
    2044:	fb 01       	movw	r30, r22
    2046:	bc 01       	movw	r22, r24
    2048:	db 01       	movw	r26, r22
    204a:	12 96       	adiw	r26, 0x02	; 2
    204c:	8d 91       	ld	r24, X+
    204e:	9c 91       	ld	r25, X
    2050:	13 97       	sbiw	r26, 0x03	; 3
    2052:	00 97       	sbiw	r24, 0x00	; 0
    2054:	b9 f7       	brne	.-18     	; 0x2044 <free+0xde>
    2056:	9b 01       	movw	r18, r22
    2058:	2e 5f       	subi	r18, 0xFE	; 254
    205a:	3f 4f       	sbci	r19, 0xFF	; 255
    205c:	8d 91       	ld	r24, X+
    205e:	9c 91       	ld	r25, X
    2060:	11 97       	sbiw	r26, 0x01	; 1
    2062:	82 0f       	add	r24, r18
    2064:	93 1f       	adc	r25, r19
    2066:	40 91 5a 01 	lds	r20, 0x015A
    206a:	50 91 5b 01 	lds	r21, 0x015B
    206e:	48 17       	cp	r20, r24
    2070:	59 07       	cpc	r21, r25
    2072:	79 f4       	brne	.+30     	; 0x2092 <free+0x12c>
    2074:	30 97       	sbiw	r30, 0x00	; 0
    2076:	29 f4       	brne	.+10     	; 0x2082 <free+0x11c>
    2078:	10 92 5d 01 	sts	0x015D, r1
    207c:	10 92 5c 01 	sts	0x015C, r1
    2080:	02 c0       	rjmp	.+4      	; 0x2086 <free+0x120>
    2082:	13 82       	std	Z+3, r1	; 0x03
    2084:	12 82       	std	Z+2, r1	; 0x02
    2086:	22 50       	subi	r18, 0x02	; 2
    2088:	30 40       	sbci	r19, 0x00	; 0
    208a:	30 93 5b 01 	sts	0x015B, r19
    208e:	20 93 5a 01 	sts	0x015A, r18
    2092:	df 91       	pop	r29
    2094:	cf 91       	pop	r28
    2096:	08 95       	ret

00002098 <realloc>:
    2098:	a0 e0       	ldi	r26, 0x00	; 0
    209a:	b0 e0       	ldi	r27, 0x00	; 0
    209c:	e2 e5       	ldi	r30, 0x52	; 82
    209e:	f0 e1       	ldi	r31, 0x10	; 16
    20a0:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__prologue_saves__+0xc>
    20a4:	8c 01       	movw	r16, r24
    20a6:	cb 01       	movw	r24, r22
    20a8:	01 15       	cp	r16, r1
    20aa:	11 05       	cpc	r17, r1
    20ac:	29 f4       	brne	.+10     	; 0x20b8 <realloc+0x20>
    20ae:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <malloc>
    20b2:	08 2f       	mov	r16, r24
    20b4:	19 2f       	mov	r17, r25
    20b6:	b5 c0       	rjmp	.+362    	; 0x2222 <realloc+0x18a>
    20b8:	d8 01       	movw	r26, r16
    20ba:	12 97       	sbiw	r26, 0x02	; 2
    20bc:	98 01       	movw	r18, r16
    20be:	26 0f       	add	r18, r22
    20c0:	37 1f       	adc	r19, r23
    20c2:	2a 17       	cp	r18, r26
    20c4:	3b 07       	cpc	r19, r27
    20c6:	08 f4       	brcc	.+2      	; 0x20ca <realloc+0x32>
    20c8:	aa c0       	rjmp	.+340    	; 0x221e <realloc+0x186>
    20ca:	ed 90       	ld	r14, X+
    20cc:	fc 90       	ld	r15, X
    20ce:	11 97       	sbiw	r26, 0x01	; 1
    20d0:	e6 16       	cp	r14, r22
    20d2:	f7 06       	cpc	r15, r23
    20d4:	d0 f0       	brcs	.+52     	; 0x210a <realloc+0x72>
    20d6:	45 e0       	ldi	r20, 0x05	; 5
    20d8:	e4 16       	cp	r14, r20
    20da:	f1 04       	cpc	r15, r1
    20dc:	08 f4       	brcc	.+2      	; 0x20e0 <realloc+0x48>
    20de:	a1 c0       	rjmp	.+322    	; 0x2222 <realloc+0x18a>
    20e0:	a7 01       	movw	r20, r14
    20e2:	44 50       	subi	r20, 0x04	; 4
    20e4:	50 40       	sbci	r21, 0x00	; 0
    20e6:	46 17       	cp	r20, r22
    20e8:	57 07       	cpc	r21, r23
    20ea:	08 f4       	brcc	.+2      	; 0x20ee <realloc+0x56>
    20ec:	9a c0       	rjmp	.+308    	; 0x2222 <realloc+0x18a>
    20ee:	a7 01       	movw	r20, r14
    20f0:	42 50       	subi	r20, 0x02	; 2
    20f2:	50 40       	sbci	r21, 0x00	; 0
    20f4:	46 1b       	sub	r20, r22
    20f6:	57 0b       	sbc	r21, r23
    20f8:	f9 01       	movw	r30, r18
    20fa:	41 93       	st	Z+, r20
    20fc:	51 93       	st	Z+, r21
    20fe:	6d 93       	st	X+, r22
    2100:	7c 93       	st	X, r23
    2102:	cf 01       	movw	r24, r30
    2104:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <free>
    2108:	8c c0       	rjmp	.+280    	; 0x2222 <realloc+0x18a>
    210a:	5b 01       	movw	r10, r22
    210c:	ae 18       	sub	r10, r14
    210e:	bf 08       	sbc	r11, r15
    2110:	48 01       	movw	r8, r16
    2112:	8e 0c       	add	r8, r14
    2114:	9f 1c       	adc	r9, r15
    2116:	e0 91 5c 01 	lds	r30, 0x015C
    211a:	f0 91 5d 01 	lds	r31, 0x015D
    211e:	cc 24       	eor	r12, r12
    2120:	dd 24       	eor	r13, r13
    2122:	c0 e0       	ldi	r28, 0x00	; 0
    2124:	d0 e0       	ldi	r29, 0x00	; 0
    2126:	41 c0       	rjmp	.+130    	; 0x21aa <realloc+0x112>
    2128:	e8 15       	cp	r30, r8
    212a:	f9 05       	cpc	r31, r9
    212c:	99 f5       	brne	.+102    	; 0x2194 <realloc+0xfc>
    212e:	60 81       	ld	r22, Z
    2130:	71 81       	ldd	r23, Z+1	; 0x01
    2132:	ab 01       	movw	r20, r22
    2134:	4e 5f       	subi	r20, 0xFE	; 254
    2136:	5f 4f       	sbci	r21, 0xFF	; 255
    2138:	4a 15       	cp	r20, r10
    213a:	5b 05       	cpc	r21, r11
    213c:	58 f1       	brcs	.+86     	; 0x2194 <realloc+0xfc>
    213e:	ab 01       	movw	r20, r22
    2140:	4a 19       	sub	r20, r10
    2142:	5b 09       	sbc	r21, r11
    2144:	cc 24       	eor	r12, r12
    2146:	dd 24       	eor	r13, r13
    2148:	68 94       	set
    214a:	c1 f8       	bld	r12, 1
    214c:	c4 0e       	add	r12, r20
    214e:	d5 1e       	adc	r13, r21
    2150:	82 80       	ldd	r8, Z+2	; 0x02
    2152:	a3 80       	ldd	r10, Z+3	; 0x03
    2154:	e5 e0       	ldi	r30, 0x05	; 5
    2156:	ce 16       	cp	r12, r30
    2158:	d1 04       	cpc	r13, r1
    215a:	48 f0       	brcs	.+18     	; 0x216e <realloc+0xd6>
    215c:	f9 01       	movw	r30, r18
    215e:	82 82       	std	Z+2, r8	; 0x02
    2160:	a3 82       	std	Z+3, r10	; 0x03
    2162:	51 83       	std	Z+1, r21	; 0x01
    2164:	40 83       	st	Z, r20
    2166:	11 96       	adiw	r26, 0x01	; 1
    2168:	9c 93       	st	X, r25
    216a:	8e 93       	st	-X, r24
    216c:	09 c0       	rjmp	.+18     	; 0x2180 <realloc+0xe8>
    216e:	c7 01       	movw	r24, r14
    2170:	02 96       	adiw	r24, 0x02	; 2
    2172:	86 0f       	add	r24, r22
    2174:	97 1f       	adc	r25, r23
    2176:	11 96       	adiw	r26, 0x01	; 1
    2178:	9c 93       	st	X, r25
    217a:	8e 93       	st	-X, r24
    217c:	e8 2d       	mov	r30, r8
    217e:	fa 2d       	mov	r31, r10
    2180:	20 97       	sbiw	r28, 0x00	; 0
    2182:	19 f0       	breq	.+6      	; 0x218a <realloc+0xf2>
    2184:	fb 83       	std	Y+3, r31	; 0x03
    2186:	ea 83       	std	Y+2, r30	; 0x02
    2188:	4c c0       	rjmp	.+152    	; 0x2222 <realloc+0x18a>
    218a:	f0 93 5d 01 	sts	0x015D, r31
    218e:	e0 93 5c 01 	sts	0x015C, r30
    2192:	47 c0       	rjmp	.+142    	; 0x2222 <realloc+0x18a>
    2194:	40 81       	ld	r20, Z
    2196:	51 81       	ldd	r21, Z+1	; 0x01
    2198:	c4 16       	cp	r12, r20
    219a:	d5 06       	cpc	r13, r21
    219c:	08 f4       	brcc	.+2      	; 0x21a0 <realloc+0x108>
    219e:	6a 01       	movw	r12, r20
    21a0:	ef 01       	movw	r28, r30
    21a2:	52 81       	ldd	r21, Z+2	; 0x02
    21a4:	43 81       	ldd	r20, Z+3	; 0x03
    21a6:	e5 2f       	mov	r30, r21
    21a8:	f4 2f       	mov	r31, r20
    21aa:	30 97       	sbiw	r30, 0x00	; 0
    21ac:	09 f0       	breq	.+2      	; 0x21b0 <realloc+0x118>
    21ae:	bc cf       	rjmp	.-136    	; 0x2128 <realloc+0x90>
    21b0:	40 91 5a 01 	lds	r20, 0x015A
    21b4:	50 91 5b 01 	lds	r21, 0x015B
    21b8:	48 15       	cp	r20, r8
    21ba:	59 05       	cpc	r21, r9
    21bc:	e9 f4       	brne	.+58     	; 0x21f8 <realloc+0x160>
    21be:	c8 16       	cp	r12, r24
    21c0:	d9 06       	cpc	r13, r25
    21c2:	d0 f4       	brcc	.+52     	; 0x21f8 <realloc+0x160>
    21c4:	40 91 04 01 	lds	r20, 0x0104
    21c8:	50 91 05 01 	lds	r21, 0x0105
    21cc:	41 15       	cp	r20, r1
    21ce:	51 05       	cpc	r21, r1
    21d0:	41 f4       	brne	.+16     	; 0x21e2 <realloc+0x14a>
    21d2:	4d b7       	in	r20, 0x3d	; 61
    21d4:	5e b7       	in	r21, 0x3e	; 62
    21d6:	60 91 00 01 	lds	r22, 0x0100
    21da:	70 91 01 01 	lds	r23, 0x0101
    21de:	46 1b       	sub	r20, r22
    21e0:	57 0b       	sbc	r21, r23
    21e2:	24 17       	cp	r18, r20
    21e4:	35 07       	cpc	r19, r21
    21e6:	d8 f4       	brcc	.+54     	; 0x221e <realloc+0x186>
    21e8:	30 93 5b 01 	sts	0x015B, r19
    21ec:	20 93 5a 01 	sts	0x015A, r18
    21f0:	11 96       	adiw	r26, 0x01	; 1
    21f2:	9c 93       	st	X, r25
    21f4:	8e 93       	st	-X, r24
    21f6:	15 c0       	rjmp	.+42     	; 0x2222 <realloc+0x18a>
    21f8:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <malloc>
    21fc:	c8 2e       	mov	r12, r24
    21fe:	e6 01       	movw	r28, r12
    2200:	6e 01       	movw	r12, r28
    2202:	d9 2e       	mov	r13, r25
    2204:	e6 01       	movw	r28, r12
    2206:	20 97       	sbiw	r28, 0x00	; 0
    2208:	51 f0       	breq	.+20     	; 0x221e <realloc+0x186>
    220a:	8c 2d       	mov	r24, r12
    220c:	b8 01       	movw	r22, r16
    220e:	a7 01       	movw	r20, r14
    2210:	0e 94 17 11 	call	0x222e	; 0x222e <memcpy>
    2214:	c8 01       	movw	r24, r16
    2216:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <free>
    221a:	86 01       	movw	r16, r12
    221c:	02 c0       	rjmp	.+4      	; 0x2222 <realloc+0x18a>
    221e:	00 e0       	ldi	r16, 0x00	; 0
    2220:	10 e0       	ldi	r17, 0x00	; 0
    2222:	c8 01       	movw	r24, r16
    2224:	cd b7       	in	r28, 0x3d	; 61
    2226:	de b7       	in	r29, 0x3e	; 62
    2228:	ec e0       	ldi	r30, 0x0C	; 12
    222a:	0c 94 49 11 	jmp	0x2292	; 0x2292 <__epilogue_restores__+0xc>

0000222e <memcpy>:
    222e:	fb 01       	movw	r30, r22
    2230:	dc 01       	movw	r26, r24
    2232:	02 c0       	rjmp	.+4      	; 0x2238 <memcpy+0xa>
    2234:	01 90       	ld	r0, Z+
    2236:	0d 92       	st	X+, r0
    2238:	41 50       	subi	r20, 0x01	; 1
    223a:	50 40       	sbci	r21, 0x00	; 0
    223c:	d8 f7       	brcc	.-10     	; 0x2234 <memcpy+0x6>
    223e:	08 95       	ret

00002240 <memset>:
    2240:	dc 01       	movw	r26, r24
    2242:	01 c0       	rjmp	.+2      	; 0x2246 <memset+0x6>
    2244:	6d 93       	st	X+, r22
    2246:	41 50       	subi	r20, 0x01	; 1
    2248:	50 40       	sbci	r21, 0x00	; 0
    224a:	e0 f7       	brcc	.-8      	; 0x2244 <memset+0x4>
    224c:	08 95       	ret

0000224e <__prologue_saves__>:
    224e:	2f 92       	push	r2
    2250:	3f 92       	push	r3
    2252:	4f 92       	push	r4
    2254:	5f 92       	push	r5
    2256:	6f 92       	push	r6
    2258:	7f 92       	push	r7
    225a:	8f 92       	push	r8
    225c:	9f 92       	push	r9
    225e:	af 92       	push	r10
    2260:	bf 92       	push	r11
    2262:	cf 92       	push	r12
    2264:	df 92       	push	r13
    2266:	ef 92       	push	r14
    2268:	ff 92       	push	r15
    226a:	0f 93       	push	r16
    226c:	1f 93       	push	r17
    226e:	cf 93       	push	r28
    2270:	df 93       	push	r29
    2272:	cd b7       	in	r28, 0x3d	; 61
    2274:	de b7       	in	r29, 0x3e	; 62
    2276:	ca 1b       	sub	r28, r26
    2278:	db 0b       	sbc	r29, r27
    227a:	0f b6       	in	r0, 0x3f	; 63
    227c:	f8 94       	cli
    227e:	de bf       	out	0x3e, r29	; 62
    2280:	0f be       	out	0x3f, r0	; 63
    2282:	cd bf       	out	0x3d, r28	; 61
    2284:	09 94       	ijmp

00002286 <__epilogue_restores__>:
    2286:	2a 88       	ldd	r2, Y+18	; 0x12
    2288:	39 88       	ldd	r3, Y+17	; 0x11
    228a:	48 88       	ldd	r4, Y+16	; 0x10
    228c:	5f 84       	ldd	r5, Y+15	; 0x0f
    228e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2290:	7d 84       	ldd	r7, Y+13	; 0x0d
    2292:	8c 84       	ldd	r8, Y+12	; 0x0c
    2294:	9b 84       	ldd	r9, Y+11	; 0x0b
    2296:	aa 84       	ldd	r10, Y+10	; 0x0a
    2298:	b9 84       	ldd	r11, Y+9	; 0x09
    229a:	c8 84       	ldd	r12, Y+8	; 0x08
    229c:	df 80       	ldd	r13, Y+7	; 0x07
    229e:	ee 80       	ldd	r14, Y+6	; 0x06
    22a0:	fd 80       	ldd	r15, Y+5	; 0x05
    22a2:	0c 81       	ldd	r16, Y+4	; 0x04
    22a4:	1b 81       	ldd	r17, Y+3	; 0x03
    22a6:	aa 81       	ldd	r26, Y+2	; 0x02
    22a8:	b9 81       	ldd	r27, Y+1	; 0x01
    22aa:	ce 0f       	add	r28, r30
    22ac:	d1 1d       	adc	r29, r1
    22ae:	0f b6       	in	r0, 0x3f	; 63
    22b0:	f8 94       	cli
    22b2:	de bf       	out	0x3e, r29	; 62
    22b4:	0f be       	out	0x3f, r0	; 63
    22b6:	cd bf       	out	0x3d, r28	; 61
    22b8:	ed 01       	movw	r28, r26
    22ba:	08 95       	ret

000022bc <_exit>:
    22bc:	f8 94       	cli

000022be <__stop_program>:
    22be:	ff cf       	rjmp	.-2      	; 0x22be <__stop_program>
