
EEPROM_EXAMPLE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000144  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800100  00800100  000001b8  2**0
                  ALLOC
  2 .stab         00000870  00000000  00000000  000001b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000182  00000000  00000000  00000a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00000baa  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000027  00000000  00000000  00000bca  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000001bb  00000000  00000000  00000bf1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000013e  00000000  00000000  00000dac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001f0  00000000  00000000  00000eea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000020  00000000  00000000  000010dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000132  00000000  00000000  000010fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000048  00000000  00000000  0000122e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000038  00000000  00000000  00001276  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000010  00000000  00000000  000012ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 a0 00 	jmp	0x140	; 0x140 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:

uint8_t counter = 0;

int main(void)
{
    DDRD = 0xFF;
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	8a b9       	out	0x0a, r24	; 10
	DDRC = 0x00;
  94:	17 b8       	out	0x07, r1	; 7
	PORTC = 0b00000011;
  96:	83 e0       	ldi	r24, 0x03	; 3
  98:	88 b9       	out	0x08, r24	; 8
	
	counter = eeprom_read_byte((uint8_t*)20);
  9a:	84 e1       	ldi	r24, 0x14	; 20
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	0e 94 86 00 	call	0x10c	; 0x10c <__eerd_byte_m328p>
  a2:	80 93 00 01 	sts	0x0100, r24
	PORTD = counter;
  a6:	8b b9       	out	0x0b, r24	; 11
	
    while (1) 
    {
		if (!bit_get(PINC,BIT(0))){
  a8:	30 99       	sbic	0x06, 0	; 6
  aa:	19 c0       	rjmp	.+50     	; 0xde <main+0x4e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	8f ef       	ldi	r24, 0xFF	; 255
  ae:	90 e7       	ldi	r25, 0x70	; 112
  b0:	a2 e0       	ldi	r26, 0x02	; 2
  b2:	81 50       	subi	r24, 0x01	; 1
  b4:	90 40       	sbci	r25, 0x00	; 0
  b6:	a0 40       	sbci	r26, 0x00	; 0
  b8:	e1 f7       	brne	.-8      	; 0xb2 <main+0x22>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <main+0x2c>
  bc:	00 00       	nop
			_delay_ms(50);
			while (!bit_get(PINC,BIT(0)));
  be:	30 9b       	sbis	0x06, 0	; 6
  c0:	fe cf       	rjmp	.-4      	; 0xbe <main+0x2e>
			if (counter!=9) PORTD = ++counter;
  c2:	80 91 00 01 	lds	r24, 0x0100
  c6:	89 30       	cpi	r24, 0x09	; 9
  c8:	21 f0       	breq	.+8      	; 0xd2 <main+0x42>
  ca:	8f 5f       	subi	r24, 0xFF	; 255
  cc:	80 93 00 01 	sts	0x0100, r24
  d0:	8b b9       	out	0x0b, r24	; 11
			eeprom_update_byte ((uint8_t*)20,counter);
  d2:	84 e1       	ldi	r24, 0x14	; 20
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	60 91 00 01 	lds	r22, 0x0100
  da:	0e 94 8e 00 	call	0x11c	; 0x11c <__eeupd_byte_m328p>
		}
		
		if (!bit_get(PINC,BIT(1))){
  de:	31 99       	sbic	0x06, 1	; 6
  e0:	e3 cf       	rjmp	.-58     	; 0xa8 <main+0x18>
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	90 e7       	ldi	r25, 0x70	; 112
  e6:	a2 e0       	ldi	r26, 0x02	; 2
  e8:	81 50       	subi	r24, 0x01	; 1
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	a0 40       	sbci	r26, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <main+0x58>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <main+0x62>
  f2:	00 00       	nop
			_delay_ms(50);
			while (!bit_get(PINC,BIT(1)));
  f4:	31 9b       	sbis	0x06, 1	; 6
  f6:	fe cf       	rjmp	.-4      	; 0xf4 <main+0x64>
			eeprom_update_byte ((uint8_t*)20,counter);
  f8:	84 e1       	ldi	r24, 0x14	; 20
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	60 91 00 01 	lds	r22, 0x0100
 100:	0e 94 8e 00 	call	0x11c	; 0x11c <__eeupd_byte_m328p>
			counter = 0; 
 104:	10 92 00 01 	sts	0x0100, r1
			PORTD = 0;
 108:	1b b8       	out	0x0b, r1	; 11
 10a:	ce cf       	rjmp	.-100    	; 0xa8 <main+0x18>

0000010c <__eerd_byte_m328p>:
 10c:	f9 99       	sbic	0x1f, 1	; 31
 10e:	fe cf       	rjmp	.-4      	; 0x10c <__eerd_byte_m328p>
 110:	92 bd       	out	0x22, r25	; 34
 112:	81 bd       	out	0x21, r24	; 33
 114:	f8 9a       	sbi	0x1f, 0	; 31
 116:	99 27       	eor	r25, r25
 118:	80 b5       	in	r24, 0x20	; 32
 11a:	08 95       	ret

0000011c <__eeupd_byte_m328p>:
 11c:	26 2f       	mov	r18, r22

0000011e <__eeupd_r18_m328p>:
 11e:	f9 99       	sbic	0x1f, 1	; 31
 120:	fe cf       	rjmp	.-4      	; 0x11e <__eeupd_r18_m328p>
 122:	92 bd       	out	0x22, r25	; 34
 124:	81 bd       	out	0x21, r24	; 33
 126:	f8 9a       	sbi	0x1f, 0	; 31
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	00 b4       	in	r0, 0x20	; 32
 12c:	02 16       	cp	r0, r18
 12e:	39 f0       	breq	.+14     	; 0x13e <__eeupd_r18_m328p+0x20>
 130:	1f ba       	out	0x1f, r1	; 31
 132:	20 bd       	out	0x20, r18	; 32
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	f8 94       	cli
 138:	fa 9a       	sbi	0x1f, 2	; 31
 13a:	f9 9a       	sbi	0x1f, 1	; 31
 13c:	0f be       	out	0x3f, r0	; 63
 13e:	08 95       	ret

00000140 <_exit>:
 140:	f8 94       	cli

00000142 <__stop_program>:
 142:	ff cf       	rjmp	.-2      	; 0x142 <__stop_program>
